/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SFormUserRightEntry.java
 *
 * Created on 26/12/2009, 12:16:41 PM
 */

package erp.musr.form;

import erp.data.SDataConstants;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.data.SDataRegistry;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.musr.data.SDataAccessCompany;
import erp.musr.data.SDataUser;
import erp.musr.data.SDataUserPrivilegeCompany;
import erp.musr.data.SDataUserPrivilegeUser;
import erp.musr.data.SDataUserRoleCompany;
import erp.musr.data.SDataUserRoleUser;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;
import sa.gui.util.SUtilConsts;

/**
 *
 * @author Alfonso Flores, Sergio Flores
 */
public class SFormUserRightEntry extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.musr.data.SDataUserRoleUser moUserRoleUser;
    private erp.musr.data.SDataUserRoleCompany moUserRoleCompany;
    private erp.musr.data.SDataUserPrivilegeUser moUserPrivilegeUser;
    private erp.musr.data.SDataUserPrivilegeCompany moUserPrivilegeCompany;

    private erp.lib.form.SFormField moFieldPkCompanyId;
    private erp.lib.form.SFormField moFieldFkTypeRightId;
    private erp.lib.form.SFormField moFieldPkRightId;
    private erp.lib.form.SFormField moFieldFkAccessLevelId;

    private boolean mbIsRightForUser;
    private boolean mbIsRightForCompany;

    private int mnParamPkUserId;
    private int mnParamUserRightType;
    private boolean mbParamIsRole;
    private java.util.Vector<int[]> mvParamCurrentRights;

    private erp.musr.data.SDataUser moUser;

    /** Creates new form SFormUserRightEntry */
    public SFormUserRightEntry(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jlPkCompanyId = new javax.swing.JLabel();
        jcbPkCompanyId = new javax.swing.JComboBox<SFormComponentItem>();
        jPanel4 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jlRightTypeId = new javax.swing.JLabel();
        jcbRightTypeId = new javax.swing.JComboBox<SFormComponentItem>();
        jPanel9 = new javax.swing.JPanel();
        jlPkRightId = new javax.swing.JLabel();
        jcbPkRightId = new javax.swing.JComboBox<SFormComponentItem>();
        jPanel10 = new javax.swing.JPanel();
        jlFkAccessLevelId = new javax.swing.JLabel();
        jcbFkAccessLevelId = new javax.swing.JComboBox<SFormComponentItem>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setPreferredSize(new java.awt.Dimension(392, 33));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jPanel1.add(jbCancel);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.GridLayout(6, 1, 0, 1));

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlPkCompanyId.setText("Empresa:");
        jlPkCompanyId.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel6.add(jlPkCompanyId);

        jcbPkCompanyId.setPreferredSize(new java.awt.Dimension(375, 23));
        jPanel6.add(jcbPkCompanyId);

        jPanel3.add(jPanel6);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));
        jPanel3.add(jPanel4);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlRightTypeId.setText("Tipo de rol/privilegio:");
        jlRightTypeId.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel8.add(jlRightTypeId);

        jcbRightTypeId.setPreferredSize(new java.awt.Dimension(375, 23));
        jcbRightTypeId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbRightTypeIdItemStateChanged(evt);
            }
        });
        jPanel8.add(jcbRightTypeId);

        jPanel3.add(jPanel8);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlPkRightId.setText("Rol/privilegio:");
        jlPkRightId.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel9.add(jlPkRightId);

        jcbPkRightId.setPreferredSize(new java.awt.Dimension(375, 23));
        jcbPkRightId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbPkRightIdItemStateChanged(evt);
            }
        });
        jPanel9.add(jcbPkRightId);

        jPanel3.add(jPanel9);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlFkAccessLevelId.setText("Nivel de acceso: *");
        jlFkAccessLevelId.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel10.add(jlFkAccessLevelId);

        jcbFkAccessLevelId.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel10.add(jcbFkAccessLevelId);

        jPanel3.add(jPanel10);

        jPanel2.add(jPanel3, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-600)/2, (screenSize.height-300)/2, 600, 300);
    }// </editor-fold>//GEN-END:initComponents

    private void jcbPkRightIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbPkRightIdItemStateChanged
        if (!mbResetingForm) {
            if (evt.getStateChange() == ItemEvent.SELECTED) {
                itemStateRight();
            }
        }
    }//GEN-LAST:event_jcbPkRightIdItemStateChanged

    private void jcbRightTypeIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbRightTypeIdItemStateChanged
        if (!mbResetingForm) {
            if (evt.getStateChange() == ItemEvent.SELECTED) {
                itemStateRightType();
            }
        }
    }//GEN-LAST:event_jcbRightTypeIdItemStateChanged

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        mvFields = new Vector<SFormField>();

        moFieldPkCompanyId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, false, jcbPkCompanyId, jlPkCompanyId);
        moFieldFkTypeRightId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, false, jcbRightTypeId, jlRightTypeId);
        moFieldPkRightId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, false, jcbPkRightId, jlPkRightId);
        moFieldFkAccessLevelId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, false, jcbFkAccessLevelId, jlFkAccessLevelId);

        mvFields.add(moFieldPkRightId);
        mvFields.add(moFieldFkAccessLevelId);

        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction action = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), action, "esc", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;

            if (!isUserAccessValid()) {
                actionCancel();
            }
            else {
                if (jcbPkCompanyId.isEnabled()) {
                    jcbPkCompanyId.requestFocus();
                }
                else {
                    jcbRightTypeId.requestFocus();
                }
            }
        }
    }

    private void actionOk() {
        erp.lib.form.SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    private void populateComboBoxCompany() {
        boolean isUniversal = moUser.getIsUniversal();

        if (isUniversal) {
            SFormUtilities.populateComboBox(miClient, jcbPkCompanyId, SDataConstants.CFGU_CO);
        }
        else {
            jcbPkCompanyId.removeAllItems();
            jcbPkCompanyId.addItem(new SFormComponentItem(new int[] { 0 }, "(Seleccionar empresa)"));
            for (SDataAccessCompany accessCompany : moUser.getDbmsAccessCompanies()) {
                jcbPkCompanyId.addItem(new SFormComponentItem(
                        new int[] { accessCompany.getPkCompanyId() },
                        accessCompany.getDbmsCompany()));
            }
        }
    }

    private void populateComboBoxRight() {
        if (mbParamIsRole) {
            SFormUtilities.populateComboBox(miClient, jcbPkRightId, SDataConstants.USRS_ROL, moFieldFkTypeRightId.getKeyAsIntArray());
        }
        else {
            SFormUtilities.populateComboBox(miClient, jcbPkRightId, SDataConstants.USRS_PRV, moFieldFkTypeRightId.getKeyAsIntArray());
        }
    }

    private void renderCompanySettings() {
        if (mbIsRightForUser) {
            jcbPkCompanyId.setEnabled(false);
        }
        else {
            jcbPkCompanyId.setEnabled(true);
        }
    }

    private void renderRightSettings() {
        if (jcbRightTypeId.getSelectedIndex() <= 0) {
            jcbPkRightId.setEnabled(false);
        }
        else {
            jcbPkRightId.setEnabled(true);
        }
    }

    private void setupFormLabels() {
        if (mbParamIsRole) {
            jlRightTypeId.setText("Tipo de rol: *");
            jlPkRightId.setText("Rol de usuario: *");
            setTitle("Rol de usuario");
        }
        else  {
            jlRightTypeId.setText("Tipo de privilegio: *");
            jlPkRightId.setText("Privilegio de usuario: *");
            setTitle("Privilegio de usuario");
        }
    }

    private void renderAccessLevelSettings() {
        if (jcbPkRightId.getSelectedIndex() > 0 && ((Number) ((SFormComponentItem) jcbPkRightId.getSelectedItem()).getComplement()).intValue() > 0) {
            jcbFkAccessLevelId.setEnabled(true);
        }
        else {
            jcbFkAccessLevelId.setEnabled(false);
            moFieldFkAccessLevelId.setKey(new int[] { SUtilConsts.LEV_MANAGER });
        }
    }

    private void itemStateRightType() {
        populateComboBoxRight();
        renderRightSettings();
    }

    private void itemStateRight() {
        renderAccessLevelSettings();
    }

    private boolean isUserAccessValid() {
        boolean isValid = true;

        if (!moUser.getIsUniversal()) {
            if (mbIsRightForCompany && moUser.getDbmsAccessCompanies().size() == 0) {
                isValid = false;
                miClient.showMsgBoxWarning("El usuario no tiene acceso a ninguna empresa.");
            }
        }

        return isValid;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbOk;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkAccessLevelId;
    private javax.swing.JComboBox<SFormComponentItem> jcbPkCompanyId;
    private javax.swing.JComboBox<SFormComponentItem> jcbPkRightId;
    private javax.swing.JComboBox<SFormComponentItem> jcbRightTypeId;
    private javax.swing.JLabel jlFkAccessLevelId;
    private javax.swing.JLabel jlPkCompanyId;
    private javax.swing.JLabel jlPkRightId;
    private javax.swing.JLabel jlRightTypeId;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mbResetingForm = true;

        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moUserRoleUser = null;
        moUserRoleCompany = null;
        moUserPrivilegeUser = null;
        moUserPrivilegeCompany = null;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        renderCompanySettings();
        renderRightSettings();
        renderAccessLevelSettings();

        setupFormLabels();

        mbResetingForm = false;
    }

    @Override
    public void formRefreshCatalogues() {
        mbResetingForm = true;

        if (mbParamIsRole) {
            SFormUtilities.populateComboBox(miClient, jcbRightTypeId, mbIsRightForUser ? SDataConstants.USRX_TP_ROL_ALL : SDataConstants.USRS_TP_ROL);
        }
        else {
            SFormUtilities.populateComboBox(miClient, jcbRightTypeId, SDataConstants.USRS_TP_PRV);
        }
        populateComboBoxRight();

        SFormUtilities.populateComboBox(miClient, jcbFkAccessLevelId, SDataConstants.USRS_TP_LEV);

        mbResetingForm = false;
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        erp.lib.form.SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        if (!validation.getIsError()) {
            if (mbIsRightForCompany && jcbPkCompanyId.getSelectedIndex() <= 0) {
                validation.setComponent(jcbPkCompanyId);
                validation.setMessage("Debe seleccionar un valor para el campo '" + jlPkCompanyId.getText() + "'.");
            }
            else if (jcbRightTypeId.getSelectedIndex() <= 0) {
                validation.setComponent(jcbRightTypeId);
                validation.setMessage("Debe seleccionar un valor para el campo '" + jlRightTypeId.getText() + "'");
            }
            else if (jcbPkRightId.getSelectedIndex() <= 0) {
                validation.setComponent(jcbPkRightId);
                validation.setMessage("Debe seleccionar un valor para el campo " + (mbParamIsRole ? "'Seleccionar rol: *' " : "'Seleccionar privilegio: *'"));
            }
            else if (jcbFkAccessLevelId.isEnabled() && jcbFkAccessLevelId.getSelectedIndex() < 1) {
                validation.setComponent(jcbFkAccessLevelId);
                validation.setMessage("Se debe ingresar un valor para el campo '" + jlFkAccessLevelId.getText() + "'.");
            }
            else if (mbIsRightForUser) {
                for (int[] right : mvParamCurrentRights) {
                    if (right[0] == moFieldPkRightId.getKeyAsIntArray()[0]) {
                        validation.setComponent(jcbPkRightId);
                        validation.setMessage("El derecho seleccionado ya está asignado a nivel de usuario.");
                    }
                }
            }
            else if (mbIsRightForCompany) {
                for (int[] right : mvParamCurrentRights) {
                    if (right[0] == moFieldPkCompanyId.getKeyAsIntArray()[0] && right[1] == moFieldPkRightId.getKeyAsIntArray()[0]) {
                        validation.setComponent(jcbPkRightId);
                        validation.setMessage("El derecho seleccionado ya está asignado a nivel de empresa.");
                    }
                }
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        if (mnParamUserRightType == SDataConstants.USRU_ROL_USR) {
            moUserRoleUser = (SDataUserRoleUser) registry;
            moFieldPkCompanyId.setFieldValue(new int[0]);
            moFieldFkTypeRightId.setFieldValue(new int[] { moUserRoleUser.getDbmsFkTypeRoleId() });
            moFieldPkRightId.setFieldValue(new int[] { moUserRoleUser.getPkRoleId() });
            if (moUserRoleUser.getFkLevelTypeId() == SLibConstants.UNDEFINED) {
                jcbFkAccessLevelId.setSelectedIndex(1); // (SIN ACCESO), otherwise unselectable due to its value of 0 that is equals as "select option"
            }
            else {
                moFieldFkAccessLevelId.setFieldValue(new int[] { moUserRoleUser.getFkLevelTypeId() });
            }
        }
        else if (mnParamUserRightType == SDataConstants.USRU_PRV_USR) {
            moUserPrivilegeUser = (SDataUserPrivilegeUser) registry;
            moFieldPkCompanyId.setFieldValue(new int[0]);
            moFieldFkTypeRightId.setFieldValue(new int[] { moUserPrivilegeUser.getDbmsFkTypePrivilegeId() });
            moFieldPkRightId.setFieldValue(new int[] { moUserPrivilegeUser.getPkPrivilegeId() });
            if (moUserPrivilegeUser.getFkLevelTypeId() == SLibConstants.UNDEFINED) {
                jcbFkAccessLevelId.setSelectedIndex(1); // (SIN ACCESO), otherwise unselectable due to its value of 0 that is equals as "select option"
            }
            else {
                moFieldFkAccessLevelId.setFieldValue(new int[] { moUserPrivilegeUser.getFkLevelTypeId() });
            }
        }
        else if (mnParamUserRightType == SDataConstants.USRU_ROL_CO) {
            moUserRoleCompany = (SDataUserRoleCompany) registry;
            moFieldPkCompanyId.setFieldValue(new int[] { moUserRoleCompany.getPkCompanyId() });
            moFieldFkTypeRightId.setFieldValue(new int[] { moUserRoleCompany.getDbmsFkTypeRoleId()});
            moFieldPkRightId.setFieldValue(new int[] { moUserRoleCompany.getPkRoleId() });
            if (moUserRoleCompany.getFkLevelTypeId() == SLibConstants.UNDEFINED) {
                jcbFkAccessLevelId.setSelectedIndex(1); // (SIN ACCESO), otherwise unselectable due to its value of 0 that is equals as "select option"
            }
            else {
                moFieldFkAccessLevelId.setFieldValue(new int[] { moUserRoleCompany.getFkLevelTypeId() });
            }
        }
        else if (mnParamUserRightType == SDataConstants.USRU_PRV_CO) {
            moUserPrivilegeCompany = (SDataUserPrivilegeCompany) registry;
            moFieldPkCompanyId.setFieldValue(new int[] { moUserPrivilegeCompany.getPkCompanyId() });
            moFieldFkTypeRightId.setFieldValue(new int[] { moUserPrivilegeCompany.getDbmsFkTypePrivilegeId() });
            moFieldPkRightId.setFieldValue(new int[] { moUserPrivilegeCompany.getPkPrivilegeId() });
            if (moUserPrivilegeCompany.getFkLevelTypeId() == SLibConstants.UNDEFINED) {
                jcbFkAccessLevelId.setSelectedIndex(1); // (SIN ACCESO), otherwise unselectable due to its value of 0 that is equals as "select option"
            }
            else {
                moFieldFkAccessLevelId.setFieldValue(new int[] { moUserPrivilegeCompany.getFkLevelTypeId() });
            }
        }

        renderCompanySettings();
        renderRightSettings();
        renderAccessLevelSettings();
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        SDataRegistry registry = null;

        switch (mnParamUserRightType) {
            case SDataConstants.USRU_ROL_USR:
                if (moUserRoleUser == null)  moUserRoleUser = new SDataUserRoleUser();
                moUserRoleUser.setPkRoleId(moFieldPkRightId.getKeyAsIntArray()[0]);
                moUserRoleUser.setFkLevelTypeId(!jcbFkAccessLevelId.isEnabled() ? SUtilConsts.LEV_MANAGER : moFieldFkAccessLevelId.getKeyAsIntArray()[0]);
                moUserRoleUser.setDbmsFkTypeRoleId(moFieldFkTypeRightId.getKeyAsIntArray()[0]);
                moUserRoleUser.setDbmsTypeRole(moFieldFkTypeRightId.getString());
                moUserRoleUser.setDbmsRole(jcbPkRightId.getSelectedItem().toString());
                moUserRoleUser.setDbmsLevelType(!jcbFkAccessLevelId.isEnabled() ? "ADMINISTRADOR" : jcbFkAccessLevelId.getSelectedItem().toString());
                registry = moUserRoleUser;
                break;
            case SDataConstants.USRU_PRV_USR:
                if (moUserPrivilegeUser == null) {
                    moUserPrivilegeUser = new SDataUserPrivilegeUser();
                }
                moUserPrivilegeUser.setPkPrivilegeId(moFieldPkRightId.getKeyAsIntArray()[0]);
                moUserPrivilegeUser.setFkLevelTypeId(!jcbFkAccessLevelId.isEnabled() ? SUtilConsts.LEV_MANAGER : moFieldFkAccessLevelId.getKeyAsIntArray()[0]);
                moUserPrivilegeUser.setDbmsFkTypePrivilegeId(moFieldFkTypeRightId.getKeyAsIntArray()[0]);
                moUserPrivilegeUser.setDbmsPrivilege(jcbPkRightId.getSelectedItem().toString());
                moUserPrivilegeUser.setDbmsLevelType(!jcbFkAccessLevelId.isEnabled() ? "ADMINISTRADOR" : jcbFkAccessLevelId.getSelectedItem().toString());
                registry = moUserPrivilegeUser;
                break;
            case SDataConstants.USRU_ROL_CO:
                if (moUserRoleCompany == null) {
                    moUserRoleCompany = new SDataUserRoleCompany();
                }
                moUserRoleCompany.setPkCompanyId(moFieldPkCompanyId.getKeyAsIntArray()[0]);
                moUserRoleCompany.setPkRoleId(moFieldPkRightId.getKeyAsIntArray()[0]);
                moUserRoleCompany.setFkLevelTypeId(!jcbFkAccessLevelId.isEnabled() ? SUtilConsts.LEV_MANAGER : moFieldFkAccessLevelId.getKeyAsIntArray()[0]);
                moUserRoleCompany.setDbmsCompany(jcbPkCompanyId.getSelectedItem().toString());
                moUserRoleCompany.setDbmsFkTypeRoleId(moFieldFkTypeRightId.getKeyAsIntArray()[0]);
                moUserRoleCompany.setDbmsTypeRole(moFieldFkTypeRightId.getString());
                moUserRoleCompany.setDbmsRole(jcbPkRightId.getSelectedItem().toString());
                moUserRoleCompany.setDbmsLevelType(!jcbFkAccessLevelId.isEnabled() ? "ADMINISTRADOR" : jcbFkAccessLevelId.getSelectedItem().toString());
                registry = moUserRoleCompany;
                break;
            case SDataConstants.USRU_PRV_CO:
                if (moUserPrivilegeCompany == null) {
                    moUserPrivilegeCompany = new SDataUserPrivilegeCompany();
                }
                moUserPrivilegeCompany.setPkCompanyId(moFieldPkCompanyId.getKeyAsIntArray()[0]);
                moUserPrivilegeCompany.setPkPrivilegeId(moFieldPkRightId.getKeyAsIntArray()[0]);
                moUserPrivilegeCompany.setFkLevelTypeId(!jcbFkAccessLevelId.isEnabled() ? SUtilConsts.LEV_MANAGER : moFieldFkAccessLevelId.getKeyAsIntArray()[0]);
                moUserPrivilegeCompany.setDbmsCompany(jcbPkCompanyId.getSelectedItem().toString());
                moUserPrivilegeCompany.setDbmsFkTypePrivilegeId(moFieldFkTypeRightId.getKeyAsIntArray()[0]);
                moUserPrivilegeCompany.setDbmsPrivilege(jcbPkRightId.getSelectedItem().toString());
                moUserPrivilegeCompany.setDbmsLevelType(!jcbFkAccessLevelId.isEnabled() ? "ADMINISTRADOR" : jcbFkAccessLevelId.getSelectedItem().toString());
                registry = moUserPrivilegeCompany;
                break;
            default:
                break;
        }

        return registry;
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
        }
    }

    public void setParamPkUserId(int n) {
        mbResetingForm = true;

        mnParamPkUserId = n;
        moUser = (SDataUser) SDataUtilities.readRegistry(miClient, SDataConstants.USRU_USR, new int[] { mnParamPkUserId },SLibConstants.EXEC_MODE_VERBOSE);
        populateComboBoxCompany();

        renderCompanySettings();

        mbResetingForm = false;
    }

    public void setParamIsRole(boolean b) {
        mbParamIsRole = b;
    }

    public void setParamUserRightType(int n) {
        mnParamUserRightType = n;

        mbIsRightForUser = false;
        mbIsRightForCompany = false;

        switch (mnParamUserRightType) {
            case SDataConstants.USRU_PRV_USR:
            case SDataConstants.USRU_ROL_USR:
                mbIsRightForUser = true;
                break;
            case SDataConstants.USRU_PRV_CO:
            case SDataConstants.USRU_ROL_CO:
                mbIsRightForCompany = true;
                break;
            default:
        }
    }

    public void setParamCurrentRights(java.util.Vector<int[]> rights) {
        mvParamCurrentRights = rights;
    }
}
