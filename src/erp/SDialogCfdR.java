/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp;

import erp.mod.SModConsts;
import erp.mod.hrs.utils.SCsvFileManager;
import erp.mod.hrs.utils.SInputData;
import erp.mod.hrs.utils.SReceiptsR;
import erp.mod.hrs.utils.STheReceipts;
import java.awt.event.ActionEvent;
import java.io.File;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import sa.lib.SLibConsts;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFormDialog;

/**
 *
 * @author Edwin Carmona, Sergio Flores
 */
public class SDialogCfdR extends SBeanFormDialog implements java.awt.event.ActionListener {
    
    protected String msCsvPath;
    protected String msCsvGenPath;
    
    private int mnTotal;
    private int mnCanceled;
    private int mnSucess;
    private int mnErrors;
    private int mnNa;
   
    /**
     * Creates new form SDialogVacationsFileCsv
     * @param client
     * @param title
     */
    public SDialogCfdR(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT,  SModConsts.HRSR_VAC_CSV, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jlFileGen = new javax.swing.JLabel();
        jtfFileGenPath = new javax.swing.JTextField();
        jbSelectFileGen = new javax.swing.JButton();
        jPanel20 = new javax.swing.JPanel();
        jlGenerate = new javax.swing.JLabel();
        bIntYear = new sa.lib.gui.bean.SBeanFieldInteger();
        bIntPer = new sa.lib.gui.bean.SBeanFieldInteger();
        jBGenerateFile = new javax.swing.JButton();
        jlGenerateFileHelp = new javax.swing.JLabel();
        jPanel22 = new javax.swing.JPanel();
        jPanel21 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jlDateCut = new javax.swing.JLabel();
        jtfFilePath = new javax.swing.JTextField();
        jbSelectFile = new javax.swing.JButton();
        jlLoadFileHelp = new javax.swing.JLabel();
        jPanel17 = new javax.swing.JPanel();
        jlAll = new javax.swing.JLabel();
        sBTotal = new sa.lib.gui.bean.SBeanFieldInteger();
        jlErrors = new javax.swing.JLabel();
        sBErrors = new sa.lib.gui.bean.SBeanFieldInteger();
        jPanel16 = new javax.swing.JPanel();
        jlCanceled = new javax.swing.JLabel();
        sBCanceled = new sa.lib.gui.bean.SBeanFieldInteger();
        jlNa = new javax.swing.JLabel();
        sBNa = new sa.lib.gui.bean.SBeanFieldInteger();
        jPanel15 = new javax.swing.JPanel();
        jlIssues = new javax.swing.JLabel();
        sBSuccess = new sa.lib.gui.bean.SBeanFieldInteger();
        cancelRecipes = new javax.swing.JButton();
        jPanel18 = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Parámetros del reporte:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(10, 1, 0, 5));

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFileGen.setText("Generar archivo:*");
        jlFileGen.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jlFileGen);

        jtfFileGenPath.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel14.add(jtfFileGenPath);

        jbSelectFileGen.setText("jButton1");
        jbSelectFileGen.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel14.add(jbSelectFileGen);

        jPanel2.add(jPanel14);

        jPanel20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlGenerate.setText("Año/mes:*");
        jlGenerate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel20.add(jlGenerate);

        bIntYear.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel20.add(bIntYear);

        bIntPer.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel20.add(bIntPer);

        jBGenerateFile.setText("Generar Archivo");
        jBGenerateFile.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel20.add(jBGenerateFile);

        jlGenerateFileHelp.setForeground(new java.awt.Color(109, 109, 109));
        jlGenerateFileHelp.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlGenerateFileHelp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_view_help.png"))); // NOI18N
        jlGenerateFileHelp.setToolTipText("Elija el directorio donde se guardará el archivo, después seleccione año y mes de las nóminas para generarlo.");
        jlGenerateFileHelp.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel20.add(jlGenerateFileHelp);

        jPanel2.add(jPanel20);

        jPanel22.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jPanel2.add(jPanel22);

        jPanel21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jPanel2.add(jPanel21);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateCut.setText("Cargar archivo:*");
        jlDateCut.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlDateCut);

        jtfFilePath.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel11.add(jtfFilePath);

        jbSelectFile.setText("jButton1");
        jbSelectFile.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel11.add(jbSelectFile);

        jlLoadFileHelp.setForeground(new java.awt.Color(109, 109, 109));
        jlLoadFileHelp.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlLoadFileHelp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_view_help.png"))); // NOI18N
        jlLoadFileHelp.setToolTipText("Elija el archivo CSV a procesar, este deberá estar conformado por 3 columnas (UUID, SUBSIDIO, ISR).");
        jlLoadFileHelp.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel11.add(jlLoadFileHelp);

        jPanel2.add(jPanel11);

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAll.setText("Total recibos:");
        jlAll.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel17.add(jlAll);

        sBTotal.setEditable(false);
        jPanel17.add(sBTotal);

        jlErrors.setText("Errores:");
        jlErrors.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel17.add(jlErrors);

        sBErrors.setEditable(false);
        jPanel17.add(sBErrors);

        jPanel2.add(jPanel17);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCanceled.setText("Cancelados:");
        jlCanceled.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel16.add(jlCanceled);

        sBCanceled.setEditable(false);
        jPanel16.add(sBCanceled);

        jlNa.setText("Omitidos/No aplica:");
        jlNa.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel16.add(jlNa);

        sBNa.setEditable(false);
        jPanel16.add(sBNa);

        jPanel2.add(jPanel16);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlIssues.setText("Re-expedidos:");
        jlIssues.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel15.add(jlIssues);

        sBSuccess.setEditable(false);
        jPanel15.add(sBSuccess);

        cancelRecipes.setText("Cancelar Recibos");
        jPanel15.add(cancelRecipes);

        jPanel2.add(jPanel15);

        jPanel18.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jPanel2.add(jPanel18);

        jPanel19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jPanel2.add(jPanel19);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
        jPanel1.getAccessibleContext().setAccessibleName("Parámetros de la generación");
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private sa.lib.gui.bean.SBeanFieldInteger bIntPer;
    private sa.lib.gui.bean.SBeanFieldInteger bIntYear;
    private javax.swing.JButton cancelRecipes;
    private javax.swing.JButton jBGenerateFile;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JButton jbSelectFile;
    private javax.swing.JButton jbSelectFileGen;
    private javax.swing.JLabel jlAll;
    private javax.swing.JLabel jlCanceled;
    private javax.swing.JLabel jlDateCut;
    private javax.swing.JLabel jlErrors;
    private javax.swing.JLabel jlFileGen;
    private javax.swing.JLabel jlGenerate;
    private javax.swing.JLabel jlGenerateFileHelp;
    private javax.swing.JLabel jlIssues;
    private javax.swing.JLabel jlLoadFileHelp;
    private javax.swing.JLabel jlNa;
    private javax.swing.JTextField jtfFileGenPath;
    private javax.swing.JTextField jtfFilePath;
    private sa.lib.gui.bean.SBeanFieldInteger sBCanceled;
    private sa.lib.gui.bean.SBeanFieldInteger sBErrors;
    private sa.lib.gui.bean.SBeanFieldInteger sBNa;
    private sa.lib.gui.bean.SBeanFieldInteger sBSuccess;
    private sa.lib.gui.bean.SBeanFieldInteger sBTotal;
    // End of variables declaration//GEN-END:variables

    /**
     * process the file and update the form
     */
    private void expediteReceipts(final int nAction) {
        ArrayList<SInputData> rows = SCsvFileManager.readFile(msCsvPath);
        
        this.mnTotal = rows.size();
        this.updateTotal();
        
        boolean bContinue = true;
        SReceiptsR p = new SReceiptsR(miClient);
        for (SInputData row : rows) {
            int result = p.processReceipt(row, nAction);
            
//            if (result == SReceiptsR.ANNULED) {
//                this.mnCanceled++;
//                System.out.println("ERROR EN " + row.getUuid());
//                break;
//            }
            
            switch (result) {
                case SReceiptsR.SUCCESS:
                        this.mnSucess++;
                        break;
                        
                case SReceiptsR.ANNULED:
                        this.mnCanceled++;
                        break;
                        
                case SReceiptsR.ERROR:
                    
                case SReceiptsR.NOT_FOUND:
                        this.mnErrors++;
                        bContinue = false;
                        break;
                        
                case SReceiptsR.NOT_APPLY:
                    
                case SReceiptsR.SKIP:
                        this.mnNa++;
                        break;
            }
            
            this.updateNumbers();
            if (! bContinue) {
                break;
            }
        }
    }
    
    /**
     * set to form the results of process
     */
    private void updateNumbers() {
        sBSuccess.setValue(mnSucess);
        sBCanceled.setValue(mnCanceled);
        sBErrors.setValue(mnErrors);
        sBNa.setValue(mnNa);
    }
    
    /**
     * set to form the number of cfdis in the file
     */
    private void updateTotal() {
        sBTotal.setValue(mnTotal);
    }
    
    /**
     * This method set the values of form in zero when a new xml es loaded
     * set the path of xml to global variable
     * set the name of file in the textfield
     */
    private void actionLoadFile() {
        String path = null;
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Delimitado por comas .csv", "csv");
        
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(filter);
        fileChooser.showOpenDialog(this);
        File file = fileChooser.getSelectedFile();
        path = fileChooser.getSelectedFile().getAbsolutePath();

        if (file != null) {
            msCsvPath = path;
            jtfFilePath.setText(msCsvPath);
        }
        else {
            jtfFilePath.setText("");
        }
        
        mnTotal = 0;
        mnCanceled = 0;
        mnSucess = 0;
        mnErrors = 0;
        mnNa = 0;
        
        this.updateTotal();
        this.updateNumbers();
    }
    
    private void actionSaveFile() {
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        //
        // disable the "All files" option.
        //
        chooser.setAcceptAllFileFilterUsed(false);
        
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            msCsvGenPath = chooser.getSelectedFile() + "";
            jtfFileGenPath.setText(msCsvGenPath);
        }
        else {
            System.out.println("No Selection ");
            jtfFileGenPath.setText("");
            msCsvGenPath = "";
        }
    }
    
    private void actionGenerateFile() {
        STheReceipts oj = new STheReceipts(this.miClient);
        if (msCsvGenPath == null || msCsvGenPath.equals("")) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un directorio para guardar el archivo");
            return;
        }
        
        boolean result = oj.start(msCsvGenPath, bIntYear.getValue(), bIntPer.getValue());
        
        if (result) {
            miClient.showMsgBoxInformation("El archivo fue generado exitosamente.");
        }
    }
    
    private void actionCancelRecipes() {
        if (msCsvPath == null || msCsvPath.equals("")) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un archivo para guardar el archivo");
            return;
        }
        
        expediteReceipts(SReceiptsR.CANCEL_RECEIPTS);
        
        miClient.showMsgBoxInformation("El archivo fue generado exitosamente.");
    }
    
    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 480, 300);
        jbSelectFile.addActionListener(this);
        jbSelectFileGen.addActionListener(this);
        jBGenerateFile.addActionListener(this);
        cancelRecipes.addActionListener(this);
        
        jbSave.setText("Guardar");
        moFields.setFormButton(jbSave);
        
        bIntYear.setMinInteger(2019);
        bIntYear.setMaxInteger(2019);
        bIntYear.setIntegerSettings(SGuiUtils.getLabelName(jlGenerate.getText()), SGuiConsts.GUI_TYPE_INT_CAL_YEAR , true);
        
        bIntPer.setMinInteger(1);
        bIntPer.setMaxInteger(12);
        bIntPer.setIntegerSettings(SGuiUtils.getLabelName(jlGenerate.getText()), SGuiConsts.GUI_TYPE_INT_CAL_MONTH, true);
        
        reloadCatalogues();
    }

    @Override
    public void addAllListeners() {
    }

    @Override
    public void removeAllListeners() {
    }
    
    @Override
    public void reloadCatalogues() {
        
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            if (msCsvPath == null || msCsvPath.equals("")) {
                validation.setMessage("Debe seleccionar un archivo CSV para continuar");
            }
        }
        
        return validation;
    }
    
    @Override
    public void actionSave() {
        if (jbSave.isEnabled()) {
            if (SGuiUtils.computeValidation(miClient, validateForm())) {
                expediteReceipts(SReceiptsR.EMMIT_RECEIPTS);
            }
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbSelectFile) {
                actionLoadFile();
            }
            else if (button == jbSelectFileGen) {
                actionSaveFile();
            }
            else if (button == jBGenerateFile) {
                actionGenerateFile();
            }
            else if (button == cancelRecipes) {
                actionCancelRecipes();
            }
        }
    }
}
