/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * STabFilterFunctionalArea.java
 */

package erp.table;

import erp.lib.SLibConstants;
import erp.lib.table.STableSetting;
import erp.mtrn.form.SDialogFilterFunctionalArea;
import erp.mtrn.data.STrnFunctionalAreaUtils;

/**
 *
 * @author Juan Barajas, Edwin Carmona, Sergio Flores
 */
public class STabFilterFunctionalArea extends javax.swing.JPanel {
    
    private static final int ACTION_SETTING_ADD = 1;
    private static final int ACTION_SETTING_UPDATE = 2;

    private erp.client.SClientInterface miClient;
    private erp.lib.table.STableTab moTableTab;
    private erp.mtrn.form.SDialogFilterFunctionalArea moDialogFilterFunctionalArea;

    private int[] manDataFilterKey;
    private int mnCurrentFunctionalAreaId;

    /** Creates new form STabFilterFunctionalArea
     * @param client GUI client.
     * @param tableTab Table tab.
     * @param userKey User key.
     */
    public STabFilterFunctionalArea(erp.client.SClientInterface client, erp.lib.table.STableTab tableTab, int[] userKey) {
        miClient = client;
        moTableTab = tableTab;
        manDataFilterKey = userKey;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jtfFunctionalArea = new javax.swing.JTextField();
        jbFunctionalArea = new javax.swing.JButton();

        setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 3, 0));

        jtfFunctionalArea.setEditable(false);
        jtfFunctionalArea.setText("CODE");
        jtfFunctionalArea.setToolTipText("Área funcional");
        jtfFunctionalArea.setPreferredSize(new java.awt.Dimension(65, 23));
        add(jtfFunctionalArea);
        jtfFunctionalArea.getAccessibleContext().setAccessibleDescription("Área funcional");

        jbFunctionalArea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_filter_doc.gif"))); // NOI18N
        jbFunctionalArea.setToolTipText("Seleccionar área funcional");
        jbFunctionalArea.setPreferredSize(new java.awt.Dimension(23, 23));
        jbFunctionalArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbFunctionalAreaActionPerformed(evt);
            }
        });
        add(jbFunctionalArea);
        jbFunctionalArea.getAccessibleContext().setAccessibleDescription("Área funcional");
    }// </editor-fold>//GEN-END:initComponents

    private void jbFunctionalAreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbFunctionalAreaActionPerformed
        actionFunctionalArea();
    }//GEN-LAST:event_jbFunctionalAreaActionPerformed

    private void initComponentsExtra() {
        mnCurrentFunctionalAreaId = SLibConstants.UNDEFINED;
        moDialogFilterFunctionalArea = new SDialogFilterFunctionalArea(miClient, manDataFilterKey);
        
        renderFunctionalArea(ACTION_SETTING_ADD);
    }

    private void actionFunctionalArea() {
        moDialogFilterFunctionalArea.formRefreshCatalogues();
        moDialogFilterFunctionalArea.formReset();
        moDialogFilterFunctionalArea.setFunctionalAreaId(mnCurrentFunctionalAreaId);
        moDialogFilterFunctionalArea.setFormVisible(true);

        if (moDialogFilterFunctionalArea.getFormResult() == erp.lib.SLibConstants.FORM_RESULT_OK) {
            renderFunctionalArea(ACTION_SETTING_UPDATE);
        }
    }

    private void renderFunctionalArea(int actionSetting) {
        mnCurrentFunctionalAreaId = moDialogFilterFunctionalArea.getFunctionalAreaId();
        
        String texts[] = STrnFunctionalAreaUtils.getTextFilterOfFunctionalAreas(miClient, mnCurrentFunctionalAreaId);
        
        STableSetting setting = new STableSetting(SFilterConstants.SETTING_FILTER_FUNC_AREA, texts[0]);
        
        if (actionSetting == ACTION_SETTING_ADD) {
            moTableTab.addSetting(setting);
        }
        else {
            moTableTab.updateSetting(setting);
        }
        
        jtfFunctionalArea.setText(texts[1]);
        jtfFunctionalArea.setCaretPosition(0);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbFunctionalArea;
    private javax.swing.JTextField jtfFunctionalArea;
    // End of variables declaration//GEN-END:variables

    /**
     * Set data filter.
     * @param filter User key required.
     */
    public void setDataFilter(final int[] filter) {
        manDataFilterKey = filter;
        moDialogFilterFunctionalArea.setDataFilterKey(manDataFilterKey);
    }
}
