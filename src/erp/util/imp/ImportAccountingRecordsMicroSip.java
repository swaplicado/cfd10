/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ImportAccountingRecordsMicroSip.java
 *
 * Created on 12/11/2015
 */

package erp.util.imp;

import erp.data.SDataConstantsSys;
import erp.lib.SLibConstants;
import erp.lib.SLibTimeUtilities;
import erp.lib.SLibUtilities;
import erp.lib.data.SDataDatabase;
import java.awt.Cursor;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimeZone;
import javax.swing.JOptionPane;

/**
 *
 * @author Juan Barajas
 */
public class ImportAccountingRecordsMicroSip extends javax.swing.JFrame {

    private erp.lib.data.SDataDatabase moDbMySql;
    private erp.lib.data.SDataDatabase moDbMySqlMap;
    private Connection moDbFireBird;
    private final String msDbFireBird = "C:/Users/JBarajas/Documents/Software Aplicado/Projects/Cartro/DB firebird Micrisip/001 - CARTRO.fdb";
    private final String msUserDbFireBird = "sysdba";
    private final String msPasswordDbFireBird = "masterkey";

    /** Creates new form ImportAccountingRecordsMicroSip */
    public ImportAccountingRecordsMicroSip() {
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jlDateImport = new javax.swing.JLabel();
        jftDateImport = new javax.swing.JFormattedTextField();
        jlDateImportExample = new javax.swing.JLabel();
        jbImport = new javax.swing.JButton();
        jpbProgress = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Importar pólizas contables");

        jlDateImport.setText("Fecha de corte:");
        jlDateImport.setPreferredSize(new java.awt.Dimension(100, 20));

        jftDateImport.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd/MM/yyyy"))));
        jftDateImport.setText("31/07/2010");
        jftDateImport.setPreferredSize(new java.awt.Dimension(75, 20));

        jlDateImportExample.setText("(dd/mm/yyyy)");
        jlDateImportExample.setPreferredSize(new java.awt.Dimension(100, 20));

        jbImport.setText("Importar");
        jbImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbImportActionPerformed(evt);
            }
        });

        jpbProgress.setStringPainted(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jpbProgress, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jbImport))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jlDateImport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jftDateImport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jlDateImportExample, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlDateImport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jftDateImport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlDateImportExample, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 235, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jbImport)
                    .addComponent(jpbProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbImportActionPerformed
        importAccountingRecords();
    }//GEN-LAST:event_jbImportActionPerformed

    private void initComponentsExtra() {
        TimeZone.setDefault(SLibTimeUtilities.SysTimeZone);

        moDbMySql = new SDataDatabase(SLibConstants.DBMS_MY_SQL);
        moDbMySqlMap = new SDataDatabase(SLibConstants.DBMS_MY_SQL);
        moDbFireBird = null;

        //   2015-11-18
        //moDbMySql.connect("localhost", "3306", "erp_cartro", "root", "msroot");
        moDbMySql.connect("10.83.32.129", "3306", "erp_cartro", "root", "msroot");
        moDbMySqlMap.connect("localhost", "3306", "erp_cartro_map", "root", "msroot");

        try {
           Class.forName("org.firebirdsql.jdbc.FBDriver");
           moDbFireBird = DriverManager.getConnection("jdbc:firebirdsql://localhost:3050/" + msDbFireBird, msUserDbFireBird, msPasswordDbFireBird);
           moDbFireBird.setAutoCommit(false);
        }
        catch(Exception e) {
           System.out.println(e);
        }
        
        jftDateImport.setText("31/12/2013");
    }

    private int getAccountPk(java.sql.Statement stMySql, String accountId) throws java.lang.Exception {
        int pk = 0;
        String sql = "";
        ResultSet rsMySql = null;
        
        sql = "SELECT pk_acc FROM fin_acc WHERE id_acc='" + accountId + "'; ";
        rsMySql = stMySql.executeQuery(sql);
        if (!rsMySql.next()) {
            throw new Exception("No se encontró la cuenta contable en el SIIE 3.2: [" + accountId + "].");
        }
        else {
            pk = rsMySql.getInt("pk_acc");
        }
        
        return pk;
    }
    
    private int getCenterCostPk(java.sql.Statement stMySql, String centerCostId) throws java.lang.Exception {
        int pk = 0;
        String sql = "";
        ResultSet rsMySql = null;
        
        sql = "SELECT pk_cc FROM fin_cc WHERE id_cc='" + centerCostId + "'; ";
        rsMySql = stMySql.executeQuery(sql);
        if (!rsMySql.next()) {
            throw new Exception("No se encontró el centro costos en el SIIE 3.2: [" + centerCostId + "].");
        }
        else {
            pk = rsMySql.getInt("pk_cc");
        }
        
        return pk;
    }
    
    private int getNumeroPolizaNext(java.sql.Statement stSqlFireBirdAux, SimpleDateFormat sdfMicroSip, Date fecha, int tipoPoliza) throws java.lang.Exception {
        int numero = 0;
        int[] anPeriod = null;
        String sql = "";
        ResultSet rsSqlFireBirdAux = null;
        
        anPeriod = SLibTimeUtilities.digestDate(fecha);
        
        sql = "SELECT MAX(poliza) AS numero FROM DOCTOS_CO WHERE fecha<='" + sdfMicroSip.format(SLibTimeUtilities.getEndOfMonth(fecha)) + "' AND EXTRACT(YEAR FROM fecha) = " + anPeriod[0] + " AND EXTRACT(MONTH FROM fecha) = " + anPeriod[1] + " and poliza <> '@FIN' AND tipo_poliza_id = " + tipoPoliza + "; ";
        rsSqlFireBirdAux = stSqlFireBirdAux.executeQuery(sql);
        if (!rsSqlFireBirdAux.next()) {
            throw new Exception("No se encontró ninguna póliza para la fecha '" + fecha + "'.");
        }
        else {
            numero = Integer.parseInt(rsSqlFireBirdAux.getString("numero")) + 1;
        }
        
        return numero;
    }
    
    
    private int[] lookUpDps(java.sql.Statement stSqlServer, java.sql.Statement stMySql, int bp_cat, int bp, int doc) throws java.lang.Exception {
        int[] key = null;
        String sql = "";
        ResultSet rsSqlServer = null;
        ResultSet rsMySql = null;

        sql = "SELECT id_bp, id_year, id_doc FROM dbo.map_dps " +
                "WHERE bp_cat=" + bp_cat + " AND bp=" + bp + " AND doc=" + doc + "; ";
        rsSqlServer = stSqlServer.executeQuery(sql);
        if (rsSqlServer.next()) {
            key = new int[] { rsSqlServer.getInt("id_year"), rsSqlServer.getInt("id_doc") };

            sql = "SELECT fid_bp_r FROM trn_dps WHERE id_year=" + key[0] + " AND id_doc=" + key[1] + "; ";
            rsMySql = stMySql.executeQuery(sql);
            if (!rsMySql.next()) {
                throw new Exception("No se encontró el DPS en el SIIE 2.0: [" + key[0] + ", " + key[1] + "].");
            }
            else {
                if (rsSqlServer.getInt("id_bp") != rsMySql.getInt("fid_bp_r")) {
                    throw new Exception("El business partner de mapeo del DPS [" + key[0] + ", " + key[1] + "] no coincide: " + rsSqlServer.getInt("id_bp") + " (mapeo) vs. " + rsMySql.getInt("fid_bp_r") + " (SIIE 2.0).");
                }
            }
        }

        return key;
    }

    private void importAccountingRecords() {
        int nMap = 0;
        int nYear = 0;
        int nRecord = 0;
        int nRecordCount = 0;
        int nDoctoCoId = 0;
        int nTipoPolizaId = 0;
        int nPoliza = 0;
        int nPolizaAux = 0;
        boolean bIsAjsute = false;
        String sPoliza = "";
        int nCuentaId = 0;
        int nPlcSCuenta = 0;
        int nPlcSSCuenta = 0;
        int nSCta = 0;
        int nSSCta = 0;
        int nId_year = 0;
        int nId_per = 0;
        int nFid_cob_n = 0;
        int nFid_ent_n = 0;
        int nId_acc_cash_n = 0;
        int nFid_ct_ref_n = 0;
        int nFid_cur = 0;
        int nFid_bp_nr = 0;
        int nFid_bpb_n = 0;
        int nFidBpr = 0;
        int nFidBpb = 0;
        int nFidItem = 0;
        int nFidItemAux = 0;
        int nFidTaxBasic = 0;
        int nFidTax = 0;
        int nFidYear = 0;
        int nEntryNumber = 0;
        double dExchangeRate = 0;
        double dImporte = 0;
        double dPlcCargos = 0;
        double dPlcCargosCy = 0;
        double dPlcAbonos = 0;
        double dPlcAbonosCy = 0;
        double dPlcUnidades = 0;
        double dPlcImporteMonedaExtra = 0;
        double dPercentage = 0;
        boolean bPlcDifCambiaria = false;
        boolean bError = false;
        boolean bMapExists = false;
        int[] anPeriod = null;
        int[] anDpsKey = null;
        int[] anSysMoveTypeKey = null;
        String sSql = "";
        String sType = "";
        String sUser = "";
        String sReference = "";
        String sFidAcc = "";
        String sFidCcb = "";
        String sConcepto = "";
        String sConceptoAux = "";
        String sTipoAsiento = "";
        int sMonedaId = 0;
        Cursor oCursor = null;
        Statement stMySql = null;
        Statement stMySqlAux = null;
        Statement stMySqlMapAux = null;
        Statement stSqlFireBird = null;
        Statement stSqlFireBirdAux = null;
        Statement stSqlServerEntry = null;
        Statement stMySqlMap = null;
        ResultSet rsMySql = null;
        ResultSet rsMySqlMap = null;
        ResultSet rsMySqlMapAux = null;
        ResultSet rsSqlFireBird = null;
        ResultSet rsSqlFireBirdAux = null;
        ResultSet rsSqlFireBirdEntry = null;
        SimpleDateFormat sdf = null;
        SimpleDateFormat sdfMySql = null;
        SimpleDateFormat sdfMicroSip = null;
        java.util.Date tDate = null;
        java.util.Date tDateImport = null;
        ImportProgressThread oProgressThread = null;

        try {
            oCursor = getCursor();
            setCursor(new Cursor(Cursor.WAIT_CURSOR));
            jpbProgress.setValue(0);
            oProgressThread = new ImportProgressThread(this);
            oProgressThread.startThread();

            sdf = new SimpleDateFormat("dd/MM/yyyy");
            sdfMySql = new SimpleDateFormat("yyyy-MM-dd");
            sdfMicroSip = new SimpleDateFormat("dd.MM.yyyy");
            tDateImport = sdf.parse(jftDateImport.getText());
            nYear = SLibTimeUtilities.digestYear(tDateImport)[0];

            stMySql = moDbMySql.getConnection().createStatement();
            stMySqlAux = moDbMySql.getConnection().createStatement();
            stMySqlMap = moDbMySqlMap.getConnection().createStatement();
            stMySqlMapAux = moDbMySqlMap.getConnection().createStatement();
            stSqlFireBird = moDbFireBird.createStatement();
            stSqlFireBirdAux = moDbFireBird.createStatement();
            stSqlServerEntry = moDbFireBird.createStatement();

            // Delete previously imported accounting records:

            sSql = "DELETE fin_rec_ety FROM fin_rec_ety, fin_rec " +
                    "WHERE fin_rec_ety.id_year = fin_rec.id_year AND " +
                    "fin_rec_ety.id_per = fin_rec.id_per AND " +
                    "fin_rec_ety.id_bkc = fin_rec.id_bkc AND " +
                    "fin_rec_ety.id_tp_rec = fin_rec.id_tp_rec AND " +
                    "fin_rec_ety.id_num = fin_rec.id_num AND " +
                    "fin_rec.dt <= '" + sdfMySql.format(tDateImport) + "' AND fin_rec.id_year = " + nYear + "; ";
            stMySql.execute(sSql);

            sSql = "DELETE FROM fin_rec WHERE dt <= '" + sdfMySql.format(tDateImport) + "' AND id_year = " + nYear + "; ";
            stMySql.execute(sSql);

            // Import accounting records:

            /*
             * IMPORTANT:
             * Database ImportEtl and his tables must be create and populated first into local machine, into local MySQL Server DBMS!
             */

            sSql = "SELECT COUNT(*) FROM DOCTOS_CO WHERE fecha<='" + sdfMicroSip.format(tDateImport) + "' AND fecha <> '01.01.1000' AND EXTRACT(YEAR FROM fecha) = " + nYear + " AND estatus <> 'R'; ";
            rsSqlFireBird = stSqlFireBird.executeQuery(sSql);
            if (!rsSqlFireBird.next()) {
                throw new Exception("No hay pólizas contables para importar.");
            }
            else {
                nRecordCount = rsSqlFireBird.getInt(1);
            }

            sSql = "SELECT * " +
                    "FROM DOCTOS_CO " +
                    "WHERE fecha<='" + sdfMicroSip.format(tDateImport) + "' AND EXTRACT(YEAR FROM fecha) = " + nYear + " AND estatus <> 'R'; ";
            rsSqlFireBird = stSqlFireBird.executeQuery(sSql);
            while (rsSqlFireBird.next()) { 
                nDoctoCoId = rsSqlFireBird.getInt("docto_co_id");
                nTipoPolizaId = rsSqlFireBird.getInt("tipo_poliza_id");
                sPoliza = rsSqlFireBird.getString("poliza");
                sConceptoAux = rsSqlFireBird.getString("descripcion");
                
                if (sConceptoAux == null || sConceptoAux.isEmpty()) {
                    sConceptoAux = "Póliza sin descripción";
                }
                
                sConcepto = sConceptoAux.trim().replaceAll("'", "''");

                tDate = sdfMySql.parse(rsSqlFireBird.getString("fecha"));
                anPeriod = SLibTimeUtilities.digestDate(tDate);
                
                if (sPoliza.compareTo("@FIN") == 0 || sPoliza.compareTo("-") == 0) {
                    nPoliza = getNumeroPolizaNext(stSqlFireBirdAux, sdfMicroSip, tDate, nTipoPolizaId);
                    nPoliza += nPolizaAux;
                    nPolizaAux++;
                    bIsAjsute = sPoliza.compareTo("@FIN") == 0;
                }
                else {
                    nPoliza = Integer.parseInt(sPoliza);
                    bIsAjsute = false;
                    
                }

                /*
                DIARIO	 72
                EGRESOS	 73
                INGRESOS 74
                */
                
                if (nTipoPolizaId == 72) {
                    sType = "D";
                }
                else if (nTipoPolizaId == 73) {
                    sType = "E";
                }
                else {
                    sType = "I";
                }
                
                if (sType.compareTo("S") == 0) {
                    nId_year = anPeriod[0] + 1;
                    nId_per = 1;
                }
                else {
                    nId_year = anPeriod[0];
                    nId_per = anPeriod[1];
                }
                
                /*
                sSql = "SELECT * " +
                    "FROM DOCTOS_CO " +
                    "WHERE fecha<='" + sdfMicroSip.format(tDateImport) + "'; ";
                rsSqlFireBirdAux = stSqlFireBirdAux.executeQuery(sSql);
                while (rsSqlFireBirdAux.next()) {
                }
                */
                
                nFid_cob_n = 0;
                nId_acc_cash_n = 0;

                sUser = rsSqlFireBird.getString("usuario_creador").trim();

                if (sUser.length() == 0) {
                    sUser = "system";
                }

                sSql = "INSERT INTO fin_rec VALUES (" +
                        nId_year + ", " + nId_per + ", 1, 'X" + sType + "', " + nPoliza + ", " +
                        "'" + sdfMySql.format(tDate) + "', 'PÓLIZA " + sType + " (USR: " + sdf.format(sdfMySql.parse(rsSqlFireBird.getString("fecha"))) + ", " + sUser + ") " + (bIsAjsute ? (sConcepto + " numero : @FIN") : "") + "', " +
                        "" + bIsAjsute + ", 0, 0, 0, 1, 0, 1, " + (nFid_cob_n == 0 ? "NULL, NULL" : "" + nFid_cob_n + ", " + nId_acc_cash_n) + ", 1, 1, 1, 1, 1, " +
                        "'" + sdfMySql.format(tDateImport) + "', '" + sdfMySql.format(tDateImport) + "', '" + sdfMySql.format(tDateImport) + "', NOW(), NOW()); ";
                stMySql.execute(sSql);

                // Import accounting record entries:

                nEntryNumber = 0;

                sSql = "SELECT * " +
                        "FROM DOCTOS_CO_DET " +
                        "WHERE docto_co_id=" + nDoctoCoId + " AND fecha <> '01.01.1000'; ";
                rsSqlFireBirdEntry = stSqlServerEntry.executeQuery(sSql);
                while (rsSqlFireBirdEntry.next()) {
                    nCuentaId = rsSqlFireBirdEntry.getInt("cuenta_id");
                    dImporte = rsSqlFireBirdEntry.getDouble("importe");
                    dPlcUnidades = 0;
                    sTipoAsiento = rsSqlFireBirdEntry.getString("tipo_asiento");
                    sMonedaId = rsSqlFireBirdEntry.getInt("moneda_id");
                    //dPlcImporteMonedaExtra = rsSqlFireBirdEntry.getDouble("plc_imp_moneda_extra");
                    //bPlcDifCambiaria = rsSqlFireBirdEntry.getBoolean("plc_swdif_cambiaria");

                    dPlcCargos = 0;
                    dPlcAbonos = 0;
                    
                    if (sTipoAsiento.compareTo("C") == 0) {
                        dPlcCargos = dImporte;
                    }
                    else {
                        dPlcAbonos = dImporte;
                    }
                    
                    if (sMonedaId == 1) {
                        nFid_cur = 1;   // mexican pesos
                        dExchangeRate = 1d;

                        dPlcCargosCy = dPlcCargos;
                        dPlcAbonosCy = dPlcAbonos;
                    }
                    else {
                        /*
                         * No existen movimientos en moneda dierente de pesos mexicanos.
                         */
                    }

                    bMapExists = false;

                    for (nMap = 1; nMap <= 1 && !bMapExists; nMap++) {
                        switch (nMap) {
                            case 1:
                                /*
                                sSql = "SELECT fid_cta, fid_cc, fid_tax_bas, fid_tax, fid_item, fid_item_aux, fid_bpr, fid_bpb, imp_perc " +
                                        "FROM map_cuentas_contables " +
                                        "WHERE cta=" + nCuentaId + " AND scta=" + nSCta + " AND sscta=" + nSSCta + " AND " +
                                        "imp_year=" + nDoctoCoId + " AND imp_d_c='" + (dPlcAbonos != 0d ? "A" : "C") + "' ";
                                */
                                sSql = "SELECT fid_cta, fid_cc, fid_tax_bas, fid_tax, fid_item, fid_item_aux, fid_bpr, fid_bpb, imp_perc, scta " +
                                        "FROM map_cuentas_contables " +
                                        "WHERE cta=" + nCuentaId + "; ";
                                break;
                            case 2:
                                sSql = "SELECT fid_cta, fid_cc, fid_tax_bas, fid_tax, fid_item, fid_item_aux, fid_bpr, fid_bpb, imp_perc, scta " +
                                        "FROM map_cuentas_contables " +
                                        "WHERE cta=" + nCuentaId + " AND scta=" + nSCta + " AND sscta=" + nSSCta + " AND " +
                                        "imp_year=" + nDoctoCoId + " AND imp_d_c='' ";
                                break;
                            case 3:
                                sSql = "SELECT fid_cta, fid_cc, fid_tax_bas, fid_tax, fid_item, fid_item_aux, fid_bpr, fid_bpb, imp_perc, scta " +
                                        "FROMmap_cuentas_contables " +
                                        "WHERE cta=" + nCuentaId + " AND scta=" + nSCta + " AND sscta=" + nSSCta + " AND " +
                                        "imp_year=0 AND imp_d_c='" + (dPlcAbonos != 0d ? "A" : "C") + "' ";
                                break;
                            case 4:
                                sSql = "SELECT fid_cta, fid_cc, fid_tax_bas, fid_tax, fid_item, fid_item_aux, fid_bpr, fid_bpb, imp_perc, scta " +
                                        "FROM map_cuentas_contables " +
                                        "WHERE cta=" + nCuentaId + " AND scta=" + nSCta + " AND sscta=" + nSSCta + " AND " +
                                        "imp_year=0 AND imp_d_c='' ";
                                break;
                            default:
                                throw new Exception("No se ha encontrado el mapeo de la cuenta: [" + nCuentaId + "-" + nPlcSCuenta + "-" + nPlcSSCuenta + "].");
                        }

                        if (sSql.length() == 0) {
                            throw new Exception("No existe sentencia SQL de mapeo de la cuenta: [" + nCuentaId + "-" + nPlcSCuenta + "-" + nPlcSSCuenta + "].");
                        }
                        else {
                            rsMySqlMap = stMySqlMap.executeQuery(sSql);
                            while (rsMySqlMap.next()) {
                                sFidAcc = rsMySqlMap.getString("fid_cta");
                                sFidCcb = rsMySqlMap.getString("fid_cc");
                                nFidBpr = rsMySqlMap.getInt("fid_bpr");
                                nFidBpb = rsMySqlMap.getInt("fid_bpb");
                                nFidItem = rsMySqlMap.getInt("fid_item");
                                nFidItemAux = rsMySqlMap.getInt("fid_item_aux");
                                nFidTaxBasic = rsMySqlMap.getInt("fid_tax_bas");
                                nFidTax = rsMySqlMap.getInt("fid_tax");
                                nPlcSCuenta = rsMySqlMap.getInt("scta");
                                dPercentage = 1.0;

                                if (sFidAcc == null) {
                                    sFidAcc = "";
                                }
                                else {
                                    sFidAcc = sFidAcc.trim();
                                }

                                if (sFidCcb == null || sFidCcb.trim().length() == 0) {
                                    sFidCcb = "";
                                }
                                else {
                                    sFidCcb = sFidCcb.trim();
                                }

                                nFid_cob_n = 0;
                                nFid_ent_n = 0;
                                nFid_ct_ref_n = 0;
                                anDpsKey = null;

                                /*
                                 * *** CUENTAS DE SISTEMA ***
                                 * NOTA:
                                 * Esta sección se configura a mano, de acuerdo a la contabilidad de la empresa en cuestión:
                                 */

                                switch (nPlcSCuenta) {
                                    case 1001:
                                    case 1002:

                                        // Caja y bancos:

                                        sSql = "SELECT id_cob, id_acc_cash FROM map_cuentas_bancarias WHERE bank=" + nCuentaId + "; ";
                                        rsMySqlMapAux = stMySqlMapAux.executeQuery(sSql);
                                        if (!rsMySqlMapAux.next()) {
                                            throw new Exception("No se encontró la configuración del banco: [" + nCuentaId + "].");
                                        }
                                        else {
                                            nFid_cob_n = rsMySqlMapAux.getInt("id_cob");
                                            nFid_ent_n = rsMySqlMapAux.getInt("id_acc_cash");
                                        }
                                        break;

                                    case 1004:
                                        // Clientes:

                                        nFid_ct_ref_n = 3;

                                        // Buscar ID del DPS del presente movimiento:

                                        //anDpsKey = lookUpDps(stMySqlMapAux, stMySqlAux, nFid_ct_ref_n, nPlcSCuenta, nPlcSSCuenta);
                                        break;

                                    case 2001:
                                        // Proveedores:

                                        nFid_ct_ref_n = 2;

                                        // Buscar ID del DPS del presente movimiento:

                                        //anDpsKey = lookUpDps(stMySqlMapAux, stMySqlAux, nFid_ct_ref_n, nPlcSCuenta, nPlcSSCuenta);
                                        break;

                                    case 1005:
                                        // Deudores diversos:

                                        nFid_ct_ref_n = 5;
                                        break;

                                     case 2002:
                                        // Acreedores diversos:

                                        nFid_ct_ref_n = 4;
                                        break;

                                    case 5000:
                                        // Compras:

                                        if (sConcepto.indexOf(" ") != -1) {
                                            dPlcUnidades = SLibUtilities.parseDouble(sConcepto.substring(0, sConcepto.indexOf(" ")));
                                        }
                                        break;

                                    default:
                                }
                                
                                switch (nCuentaId) {
                                    case 216152:
                                        // Papel:

                                        nFid_cob_n = 1;
                                        nFid_ent_n = 10;
                                        break;

                                     case 216154:
                                        // Producto terminado:

                                        nFid_cob_n = 1;
                                        nFid_ent_n = 11;
                                        break;

                                     case 216155:
                                        // Materiales Auxiliares:

                                        nFid_cob_n = 1;
                                        nFid_ent_n = 13;
                                        break;
                                         
                                     case 1434911:
                                        // Refacciones:

                                        nFid_cob_n = 1;
                                        nFid_ent_n = 15;
                                        break;

                                     case 1562901:
                                        // Mercancías en tránsito:

                                        nFid_cob_n = 1;
                                        nFid_ent_n = 14;
                                        break;
                                }


                                /*
                                 * *** FIN: CUENTAS DE SISTEMA ***
                                 */

                                if (sFidAcc.length() == 0) {
                                    throw new Exception("Se ha encontrado una inconsistencia en el mapeo de la cuenta: [" + nCuentaId + "-" + nPlcSCuenta + "-" + nPlcSSCuenta + "].");
                                }
                                
                                // Map year account result:
                                
                                
                                nFidYear = 0;
                                
                                if (sFidAcc.compareTo("3120-0000-0000") == 0) {
                                    nFidYear = nYear;
                                }
                                else if (sFidAcc.compareTo("3130-0001-0000") == 0) {
                                    nFidYear = 2012;
                                }
                                else if (sFidAcc.compareTo("3130-0002-0000") == 0) {
                                    nFidYear = 2013;
                                }

                                if (nFidItem == 0 && nFidItemAux != 0) {
                                    throw new Exception("Se ha encontrado una inconsistencia en el mapeo de los ítems de la cuenta: [" + nCuentaId + "-" + nPlcSCuenta + "-" + nPlcSSCuenta + "].");
                                }

                                sReference = "";

                                if (nFid_ct_ref_n == 0) {
                                        // Anticipo clientes || proveedores:
                                    if ((nPlcSCuenta == 2007 || nPlcSCuenta == 1009) && nFidBpr != 0) {
                                        nFid_bp_nr = nFidBpr;
                                        nFid_bpb_n = nFidBpb;
                                    }
                                    else {
                                        nFid_bp_nr = 0;
                                        nFid_bpb_n = 0;
                                    }
                                }
                                else {
                                    if (nFidBpr != 0) {
                                        nFid_bp_nr = nFidBpr;
                                        nFid_bpb_n = nFidBpb;
                                    }
                                    else if (nFid_ct_ref_n == 3 || nFid_ct_ref_n == 2) {
                                        if (nFid_ct_ref_n == 3) {
                                            sSql = "SELECT id_bp FROM map_bp_cte WHERE cte=" + nCuentaId + "; ";
                                            rsMySqlMapAux = stMySqlMapAux.executeQuery(sSql);
                                            if (rsMySqlMapAux.next()) {
                                                nFid_bp_nr = rsMySqlMapAux.getInt("id_bp");
                                            }
                                        }
                                        else if (nFid_ct_ref_n == 2) {
                                            sSql = "SELECT id_bp FROM map_bp_prv WHERE prv=" + nCuentaId + "; ";
                                            rsMySqlMapAux = stMySqlMapAux.executeQuery(sSql);
                                            if (rsMySqlMapAux.next()) {
                                                nFid_bp_nr = rsMySqlMapAux.getInt("id_bp");
                                            }
                                        }

                                        sSql = "SELECT c.id_bp, b.id_bpb " +
                                                "FROM erp.bpsu_bp_ct AS c INNER JOIN erp.bpsu_bpb AS b ON " +
                                                "c.id_bp=b.fid_bp AND b.fid_tp_bpb=1 " +
                                                "WHERE c.id_ct_bp=" + nFid_ct_ref_n + " AND b.fid_bp='" + nFid_bp_nr + "'; ";
                                        rsMySql = stMySql.executeQuery(sSql);
                                        if (!rsMySql.next()) {
                                            throw new Exception("No se encontró la configuración del business partner: [" + nFid_bp_nr + "] cat.: [" + nFid_ct_ref_n + "].");
                                        }
                                        else {
                                            nFid_bp_nr = rsMySql.getInt("c.id_bp");
                                            nFid_bpb_n = rsMySql.getInt("b.id_bpb");
                                        }
                                    }
                                    else {
                                        nFid_bp_nr = 0;
                                        nFid_bpb_n = 0;
                                    }
                                }

                                /*
                                 * *** CUENTAS DE SISTEMA ***
                                 * NOTA:
                                 * Esta sección se configura a mano, de acuerdo a la contabilidad de la empresa en cuestión:
                                 */

                                if (sFidAcc.startsWith("1105")) {
                                    anSysMoveTypeKey = SDataConstantsSys.FINS_TP_SYS_MOV_CASH_CASH;
                                }
                                else if (sFidAcc.startsWith("1110")) {
                                    anSysMoveTypeKey = SDataConstantsSys.FINS_TP_SYS_MOV_CASH_BANK;
                                }
                                else if (sFidAcc.startsWith("1140") || sFidAcc.startsWith("2105")) {
                                    anSysMoveTypeKey = SDataConstantsSys.FINS_TP_SYS_MOV_BPS_SUP;
                                }
                                else if (sFidAcc.startsWith("1120") || sFidAcc.startsWith("2120")) {
                                    anSysMoveTypeKey = SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CUS;
                                }
                                else if (sFidAcc.startsWith("2115")) {
                                    anSysMoveTypeKey = SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CDR;
                                }
                                else if (sFidAcc.startsWith("1145")) {
                                    anSysMoveTypeKey = SDataConstantsSys.FINS_TP_SYS_MOV_BPS_DBR;
                                }
                                else if (sFidAcc.startsWith("1130")) {
                                    anSysMoveTypeKey = SDataConstantsSys.FINS_TP_SYS_MOV_ASSET_STOCK;
                                }
                                else if (sFidAcc.startsWith("1155") || sFidAcc.startsWith("1160")) {
                                    anSysMoveTypeKey = SDataConstantsSys.FINS_TP_SYS_MOV_TAX_DBT;
                                }
                                else if (sFidAcc.startsWith("1165")) {
                                    anSysMoveTypeKey = SDataConstantsSys.FINS_TP_SYS_MOV_TAX_DBT_PEND;
                                }
                                else if (sFidAcc.startsWith("2130") || sFidAcc.startsWith("2140")) {
                                    anSysMoveTypeKey = SDataConstantsSys.FINS_TP_SYS_MOV_TAX_CDT;
                                }
                                else if (sFidAcc.startsWith("2135")) {
                                    anSysMoveTypeKey = SDataConstantsSys.FINS_TP_SYS_MOV_TAX_CDT_PEND;
                                }
                                else if (sFidAcc.startsWith("1205") || sFidAcc.startsWith("1210") || sFidAcc.startsWith("1215") ||
                                        sFidAcc.startsWith("1220") || sFidAcc.startsWith("1225") || sFidAcc.startsWith("1230") ||
                                        sFidAcc.startsWith("1235")) {
                                    anSysMoveTypeKey = SDataConstantsSys.FINS_TP_SYS_MOV_ASSET_ASSET;
                                }
                                else if (sFidAcc.startsWith("4100") || sFidAcc.startsWith("4200") || sFidAcc.startsWith("4300")) {
                                    anSysMoveTypeKey = SDataConstantsSys.FINS_TP_SYS_MOV_SAL_GOOD;
                                }
                                else if (sFidAcc.startsWith("5100") || sFidAcc.startsWith("5200") || sFidAcc.startsWith("5300")) {
                                    anSysMoveTypeKey = SDataConstantsSys.FINS_TP_SYS_MOV_PUR_GOOD;
                                }
                                else if (sFidAcc.startsWith("6000") || sFidAcc.startsWith("7000") || sFidAcc.startsWith("8000")) {
                                    anSysMoveTypeKey = SDataConstantsSys.FINS_TP_SYS_MOV_PUR_SERV;
                                }
                                else if (sFidAcc.startsWith("4122") || sFidAcc.startsWith("4123") || sFidAcc.startsWith("4125")) {
                                    if (dPlcCargos < 0) {
                                        anSysMoveTypeKey = SDataConstantsSys.FINS_TP_SYS_MOV_PROF_LOSS;
                                    }
                                    else {
                                        anSysMoveTypeKey = SDataConstantsSys.FINS_TP_SYS_MOV_PROF_PROF;
                                    }
                                }
                                else {
                                    anSysMoveTypeKey = SDataConstantsSys.FINS_TP_SYS_MOV_NA;
                                }

                                /*
                                 * *** FIN: CUENTAS DE SISTEMA ***
                                 */

                                nEntryNumber++;
                                sSql = "INSERT INTO fin_rec_ety VALUES (" +
                                        nId_year + ", " + nId_per + ", 1, 'X" + sType + "', " + nPoliza + ", " + nEntryNumber + ", " +
                                        "'" + sConcepto.substring(0, sConcepto.length()> 99 ? 99 : sConcepto.length()) + "', '" + sReference + "', 0, " +
                                        (dPlcCargos * dPercentage) + ", " + (dPlcAbonos * dPercentage) + ", " + dExchangeRate + ", " + dExchangeRate + ", " +
                                        (dPlcCargosCy * dPercentage) + ", " + (dPlcAbonosCy * dPercentage) + ", " +
                                        Math.abs(dPlcUnidades) + ", 0, " + nEntryNumber + ", '', " + bPlcDifCambiaria + ", 1, 0, " +
                                        "'" + sFidAcc + "'," + getAccountPk(stMySqlAux, sFidAcc) + "," + (sFidCcb.length() == 0 || sFidCcb.compareTo("0") == 0 ? "NULL" : getCenterCostPk(stMySql, sFidCcb)) + ", " +
                                        "99, 1, 1, 99, " + (dPlcCargos != 0 ? "1, " : "2, ") + "1, 1, " + anSysMoveTypeKey[0] + ", " + anSysMoveTypeKey[1] + ", " +
                                        nFid_cur + ", " + (sFidCcb.length() == 0 || sFidCcb.compareTo("0") == 0 ? "NULL" : "'" + sFidCcb + "'") + ", NULL, NULL, " +
                                        (nFid_bp_nr == 0 ? "NULL" : "" + nFid_bp_nr) + ", " + (nFid_bpb_n == 0 ? "NULL" : "" + nFid_bpb_n) + ", " + (nFid_ct_ref_n == 0 ? "NULL" : "" + nFid_ct_ref_n) + ", " +
                                        (nFid_cob_n == 0 ? "NULL, NULL, " : "" + nFid_cob_n + ", " + nFid_ent_n + ", ") +
                                        "NULL, NULL, " +
                                        (nFidTaxBasic == 0 ? "NULL, NULL, " : "" + nFidTaxBasic + ", " + nFidTax + ", ") + (nFidYear == 0 ? "NULL" : "" + nFidYear) + ", " +
                                        (anDpsKey == null ? "NULL, NULL, " : "" + anDpsKey[0] + ", " + anDpsKey[1] + ", ") + "NULL, NULL, " +
                                        "NULL, NULL, NULL, NULL, NULL, NULL, NULL, " +
                                        "" + (nFidItem == 0 ? "NULL" : "" + nFidItem) + ", " +
                                        "" + (nFidItemAux == 0 ? "NULL" : "" + nFidItemAux) + ", NULL, NULL, NULL, " +
                                        "1, 1, 1, '" + sdfMySql.format(tDateImport) + "', NOW(), NOW()); ";
                                stMySql.execute(sSql);

                                bMapExists = true;
                            }
                        }
                    }
                }

                jpbProgress.setValue((int) ((++nRecord / (double) nRecordCount) * 100d));
                System.out.println("Record " + nRecord + " out of " + nRecordCount + "; docto_co_id=" + nDoctoCoId + ", tipo_poliza_id=" + nTipoPolizaId + ", poliza=" + nPoliza + ".");
            }

            // Update fid_unit_n in fin_rec_ety:

            sSql = "UPDATE fin_rec AS r " +
                    "INNER JOIN fin_rec_ety AS re ON r.id_year = re.id_year AND r.id_per = re.id_per AND r.id_bkc = re.id_bkc AND r.id_tp_rec = re.id_tp_rec AND r.id_num = re.id_num " +
                    "INNER JOIN erp.itmu_item AS it ON re.fid_item_n = it.id_item " +
                    "SET re.fid_unit_n = it.fid_unit " +
                    "WHERE re.id_year = " + nYear + " AND r.dt <= '" + sdfMySql.format(tDateImport) + "';";
            stMySql.execute(sSql);           
        }
        catch (Exception e) {
            bError = true;
            SLibUtilities.printOutException(this, e);
            System.err.println("Record docto_co_id=" + nDoctoCoId + ", tipo_poliza_id='" + nTipoPolizaId + "', poliza=" + nPoliza + ".");
            System.err.println("SQL: [" + sSql + "]");
        }
        finally {
            oProgressThread.stopThread();
            setCursor(oCursor);
            if (!bError) {
                System.err.println("El proceso ha finalizado exitosamente.");
                JOptionPane.showMessageDialog(this, "El proceso ha finalizado exitosamente.", "Información", JOptionPane.INFORMATION_MESSAGE);
            }
            else {
                System.err.println("El proceso ha finalizado con errores.");
                JOptionPane.showMessageDialog(this, "El proceso ha finalizado con errores.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ImportAccountingRecordsMicroSip().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbImport;
    private javax.swing.JFormattedTextField jftDateImport;
    private javax.swing.JLabel jlDateImport;
    private javax.swing.JLabel jlDateImportExample;
    private javax.swing.JProgressBar jpbProgress;
    // End of variables declaration//GEN-END:variables

}
