/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package erp;

import erp.lib.SLibConstants;
import erp.lib.SLibTimeUtilities;
import erp.lib.SLibUtilities;
import erp.lib.data.SDataDatabase;
import erp.util.imp.ImportProgressThread;
import java.awt.Cursor;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Date;
import java.util.TimeZone;
import javax.swing.JOptionPane;
import sa.lib.SLibUtils;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;

/**
 * Clase desechable, de un solo uso.
 * El propósito fue completar la información del XML del CFDI que ahora está directamente en la tabla erp_com.trn_cfd,
 * debido a que dichos datos fueron agregados posteriormente a la creación de dicha tabla, y los registros iniciales no contaban con ellos.
 * 
 * @author Juan Barajas
 */
public class SUtilCfdiParsing extends javax.swing.JFrame {

    private final static int DATA_TYPE_TEXT = 1;
    private final static int DATA_TYPE_NUMBER = 2;
    private final static int DATA_TYPE_DATE = 3;
    
    protected ArrayList<String> masCompanies;
    private erp.lib.data.SDataDatabase moDbMySql;
    
    public SUtilCfdiParsing() {
        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jlErpHost = new javax.swing.JLabel();
        jtfErpHost = new javax.swing.JTextField();
        jlSeparatorServer = new javax.swing.JLabel();
        jtfDatabasePortServer = new javax.swing.JTextField();
        jlDatabaseServerExample = new javax.swing.JLabel();
        jPanel15 = new javax.swing.JPanel();
        jlDatabaseName = new javax.swing.JLabel();
        jtfDatabaseName = new javax.swing.JTextField();
        jlDatabaseNameExample = new javax.swing.JLabel();
        jPanel16 = new javax.swing.JPanel();
        jlYear = new javax.swing.JLabel();
        jtfYear = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jbProcess = new javax.swing.JButton();
        jbClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Comprimir XML del CFD");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Configuration parameters:"));
        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel4.setLayout(new java.awt.GridLayout(3, 0, 0, 5));

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlErpHost.setText("ERP host:*");
        jlErpHost.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlErpHost);

        jtfErpHost.setText("127.0.0.1");
        jtfErpHost.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jtfErpHost);

        jlSeparatorServer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlSeparatorServer.setText(":");
        jlSeparatorServer.setPreferredSize(new java.awt.Dimension(5, 23));
        jPanel6.add(jlSeparatorServer);

        jtfDatabasePortServer.setText("3306");
        jtfDatabasePortServer.setToolTipText("port");
        jtfDatabasePortServer.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel6.add(jtfDatabasePortServer);

        jlDatabaseServerExample.setText("(e.g. 127.0.0.1 : 3306)");
        jlDatabaseServerExample.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel6.add(jlDatabaseServerExample);

        jPanel4.add(jPanel6);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDatabaseName.setText("Database name:*");
        jlDatabaseName.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel15.add(jlDatabaseName);

        jtfDatabaseName.setText("erp");
        jtfDatabaseName.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel15.add(jtfDatabaseName);

        jlDatabaseNameExample.setText("(e.g. erp)");
        jlDatabaseNameExample.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel15.add(jlDatabaseNameExample);

        jPanel4.add(jPanel15);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlYear.setText("Año:*");
        jlYear.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel16.add(jlYear);

        jtfYear.setText("3306");
        jtfYear.setToolTipText("port");
        jtfYear.setPreferredSize(new java.awt.Dimension(50, 23));
        jtfYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfYearActionPerformed(evt);
            }
        });
        jPanel16.add(jtfYear);

        jPanel4.add(jPanel16);

        jPanel3.add(jPanel4, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbProcess.setText("Procesar");
        jbProcess.setPreferredSize(new java.awt.Dimension(100, 23));
        jbProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbProcessActionPerformed(evt);
            }
        });
        jPanel2.add(jbProcess);

        jbClose.setText("Cerrar");
        jbClose.setPreferredSize(new java.awt.Dimension(100, 23));
        jbClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCloseActionPerformed(evt);
            }
        });
        jPanel2.add(jbClose);

        getContentPane().add(jPanel2, java.awt.BorderLayout.SOUTH);

        setSize(new java.awt.Dimension(461, 240));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jbProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbProcessActionPerformed
        actionSave();
    }//GEN-LAST:event_jbProcessActionPerformed

    private void jbCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCloseActionPerformed
        actionClose();
    }//GEN-LAST:event_jbCloseActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        windowClosing();
    }//GEN-LAST:event_formWindowClosing

    private void jtfYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfYearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtfYearActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new SUtilCfdiParsing().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JButton jbClose;
    private javax.swing.JButton jbProcess;
    private javax.swing.JLabel jlDatabaseName;
    private javax.swing.JLabel jlDatabaseNameExample;
    private javax.swing.JLabel jlDatabaseServerExample;
    private javax.swing.JLabel jlErpHost;
    private javax.swing.JLabel jlSeparatorServer;
    private javax.swing.JLabel jlYear;
    private javax.swing.JTextField jtfDatabaseName;
    private javax.swing.JTextField jtfDatabasePortServer;
    private javax.swing.JTextField jtfErpHost;
    private javax.swing.JTextField jtfYear;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        TimeZone.setDefault(SLibTimeUtilities.SysTimeZone);

        moDbMySql = new SDataDatabase(SLibConstants.DBMS_MY_SQL);
        
        masCompanies = new ArrayList<String>();
        
        jtfErpHost.setText("localhost");
        jtfDatabasePortServer.setText("3306");
        jtfDatabaseName.setText("");
        jtfYear.setText("2001");
    }
    
    private void computeCompanies() {
        ResultSet resultSet = null;
        String sql = "";
        
        try {
            sql = "SELECT bd FROM erp.cfgu_co " +
                    "WHERE b_del = 0; ";

            if (moDbMySql.getConnection() != null) {
                resultSet = moDbMySql.getConnection().createStatement().executeQuery(sql);
            }
            
            while (resultSet.next()) {
                masCompanies.add(resultSet.getString(1));
            }
        }
        catch (java.lang.Exception e) {
            SLibUtilities.printOutException(this, e);
        }
    }
    
    private void process() throws Exception {
        int index = 1;
        boolean isCfdi = false;
        String sXmlDoc = "";
        String sXmlUuid = "";
        String sXmlEmisorRfc = "";
        String sXmlReceptorRfc = "";
        double dXmlTotal = 0;
        String sXmlCurrencyKey = "";
        double dXmlExchangeRate = 0;
        Date tXmlDateSigned = null;
        String sql = "";
        ResultSet resultSet = null;
        ResultSet resultSetCfdi = null;
        ResultSet resultSetCfd = null;
        PreparedStatement preparedStatement = null;
        
        moDbMySql.connect(jtfErpHost.getText(), jtfDatabasePortServer.getText(), jtfDatabaseName.getText(), "root", "msroot");
        
        computeCompanies();
        
        for (String tableName : masCompanies) {
            sql = "SELECT id_cfd FROM " + tableName + ".trn_cfd WHERE YEAR(ts) = " + jtfYear.getText() + " ";
            
            resultSet = moDbMySql.getConnection().createStatement().executeQuery(sql);
            while (resultSet.next()) {
                index = 1;
                sXmlDoc = "";
                sXmlEmisorRfc = "";
                sXmlReceptorRfc = "";
                dXmlTotal = 0;
                sXmlCurrencyKey = "";
                dXmlExchangeRate = 0;
                tXmlDateSigned = null;
                sXmlUuid = "";
                isCfdi = false;

                // is CFDI:
                
                sql = "SELECT doc_xml, " +
                    "erp.f_get_xml_atr('cfdi:Emisor', 'rfc=', doc_xml, " + DATA_TYPE_TEXT + ") AS _xml_emisor_rfc, " +
                    "erp.f_get_xml_atr('cfdi:Receptor', 'rfc=', doc_xml, " + DATA_TYPE_TEXT + ") AS _xml_receptor_rfc, " +
                    "erp.f_get_xml_atr('cfdi:Comprobante', 'Total=', doc_xml, " + DATA_TYPE_NUMBER + ") AS _xml_total, " +
                    "erp.f_get_xml_atr('cfdi:Comprobante', 'TipoCambio=', doc_xml, " + DATA_TYPE_NUMBER + ") AS _xml_tc, " +
                    "erp.f_get_xml_atr('cfdi:Comprobante', 'Moneda=', doc_xml, " + DATA_TYPE_TEXT + ") AS _xml_moneda, " +
                    "CAST(REPLACE(erp.f_get_xml_atr('cfdi:Complemento', 'FechaTimbrado=', doc_xml, " + DATA_TYPE_DATE + "), 'T', ' ') AS DATETIME) AS _xml_timbrado, " +
                    "erp.f_get_xml_atr('cfdi:Complemento', 'UUID=', doc_xml, " + DATA_TYPE_TEXT + ") AS _xml_uuid " +
                    "FROM " + tableName + ".trn_cfd " +
                    "WHERE id_cfd = " + resultSet.getInt("id_cfd");
                
                
                resultSetCfdi = moDbMySql.getConnection().createStatement().executeQuery(sql);
                
                if (resultSetCfdi.next()) {
                    sXmlDoc = resultSetCfdi.getString("doc_xml");
                    sXmlEmisorRfc = resultSetCfdi.getString("_xml_emisor_rfc");
                    sXmlReceptorRfc = resultSetCfdi.getString("_xml_receptor_rfc");
                    dXmlTotal = resultSetCfdi.getDouble("_xml_total");
                    sXmlCurrencyKey = resultSetCfdi.getString("_xml_moneda");
                    dXmlExchangeRate = resultSetCfdi.getDouble("_xml_tc");
                    tXmlDateSigned = resultSetCfdi.getTimestamp("_xml_timbrado");
                    sXmlUuid = resultSetCfdi.getString("_xml_uuid");
                    
                    isCfdi = !sXmlEmisorRfc.isEmpty();
                }
                
                // is CFD:
                
                if (!isCfdi) {
                    sql = "SELECT doc_xml, " +
                        "erp.f_get_xml_atr('Emisor', 'rfc=', doc_xml, " + DATA_TYPE_TEXT + ") AS _xml_emisor_rfc, " +
                        "erp.f_get_xml_atr('Receptor', 'rfc=', doc_xml, " + DATA_TYPE_TEXT + ") AS _xml_receptor_rfc, " +
                        "erp.f_get_xml_atr('Comprobante', 'Total=', doc_xml, " + DATA_TYPE_NUMBER + ") AS _xml_total, " +
                        "erp.f_get_xml_atr('Comprobante', 'TipoCambio=', doc_xml, " + DATA_TYPE_NUMBER + ") AS _xml_tc, " +
                        "erp.f_get_xml_atr('Comprobante', 'Moneda=', doc_xml, " + DATA_TYPE_TEXT + ") AS _xml_moneda " +
                        "FROM " + tableName + ".trn_cfd " +
                        "WHERE id_cfd = " + resultSet.getInt("id_cfd");
                
                    resultSetCfd = moDbMySql.getConnection().createStatement().executeQuery(sql);
                    
                    if (resultSetCfd.next()) {
                        sXmlDoc = resultSetCfd.getString("doc_xml");
                        sXmlEmisorRfc = resultSetCfd.getString("_xml_emisor_rfc");
                        sXmlReceptorRfc = resultSetCfd.getString("_xml_receptor_rfc");
                        dXmlTotal = resultSetCfd.getDouble("_xml_total");
                        sXmlCurrencyKey = resultSetCfd.getString("_xml_moneda");
                        dXmlExchangeRate = resultSetCfd.getDouble("_xml_tc");
                    }
                }
                
                sql = "UPDATE " + tableName + ".trn_cfd SET " +
                        "xml_rfc_emi = ?, xml_rfc_rec = ?, xml_tot = ?, xml_mon = ?, xml_tc = ?, xml_sign_n = ?, uuid = ? " +
                        "WHERE id_cfd = " + resultSet.getInt("id_cfd") + " ";
                
                preparedStatement = moDbMySql.getConnection().prepareStatement(sql);
                
                preparedStatement.setString(index++, sXmlEmisorRfc);
                preparedStatement.setString(index++, sXmlReceptorRfc);
                preparedStatement.setDouble(index++, dXmlTotal);
                preparedStatement.setString(index++, sXmlCurrencyKey);
                preparedStatement.setDouble(index++, dXmlExchangeRate);

                if (tXmlDateSigned == null) {
                    preparedStatement.setNull(index++, java.sql.Types.DATE);
                }
                else {
                    preparedStatement.setTimestamp(index++, new java.sql.Timestamp(tXmlDateSigned.getTime()));
                }
                
                preparedStatement.setString(index++, sXmlUuid);

                preparedStatement.execute();
            }
        }
    }

    private void windowActivated() {
        jtfDatabaseName.requestFocus();
    }

    private void windowClosing() {
        actionClose();
    }

    private boolean actionSave() {
        boolean bError = false;
        Cursor oCursor = null;
        ImportProgressThread oProgressThread = null;
        
        jtfErpHost.setText(SLibUtils.textTrim(jtfErpHost.getText()).toLowerCase());
        jtfDatabasePortServer.setText(SLibUtils.textTrim(jtfDatabasePortServer.getText()));
        jtfDatabaseName.setText(SLibUtils.textTrim(jtfDatabaseName.getText()));
        
        if (jtfErpHost.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Falta un valor para el campo '" + SGuiUtils.getLabelName(jlErpHost) + "'.", SGuiConsts.MSG_BOX_WARNING, JOptionPane.WARNING_MESSAGE);
            jtfErpHost.requestFocus();
        }
        else if (jtfErpHost.getText().indexOf(" ") != -1) {
            JOptionPane.showMessageDialog(this, "El campo '" + SGuiUtils.getLabelName(jlErpHost) + "' no puede contener espacios en blanco.", SGuiConsts.MSG_BOX_WARNING, JOptionPane.WARNING_MESSAGE);
            jtfErpHost.requestFocus();
        }
        else if (jtfDatabasePortServer.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Falta un valor para el campo '" + SGuiUtils.getLabelName(jlErpHost) + " (" + jtfDatabasePortServer.getToolTipText() + ")'.", SGuiConsts.MSG_BOX_WARNING, JOptionPane.WARNING_MESSAGE);
            jtfDatabasePortServer.requestFocus();
        }
        else if (jtfDatabasePortServer.getText().indexOf(" ") != -1) {
            JOptionPane.showMessageDialog(this, "El campo '" + SGuiUtils.getLabelName(jlErpHost) + " (" + jtfDatabasePortServer.getToolTipText() + ")' no puede contener espacios en blanco.", SGuiConsts.MSG_BOX_WARNING, JOptionPane.WARNING_MESSAGE);
            jtfDatabasePortServer.requestFocus();
        }
        else if (jtfDatabaseName.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Falta un valor para el campo '" + SGuiUtils.getLabelName(jlDatabaseName) + "'.", SGuiConsts.MSG_BOX_WARNING, JOptionPane.WARNING_MESSAGE);
            jtfDatabaseName.requestFocus();
        }
        else if (jtfDatabaseName.getText().indexOf(" ") != -1) {
            JOptionPane.showMessageDialog(this, "El campo '" + SGuiUtils.getLabelName(jlDatabaseName) + "' no puede contener espacios en blanco.", SGuiConsts.MSG_BOX_WARNING, JOptionPane.WARNING_MESSAGE);
            jtfDatabaseName.requestFocus();
        }
        else {
            try {
                oCursor = getCursor();
                setCursor(new Cursor(Cursor.WAIT_CURSOR));
                
                oProgressThread = new ImportProgressThread(this);
                oProgressThread.startThread();
                
                process();
            }
            catch (Exception e) {
                bError = true;
                System.err.println(e);
                JOptionPane.showMessageDialog(this, e, "Error", JOptionPane.ERROR_MESSAGE);
            }
            finally {
                oProgressThread.stopThread();
                setCursor(oCursor);
                if (!bError) {
                    System.err.println("El proceso ha finalizado exitosamente.");
                    JOptionPane.showMessageDialog(this, "El proceso ha finalizado exitosamente.", "Información", JOptionPane.INFORMATION_MESSAGE);
                }
                else {
                    System.err.println("El proceso ha finalizado con errores.");
                    JOptionPane.showMessageDialog(this, "El proceso ha finalizado con errores.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }

        return true;
    }

    private void actionClose() {
        dispose();
    }
}
