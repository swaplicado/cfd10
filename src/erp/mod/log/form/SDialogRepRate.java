/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.log.form;

import erp.lib.SLibConstants;
import erp.mod.SModConsts;
import sa.lib.SLibConsts;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiFieldKeyGroup;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanDialogReport;

/**
 *
 * @author Isabel Servín
 */
public class SDialogRepRate extends SBeanDialogReport {
    
    private SGuiFieldKeyGroup moFieldKeySourceGroup;
    private SGuiFieldKeyGroup moFieldKeyDestinyGroup;
    
    /**
     * Creates new form SDialogRepRate
     * @param client
     * @param title
     */
    public SDialogRepRate(SGuiClient client, String title) {
        setFormSettings(client, SModConsts.LOG_RATE, SLibConstants.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jlTpSource = new javax.swing.JLabel();
        moKeyTpSource = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel9 = new javax.swing.JPanel();
        jlSource = new javax.swing.JLabel();
        moKeySource = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel2 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jlTpDestiny = new javax.swing.JLabel();
        moKeyTpDestiny = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel5 = new javax.swing.JPanel();
        jlDestiny = new javax.swing.JLabel();
        moKeyDestiny = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel11 = new javax.swing.JPanel();

        setTitle("Listado de tarifas");

        jPanel1.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel17.setBorder(javax.swing.BorderFactory.createTitledBorder("Parámetros:"));
        jPanel17.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel6.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel7.setLayout(new java.awt.GridLayout(2, 0, 0, 5));

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTpSource.setText("Tipo origen:");
        jlTpSource.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlTpSource);

        moKeyTpSource.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel8.add(moKeyTpSource);

        jPanel7.add(jPanel8);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSource.setText("Lugar origen:");
        jlSource.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlSource);

        moKeySource.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel9.add(moKeySource);

        jPanel7.add(jPanel9);

        jPanel6.add(jPanel7, java.awt.BorderLayout.NORTH);

        jPanel17.add(jPanel6, java.awt.BorderLayout.NORTH);

        jPanel2.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel10.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTpDestiny.setText("Tipo destino:");
        jlTpDestiny.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jlTpDestiny);

        moKeyTpDestiny.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel13.add(moKeyTpDestiny);

        jPanel10.add(jPanel13);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDestiny.setText("Lugar destino:");
        jlDestiny.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlDestiny);

        moKeyDestiny.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel5.add(moKeyDestiny);

        jPanel10.add(jPanel5);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jPanel10.add(jPanel11);

        jPanel2.add(jPanel10, java.awt.BorderLayout.NORTH);

        jPanel17.add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel17, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JLabel jlDestiny;
    private javax.swing.JLabel jlSource;
    private javax.swing.JLabel jlTpDestiny;
    private javax.swing.JLabel jlTpSource;
    private sa.lib.gui.bean.SBeanFieldKey moKeyDestiny;
    private sa.lib.gui.bean.SBeanFieldKey moKeySource;
    private sa.lib.gui.bean.SBeanFieldKey moKeyTpDestiny;
    private sa.lib.gui.bean.SBeanFieldKey moKeyTpSource;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 480, 300);
        
        moFieldKeySourceGroup = new SGuiFieldKeyGroup(miClient);
        moFieldKeyDestinyGroup = new SGuiFieldKeyGroup(miClient);
        
        moKeyTpSource.setKeySettings(miClient, SGuiUtils.getLabelName(jlTpSource.getText()), false);
        moKeySource.setKeySettings(miClient, SGuiUtils.getLabelName(jlSource.getText()), false);
        moKeyTpDestiny.setKeySettings(miClient, SGuiUtils.getLabelName(jlTpDestiny.getText()), false);
        moKeyDestiny.setKeySettings(miClient, SGuiUtils.getLabelName(jlDestiny.getText()), false);
        
        moFields.setFormButton(jbPrint);
        
        reloadCatalogues();
    }
    
    public void reloadCatalogues() {
        moFieldKeySourceGroup.initGroup();
        moFieldKeySourceGroup.addFieldKey(moKeyTpSource, SModConsts.LOGS_TP_SPOT, SLibConsts.UNDEFINED, null);
        moFieldKeySourceGroup.addFieldKey(moKeySource, SModConsts.LOGU_SPOT, SLibConsts.UNDEFINED, null);
        moFieldKeySourceGroup.populateCatalogues();
        moFieldKeySourceGroup.resetGroup();
    
        moFieldKeyDestinyGroup.initGroup();
        moFieldKeyDestinyGroup.addFieldKey(moKeyTpDestiny, SModConsts.LOGS_TP_SPOT, SLibConsts.UNDEFINED, null);
        moFieldKeyDestinyGroup.addFieldKey(moKeyDestiny, SModConsts.LOGU_SPOT, SLibConsts.UNDEFINED, null);
        moFieldKeyDestinyGroup.populateCatalogues();
        moFieldKeyDestinyGroup.resetGroup();
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        return validation;
    }

    @Override
    public void createParamsMap() {
         if (jbPrint.isEnabled()) {
            if (SGuiUtils.computeValidation(miClient, validateForm())) {
                moParamsMap = miClient.createReportParams();
                
                String sqlWhere = "";
                String tpSource = "";
                String source = "";
                String tpDestiny = "";
                String destiny = "";
                if (moKeyTpSource.getSelectedIndex() > 0) {
                    sqlWhere = "AND r.fk_src_tp_spot = " + moKeyTpSource.getValue()[0] + " ";
                    tpSource = moKeyTpSource.getSelectedItem().getItem(); 
                }
                if (moKeySource.getSelectedIndex() > 0) {
                    sqlWhere += (sqlWhere.isEmpty() ? "" : "AND ") + "r.fk_src_spot = " + moKeySource.getValue()[0] + " ";
                    source = moKeySource.getSelectedItem().getItem(); 
                }
                if (moKeyTpDestiny.getSelectedIndex() > 0) {
                    sqlWhere += (sqlWhere.isEmpty() ? "" : "AND ") + "r.fk_des_tp_spot = " + moKeyTpDestiny.getValue()[0] + " ";
                    tpDestiny = moKeyTpDestiny.getSelectedItem().getItem(); 
                }
                if (moKeyDestiny.getSelectedIndex() > 0) {
                    sqlWhere += (sqlWhere.isEmpty() ? "" : "AND ") + "r.fk_des_spot = " + moKeyDestiny.getValue()[0] + " ";
                    destiny = moKeyDestiny.getSelectedItem().getItem(); 
                }
                
                moParamsMap.put("sSqlWhere", sqlWhere);
                moParamsMap.put("sTpSource", tpSource);
                moParamsMap.put("sSource", source);
                moParamsMap.put("sTpDestiny", tpDestiny);
                moParamsMap.put("sDestiny", destiny);
            }
        }
    }
}
