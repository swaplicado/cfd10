/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.log.form;

import erp.client.SClientInterface;
import erp.gui.session.SSessionCustom;
import erp.lib.SLibConstants;
import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import erp.mod.itm.db.SDbUnitType;
import erp.mod.log.db.SDbRate;
import erp.mod.log.db.SDbShipment;
import erp.mod.log.db.SDbShipmentDestiny;
import erp.mod.log.db.SDbShipmentDestinyEntry;
import erp.mod.log.db.SDbShipmentNotes;
import erp.mod.log.db.SDbSpotCompanyBranch;
import erp.mod.log.db.SDbVehicleType;
import erp.mod.log.db.SParamsShipment;
import erp.mod.log.db.SRowExchangeRate;
import erp.mtrn.data.SDataDiog;
import erp.mtrn.data.SDataDps;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbConsts;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridPaneFormOwner;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiFieldKeyGroup;
import sa.lib.gui.SGuiParams;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;

/**
 *
 * @author Néstor Ávalos, Sergio Flores
 */
public class SFormShipment extends sa.lib.gui.bean.SBeanForm implements SGridPaneFormOwner, ActionListener, ItemListener, FocusListener {

    private SDbShipment moRegistry;
    private SFormShipmentDestiny moFormDestiny;
    private SFormDialogExchangeRate moFormDialogExchangeRate;
    private SDbRate moRate = null;

    private SClientInterface miClient_XXX;
    private SSessionCustom moSessionCustom;
    private SGuiFieldKeyGroup moFieldKeyIncotermGroup;
    private SGuiFieldKeyGroup moFieldKeySpotSourceGroup;
    private SGuiFieldKeyGroup moFieldKeySpotDestinyGroup;
    private SGuiFieldKeyGroup moFieldKeyVehicleGroup;
    private SGridPaneForm moGridDestinies;

    private int mnDocumentShipmentType;
    private int mnSpotTypeSource;
    private int mnSpotTypeDestiny;
    private int[] mnPrimaryKeyDps;
    private int[] mnPrimaryKeySourceDiog;

    double mdTotalVolume;
    double mdTotalWeigthGross;
    double mdTotalSubtotal_r;

    /**
     * Creates new form SFormShipment
     */
    public SFormShipment(SGuiClient client, SClientInterface client_xxx, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.LOG_SHIP, SLibConstants.UNDEFINED, title);

        miClient_XXX = client_xxx;

        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel23 = new javax.swing.JPanel();
        jPanel21 = new javax.swing.JPanel();
        jlCompanyBranch = new javax.swing.JLabel();
        moKeyCompanyBranch = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel25 = new javax.swing.JPanel();
        jlShipmentType = new javax.swing.JLabel();
        moKeyShipmentType = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel26 = new javax.swing.JPanel();
        jlDeliveryType = new javax.swing.JLabel();
        moKeyDeliveryType = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel24 = new javax.swing.JPanel();
        jlNumber = new javax.swing.JLabel();
        moTextNumber = new sa.lib.gui.bean.SBeanFieldText();
        jPanel30 = new javax.swing.JPanel();
        jlDate = new javax.swing.JLabel();
        moDateDate = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel39 = new javax.swing.JPanel();
        jlIncoterm = new javax.swing.JLabel();
        moKeyIncoterm = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel27 = new javax.swing.JPanel();
        jlSpotSource = new javax.swing.JLabel();
        moKeySpotSource = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel28 = new javax.swing.JPanel();
        jlSpotDestiny = new javax.swing.JLabel();
        moKeySpotDestiny = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel29 = new javax.swing.JPanel();
        jlModeOfTransportationType = new javax.swing.JLabel();
        moKeyModeOfTransportationType = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel5 = new javax.swing.JPanel();
        jPanel33 = new javax.swing.JPanel();
        jlCarrierType = new javax.swing.JLabel();
        moKeyCarrierType = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel34 = new javax.swing.JPanel();
        jlCarrier = new javax.swing.JLabel();
        moKeyCarrier = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel35 = new javax.swing.JPanel();
        jlVehicleType = new javax.swing.JLabel();
        moKeyVehicleType = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel36 = new javax.swing.JPanel();
        jlVehicle_n = new javax.swing.JLabel();
        moKeyVehicle_n = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel64 = new javax.swing.JPanel();
        jlRateSystem = new javax.swing.JLabel();
        moKeyRateSystem = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel17 = new javax.swing.JPanel();
        moBoolConsolidated = new sa.lib.gui.bean.SBeanFieldBoolean();
        jPanel37 = new javax.swing.JPanel();
        jlDriver = new javax.swing.JLabel();
        moTextDriver = new sa.lib.gui.bean.SBeanFieldText();
        jPanel38 = new javax.swing.JPanel();
        jlPlate = new javax.swing.JLabel();
        moTextPlate = new sa.lib.gui.bean.SBeanFieldText();
        jPanel6 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jPanel31 = new javax.swing.JPanel();
        jlShipmentAuthorizationStatus = new javax.swing.JLabel();
        moTextShipmentAuthorizationStatus = new sa.lib.gui.bean.SBeanFieldText();
        jPanel22 = new javax.swing.JPanel();
        jlOrder_n = new javax.swing.JLabel();
        moTextOrder_n = new sa.lib.gui.bean.SBeanFieldText();
        jPanel32 = new javax.swing.JPanel();
        moBoolBillOfLadingClosed = new sa.lib.gui.bean.SBeanFieldBoolean();
        jPanel8 = new javax.swing.JPanel();
        jPanel55 = new javax.swing.JPanel();
        jlCapacityVolume = new javax.swing.JLabel();
        moDecCapacityVolume = new sa.lib.gui.bean.SBeanCompoundField();
        jPanel57 = new javax.swing.JPanel();
        jlCapacityVolumeUsed = new javax.swing.JLabel();
        moDecCapacityVolumeUsed = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel56 = new javax.swing.JPanel();
        jlCapacityMass = new javax.swing.JLabel();
        moDecCapacityMass = new sa.lib.gui.bean.SBeanCompoundField();
        jPanel58 = new javax.swing.JPanel();
        jlCapacityMassUsed = new javax.swing.JLabel();
        moDecCapacityMassUsed = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel59 = new javax.swing.JPanel();
        jlIndicatorFreight = new javax.swing.JLabel();
        moDecIndicatorFreight = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlIndicatorFreightUnit = new javax.swing.JLabel();
        jPanel60 = new javax.swing.JPanel();
        jlIndicatorCost = new javax.swing.JLabel();
        moCurIndicatorCost = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jPanel4 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jpDestinies = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jPanel65 = new javax.swing.JPanel();
        jlCurrency = new javax.swing.JLabel();
        moTextCurrency = new sa.lib.gui.bean.SBeanFieldText();
        jPanel69 = new javax.swing.JPanel();
        jlCostCy_r = new javax.swing.JLabel();
        moCurCostCy_r = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jPanel67 = new javax.swing.JPanel();
        jlExchangeRate = new javax.swing.JLabel();
        moDecExchangeRate = new sa.lib.gui.bean.SBeanFieldDecimal();
        jbExchangeRate = new javax.swing.JButton();
        jPanel68 = new javax.swing.JPanel();
        jlCost_r = new javax.swing.JLabel();
        moCurCost_r = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jPanel14 = new javax.swing.JPanel();
        jbUpdateRate = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        jPanel66 = new javax.swing.JPanel();
        jlRate = new javax.swing.JLabel();
        moDecRate = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel43 = new javax.swing.JPanel();
        jlExportDeclaration = new javax.swing.JLabel();
        moDecExportDeclaration = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel44 = new javax.swing.JPanel();
        jlLoadingExport = new javax.swing.JLabel();
        moDecLoadingExport = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel45 = new javax.swing.JPanel();
        jlCarriageImportFreight = new javax.swing.JLabel();
        moDecCarriageImportFreight = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel46 = new javax.swing.JPanel();
        jlCarriageExportFreight = new javax.swing.JLabel();
        moDecCarriageExportFreight = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel47 = new javax.swing.JPanel();
        jlCarriageImport = new javax.swing.JLabel();
        moDecCarriageImport = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel48 = new javax.swing.JPanel();
        jlCarriageImportDelay = new javax.swing.JLabel();
        moDecCarriageImportDelay = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel49 = new javax.swing.JPanel();
        jlCarriageExportDelay = new javax.swing.JLabel();
        moDecCarriageExportDelay = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel50 = new javax.swing.JPanel();
        jlUploadingImport = new javax.swing.JLabel();
        moDecUploadingImport = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel51 = new javax.swing.JPanel();
        jlCarriageImportOther = new javax.swing.JLabel();
        moDecCarriageImportOther = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel52 = new javax.swing.JPanel();
        jlCarriageExportOther = new javax.swing.JLabel();
        moDecCarriageExportOther = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel53 = new javax.swing.JPanel();
        jlInsurance = new javax.swing.JLabel();
        moDecInsurance = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel54 = new javax.swing.JPanel();
        jlCustomsImport = new javax.swing.JLabel();
        moDecCustomsImport = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel61 = new javax.swing.JPanel();
        jlUploadingExport = new javax.swing.JLabel();
        moDecUploadingExport = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel62 = new javax.swing.JPanel();
        jlLoadingImport = new javax.swing.JLabel();
        moDecLoadingImport = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel63 = new javax.swing.JPanel();
        jlTariff = new javax.swing.JLabel();
        moDecTariff = new sa.lib.gui.bean.SBeanFieldDecimal();
        jpNotes = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtaNotes = new javax.swing.JTextArea();
        jPanel11 = new javax.swing.JPanel();
        moBoolPrint = new sa.lib.gui.bean.SBeanFieldBoolean();

        jPanel15.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel23.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del embarque:"));
        jPanel23.setLayout(new java.awt.GridLayout(9, 1, 0, 5));

        jPanel21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCompanyBranch.setText("Sucursal:*");
        jlCompanyBranch.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel21.add(jlCompanyBranch);

        moKeyCompanyBranch.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel21.add(moKeyCompanyBranch);

        jPanel23.add(jPanel21);

        jPanel25.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlShipmentType.setText("Tipo embarque:*");
        jlShipmentType.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel25.add(jlShipmentType);

        moKeyShipmentType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel25.add(moKeyShipmentType);

        jPanel23.add(jPanel25);

        jPanel26.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDeliveryType.setText("Tipo entrega:*");
        jlDeliveryType.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel26.add(jlDeliveryType);

        moKeyDeliveryType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel26.add(moKeyDeliveryType);

        jPanel23.add(jPanel26);

        jPanel24.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNumber.setText("Folio:");
        jlNumber.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel24.add(jlNumber);
        jPanel24.add(moTextNumber);

        jPanel23.add(jPanel24);

        jPanel30.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDate.setText("Fecha:*");
        jlDate.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel30.add(jlDate);
        jPanel30.add(moDateDate);

        jPanel23.add(jPanel30);

        jPanel39.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlIncoterm.setText("Entrega (Incoterm):*");
        jlIncoterm.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel39.add(jlIncoterm);

        moKeyIncoterm.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel39.add(moKeyIncoterm);

        jPanel23.add(jPanel39);

        jPanel27.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSpotSource.setText("Lugar origen:*");
        jlSpotSource.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel27.add(jlSpotSource);

        moKeySpotSource.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel27.add(moKeySpotSource);

        jPanel23.add(jPanel27);

        jPanel28.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSpotDestiny.setText("Lugar destino:*");
        jlSpotDestiny.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel28.add(jlSpotDestiny);

        moKeySpotDestiny.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel28.add(moKeySpotDestiny);

        jPanel23.add(jPanel28);

        jPanel29.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlModeOfTransportationType.setText("Tipo modo transp.:*");
        jlModeOfTransportationType.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel29.add(jlModeOfTransportationType);

        moKeyModeOfTransportationType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel29.add(moKeyModeOfTransportationType);

        jPanel23.add(jPanel29);

        jPanel1.add(jPanel23, java.awt.BorderLayout.WEST);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del transportista:"));
        jPanel5.setLayout(new java.awt.GridLayout(9, 1, 0, 5));

        jPanel33.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCarrierType.setText("Tipo transportista:*");
        jlCarrierType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel33.add(jlCarrierType);

        moKeyCarrierType.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel33.add(moKeyCarrierType);

        jPanel5.add(jPanel33);

        jPanel34.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCarrier.setText("Transportista:*");
        jlCarrier.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel34.add(jlCarrier);

        moKeyCarrier.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel34.add(moKeyCarrier);

        jPanel5.add(jPanel34);

        jPanel35.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlVehicleType.setText("Tipo vehículo:*");
        jlVehicleType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel35.add(jlVehicleType);

        moKeyVehicleType.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel35.add(moKeyVehicleType);

        jPanel5.add(jPanel35);

        jPanel36.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlVehicle_n.setText("Vehículo empresa:*");
        jlVehicle_n.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel36.add(jlVehicle_n);

        moKeyVehicle_n.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel36.add(moKeyVehicle_n);

        jPanel5.add(jPanel36);

        jPanel64.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlRateSystem.setText("Tarifa autorizada:*");
        jlRateSystem.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel64.add(jlRateSystem);

        moKeyRateSystem.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel64.add(moKeyRateSystem);

        jPanel5.add(jPanel64);

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        moBoolConsolidated.setText("Consolidado");
        jPanel17.add(moBoolConsolidated);

        jPanel5.add(jPanel17);

        jPanel37.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDriver.setText("Chofer vehículo:*");
        jlDriver.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel37.add(jlDriver);

        moTextDriver.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel37.add(moTextDriver);

        jPanel5.add(jPanel37);

        jPanel38.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPlate.setText("Placas vehículo:*");
        jlPlate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel38.add(jlPlate);
        jPanel38.add(moTextPlate);

        jPanel5.add(jPanel38);

        jPanel1.add(jPanel5, java.awt.BorderLayout.CENTER);

        jPanel6.setLayout(new java.awt.BorderLayout());

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Estado del embarque:"));
        jPanel9.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel31.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlShipmentAuthorizationStatus.setText("Estado autorización:");
        jlShipmentAuthorizationStatus.setPreferredSize(new java.awt.Dimension(130, 23));
        jPanel31.add(jlShipmentAuthorizationStatus);
        jPanel31.add(moTextShipmentAuthorizationStatus);

        jPanel9.add(jPanel31);

        jPanel22.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlOrder_n.setText("Orden de compra:");
        jlOrder_n.setPreferredSize(new java.awt.Dimension(130, 23));
        jPanel22.add(jlOrder_n);
        jPanel22.add(moTextOrder_n);

        jPanel9.add(jPanel22);

        jPanel32.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moBoolBillOfLadingClosed.setText("Facturado");
        jPanel32.add(moBoolBillOfLadingClosed);

        jPanel9.add(jPanel32);

        jPanel6.add(jPanel9, java.awt.BorderLayout.NORTH);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Indicadores:"));
        jPanel8.setLayout(new java.awt.GridLayout(6, 1, 0, 5));

        jPanel55.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCapacityVolume.setText("Cap. vol. vehículo:");
        jlCapacityVolume.setPreferredSize(new java.awt.Dimension(130, 23));
        jPanel55.add(jlCapacityVolume);
        jPanel55.add(moDecCapacityVolume);

        jPanel8.add(jPanel55);

        jPanel57.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCapacityVolumeUsed.setText("Cap. vol. utilizada:");
        jlCapacityVolumeUsed.setPreferredSize(new java.awt.Dimension(130, 23));
        jPanel57.add(jlCapacityVolumeUsed);
        jPanel57.add(moDecCapacityVolumeUsed);

        jPanel8.add(jPanel57);

        jPanel56.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCapacityMass.setText("Cap. masa vehículo: ");
        jlCapacityMass.setPreferredSize(new java.awt.Dimension(130, 23));
        jPanel56.add(jlCapacityMass);
        jPanel56.add(moDecCapacityMass);

        jPanel8.add(jPanel56);

        jPanel58.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCapacityMassUsed.setText("Cap. masa utilizada:");
        jlCapacityMassUsed.setPreferredSize(new java.awt.Dimension(130, 23));
        jPanel58.add(jlCapacityMassUsed);
        jPanel58.add(moDecCapacityMassUsed);

        jPanel8.add(jPanel58);

        jPanel59.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlIndicatorFreight.setText("Participación del flete:");
        jlIndicatorFreight.setPreferredSize(new java.awt.Dimension(130, 23));
        jPanel59.add(jlIndicatorFreight);
        jPanel59.add(moDecIndicatorFreight);

        jlIndicatorFreightUnit.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel59.add(jlIndicatorFreightUnit);

        jPanel8.add(jPanel59);

        jPanel60.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlIndicatorCost.setText("Costo x kilo:");
        jlIndicatorCost.setPreferredSize(new java.awt.Dimension(130, 23));
        jPanel60.add(jlIndicatorCost);
        jPanel60.add(moCurIndicatorCost);

        jPanel8.add(jPanel60);

        jPanel6.add(jPanel8, java.awt.BorderLayout.EAST);

        jPanel1.add(jPanel6, java.awt.BorderLayout.EAST);

        jPanel15.add(jPanel1, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel15, java.awt.BorderLayout.NORTH);

        jPanel4.setLayout(new java.awt.BorderLayout(5, 5));

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Detalle:"));
        jTabbedPane1.setFocusable(false);

        jpDestinies.setFocusable(false);
        jpDestinies.setLayout(new java.awt.BorderLayout());

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Destinos del embarque:"));
        jPanel10.setLayout(new java.awt.BorderLayout());
        jpDestinies.add(jPanel10, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Destinos", jpDestinies);

        jPanel16.setLayout(new java.awt.BorderLayout());

        jPanel13.setLayout(new java.awt.BorderLayout());

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder("Valor del embarque:"));
        jPanel12.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        jPanel65.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCurrency.setText("Moneda:");
        jlCurrency.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel65.add(jlCurrency);
        jPanel65.add(moTextCurrency);

        jPanel12.add(jPanel65);

        jPanel69.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCostCy_r.setText("Total embarque:");
        jlCostCy_r.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel69.add(jlCostCy_r);
        jPanel69.add(moCurCostCy_r);

        jPanel12.add(jPanel69);

        jPanel67.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlExchangeRate.setText("Tipo de cambio:*");
        jlExchangeRate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel67.add(jlExchangeRate);
        jPanel67.add(moDecExchangeRate);

        jbExchangeRate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_action.gif"))); // NOI18N
        jbExchangeRate.setToolTipText("Calcular");
        jbExchangeRate.setFocusable(false);
        jbExchangeRate.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel67.add(jbExchangeRate);

        jPanel12.add(jPanel67);

        jPanel68.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCost_r.setText("Total embarque:");
        jlCost_r.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel68.add(jlCost_r);
        jPanel68.add(moCurCost_r);

        jPanel12.add(jPanel68);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));

        jbUpdateRate.setText("Actualizar tarifa");
        jPanel14.add(jbUpdateRate);

        jPanel12.add(jPanel14);

        jPanel13.add(jPanel12, java.awt.BorderLayout.WEST);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Incoterms:"));
        jPanel7.setLayout(new java.awt.GridLayout(6, 3, 0, 5));
        jPanel7.add(jPanel2);
        jPanel7.add(jPanel18);

        jPanel66.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlRate.setText("Flete autorizado:");
        jlRate.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel66.add(jlRate);
        jPanel66.add(moDecRate);

        jPanel7.add(jPanel66);

        jPanel43.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlExportDeclaration.setText("Declarac. exp. aduana:");
        jlExportDeclaration.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel43.add(jlExportDeclaration);
        jPanel43.add(moDecExportDeclaration);

        jPanel7.add(jPanel43);

        jPanel44.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlLoadingExport.setText("Carga pto. exp.:");
        jlLoadingExport.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel44.add(jlLoadingExport);
        jPanel44.add(moDecLoadingExport);

        jPanel7.add(jPanel44);

        jPanel45.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCarriageImportFreight.setText("Trans. destino flete:");
        jlCarriageImportFreight.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel45.add(jlCarriageImportFreight);
        jPanel45.add(moDecCarriageImportFreight);

        jPanel7.add(jPanel45);

        jPanel46.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCarriageExportFreight.setText("Trans. pto. exp. flete:");
        jlCarriageExportFreight.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel46.add(jlCarriageExportFreight);
        jPanel46.add(moDecCarriageExportFreight);

        jPanel7.add(jPanel46);

        jPanel47.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCarriageImport.setText("Trans. pto. imp. mar/ae:");
        jlCarriageImport.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel47.add(jlCarriageImport);
        jPanel47.add(moDecCarriageImport);

        jPanel7.add(jPanel47);

        jPanel48.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCarriageImportDelay.setText("Trans. destino est.:");
        jlCarriageImportDelay.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel48.add(jlCarriageImportDelay);
        jPanel48.add(moDecCarriageImportDelay);

        jPanel7.add(jPanel48);

        jPanel49.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCarriageExportDelay.setText("Trans. pto. exp. est.:");
        jlCarriageExportDelay.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel49.add(jlCarriageExportDelay);
        jPanel49.add(moDecCarriageExportDelay);

        jPanel7.add(jPanel49);

        jPanel50.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlUploadingImport.setText("Descarga pto. imp.:");
        jlUploadingImport.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel50.add(jlUploadingImport);
        jPanel50.add(moDecUploadingImport);

        jPanel7.add(jPanel50);

        jPanel51.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCarriageImportOther.setText("Trans. destino otros:");
        jlCarriageImportOther.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel51.add(jlCarriageImportOther);
        jPanel51.add(moDecCarriageImportOther);

        jPanel7.add(jPanel51);

        jPanel52.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCarriageExportOther.setText("Trans. pto. exp. otros:");
        jlCarriageExportOther.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel52.add(jlCarriageExportOther);
        jPanel52.add(moDecCarriageExportOther);

        jPanel7.add(jPanel52);

        jPanel53.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlInsurance.setText("Seguro:");
        jlInsurance.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel53.add(jlInsurance);
        jPanel53.add(moDecInsurance);

        jPanel7.add(jPanel53);

        jPanel54.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCustomsImport.setText("Imp. despacho aduana:");
        jlCustomsImport.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel54.add(jlCustomsImport);
        jPanel54.add(moDecCustomsImport);

        jPanel7.add(jPanel54);

        jPanel61.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlUploadingExport.setText("Descarga pto. exp.:");
        jlUploadingExport.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel61.add(jlUploadingExport);
        jPanel61.add(moDecUploadingExport);

        jPanel7.add(jPanel61);

        jPanel62.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlLoadingImport.setText("Carga pto. imp.:");
        jlLoadingImport.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel62.add(jlLoadingImport);
        jPanel62.add(moDecLoadingImport);

        jPanel7.add(jPanel62);

        jPanel63.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTariff.setText("Aranceles:");
        jlTariff.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel63.add(jlTariff);
        jPanel63.add(moDecTariff);

        jPanel7.add(jPanel63);

        jPanel13.add(jPanel7, java.awt.BorderLayout.CENTER);

        jPanel16.add(jPanel13, java.awt.BorderLayout.NORTH);

        jTabbedPane1.addTab("Valor embarque", jPanel16);

        jpNotes.setBorder(javax.swing.BorderFactory.createTitledBorder("Notas:"));
        jpNotes.setFocusable(false);
        jpNotes.setLayout(new java.awt.BorderLayout(5, 0));

        jtaNotes.setColumns(20);
        jtaNotes.setRows(5);
        jScrollPane1.setViewportView(jtaNotes);

        jpNotes.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        moBoolPrint.setText("Imprimir nota");
        jPanel11.add(moBoolPrint);

        jpNotes.add(jPanel11, java.awt.BorderLayout.SOUTH);

        jTabbedPane1.addTab("Notas", jpNotes);

        jPanel4.add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel4, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel33;
    private javax.swing.JPanel jPanel34;
    private javax.swing.JPanel jPanel35;
    private javax.swing.JPanel jPanel36;
    private javax.swing.JPanel jPanel37;
    private javax.swing.JPanel jPanel38;
    private javax.swing.JPanel jPanel39;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel43;
    private javax.swing.JPanel jPanel44;
    private javax.swing.JPanel jPanel45;
    private javax.swing.JPanel jPanel46;
    private javax.swing.JPanel jPanel47;
    private javax.swing.JPanel jPanel48;
    private javax.swing.JPanel jPanel49;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel50;
    private javax.swing.JPanel jPanel51;
    private javax.swing.JPanel jPanel52;
    private javax.swing.JPanel jPanel53;
    private javax.swing.JPanel jPanel54;
    private javax.swing.JPanel jPanel55;
    private javax.swing.JPanel jPanel56;
    private javax.swing.JPanel jPanel57;
    private javax.swing.JPanel jPanel58;
    private javax.swing.JPanel jPanel59;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel60;
    private javax.swing.JPanel jPanel61;
    private javax.swing.JPanel jPanel62;
    private javax.swing.JPanel jPanel63;
    private javax.swing.JPanel jPanel64;
    private javax.swing.JPanel jPanel65;
    private javax.swing.JPanel jPanel66;
    private javax.swing.JPanel jPanel67;
    private javax.swing.JPanel jPanel68;
    private javax.swing.JPanel jPanel69;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton jbExchangeRate;
    private javax.swing.JButton jbUpdateRate;
    private javax.swing.JLabel jlCapacityMass;
    private javax.swing.JLabel jlCapacityMassUsed;
    private javax.swing.JLabel jlCapacityVolume;
    private javax.swing.JLabel jlCapacityVolumeUsed;
    private javax.swing.JLabel jlCarriageExportDelay;
    private javax.swing.JLabel jlCarriageExportFreight;
    private javax.swing.JLabel jlCarriageExportOther;
    private javax.swing.JLabel jlCarriageImport;
    private javax.swing.JLabel jlCarriageImportDelay;
    private javax.swing.JLabel jlCarriageImportFreight;
    private javax.swing.JLabel jlCarriageImportOther;
    private javax.swing.JLabel jlCarrier;
    private javax.swing.JLabel jlCarrierType;
    private javax.swing.JLabel jlCompanyBranch;
    private javax.swing.JLabel jlCostCy_r;
    private javax.swing.JLabel jlCost_r;
    private javax.swing.JLabel jlCurrency;
    private javax.swing.JLabel jlCustomsImport;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlDeliveryType;
    private javax.swing.JLabel jlDriver;
    private javax.swing.JLabel jlExchangeRate;
    private javax.swing.JLabel jlExportDeclaration;
    private javax.swing.JLabel jlIncoterm;
    private javax.swing.JLabel jlIndicatorCost;
    private javax.swing.JLabel jlIndicatorFreight;
    private javax.swing.JLabel jlIndicatorFreightUnit;
    private javax.swing.JLabel jlInsurance;
    private javax.swing.JLabel jlLoadingExport;
    private javax.swing.JLabel jlLoadingImport;
    private javax.swing.JLabel jlModeOfTransportationType;
    private javax.swing.JLabel jlNumber;
    private javax.swing.JLabel jlOrder_n;
    private javax.swing.JLabel jlPlate;
    private javax.swing.JLabel jlRate;
    private javax.swing.JLabel jlRateSystem;
    private javax.swing.JLabel jlShipmentAuthorizationStatus;
    private javax.swing.JLabel jlShipmentType;
    private javax.swing.JLabel jlSpotDestiny;
    private javax.swing.JLabel jlSpotSource;
    private javax.swing.JLabel jlTariff;
    private javax.swing.JLabel jlUploadingExport;
    private javax.swing.JLabel jlUploadingImport;
    private javax.swing.JLabel jlVehicleType;
    private javax.swing.JLabel jlVehicle_n;
    private javax.swing.JPanel jpDestinies;
    private javax.swing.JPanel jpNotes;
    private javax.swing.JTextArea jtaNotes;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolBillOfLadingClosed;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolConsolidated;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolPrint;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurCostCy_r;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurCost_r;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurIndicatorCost;
    private sa.lib.gui.bean.SBeanFieldDate moDateDate;
    private sa.lib.gui.bean.SBeanCompoundField moDecCapacityMass;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecCapacityMassUsed;
    private sa.lib.gui.bean.SBeanCompoundField moDecCapacityVolume;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecCapacityVolumeUsed;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecCarriageExportDelay;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecCarriageExportFreight;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecCarriageExportOther;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecCarriageImport;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecCarriageImportDelay;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecCarriageImportFreight;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecCarriageImportOther;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecCustomsImport;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecExchangeRate;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecExportDeclaration;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecIndicatorFreight;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecInsurance;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecLoadingExport;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecLoadingImport;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecRate;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecTariff;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecUploadingExport;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecUploadingImport;
    private sa.lib.gui.bean.SBeanFieldKey moKeyCarrier;
    private sa.lib.gui.bean.SBeanFieldKey moKeyCarrierType;
    private sa.lib.gui.bean.SBeanFieldKey moKeyCompanyBranch;
    private sa.lib.gui.bean.SBeanFieldKey moKeyDeliveryType;
    private sa.lib.gui.bean.SBeanFieldKey moKeyIncoterm;
    private sa.lib.gui.bean.SBeanFieldKey moKeyModeOfTransportationType;
    private sa.lib.gui.bean.SBeanFieldKey moKeyRateSystem;
    private sa.lib.gui.bean.SBeanFieldKey moKeyShipmentType;
    private sa.lib.gui.bean.SBeanFieldKey moKeySpotDestiny;
    private sa.lib.gui.bean.SBeanFieldKey moKeySpotSource;
    private sa.lib.gui.bean.SBeanFieldKey moKeyVehicleType;
    private sa.lib.gui.bean.SBeanFieldKey moKeyVehicle_n;
    private sa.lib.gui.bean.SBeanFieldText moTextCurrency;
    private sa.lib.gui.bean.SBeanFieldText moTextDriver;
    private sa.lib.gui.bean.SBeanFieldText moTextNumber;
    private sa.lib.gui.bean.SBeanFieldText moTextOrder_n;
    private sa.lib.gui.bean.SBeanFieldText moTextPlate;
    private sa.lib.gui.bean.SBeanFieldText moTextShipmentAuthorizationStatus;
    // End of variables declaration//GEN-END:variables

    /*
    * Private methods:
    */

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 1024, 640);

        mnDocumentShipmentType = 0;
        mnSpotTypeSource = 0;
        mnSpotTypeDestiny = 0;
        mdTotalVolume = 0;
        mdTotalWeigthGross = 0;
        mdTotalSubtotal_r = 0;

        mnPrimaryKeyDps = null;
        mnPrimaryKeySourceDiog = null;
        moRate = null;

        moFormDialogExchangeRate = new SFormDialogExchangeRate(miClient, "Tipos de cambio");

        moSessionCustom = (SSessionCustom) miClient.getSession().getSessionCustom();
        moFieldKeyIncotermGroup = new SGuiFieldKeyGroup(miClient);
        moFieldKeySpotSourceGroup = new SGuiFieldKeyGroup(miClient);
        moFieldKeySpotDestinyGroup = new SGuiFieldKeyGroup(miClient);
        moFieldKeyVehicleGroup = new SGuiFieldKeyGroup(miClient);

        moKeyCompanyBranch.setKeySettings(miClient, SGuiUtils.getLabelName(jlCompanyBranch.getText()), true);
        moKeyShipmentType.setKeySettings(miClient, SGuiUtils.getLabelName(jlShipmentType.getText()), true);
        moKeyDeliveryType.setKeySettings(miClient, SGuiUtils.getLabelName(jlDeliveryType.getText()), true);
        moKeyIncoterm.setKeySettings(miClient, SGuiUtils.getLabelName(jlIncoterm.getText()), true);
        moKeySpotSource.setKeySettings(miClient, SGuiUtils.getLabelName(jlSpotSource.getText()), true);
        moKeySpotDestiny.setKeySettings(miClient, SGuiUtils.getLabelName(jlSpotDestiny.getText()), true);
        moKeyModeOfTransportationType.setKeySettings(miClient, SGuiUtils.getLabelName(jlModeOfTransportationType.getText()), true);
        moDateDate.setDateSettings(miClient, SGuiUtils.getLabelName(jlDate.getText()), true);
        moTextNumber.setTextSettings(SGuiUtils.getLabelName(jlNumber.getText()), 15);
        moKeyCarrierType.setKeySettings(miClient, SGuiUtils.getLabelName(jlCarrierType.getText()), true);
        moKeyCarrier.setKeySettings(miClient, SGuiUtils.getLabelName(jlCarrier.getText()), true);
        moKeyVehicleType.setKeySettings(miClient, SGuiUtils.getLabelName(jlVehicleType.getText()), true);
        moKeyVehicle_n.setKeySettings(miClient, SGuiUtils.getLabelName(jlVehicle_n.getText()), true);
        moDecCapacityVolume.setCompoundFieldSettings(miClient);
        moDecCapacityVolume.getField().setDecimalSettings(SGuiUtils.getLabelName(jlCapacityVolume.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, true);
        moDecCapacityVolume.setCompoundText((String) miClient.getSession().readField(SModConsts.ITMU_TP_UNIT, new int[] { SModSysConsts.ITMU_TP_UNIT_VOL }, SDbUnitType.FIELD_CODE));
        moDecCapacityMass.setCompoundFieldSettings(miClient);
        moDecCapacityMass.getField().setDecimalSettings(SGuiUtils.getLabelName(jlCapacityMass.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, true);
        moDecCapacityMass.setCompoundText((String) miClient.getSession().readField(SModConsts.ITMU_TP_UNIT, new int[] { SModSysConsts.ITMU_TP_UNIT_MASS }, SDbUnitType.FIELD_CODE));
        moDecRate.setDecimalSettings(SGuiUtils.getLabelName(jlRate.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moTextDriver.setTextSettings(SGuiUtils.getLabelName(jlDriver.getText()), 50);
        moTextPlate.setTextSettings(SGuiUtils.getLabelName(jlPlate.getText()), 15);
        moKeyRateSystem.setKeySettings(miClient, SGuiUtils.getLabelName(jlRateSystem.getText()), false);
        moTextShipmentAuthorizationStatus.setTextSettings(SGuiUtils.getLabelName(jlShipmentAuthorizationStatus.getText()), 20);
        moTextOrder_n.setTextSettings(SGuiUtils.getLabelName(jlOrder_n.getText()), 20);
        moDecCapacityVolumeUsed.setDecimalSettings(SGuiUtils.getLabelName(jlCapacityVolumeUsed.getText()), SGuiConsts.GUI_TYPE_DEC_PER_DISC, false);
        moDecCapacityMassUsed.setDecimalSettings(SGuiUtils.getLabelName(jlCapacityMassUsed.getText()), SGuiConsts.GUI_TYPE_DEC_PER_DISC, false);
        moDecIndicatorFreight.setDecimalSettings(SGuiUtils.getLabelName(jlIndicatorFreight.getText()), SGuiConsts.GUI_TYPE_DEC_PER_DISC, false);
        moCurIndicatorCost.setCompoundFieldSettings(miClient);
        moCurIndicatorCost.getField().setDecimalSettings(SGuiUtils.getLabelName(jlIndicatorCost.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecExchangeRate.setDecimalSettings(SGuiUtils.getLabelName(jlExchangeRate.getText()), SGuiConsts.GUI_TYPE_DEC_EXC_RATE, true);
        moDecExchangeRate.setTab(1);
        moCurCost_r.setCompoundFieldSettings(miClient);
        moCurCost_r.getField().setDecimalSettings(SGuiUtils.getLabelName(jlCost_r.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moCurCostCy_r.setCompoundFieldSettings(miClient);
        moCurCostCy_r.getField().setDecimalSettings(SGuiUtils.getLabelName(jlCostCy_r.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecExportDeclaration.setDecimalSettings(SGuiUtils.getLabelName(jlExportDeclaration.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecCarriageExportFreight.setDecimalSettings(SGuiUtils.getLabelName(jlCarriageExportFreight.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecCarriageExportDelay.setDecimalSettings(SGuiUtils.getLabelName(jlCarriageExportDelay.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecCarriageExportOther.setDecimalSettings(SGuiUtils.getLabelName(jlCarriageExportOther.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecUploadingExport.setDecimalSettings(SGuiUtils.getLabelName(jlUploadingExport.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecLoadingExport.setDecimalSettings(SGuiUtils.getLabelName(jlLoadingExport.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecCarriageImport.setDecimalSettings(SGuiUtils.getLabelName(jlCarriageImport.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecUploadingImport.setDecimalSettings(SGuiUtils.getLabelName(jlUploadingImport.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecInsurance.setDecimalSettings(SGuiUtils.getLabelName(jlInsurance.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecLoadingImport.setDecimalSettings(SGuiUtils.getLabelName(jlLoadingImport.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecCarriageImportFreight.setDecimalSettings(SGuiUtils.getLabelName(jlCarriageImportFreight.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecCarriageImportDelay.setDecimalSettings(SGuiUtils.getLabelName(jlCarriageImportDelay.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecCarriageImportOther.setDecimalSettings(SGuiUtils.getLabelName(jlCarriageImportOther.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecCustomsImport.setDecimalSettings(SGuiUtils.getLabelName(jlCustomsImport.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecTariff.setDecimalSettings(SGuiUtils.getLabelName(jlTariff.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moBoolConsolidated.setBooleanSettings(SGuiUtils.getLabelName(moBoolConsolidated.getText()), false);
        moBoolBillOfLadingClosed.setBooleanSettings(SGuiUtils.getLabelName(moBoolBillOfLadingClosed.getText()), false);
        moBoolPrint.setBooleanSettings(SGuiUtils.getLabelName(moBoolPrint.getText()), false);

        moFields.addField(moKeyCompanyBranch);
        moFields.addField(moKeyShipmentType);
        moFields.addField(moKeyDeliveryType);
        moFields.addField(moTextNumber);
        moFields.addField(moDateDate);
        moFields.addField(moKeyIncoterm);
        moFields.addField(moKeySpotSource);
        moFields.addField(moKeySpotDestiny);
        moFields.addField(moKeyModeOfTransportationType);
        moFields.addField(moKeyCarrierType);
        moFields.addField(moKeyCarrier);
        moFields.addField(moKeyVehicleType);
        moFields.addField(moKeyVehicle_n);
        moFields.addField(moKeyRateSystem);
        moFields.addField(moBoolConsolidated);
        moFields.addField(moTextDriver);
        moFields.addField(moTextPlate);
        moFields.addField(moTextShipmentAuthorizationStatus);
        moFields.addField(moTextOrder_n);
        moFields.addField(moBoolBillOfLadingClosed);
        moFields.addField(moDecCapacityVolume.getField());
        moFields.addField(moDecCapacityVolumeUsed);
        moFields.addField(moDecCapacityMass.getField());
        moFields.addField(moDecCapacityMassUsed);
        moFields.addField(moDecIndicatorFreight);
        moFields.addField(moCurIndicatorCost.getField());
        moFields.addField(moTextCurrency);
        moFields.addField(moCurCost_r.getField());
        moFields.addField(moDecExchangeRate);
        moFields.addField(moCurCostCy_r.getField());
        moFields.addField(moDecExportDeclaration);
        moFields.addField(moDecCarriageExportFreight);
        moFields.addField(moDecCarriageExportDelay);
        moFields.addField(moDecCarriageExportOther);
        moFields.addField(moDecUploadingExport);
        moFields.addField(moDecLoadingExport);
        moFields.addField(moDecCarriageImport);
        moFields.addField(moDecUploadingImport);
        moFields.addField(moDecInsurance);
        moFields.addField(moDecLoadingImport);
        moFields.addField(moDecRate);
        moFields.addField(moDecCarriageImportFreight);
        moFields.addField(moDecCarriageImportDelay);
        moFields.addField(moDecCarriageImportOther);
        moFields.addField(moDecCustomsImport);
        moFields.addField(moDecTariff);
        moFields.addField(moBoolPrint);

        moFields.setFormButton(jbSave);

        moGridDestinies = new SGridPaneForm(miClient, SModConsts.LOG_SHIP_DEST, SLibConsts.UNDEFINED, "Destinos") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(true, true, true);
            }

            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                int col = 0;
                ArrayList<SGridColumnForm> gridColumnsForm = new ArrayList<>();
                SGridColumnForm[] columns = new SGridColumnForm[15];

                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CAT, "Tipo doc emb");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CAT, "Tipo destino");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CAT, "Destino");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_M, "Cliente");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CAT, "Cliente clave");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_M, "Cliente sucursal");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_M, "Cliente domicilio ent");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_M, "Mov inv sucursal");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_M, "Mov inv almacén");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DATE, "Fecha entrega");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DATE, "Fecha entrega real");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CAT, "Cita folio");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DATE_DATETIME, "Cita fecha-hora");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_M, "Cita contacto");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_M, "Entregado");

                gridColumnsForm.addAll(Arrays.asList((SGridColumnForm[]) columns));

                return gridColumnsForm;
            }

            @Override
            public void actionRowNew() {
                SGuiParams params = new SGuiParams();
                SParamsShipment paramsShipment = new SParamsShipment();

                if (moKeyShipmentType.getSelectedIndex() <= 0) {
                    miClient.showMsgBoxInformation(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlShipmentType) + "'.");
                    moKeyShipmentType.requestFocus();
                }
                else if (mnSpotTypeSource == SLibConsts.UNDEFINED && mnPrimaryKeyDps == null && mnPrimaryKeySourceDiog == null) {
                    miClient.showMsgBoxInformation(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlSpotSource) + "'.");
                    moKeySpotSource.requestFocus();
                }
                else if (mnSpotTypeDestiny == SLibConsts.UNDEFINED && mnPrimaryKeyDps == null && mnPrimaryKeySourceDiog == null) {
                    miClient.showMsgBoxInformation(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlSpotDestiny) + "'.");
                    moKeySpotDestiny.requestFocus();
                }
                else {

                    //params.getParamsMap().put(SModConsts.LOGS_TP_DOC_SHIP, mnShipmentDocumentType);

                    if (mnDocumentShipmentType == SLibConsts.UNDEFINED) {
                        mnDocumentShipmentType = SModSysConsts.LOGS_TP_DOC_SHIP_DPS;
                    }

                    paramsShipment.setDate(moDateDate.getValue());
                    paramsShipment.setSave(jbSave.isEnabled());
                    paramsShipment.setFkShipmentTypeId(moKeyShipmentType.getValue()[0]);
                    paramsShipment.setFkDeliveryTypeId(moKeyDeliveryType.getValue()[0]);
                    paramsShipment.setFkDocShipmentTypeId(mnDocumentShipmentType);

                    //if (moKeyShipmentType.getValue()[0] == SModSysConsts.LOGS_TP_SHIP_REC) {
                        if (moKeySpotDestiny.getSelectedIndex() > 0) {
                            //params.getParamsMap().put(SModConsts.LOGS_TP_SPOT, new int[] { mnSpotTypeDestiny, moKeySpotDestiny.getValue()[0] });
                            paramsShipment.setFkSpotTypeId(mnSpotTypeDestiny);
                            paramsShipment.setFkSpotId(moKeySpotDestiny.getValue()[0]);
                        }
                    /*}
                    else {
                        if (moKeySpotSource.getSelectedIndex() > 0) {
                            params.getParamsMap().put(SModConsts.LOGS_TP_SPOT, new int[] { mnSpotTypeSource, moKeySpotSource.getValue()[0] });
                        }
                    }*/

                    if (mnPrimaryKeyDps != null) {
                        paramsShipment.setFkDpsYearId(mnPrimaryKeyDps[0]);
                        paramsShipment.setFkDpsDocId(mnPrimaryKeyDps[1]);
                    }
                    else if (mnPrimaryKeySourceDiog != null) {
                        paramsShipment.setFkDiogYearId(mnPrimaryKeySourceDiog[0]);
                        paramsShipment.setFkDiogDocId(mnPrimaryKeySourceDiog[1]);
                    }
                    else {
                        paramsShipment.setFkShipmentCobId(moKeyCompanyBranch.getValue()[0]);
                    }

                    switch (mnDocumentShipmentType) {
                        case SModSysConsts.LOGS_TP_DOC_SHIP_DPS:
                            params.getParamsMap().put(SModConsts.LOGX_SHIP_DPS, paramsShipment);
                            break;

                        case SModSysConsts.LOGS_TP_DOC_SHIP_IOG:
                            params.getParamsMap().put(SModConsts.LOGX_SHIP_DIOG, paramsShipment);
                            break;

                        default:
                    }

                    moFormParams = params;
                    super.actionRowNew();
                    assignCompanyBranch();
                }
            }

            @Override
            public void actionRowEdit() {
                SGuiParams params = new SGuiParams();
                SParamsShipment paramsShipment = new SParamsShipment();

                if (jtTable.getSelectedRowCount() != 1) {
                    miClient.showMsgBoxInformation(SGridConsts.MSG_SELECT_ROW);
                }
                else if (moKeyShipmentType.getSelectedIndex() <= 0) {
                    miClient.showMsgBoxInformation(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlShipmentType) + "'.");
                    moKeyShipmentType.requestFocus();
                }
                else if (mnSpotTypeDestiny == SLibConsts.UNDEFINED) {
                    miClient.showMsgBoxInformation(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlSpotDestiny) + "'.");
                    moKeySpotDestiny.requestFocus();
                }
                else {

                    if (mnDocumentShipmentType == SLibConsts.UNDEFINED) {
                        mnDocumentShipmentType = SModSysConsts.LOGS_TP_DOC_SHIP_DPS;
                    }

                    paramsShipment.setDate(moDateDate.getValue());
                    paramsShipment.setSave(jbSave.isEnabled());
                    paramsShipment.setFkShipmentTypeId(moKeyShipmentType.getValue()[0]);
                    paramsShipment.setFkDeliveryTypeId(moKeyDeliveryType.getValue()[0]);
                    paramsShipment.setFkDocShipmentTypeId(mnDocumentShipmentType);
                    paramsShipment.setFkShipmentCobId(moKeyCompanyBranch.getValue()[0]);

                    if (moKeySpotDestiny.getSelectedIndex() > 0) {

                        paramsShipment.setFkSpotTypeId(mnSpotTypeDestiny);
                        paramsShipment.setFkSpotId(moKeySpotDestiny.getValue()[0]);
                    }

                    switch (mnDocumentShipmentType) {
                        case SModSysConsts.LOGS_TP_DOC_SHIP_DPS:
                            params.getParamsMap().put(SModConsts.LOGX_SHIP_DPS, paramsShipment);
                            break;

                        case SModSysConsts.LOGS_TP_DOC_SHIP_IOG:
                            params.getParamsMap().put(SModConsts.LOGX_SHIP_DIOG, paramsShipment);
                            break;

                        default:
                    }

                    moFormParams = params;
                    super.actionRowEdit();
                    actionComputeIndicatorValues();
                }
            }

            @Override
            public void actionRowDelete() {

                if (jtTable.getSelectedRowCount() != 1) {
                    miClient.showMsgBoxInformation(SGridConsts.MSG_SELECT_ROW);
                }
                else {
                    SGridRow gridRow = moGridDestinies.getSelectedGridRow(); //getGridRows().get(moGridStockDays.getTable().getSelectedRow());

                    if (gridRow.isRowSystem()) {
                        miClient.showMsgBoxWarning(SDbConsts.MSG_REG_ + gridRow.getRowName() + SDbConsts.MSG_REG_IS_SYSTEM);
                    }
                    else if (!gridRow.isRowDeletable()) {
                        miClient.showMsgBoxWarning(SDbConsts.MSG_REG_ + gridRow.getRowName() + SDbConsts.MSG_REG_NON_DELETABLE);
                    }
                    else {
                        super.actionRowDelete();
                        actionComputeIndicatorValues();
                    }
                }
            }
        };

        //mvFormGrids.add(moGridDestinies);
        moFormDestiny = new SFormShipmentDestiny(miClient, "Destino");
        moGridDestinies.setForm(moFormDestiny);
        moGridDestinies.setPaneFormOwner(this);


        jPanel10.add(moGridDestinies, BorderLayout.CENTER);
    }

    private void assignCompanyBranch() {
        SDataDps dps = null;
        SDataDiog diog = null;

        if (mnPrimaryKeyDps != null) {

            dps = new SDataDps();
            dps.read(mnPrimaryKeyDps, miClient.getSession().getStatement());
            moKeyCompanyBranch.setValue(new int[] { dps.getFkCompanyBranchId() } );
            mnPrimaryKeyDps = null;
        }
        else if (mnPrimaryKeySourceDiog != null) {

            diog = new SDataDiog();
            diog.read(mnPrimaryKeySourceDiog, miClient.getSession().getStatement());
            moKeyCompanyBranch.setValue(new int[] { diog.getFkCompanyBranchId() } );
            mnPrimaryKeySourceDiog = null;
        }

        actionComputeIndicatorValues();
    }

    private void enabledFields(final boolean enabled) {
        moKeyCompanyBranch.setEnabled(false);
        moKeyShipmentType.setEnabled(false);
        moKeyDeliveryType.setEnabled(false);
        moTextNumber.setEditable(enabled);
        moDecCapacityVolume.setEditable(enabled);
        moDecCapacityMass.setEditable(enabled);
        moTextShipmentAuthorizationStatus.setEditable(enabled);
        moTextOrder_n.setEditable(enabled);
        moBoolBillOfLadingClosed.setEnabled(enabled);
        moDecCapacityVolumeUsed.setEditable(enabled);
        moDecCapacityMassUsed.setEditable(enabled);
        moDecIndicatorFreight.setEditable(enabled);
        moCurIndicatorCost.setEditable(enabled);
        moTextCurrency.setEditable(enabled);
        moCurCost_r.setEditable(enabled);
        moCurCostCy_r.setEditable(enabled);
        moDecRate.setEditable(enabled);
        moBoolConsolidated.setEnabled(enabled);
    }

    private void actionEnabledFieldsIncoterms() {

        moKeyModeOfTransportationType.setEnabled(true);
        if (moKeyDeliveryType.getSelectedIndex() > 0 && moKeyIncoterm.getSelectedIndex() > 0) {
            if (moKeyDeliveryType.getValue()[0] == SModSysConsts.LOGS_TP_DLY_DOM) {

                moDecExportDeclaration.setEditable(false);
                moDecCarriageExportFreight.setEditable(false);
                moDecCarriageExportDelay.setEditable(false);
                moDecCarriageExportOther.setEditable(false);
                moDecUploadingExport.setEditable(false);
                moDecLoadingExport.setEditable(false);
                moDecCarriageImport.setEditable(false);
                moDecUploadingImport.setEditable(true);
                moDecInsurance.setEditable(true);
                moDecLoadingImport.setEditable(false);
                moDecCarriageImportFreight.setEditable(true);
                moDecCarriageImportDelay.setEditable(true);
                moDecCarriageImportOther.setEditable(true);
                moDecCustomsImport.setEditable(false);
                moDecTariff.setEditable(false);
            }
            else {
                switch (moKeyIncoterm.getValue()[0]) {

                    case SModSysConsts.LOGS_INC_NA:
                    case SModSysConsts.LOGS_INC_EXW:

                        moDecExportDeclaration.setEditable(false);
                        moDecCarriageExportFreight.setEditable(false);
                        moDecCarriageExportDelay.setEditable(false);
                        moDecCarriageExportOther.setEditable(false);
                        moDecUploadingExport.setEditable(false);
                        moDecLoadingExport.setEditable(false);
                        moDecCarriageImport.setEditable(false);
                        moDecUploadingImport.setEditable(false);
                        moDecInsurance.setEditable(false);
                        moDecLoadingImport.setEditable(false);
                        moDecCarriageImportFreight.setEditable(false);
                        moDecCarriageImportDelay.setEditable(false);
                        moDecCarriageImportOther.setEditable(false);
                        moDecCustomsImport.setEditable(false);
                        moDecTariff.setEditable(false);

                        if (moKeyShipmentType.getValue()[0] == SModSysConsts.LOGS_TP_SHIP_REC) {
                            miClient.getSession().populateCatalogue(moKeySpotSource, SModConsts.LOGU_SPOT, moKeyDeliveryType.getValue()[0],
                                    new SGuiParams(new int[] { SModSysConsts.LOGS_TP_SPOT_PLA }));
                        }

                        break;

                    case SModSysConsts.LOGS_INC_FCA:

                        moDecExportDeclaration.setEditable(true);
                        moDecCarriageExportFreight.setEditable(false);
                        moDecCarriageExportDelay.setEditable(false);
                        moDecCarriageExportOther.setEditable(false);
                        moDecUploadingExport.setEditable(false);
                        moDecLoadingExport.setEditable(false);
                        moDecCarriageImport.setEditable(false);
                        moDecUploadingImport.setEditable(false);
                        moDecInsurance.setEditable(false);
                        moDecLoadingImport.setEditable(false);
                        moDecCarriageImportFreight.setEditable(false);
                        moDecCarriageImportDelay.setEditable(false);
                        moDecCarriageImportOther.setEditable(false);
                        moDecCustomsImport.setEditable(false);
                        moDecTariff.setEditable(false);

                        if (moKeyShipmentType.getValue()[0] == SModSysConsts.LOGS_TP_SHIP_REC) {
                            miClient.getSession().populateCatalogue(moKeySpotSource, SModConsts.LOGU_SPOT, moKeyDeliveryType.getValue()[0],
                                    new SGuiParams(new int[] { SModSysConsts.LOGS_TP_SPOT_PLA }));
                        }
                        break;

                    case SModSysConsts.LOGS_INC_CPT:
                    case SModSysConsts.LOGS_INC_CIP:
                    case SModSysConsts.LOGS_INC_DAT:

                        moDecExportDeclaration.setEditable(true);
                        moDecCarriageExportFreight.setEditable(true);
                        moDecCarriageExportDelay.setEditable(true);
                        moDecCarriageExportOther.setEditable(true);
                        moDecUploadingExport.setEditable(true);
                        moDecLoadingExport.setEditable(true);
                        moDecCarriageImport.setEditable(true);
                        moDecUploadingImport.setEditable(true);

                        if (moKeyIncoterm.getValue()[0] == SModSysConsts.LOGS_INC_CIP) {
                            moDecInsurance.setEditable(true);
                        }
                        else {
                            moDecInsurance.setEditable(false);
                        }

                        moDecLoadingImport.setEditable(true);
                        moDecCarriageImportFreight.setEditable(true);
                        moDecCarriageImportDelay.setEditable(true);
                        moDecCarriageImportOther.setEditable(true);
                        moDecCustomsImport.setEditable(false);
                        moDecTariff.setEditable(false);

                        if (moKeyShipmentType.getValue()[0] == SModSysConsts.LOGS_TP_SHIP_SHI) {
                            if (moKeyIncoterm.getValue()[0] != SModSysConsts.LOGS_INC_DAT) {
                                miClient.getSession().populateCatalogue(moKeySpotDestiny, SModConsts.LOGU_SPOT, moKeyDeliveryType.getValue()[0],
                                    new SGuiParams(new int[] { SModSysConsts.LOGS_TP_SPOT_PLA }));
                            }
                            else {
                                miClient.getSession().populateCatalogue(moKeySpotDestiny, SModConsts.LOGU_SPOT, moKeyDeliveryType.getValue()[0],
                                    new SGuiParams(new int[] { SModSysConsts.LOGS_TP_SPOT_PLA, SModSysConsts.LOGS_TP_SPOT_TER }));
                            }
                        }
                        break;

                    case SModSysConsts.LOGS_INC_DAP:
                    case SModSysConsts.LOGS_INC_DAF:

                        moDecExportDeclaration.setEditable(true);
                        moDecCarriageExportFreight.setEditable(true);
                        moDecCarriageExportDelay.setEditable(true);
                        moDecCarriageExportOther.setEditable(true);
                        moDecUploadingExport.setEditable(true);
                        moDecLoadingExport.setEditable(true);
                        moDecCarriageImport.setEditable(true);
                        moDecUploadingImport.setEditable(true);
                        moDecInsurance.setEditable(false);
                        moDecLoadingImport.setEditable(true);
                        moDecCarriageImportFreight.setEditable(true);
                        moDecCarriageImportDelay.setEditable(true);
                        moDecCarriageImportOther.setEditable(true);
                        moDecCustomsImport.setEditable(true);
                        moDecTariff.setEditable(false);

                        if (moKeyShipmentType.getValue()[0] == SModSysConsts.LOGS_TP_SHIP_SHI) {
                            miClient.getSession().populateCatalogue(moKeySpotDestiny, SModConsts.LOGU_SPOT, moKeyDeliveryType.getValue()[0],
                                    new SGuiParams(new int[] { SModSysConsts.LOGS_TP_SPOT_PLA }));
                        }
                        break;

                    case SModSysConsts.LOGS_INC_DDU:
                    case SModSysConsts.LOGS_INC_DDP:

                        moDecExportDeclaration.setEditable(true);
                        moDecCarriageExportFreight.setEditable(true);
                        moDecCarriageExportDelay.setEditable(true);
                        moDecCarriageExportOther.setEditable(true);
                        moDecUploadingExport.setEditable(true);
                        moDecLoadingExport.setEditable(true);
                        moDecCarriageImport.setEditable(true);
                        moDecUploadingImport.setEditable(true);
                        moDecInsurance.setEditable(false);
                        moDecLoadingImport.setEditable(true);
                        moDecCarriageImportFreight.setEditable(true);
                        moDecCarriageImportDelay.setEditable(true);
                        moDecCarriageImportOther.setEditable(true);
                        moDecCustomsImport.setEditable(true);
                        moDecTariff.setEditable(true);

                        if (moKeyShipmentType.getValue()[0] == SModSysConsts.LOGS_TP_SHIP_SHI) {
                            miClient.getSession().populateCatalogue(moKeySpotDestiny, SModConsts.LOGU_SPOT, moKeyDeliveryType.getValue()[0],
                                    new SGuiParams(new int[] { SModSysConsts.LOGS_TP_SPOT_PLA }));
                        }
                        break;

                    case SModSysConsts.LOGS_INC_FAS:

                        moDecExportDeclaration.setEditable(true);
                        moDecCarriageExportFreight.setEditable(true);
                        moDecCarriageExportDelay.setEditable(true);
                        moDecCarriageExportOther.setEditable(true);
                        moDecUploadingExport.setEditable(true);
                        moDecLoadingExport.setEditable(false);
                        moDecCarriageImport.setEditable(false);
                        moDecUploadingImport.setEditable(false);
                        moDecInsurance.setEditable(false);
                        moDecLoadingImport.setEditable(false);
                        moDecCarriageImportFreight.setEditable(false);
                        moDecCarriageImportDelay.setEditable(false);
                        moDecCarriageImportOther.setEditable(false);
                        moDecCustomsImport.setEditable(false);
                        moDecTariff.setEditable(false);

                        if (moKeyShipmentType.getValue()[0] == SModSysConsts.LOGS_TP_SHIP_SHI) {
                            miClient.getSession().populateCatalogue(moKeySpotDestiny, SModConsts.LOGU_SPOT, moKeyDeliveryType.getValue()[0],
                                    new SGuiParams(new int[] { SModSysConsts.LOGS_TP_SPOT_POR }));
                        }
                        else if (moKeyShipmentType.getValue()[0] == SModSysConsts.LOGS_TP_SHIP_REC) {
                            miClient.getSession().populateCatalogue(moKeySpotSource, SModConsts.LOGU_SPOT, moKeyDeliveryType.getValue()[0],
                                    new SGuiParams(new int[] { SModSysConsts.LOGS_TP_SPOT_POR }));
                        }

                        moKeyModeOfTransportationType.setValue(new int[] { SModSysConsts.LOGS_TP_MOT_SEA });
                        moKeyModeOfTransportationType.setEnabled(false);
                        break;

                    case SModSysConsts.LOGS_INC_FOB:
                    case SModSysConsts.LOGS_INC_DES:
                    case SModSysConsts.LOGS_INC_DEQ:

                        moDecExportDeclaration.setEditable(true);
                        moDecCarriageExportFreight.setEditable(true);
                        moDecCarriageExportDelay.setEditable(true);
                        moDecCarriageExportOther.setEditable(true);
                        moDecUploadingExport.setEditable(true);
                        moDecLoadingExport.setEditable(true);
                        moDecCarriageImport.setEditable(false);
                        moDecUploadingImport.setEditable(false);
                        moDecInsurance.setEditable(false);
                        moDecLoadingImport.setEditable(false);
                        moDecCarriageImportFreight.setEditable(false);
                        moDecCarriageImportDelay.setEditable(false);
                        moDecCarriageImportOther.setEditable(false);
                        moDecCustomsImport.setEditable(false);
                        moDecTariff.setEditable(false);

                        if (moKeyShipmentType.getValue()[0] == SModSysConsts.LOGS_TP_SHIP_SHI) {
                            miClient.getSession().populateCatalogue(moKeySpotDestiny, SModConsts.LOGU_SPOT, moKeyDeliveryType.getValue()[0],
                                    new SGuiParams(new int[] { SModSysConsts.LOGS_TP_SPOT_POR }));
                        }
                        else if (moKeyShipmentType.getValue()[0] == SModSysConsts.LOGS_TP_SHIP_REC) {
                            miClient.getSession().populateCatalogue(moKeySpotSource, SModConsts.LOGU_SPOT, moKeyDeliveryType.getValue()[0],
                                    new SGuiParams(new int[] { SModSysConsts.LOGS_TP_SPOT_POR }));
                        }

                        moKeyModeOfTransportationType.setValue(new int[] { SModSysConsts.LOGS_TP_MOT_SEA });
                        moKeyModeOfTransportationType.setEnabled(false);
                        break;

                    case SModSysConsts.LOGS_INC_CFR:

                        moDecExportDeclaration.setEditable(true);
                        moDecCarriageExportFreight.setEditable(true);
                        moDecCarriageExportDelay.setEditable(true);
                        moDecCarriageExportOther.setEditable(true);
                        moDecUploadingExport.setEditable(true);
                        moDecLoadingExport.setEditable(true);
                        moDecCarriageImport.setEditable(true);
                        moDecUploadingImport.setEditable(false);
                        moDecInsurance.setEditable(false);
                        moDecLoadingImport.setEditable(false);
                        moDecCarriageImportFreight.setEditable(false);
                        moDecCarriageImportDelay.setEditable(false);
                        moDecCarriageImportOther.setEditable(false);
                        moDecCustomsImport.setEditable(false);
                        moDecTariff.setEditable(false);

                        if (moKeyShipmentType.getValue()[0] == SModSysConsts.LOGS_TP_SHIP_SHI) {
                            miClient.getSession().populateCatalogue(moKeySpotDestiny, SModConsts.LOGU_SPOT, moKeyDeliveryType.getValue()[0],
                                    new SGuiParams(new int[] { SModSysConsts.LOGS_TP_SPOT_POR }));
                        }
                        else if (moKeyShipmentType.getValue()[0] == SModSysConsts.LOGS_TP_SHIP_REC) {
                            miClient.getSession().populateCatalogue(moKeySpotSource, SModConsts.LOGU_SPOT, moKeyDeliveryType.getValue()[0],
                                    new SGuiParams(new int[] { SModSysConsts.LOGS_TP_SPOT_POR }));
                        }

                        moKeyModeOfTransportationType.setValue(new int[] { SModSysConsts.LOGS_TP_MOT_SEA });
                        moKeyModeOfTransportationType.setEnabled(false);
                        break;

                    case SModSysConsts.LOGS_INC_CIF:

                        moDecExportDeclaration.setEditable(true);
                        moDecCarriageExportFreight.setEditable(true);
                        moDecCarriageExportDelay.setEditable(true);
                        moDecCarriageExportOther.setEditable(true);
                        moDecUploadingExport.setEditable(true);
                        moDecLoadingExport.setEditable(true);
                        moDecCarriageImport.setEditable(true);
                        moDecUploadingImport.setEditable(false);
                        moDecInsurance.setEditable(true);
                        moDecLoadingImport.setEditable(false);
                        moDecCarriageImportFreight.setEditable(false);
                        moDecCarriageImportDelay.setEditable(false);
                        moDecCarriageImportOther.setEditable(false);
                        moDecCustomsImport.setEditable(false);
                        moDecTariff.setEditable(false);

                        if (moKeyShipmentType.getValue()[0] == SModSysConsts.LOGS_TP_SHIP_SHI) {
                            miClient.getSession().populateCatalogue(moKeySpotDestiny, SModConsts.LOGU_SPOT, moKeyDeliveryType.getValue()[0],
                                    new SGuiParams(new int[] { SModSysConsts.LOGS_TP_SPOT_POR }));
                        }
                        else if (moKeyShipmentType.getValue()[0] == SModSysConsts.LOGS_TP_SHIP_REC) {
                            miClient.getSession().populateCatalogue(moKeySpotSource, SModConsts.LOGU_SPOT, moKeyDeliveryType.getValue()[0],
                                    new SGuiParams(new int[] { SModSysConsts.LOGS_TP_SPOT_POR }));
                        }

                        moKeyModeOfTransportationType.setValue(new int[] { SModSysConsts.LOGS_TP_MOT_SEA });
                        moKeyModeOfTransportationType.setEnabled(false);
                        break;

                    default:
                }
            }
        }
    }

    private void actionVehicleTypeStateChanged() {
        SDbVehicleType vehicleType = null;

        if (moKeyVehicleType.getSelectedIndex() > 0) {

            try {
                vehicleType = new SDbVehicleType();
                vehicleType.read(miClient.getSession(), moKeyVehicleType.getValue());
                if (vehicleType.getQueryResultId() == SDbConsts.READ_OK) {
                    moDecCapacityVolume.getField().setValue(vehicleType.getCapacityVolume());
                    moDecCapacityMass.getField().setValue(vehicleType.getCapacityMass());
                    computeTotalValuesIndicators();
                }
                else {
                    moDecCapacityVolume.getField().setValue(0d);
                    moDecCapacityMass.getField().setValue(0d);
                }

                actionVehicle_nStateChanged();
            } catch (SQLException e) {
                SLibUtils.showException(this, e);
            } catch (Exception e) {
                SLibUtils.showException(this, e);
            }
        }
    }

    public void actionVehicle_nStateChanged() {
        if (moKeyCarrierType.getSelectedIndex() > 0) {
            if (moKeyCarrierType.getValue()[0] == SModSysConsts.LOGS_TP_CAR_OWN) {
               moKeyVehicle_n.setEnabled(true);
            }
            else {

                if (moKeyVehicle_n.getSelectedIndex() > 0) {
                    moKeyVehicle_n.setSelectedIndex(0);
                }
                moKeyVehicle_n.setEnabled(false);
            }
        }
        else {
            moKeyVehicle_n.setEnabled(false);
        }
    }

    private void actionCarrierTypeStateChanged() {
        if (moKeyCarrierType.getSelectedIndex() > 0) {
            if (moKeyCarrierType.getValue()[0] == SModSysConsts.LOGS_TP_CAR_OWN) {

                moKeyCarrier.setEnabled(false);
                if (moKeyCarrier.getSelectedIndex() > 0) {
                    moKeyCarrier.setSelectedIndex(0);
                }

                moKeyVehicle_n.setEnabled(true);
            }
            else {

                moKeyCarrier.setEnabled(true);

                if (moKeyVehicle_n.getSelectedIndex() > 0) {
                    moKeyVehicle_n.setSelectedIndex(0);
                }
                moKeyVehicle_n.setEnabled(false);
            }
        }
    }

    private void actionSpotSourceChanged() {
        if (moKeySpotSource.getSelectedIndex() > 0) {
            mnSpotTypeSource = moKeySpotSource.getSelectedItem().getForeignKey()[0];
        }
        else {
            mnSpotTypeSource = SLibConsts.UNDEFINED;
        }
    }

    private void actionSpotDestinyChanged() {
        if (moKeySpotDestiny.getSelectedIndex() > 0) {
            mnSpotTypeDestiny = moKeySpotDestiny.getSelectedItem().getForeignKey()[0];
        }
        else {
            mnSpotTypeDestiny = SLibConsts.UNDEFINED;
        }
    }

    private void assignDefaultValuesCurrency() {

        moRate = null;
        if (moRegistry.getFkCurrencyId() <= 0) {
            moDecRate.setValue(0d);
            moDecCarriageImportFreight.setValue(0d);
            carriageImportFreightEditable(true);
            jbUpdateRate.setEnabled(false);

            moTextCurrency.setValue(moSessionCustom.getLocalCurrency());
            moCurCostCy_r.setCurrencyKey(moSessionCustom.getLocalCurrencyKey());
            moCurCost_r.setCurrencyKey(moSessionCustom.getLocalCurrencyKey());
            moCurIndicatorCost.setCurrencyKey(moSessionCustom.getLocalCurrencyKey());
            moDecExchangeRate.setValue(1d);
            moDecExchangeRate.setEditable(false);
            jbExchangeRate.setEnabled(false);
        }
    }

    private void carriageImportFreightEditable(boolean editable) {

        if (moKeyDeliveryType.getValue()[0] == SModSysConsts.LOGS_TP_DLY_DOM) {
            moDecCarriageImportFreight.setEditable(editable);
        }
    }

    private boolean validateCurrentRate() {

        return miClient.showMsgBoxConfirm("La tarifa seleccionada (" +
            SLibUtils.DecimalFormatValue2D.format(moRate.getRate()) + " " +
            (moRate.getFkCurrencyId() == moSessionCustom.getLocalCurrencyKey()[0] ?
            moSessionCustom.getLocalCurrencyCode() :
            moSessionCustom.getCurrencyCode(new int[] { moRate.getFkCurrencyId() } )) + ") " +
            "es diferente a la tarifa (" +
            SLibUtils.DecimalFormatValue2D.format(moDecCarriageImportFreight.getValue()) + " " +
            moCurCostCy_r.getCompoundText() + "). ¿Desea reemplazarla? ") == JOptionPane.YES_OPTION ? true : false;
    }

    private void actionRateStateChanged() {

        if (!moBoolBillOfLadingClosed.isSelected()) {
            if (moKeyRateSystem.getSelectedIndex() <= 0) {
                assignDefaultValuesCurrency();
            }
            else {
                try {
                    moRate = new SDbRate();
                    moRate.read(miClient.getSession(), moKeyRateSystem.getValue());
                    if (moRate.getQueryResultId() == SDbConsts.READ_OK) {

                        moDecRate.setValue(moRate.getRate());
                        moBoolConsolidated.setValue(moRate.isConsolidated());
                        if (moKeyDeliveryType.getValue()[0] == SModSysConsts.LOGS_TP_DLY_DOM) {
                            /*if(moDecCarriageImportFreight.getValue() > 0 &&
                                    moDecCarriageImportFreight.getValue().doubleValue() != moRate.getRate()) {
                                if (validateCurrentRate()) {*/

                                    //moDecRate.setValue(moRate.getRate());
                                    moDecCarriageImportFreight.setValue(moRate.getRate());
                                    carriageImportFreightEditable(false);
                                    jbUpdateRate.setEnabled(true);

                                /*}
                                else {

                                    replace = false;
                                }

                            }
                            else {

                                moDecCarriageImportFreight.setValue(moRate.getRate());
                                moDecCarriageImportFreight.setEnabled(false);
                            }     */
                        }

                        else {



                            /*
                            if(moDecCarriageImportFreight.getValue().doubleValue() != moRate.getRate()) {
                                if (validateCurrentRate()) {

                                    replace = true;
                                    moDecCarriageExportFreight.setValue(moRate.getRate());
                                    moDecCarriageExportFreight.setEnabled(false);
                                }
                                else {

                                    replace = false;
                                }
                            }
                            else {

                                moDecCarriageExportFreight.setValue(moRate.getRate());
                                moDecCarriageExportFreight.setEnabled(false);
                            }
                            * */
                        }
                        actionComputeIndicatorValues();

                            if (moRate.getFkCurrencyId() == moSessionCustom.getLocalCurrencyKey()[0]) {
                                moDecExchangeRate.setValue(1d);
                                moDecExchangeRate.setEditable(false);
                                jbExchangeRate.setEnabled(false);
                            }
                            else {
                                moDecExchangeRate.setEditable(true);
                                jbExchangeRate.setEnabled(true);
                            }

                            moTextCurrency.setValue(moRate.getXtaCurrency());

                            moCurCost_r.getField().setValue(moRate.getRate());
                            moCurCost_r.setCurrencyKey(new int[] { moSessionCustom.getLocalCurrencyKey()[0] });
                            //moDecCost_r.setCompoundText(moRate.getXtaCurrencySymbol());

                            moCurCostCy_r.getField().setValue(moRate.getRate());
                            moCurCostCy_r.setCurrencyKey(new int[] { moRate.getFkCurrencyId() });
                            //moDecCostCy_r.setCompoundText(moRate.getXtaCurrencySymbol());

                            moCurIndicatorCost.setCurrencyKey(new int[] { moSessionCustom.getLocalCurrencyKey()[0] });
                            //moDecIndicatorCost.setCompoundText(moRate.getXtaCurrencySymbol());
                    }
                } catch (SQLException e) {
                    SLibUtils.showException(this, e);
                } catch (Exception e) {
                    SLibUtils.showException(this, e);
                }
            }
        }
    }

    private void actionComputeTotalCost() {
        double totalCost = 0;

        totalCost = moDecExportDeclaration.getValue() +
            moDecCarriageExportFreight.getValue() +
            moDecCarriageExportDelay.getValue() +
            moDecCarriageExportOther.getValue() +
            moDecUploadingExport.getValue() +
            moDecLoadingExport.getValue() +
            moDecCarriageImport.getValue() +
            moDecUploadingImport.getValue() +
            moDecInsurance.getValue() +
            moDecLoadingImport.getValue() +
            moDecCarriageImportFreight.getValue() +
            moDecCarriageImportDelay.getValue() +
            moDecCarriageImportOther.getValue() +
            moDecCustomsImport.getValue() +
            moDecTariff.getValue();

        moCurCostCy_r.getField().setValue(totalCost);
        moCurCost_r.getField().setValue(totalCost * moDecExchangeRate.getValue());

        //actionRateStateChanged();
    }

    /*
    private void actionReloadVehicleType() {

        if (moKeySpotSource.getSelectedIndex() > 0 &&
                moKeySpotDestiny.getSelectedIndex() > 0 &&
                moKeyCarrier.getSelectedIndex() > 0) {

            miClient.getSession().populateCatalogue(moKeyVehicleType, SModConsts.LOGX_TP_VEH, SLibConsts.UNDEFINED,
                    new SGuiParams(new int[] { moKeySpotSource.getValue()[0], moKeySpotDestiny.getValue()[0], moKeyCarrier.getValue()[0] }));
            moKeyVehicleType.setEnabled(true);

            if (moKeyVehicleType.getItemCount() == 2) {
                moKeyVehicleType.setSelectedIndex(1);
            }
        }
        else {

            //params.setKey(new int[] { SLibConsts.UNDEFINED, SLibConsts.UNDEFINED, SLibConsts.UNDEFINED } );
            //miClient.getSession().populateCatalogue(moKeyVehicleType, SModConsts.LOGX_TP_VEH, SLibConsts.UNDEFINED, params);
            //moKeyVehicleType.setEnabled(false);
        }
    }
    */

    private void actionReloadRate() {

        if (moKeySpotSource.getSelectedIndex() > 0 &&
                moKeySpotDestiny.getSelectedIndex() > 0 &&
                moKeyCarrier.getSelectedIndex() > 0 &&
                moKeyVehicleType.getSelectedIndex() > 0) {

            miClient.getSession().populateCatalogue(moKeyRateSystem, SModConsts.LOGX_RATE, SLibConsts.UNDEFINED, new SGuiParams(
                    new int[] { moKeySpotSource.getValue()[0], moKeySpotDestiny.getValue()[0], moKeyCarrier.getValue()[0], moKeyVehicleType.getValue()[0] } ));

            moKeyRateSystem.setEditable(true);
            if (moKeyRateSystem.getItemCount() > 1) {

                if (moKeyRateSystem.getItemCount() == 2) {
                    moKeyRateSystem.setSelectedIndex(1);
                }

                carriageImportFreightEditable(false);
            }
            else {
                carriageImportFreightEditable(true);
            }
        }
        else {

            //params.setKey(new int[] { SLibConsts.UNDEFINED, SLibConsts.UNDEFINED, SLibConsts.UNDEFINED, SLibConsts.UNDEFINED, SLibConsts.UNDEFINED } );
            //miClient.getSession().populateCatalogue(moKeyRate, SModConsts.LOGX_RATE, SLibConsts.UNDEFINED, params);

            if (moKeyRateSystem.getSelectedIndex() > 0)  {
                moKeyRateSystem.setSelectedIndex(0);
            }

            carriageImportFreightEditable(true);
            moKeyRateSystem.setEditable(false);
        }
    }

    private void actionComputeIndicatorValues() {

        computeTotalValuesIndicators();

        // Capacity volume used:

        if (!moBoolConsolidated.isSelected()) {
            if (moDecCapacityVolume.getField().getValue() > 0) {
                moDecCapacityVolumeUsed.setValue(mdTotalVolume / moDecCapacityVolume.getField().getValue());
            }
            else {
                moDecCapacityVolumeUsed.setValue(0d);
            }
        }
        else {
            moDecCapacityVolumeUsed.setValue(1d);
        }

        // Capacity mass used:

        if (!moBoolConsolidated.isSelected()) {
            if (moDecCapacityMass.getField().getValue() > 0) {
                moDecCapacityMassUsed.setValue(mdTotalWeigthGross / moDecCapacityMass.getField().getValue());
            }
            else {
                moDecCapacityMassUsed.setValue(0d);
            }
        }
        else {
            moDecCapacityMassUsed.setValue(1d);
        }

        // Freight:

        if (mdTotalSubtotal_r > 0) {
            moDecIndicatorFreight.setValue(moCurCost_r.getField().getValue() / mdTotalSubtotal_r);
        }
        else {
            moDecIndicatorFreight.setValue(0d);
        }

        // Cost by kg.

        if (mdTotalWeigthGross > 0) {
            moCurIndicatorCost.getField().setValue(moCurCost_r.getField().getValue() / mdTotalWeigthGross);
        }
        else {
            moCurIndicatorCost.getField().setValue(0d);
        }
    }

    private void computeTotalValuesIndicators() {
        SGridRow row = null;

        mdTotalVolume = 0;
        mdTotalWeigthGross = 0;
        mdTotalSubtotal_r = 0;
        for (int i = 0; i < moGridDestinies.getTable().getRowCount(); i++) {
            row = moGridDestinies.getGridRow(i);

            for (SDbShipmentDestinyEntry entry : ((SDbShipmentDestiny) row).getShipmentDestinyEntries()) {
                mdTotalVolume += entry.getQuantity() * (entry.getItem() != null ? entry.getItem().getVolume() : 0);
                mdTotalWeigthGross += entry.getQuantity() * (entry.getItem() != null ? entry.getItem().getWeightGross() : 0);
                mdTotalSubtotal_r +=  (entry.getQuantity() * (entry.getDpsEntry() != null ? entry.getDpsEntry().getPriceUnitaryReal_r() : 0));
            }
        }
    }

    private void populateDestinies() throws SQLException {
        try {
            Vector<SGridRow> vRows = new Vector<>();
            ArrayList<SDbShipmentDestiny> aRows = new ArrayList<>();

            aRows =  moRegistry.getShipmentDestinies();
            for (SDbShipmentDestiny row : aRows) {

                vRows.add(row);
            }

            moGridDestinies.populateGrid(vRows);
            moGridDestinies.clearSortKeys();
            moGridDestinies.setSelectedGridRow(0);
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }

    private boolean assignSpotCob(int nPkCobId) {
        boolean result = true;
        int nFkSpotId = 0;

        SDbSpotCompanyBranch spotCob = new SDbSpotCompanyBranch();

        try {
            nFkSpotId = (Integer) spotCob.readField(miClient.getSession().getStatement(), new int[] { nPkCobId }, spotCob.FIELD_FK_SPOT);
            if (nFkSpotId > 0) {

                switch (moKeyShipmentType.getValue()[0]) {
                    case SModSysConsts.LOGS_TP_SHIP_SHI:
                        moKeySpotSource.setValue(new int[] { nFkSpotId } );
                        moKeySpotSource.setEnabled(false);
                        break;

                    case SModSysConsts.LOGS_TP_SHIP_REC:
                        moKeySpotDestiny.setValue(new int[] { nFkSpotId } );
                        moKeySpotDestiny.setEnabled(false);
                        break;

                    default:
                }
            }
            else {
                result = false;
            }
        } catch (SQLException e) {
            result = false;
        } catch (Exception e) {
            result = false;
        }

        return result;
    }

    private void computeShipment(SParamsShipment paramsShipment) {

        if (mbCanShowForm) {
            if ((paramsShipment.getFkDpsYearId() > 0 && paramsShipment.getFkDpsDocId() > 0) ||
                (paramsShipment.getFkDiogYearId() > 0 && paramsShipment.getFkDiogDocId() > 0)) {

                moKeyShipmentType.setValue(new int[] { paramsShipment.getFkShipmentTypeId() });
                moKeyDeliveryType.setValue(new int[] { paramsShipment.getFkDeliveryTypeId() });

                mnDocumentShipmentType = paramsShipment.getFkDocShipmentTypeId();

                if (paramsShipment.getFkDeliveryTypeId() == SModSysConsts.LOGS_TP_DLY_DOM) {
                    moKeyIncoterm.setValue(new int[] { SModSysConsts.LOGS_INC_NA });
                    //moKeyIncoterm.setEnabled(false);
                }
                /*else {
                    moKeyIncoterm.setEnabled(true);
                }*/

                miClient.getSession().populateCatalogue(moKeyIncoterm, SModConsts.LOGS_INC, SLibConsts.UNDEFINED,
                    moKeyDeliveryType.getSelectedIndex() <= 0 ? null : new SGuiParams(moKeyDeliveryType.getValue()));
                reloadSpotCatalogues();
                actionEnabledFieldsIncoterms();

                if (!assignSpotCob(moKeyCompanyBranch.getValue()[0])) {
                    msCanShowFormMessage = "No se encontró la configuración del lugar de la sucursal.";
                    mbCanShowForm = false;
                }

                if (paramsShipment.getFkDpsYearId() > 0 && paramsShipment.getFkDpsDocId() > 0) {
                    mnPrimaryKeyDps = new int[] { paramsShipment.getFkDpsYearId(), paramsShipment.getFkDpsDocId() };
                }
                else if (paramsShipment.getFkDiogYearId() > 0 && paramsShipment.getFkDiogDocId() > 0) {
                    mnPrimaryKeySourceDiog = new int[] { paramsShipment.getFkDiogYearId(), paramsShipment.getFkDiogDocId() };
                }

                moGridDestinies.actionRowNew();
            }
        }
    }

    private void actionPickExchangeRate() {
        miClient.getSession().showOptionPicker(SModConsts.FIN_EXC_RATE,
                moRate != null ? moRate.getFkCurrencyId() : moSessionCustom.getLocalCurrencyKey()[0], null, moDecExchangeRate);
    }

    private void actionPickExchangeRate1() {
        SRowExchangeRate exchangeRate = null;

        if (jbExchangeRate.isEnabled()) {
            try {
                exchangeRate = new SRowExchangeRate();
                moFormDialogExchangeRate.setValue(SModConsts.FIN_EXC_RATE, moRate != null ? moRate.getFkCurrencyId() : moSessionCustom.getLocalCurrencyKey()[0]);
                moFormDialogExchangeRate.setRegistry(exchangeRate);
                moFormDialogExchangeRate.setVisible(true);

                if (moFormDialogExchangeRate.getFormResult() == SGuiConsts.FORM_RESULT_OK) {
                    moDecExchangeRate.setValue(moFormDialogExchangeRate.getValue(SModConsts.FIN_EXC_RATE));
                    actionComputeTotalCost();
                    actionComputeIndicatorValues();
                }
            }
            catch (Exception e) {
                SLibUtils.showException(this, e);
            }
        }
    }

    private void reloadSpotCatalogues() {
        if (moKeyDeliveryType.getSelectedIndex() > 0 && moKeyShipmentType.getSelectedIndex() > 0) {
            switch (moKeyShipmentType.getValue()[0]) {
                case SModSysConsts.LOGS_TP_SHIP_SHI:
                    miClient.getSession().populateCatalogue(moKeySpotSource, SModConsts.LOGU_SPOT, SModSysConsts.LOGS_TP_DLY_DOM, null);
                    miClient.getSession().populateCatalogue(moKeySpotDestiny, SModConsts.LOGU_SPOT, moKeyDeliveryType.getValue()[0], null);
                    break;

                case SModSysConsts.LOGS_TP_SHIP_REC:
                    miClient.getSession().populateCatalogue(moKeySpotSource, SModConsts.LOGU_SPOT, moKeyDeliveryType.getValue()[0], null);
                    miClient.getSession().populateCatalogue(moKeySpotDestiny, SModConsts.LOGU_SPOT, SModSysConsts.LOGS_TP_DLY_DOM, null);
                    break;
            }
        }
    }

    private void validateDestinyEntries(SGridRow gridRow) {
        String msg = "";
        SDbShipmentDestiny newDestiny = (SDbShipmentDestiny) gridRow;
        SGridRow rowDestiny = null;

        for (int i = 0; i < moGridDestinies.getTable().getRowCount(); i++) {

            rowDestiny = moGridDestinies.getGridRow(i);
            if (!rowDestiny.equals(newDestiny)) {

                for (SDbShipmentDestinyEntry entry : ((SDbShipmentDestiny) rowDestiny).getShipmentDestinyEntries()) {
                    for (SDbShipmentDestinyEntry newEntry : ((SDbShipmentDestiny) newDestiny).getShipmentDestinyEntries()) {

                        if (entry.getFkDpsYearId_n() > 0) {
                            if (SLibUtils.compareKeys(
                                    new int[] { entry.getFkDpsYearId_n(), entry.getFkDpsDocId_n(), entry.getFkDpsEntryId_n() },
                                    new int[] { newEntry.getFkDpsYearId_n(), newEntry.getFkDpsDocId_n(), newEntry.getFkDpsEntryId_n() })) {

                                /*
                                numReg++;
                                if (numReg > 1) {
                                */
                                    msg = "El tipo de documento '" + entry.getXtaDoctoType() + "' con folio '" + entry.getXtaDoctoNumber() + "' " +
                                        "ya está embarcado.";
                                    break;
                                //}
                            }
                        }
                        else if (entry.getFkDiogYearId_n() > 0) {

                            if (SLibUtils.compareKeys(
                                    new int[] { entry.getFkDiogYearId_n(), entry.getFkDiogDocId_n(), entry.getFkDiogEntryId_n() },
                                    new int[] { newEntry.getFkDiogYearId_n(), newEntry.getFkDiogDocId_n(), newEntry.getFkDiogEntryId_n() })) {

                                /*
                                numReg++;
                                if (numReg > 1) {
                                * */
                                    msg = "El tipo de documento '" + entry.getXtaDoctoType() + "' con folio '" + entry.getXtaDoctoNumber() + "' " +
                                        "ya está embarcado.";
                                    break;
                                //}
                            }
                        }
                    }

                    if (!msg.isEmpty()) {
                        break;
                    }
                }

                if (!msg.isEmpty()) {
                    break;
                }
            }
        }

        if (!msg.isEmpty()) {

            miClient.showMsgBoxInformation(msg);
            moGridDestinies.getModel().getGridRows().remove(moGridDestinies.getModel().getGridRows().indexOf(gridRow));
            moGridDestinies.getModel().renderGridRows();
            moGridDestinies.setSelectedGridRow(moGridDestinies.getModel().getRowCount() > 0 ? 0 : - 1);
        }
    }

    /*
     * Public methods
     */

    /*
    @Override
    protected void windowActivated() {

        String msg = "";

        if (mbFirstActivation) {
            if (moRegistry.isRegistryNew()) {

                if (moSessionCustom.getCurrentBranchKey()[0] <= 0) {

                    msg = "No hay una sucursal seleccionada.";
                }
                else {

                    moKeyCompanyBranch.setValue(new int[] { moSessionCustom.getCurrentBranchKey()[0] });
                }

                if (msg.isEmpty() && !assignSpotCob(moKeyCompanyBranch.getValue()[0])) {

                    msg = "No se encontró la configuración del lugar de la sucursal.";
                }
            }
            else {

                msg = moRegistry.validateOrderLinks(miClient.getSession());
                if (!msg.isEmpty()) {

                    jbSave.setEnabled(false);
                }
            }

            if (msg.isEmpty()) {

                if (mnPrimaryKeyDps != null || mnPrimaryKeySourceDiog != null) {

                    moGridDestinies.actionRowNew();
                }
            }
            else {

                miClient.showMsgBoxInformation(msg);
                actionCancel();
            }

            mbFirstActivation = false;
        }
    }
    * */

    @Override
    public void addAllListeners() {
        moKeyIncoterm.addItemListener(this);
        moKeyDeliveryType.addItemListener(this);
        moKeySpotSource.addItemListener(this);
        moKeySpotDestiny.addItemListener(this);
        moKeyCarrierType.addItemListener(this);
        moKeyCarrier.addItemListener(this);
        moKeyVehicleType.addItemListener(this);
        moKeyVehicle_n.addItemListener(this);
        moKeyRateSystem.addItemListener(this);
        moDecExportDeclaration.addFocusListener(this);
        moDecCarriageExportFreight.addFocusListener(this);
        moDecCarriageExportDelay.addFocusListener(this);
        moDecCarriageExportOther.addFocusListener(this);
        moDecUploadingExport.addFocusListener(this);
        moDecLoadingExport.addFocusListener(this);
        moDecCarriageImport.addFocusListener(this);
        moDecUploadingImport.addFocusListener(this);
        moDecInsurance.addFocusListener(this);
        moDecLoadingImport.addFocusListener(this);
        moDecCarriageImportFreight.addFocusListener(this);
        moDecCarriageImportDelay.addFocusListener(this);
        moDecCarriageImportOther.addFocusListener(this);
        moDecCustomsImport.addFocusListener(this);
        moDecTariff.addFocusListener(this);
        moDecExchangeRate.addFocusListener(this);
        jbUpdateRate.addActionListener(this);
        jbExchangeRate.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        moKeyIncoterm.removeItemListener(this);
        moKeyDeliveryType.removeItemListener(this);
        moKeySpotSource.removeItemListener(this);
        moKeySpotDestiny.removeItemListener(this);
        moKeyCarrierType.removeItemListener(this);
        moKeyCarrier.removeItemListener(this);
        moKeyVehicleType.removeItemListener(this);
        moKeyVehicle_n.removeItemListener(this);
        moKeyRateSystem.removeItemListener(this);
        moDecExportDeclaration.removeFocusListener(this);
        moDecCarriageExportFreight.removeFocusListener(this);
        moDecCarriageExportDelay.removeFocusListener(this);
        moDecCarriageExportOther.removeFocusListener(this);
        moDecUploadingExport.removeFocusListener(this);
        moDecLoadingExport.removeFocusListener(this);
        moDecCarriageImport.removeFocusListener(this);
        moDecUploadingImport.removeFocusListener(this);
        moDecInsurance.removeFocusListener(this);
        moDecLoadingImport.removeFocusListener(this);
        moDecCarriageImportFreight.removeFocusListener(this);
        moDecCarriageImportDelay.removeFocusListener(this);
        moDecCarriageImportOther.removeFocusListener(this);
        moDecCustomsImport.removeFocusListener(this);
        moDecTariff.removeFocusListener(this);
        moDecUploadingExport.removeFocusListener(this);
        moDecUploadingImport.removeFocusListener(this);
        moDecExchangeRate.removeFocusListener(this);
        jbUpdateRate.removeActionListener(this);
        jbExchangeRate.removeActionListener(this);
    }

    @Override
    public void reloadCatalogues() {
        try {
            miClient.getSession().populateCatalogue(moKeyCompanyBranch, SModConsts.BPSU_BPB, moSessionCustom.getCurrentCompanyKey()[0], null);
            miClient.getSession().populateCatalogue(moKeyShipmentType, SModConsts.LOGS_TP_SHIP, SLibConsts.UNDEFINED, null);
            miClient.getSession().populateCatalogue(moKeyDeliveryType, SModConsts.LOGS_TP_DLY, SLibConsts.UNDEFINED, null);
            miClient.getSession().populateCatalogue(moKeyIncoterm, SModConsts.LOGS_INC, SLibConsts.UNDEFINED,
                moKeyDeliveryType.getSelectedIndex() <= 0 ? null : new SGuiParams(moKeyDeliveryType.getValue()));
            miClient.getSession().populateCatalogue(moKeySpotSource, SModConsts.LOGU_SPOT, SLibConsts.UNDEFINED, null);
            miClient.getSession().populateCatalogue(moKeySpotDestiny, SModConsts.LOGU_SPOT, SLibConstants.UNDEFINED, null);
            miClient.getSession().populateCatalogue(moKeyModeOfTransportationType, SModConsts.LOGX_TP_MOT_SHIP, SLibConsts.UNDEFINED, null);
            miClient.getSession().populateCatalogue(moKeyCarrierType, SModConsts.LOGS_TP_CAR, SLibConsts.UNDEFINED,
                    new SGuiParams(new int[] { SModSysConsts.LOGS_TP_CAR_CAR, SModSysConsts.LOGS_TP_CAR_OWN }));
            miClient.getSession().populateCatalogue(moKeyCarrier, SModConsts.BPSX_BP_ATT_CARR, SLibConsts.UNDEFINED, null);

            /*
            moFieldKeyIncotermGroup.initGroup();
            moFieldKeyIncotermGroup.addFieldKey(moKeyDeliveryType, SModConsts.LOGS_TP_DLY, SLibConsts.UNDEFINED, null);
            moFieldKeyIncotermGroup.addFieldKey(moKeyIncoterm, SModConsts.LOGS_INC, SLibConsts.UNDEFINED, null);
            moFieldKeyIncotermGroup.populateCatalogues();
            * */

            /*
            moFieldKeySpotSourceGroup.initGroup();
            moFieldKeySpotSourceGroup.addFieldKey(moKeyDeliveryType, SModConsts.LOGS_TP_DLY, SLibConsts.UNDEFINED, null);
            moFieldKeySpotSourceGroup.addFieldKey(moKeySpotSource, SModConsts.LOGU_SPOT, SLibConsts.UNDEFINED, null);
            moFieldKeySpotSourceGroup.populateCatalogues();
            */

            /*
            moFieldKeySpotDestinyGroup.initGroup();
            moFieldKeySpotDestinyGroup.addFieldKey(moKeyDeliveryType, SModConsts.LOGS_TP_DLY, SLibConsts.UNDEFINED, null);
            moFieldKeySpotDestinyGroup.addFieldKey(moKeySpotDestiny, SModConsts.LOGU_SPOT, SLibConsts.UNDEFINED, null);
            moFieldKeySpotDestinyGroup.populateCatalogues();
            */

            moFieldKeyVehicleGroup.initGroup();
            moFieldKeyVehicleGroup.addFieldKey(moKeyVehicleType, SModConsts.LOGU_TP_VEH, SLibConsts.UNDEFINED, null);
            moFieldKeyVehicleGroup.addFieldKey(moKeyVehicle_n, SModConsts.LOG_VEH, SLibConsts.UNDEFINED, null);
            moFieldKeyVehicleGroup.populateCatalogues();

            populateDestinies();

        } catch (SQLException e) {
            SLibUtils.showException(this, e);
        }
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbShipment) registry;
        jTabbedPane1.setSelectedIndex(0);
        jtaNotes.setText("");

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        moKeyCompanyBranch.setValue(new int[] { moRegistry.getFkCompanyBranchId() });
        moKeyShipmentType.setValue(new int[] { moRegistry.getFkShipmentTypeId() });
        moKeyDeliveryType.setValue(new int[] { moRegistry.getFkDeliveryTypeId() });
        reloadSpotCatalogues();

        moKeyIncoterm.setValue(new int[] { moRegistry.getFkIncotermId() });
        moDateDate.setValue(moRegistry.getDate() );
        moTextNumber.setValue(moRegistry.getXtaShipmentNumber());
        moKeyCarrierType.setValue(new int[] { moRegistry.getFkCarrierTypeId() });
        moKeyCarrier.setValue(new int[] { moRegistry.getFkCarrierId() });
        moKeyVehicleType.setValue(new int[] { moRegistry.getFkVehicleTypeId() });
        moKeyVehicle_n.setValue(new int[] { moRegistry.getFkVehicleId_n() });
        moDecRate.setValue(moRegistry.getRate() );
        moDecCapacityVolume.getField().setValue(moRegistry.getCapacityVolume() );
        mdTotalVolume = moRegistry.getCapacityVolumeUsed();
        moDecCapacityMass.getField().setValue(moRegistry.getCapacityMass() );
        mdTotalWeigthGross = moRegistry.getCapacityMassUsed();
        moTextDriver.setValue(moRegistry.getDriver() );
        moTextPlate.setValue(moRegistry.getPlate() );
        //moDecRate.setValue(moRegistry.get );
        moTextShipmentAuthorizationStatus.setValue(moRegistry.getXtaStatusDpsAuthorn());
        moTextOrder_n.setValue(moRegistry.getXtaOrderNumber());
        moDecCapacityVolumeUsed.setValue(moRegistry.getCapacityVolumeUsed());
        moDecCapacityMassUsed.setValue(moRegistry.getCapacityMassUsed() );
        //moDecIndicatorFreight.setValue(moRegistry.get );
        //moDecIndicatorCost.setValue(moRegistry.get );
        moTextCurrency.setValue(""); // XXX
        moDecExchangeRate.setValue(moRegistry.getFkCurrencyId() > 0 ? moRegistry.getExchangeRate() : 1);
        moCurCost_r.getField().setValue(moRegistry.getCost_r());
        moCurCost_r.setCurrencyKey(new int[] { moSessionCustom.getLocalCurrencyKey()[0] });
        moCurCostCy_r.getField().setValue(moRegistry.getCostCy_r());
        moCurCostCy_r.setCurrencyKey(new int[] { moRegistry.getFkCurrencyId() > 0 ? moRegistry.getFkCurrencyId() :
                moSessionCustom.getLocalCurrencyKey()[0] });
        moDecExportDeclaration.setValue(moRegistry.getExportDeclaration());
        moDecCarriageExportFreight.setValue(moRegistry.getCarriageExportFreight());
        moDecCarriageExportDelay.setValue(moRegistry.getCarriageExportDelay());
        moDecCarriageExportOther.setValue(moRegistry.getCarriageExportOther());
        moDecUploadingExport.setValue(moRegistry.getUploadingExport());
        moDecLoadingExport.setValue(moRegistry.getLoadingExport());
        moDecCarriageImport.setValue(moRegistry.getCarriageImport());
        moDecUploadingImport.setValue(moRegistry.getUploadingImport());
        moDecInsurance.setValue(moRegistry.getInsurance());
        moDecLoadingImport.setValue(moRegistry.getLoadingImport());
        moDecCarriageImportFreight.setValue(moRegistry.getCarriageImportFreight());
        moDecCarriageImportDelay.setValue(moRegistry.getCarriageImportDelay());
        moDecCarriageImportOther.setValue(moRegistry.getCarriageImportOther());
        moDecCustomsImport.setValue(moRegistry.getCustomsImport());
        moDecTariff.setValue(moRegistry.getTariff());
        moBoolConsolidated.setValue(moRegistry.isConsolidated());
        moBoolBillOfLadingClosed.setValue(moRegistry.isBillOfLadingClosed());

        setFormEditable(true);
        actionEnabledFieldsIncoterms();
        moKeySpotSource.setValue(new int[] { moRegistry.getFkSpotSourceId() });
        moKeySpotDestiny.setValue(new int[] { moRegistry.getFkSpotDestinyId() });
        moKeyModeOfTransportationType.setValue(new int[] { moRegistry.getFkModeOfTransportationTypeId() });

        if (moRegistry.isRegistryNew()) {

            if (moSessionCustom.getCurrentBranchKey()[0] <= 0) {
                msCanShowFormMessage = "No hay una sucursal seleccionada.";
                mbCanShowForm = false;
            }
            else {
                moKeyCompanyBranch.setValue(new int[] { moSessionCustom.getCurrentBranchKey()[0] });
            }

            if (moRegistry.getFkVehicleTypeId() == SLibConsts.UNDEFINED) {
                moFieldKeyVehicleGroup.resetGroup();
            }

            moDateDate.setValue(miClient.getSession().getCurrentDate());
        }
        else {
            moKeyIncoterm.setEnabled(false);

            moKeySpotSource.setEnabled(moKeyShipmentType.getValue()[0] == SModSysConsts.LOGS_TP_SHIP_SHI ? false : true);
            moKeySpotDestiny.setEnabled(moKeyShipmentType.getValue()[0] == SModSysConsts.LOGS_TP_SHIP_REC ? false : true);

            if (!moRegistry.validateOrderLinks(miClient.getSession()).isEmpty()) {

                jbSave.setEnabled(false);
            }
        }

        if (moRegistry.getFkCurrencyId() == SLibConsts.UNDEFINED ||
                moRegistry.getFkCurrencyId() == moSessionCustom.getLocalCurrencyKey()[0]) {

            moDecExchangeRate.setEditable(false);
            jbExchangeRate.setEnabled(false);
        }

        if (moRegistry.getFkShipmentAuthorizationStatusId() == SModSysConsts.TRNS_ST_DPS_AUTHORN_AUTHORN ||
                moRegistry.isDeleted()) {
            jbSave.setEnabled(false);
        }

        if (!moRegistry.getShipmentNotes().isEmpty()) {
            jtaNotes.setText(moRegistry.getShipmentNotes().get(0).getNotes());
            moBoolPrint.setValue(moRegistry.getShipmentNotes().get(0).isPrintable());
        }

        if (!moRegistry.isRegistryNew()) {

            actionSpotSourceChanged();
            actionSpotDestinyChanged();
            actionCarrierTypeStateChanged();
            actionReloadRate();
            actionRateStateChanged();
            actionComputeTotalCost();
            actionComputeIndicatorValues();
            /*
             * actionRateStateChanged();
            * */
        }

        addAllListeners();
        enabledFields(false);
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbShipment registry = moRegistry.clone();

        if (registry.isRegistryNew()) {}

        registry.setFkCompanyBranchId(moKeyCompanyBranch.getValue()[0]);
        registry.setFkShipmentTypeId(moKeyShipmentType.getValue()[0]);
        registry.setFkDeliveryTypeId(moKeyDeliveryType.getValue()[0]);
        registry.setFkIncotermId(moKeyIncoterm.getValue()[0]);
        registry.setFkSpotSourceId(moKeySpotSource.getValue()[0]);
        registry.setFkSpotDestinyId(moKeySpotDestiny.getValue()[0]);
        registry.setFkModeOfTransportationTypeId(moKeyModeOfTransportationType.getValue()[0]);
        registry.setDate(moDateDate.getValue());
        //registry.setNumber(moTextNumber.getValue());
        registry.setFkCarrierTypeId(moKeyCarrierType.getValue()[0]);
        registry.setFkCarrierId(moKeyCarrier.getSelectedIndex() > 0 ? moKeyCarrier.getValue()[0] : miClient.getSession().getConfigCompany().getCompanyId());
        registry.setFkVehicleTypeId(moKeyVehicleType.getValue()[0]);
        registry.setFkVehicleId_n(moKeyVehicle_n.getSelectedIndex() > 0 ? moKeyVehicle_n.getValue()[0] : SLibConstants.UNDEFINED);
        registry.setRate(moDecRate.getValue());
        registry.setCapacityVolume(moDecCapacityVolume.getField().getValue());
        registry.setCapacityMass(moDecCapacityMass.getField().getValue());
        registry.setDriver(moTextDriver.getValue());
        registry.setPlate(moTextPlate.getValue());
        // moRegistry.set(moDecRate
        //moRegistry.setOrder_n(moTextOrder_n
        registry.setCapacityVolumeUsed(mdTotalVolume);
        registry.setCapacityMassUsed(mdTotalWeigthGross);
        //moRegistry.set(moDecIndicatorFreight
        //moRegistry.set(moDecIndicatorCost
        registry.setFkCurrencyId(moKeyRateSystem.getSelectedIndex() > 0 ? moRate.getFkCurrencyId() : moSessionCustom.getLocalCurrencyKey()[0]);
        //moRegistry.set(moDecExchangeRateSys
        registry.setExchangeRate(moDecExchangeRate.getValue());
        registry.setCost_r(moCurCost_r.getField().getValue());
        registry.setCostCy_r(moCurCostCy_r.getField().getValue());
        registry.setExportDeclaration(moDecExportDeclaration.isEditable() ? moDecExportDeclaration.getValue() : SLibConsts.UNDEFINED);
        registry.setCarriageExportFreight(moDecCarriageExportFreight.isEditable() ? moDecCarriageExportFreight.getValue() : SLibConsts.UNDEFINED);
        registry.setCarriageExportDelay(moDecCarriageExportDelay.isEditable() ? moDecCarriageExportDelay.getValue() : SLibConsts.UNDEFINED);
        registry.setCarriageExportOther(moDecCarriageExportOther.isEditable() ? moDecCarriageExportOther.getValue() : SLibConsts.UNDEFINED);
        registry.setUploadingExport(moDecUploadingExport.isEditable() ? moDecUploadingExport.getValue() : SLibConsts.UNDEFINED);
        registry.setLoadingExport(moDecLoadingExport.isEditable() ? moDecLoadingExport.getValue() : SLibConsts.UNDEFINED);
        registry.setCarriageImport(moDecCarriageImport.isEditable() ? moDecCarriageImport.getValue() : SLibConsts.UNDEFINED);
        registry.setUploadingImport(moDecUploadingImport.isEditable() ? moDecUploadingImport.getValue() : SLibConsts.UNDEFINED);
        registry.setInsurance(moDecInsurance.isEditable() ? moDecInsurance.getValue() : SLibConsts.UNDEFINED);
        registry.setLoadingImport(moDecLoadingImport.isEditable() ? moDecLoadingImport.getValue() : SLibConsts.UNDEFINED);
        registry.setCarriageImportFreight(moDecCarriageImportFreight.getValue());
        registry.setCarriageImportDelay(moDecCarriageImportDelay.isEditable() ? moDecCarriageImportDelay.getValue() : SLibConsts.UNDEFINED);
        registry.setCarriageImportOther(moDecCarriageImportOther.isEditable() ? moDecCarriageImportOther.getValue() : SLibConsts.UNDEFINED);
        registry.setCustomsImport(moDecCustomsImport.isEditable() ? moDecCustomsImport.getValue() : SLibConsts.UNDEFINED);
        registry.setTariff(moDecTariff.isEditable() ? moDecTariff.getValue() : SLibConsts.UNDEFINED);
        registry.setConsolidated(moBoolConsolidated.getValue());
        registry.setBillOfLadingClosed(moBoolBillOfLadingClosed.getValue());

        registry.setFkUnitCapacityMassId(SModSysConsts.ITMU_UNIT_KG);
        registry.setFkUnitCapacityVolumeId(SModSysConsts.ITMU_UNIT_MT3);
        registry.setFkUserBillOfLadingId(miClient.getSession().getUser().getPkUserId());

        //moRegistry.setFkVehicleTypeId(moKeyVehicleType.getValue()[0]);
        //moRegistry.setCode(moTextOrder_n.getValue());
        //moRegistry.setName(moTextNumber.getValue());

        // Values for dps order:

        registry.setClient_XXX(miClient_XXX);

        //moRegistry.setXtaLogisticsOrderAutomatic((SDataParamsCompany)(miClient.getSession().readRegistry(SModConsts.CFG_PARAM_CO, new int[] { 1 })));
        //miClient.getSessionXXX().getParamsCompany().getDbmsDocNumberSeriesLogistics()

        registry.getShipmentDestinies().clear();
        for (SGridRow row : moGridDestinies.getModel().getGridRows()) {
            registry.getShipmentDestinies().add((SDbShipmentDestiny) row);
        }

        registry.getShipmentNotes().clear();
        if (jtaNotes.getText().length() > 0) {

            SDbShipmentNotes notes = new SDbShipmentNotes();
            notes.setNotes(jtaNotes.getText());
            notes.setPrintable(moBoolPrint.getValue());
            registry.getShipmentNotes().add(notes);
        }

        return registry;
    }

    @Override
    public void setValue(int type, Object value) {

        switch(type) {

            case SModConsts.LOGX_SHIP_DPS:
            case SModConsts.LOGX_SHIP_DIOG:
                computeShipment((SParamsShipment) value);
                break;

            default:
        }
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            if (moGridDestinies.getTable().getRowCount() <= 0) {
                validation.setMessage("Se debe capturar al menos un destino.");
                validation.setComponent(moKeyModeOfTransportationType.getComponent());
            }
        }

        if (!validation.isValid()) {
            if (validation.getComponent() == moDecExchangeRate) {

                jTabbedPane1.setSelectedIndex(moDecExchangeRate.getTab());
            }
        }

        if (validation.isValid()) {
            if (jtaNotes.getText().length() > 255) {
                validation.setMessage("Ha excedido el tamaño máximo para guardar notas.");
                jTabbedPane1.setSelectedIndex(2);
            }
        }

        if (validation.isValid()) {
            if (!moBoolBillOfLadingClosed.isSelected()) {
                if (moKeyDeliveryType.getValue()[0] == SModSysConsts.LOGS_TP_DLY_DOM) {
                    if (moKeyCarrierType.getValue()[0] == SModSysConsts.LOGS_TP_CAR_CAR) {
                        if (moKeyRateSystem.getItemCount() > 1) {

                            if (moKeyRateSystem.getSelectedIndex() <= 0) {

                                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + moKeyRateSystem.getFieldName() + "'.");
                                validation.setComponent(moKeyRateSystem.getComponent());
                            }
                            else {

                                if (moRate.getRate() != moDecCarriageImportFreight.getValue().doubleValue()) {

                                    validation.setMessage("La '" + moKeyRateSystem.getFieldName() + "' es diferente al '" + moDecCarriageImportFreight.getFieldName() + "  ', debe actualizar la tarifa.");
                                    jTabbedPane1.setSelectedIndex(1);
                                    jbUpdateRate.requestFocus();
                                }
                            }
                        }
                        else {

                            if (moDecCarriageImportFreight.getValue() <= 0) {

                                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_REQ + moDecCarriageImportFreight.getFieldName());
                                validation.setComponent(moDecCarriageImportFreight.getComponent());
                                jTabbedPane1.setSelectedIndex(1);
                            }
                        }
                    }
                }
            }
        }

        if (validation.isValid() &&
                moKeyDeliveryType.getValue()[0] == SModSysConsts.LOGS_TP_DLY_INT &&
                moKeyIncoterm.getValue()[0] == SModSysConsts.LOGS_INC_NA) {

            validation.setMessage("El incoterm no puede ser '" + moKeyIncoterm.getSelectedItem().getItem() + "'.");
            validation.setComponent(moKeyIncoterm.getComponent());
        }

        if (validation.isValid() &&
                moKeyModeOfTransportationType.getValue()[0] == SModSysConsts.LOGS_TP_MOT_SEA &&
                (moKeyIncoterm.getValue()[0] == SModSysConsts.LOGS_INC_NA ||
                moKeyIncoterm.getValue()[0] == SModSysConsts.LOGS_INC_EXW ||
                moKeyIncoterm.getValue()[0] == SModSysConsts.LOGS_INC_FCA ||
                moKeyIncoterm.getValue()[0] == SModSysConsts.LOGS_INC_CPT ||
                moKeyIncoterm.getValue()[0] == SModSysConsts.LOGS_INC_CIP ||
                moKeyIncoterm.getValue()[0] == SModSysConsts.LOGS_INC_DAT ||
                moKeyIncoterm.getValue()[0] == SModSysConsts.LOGS_INC_DAP ||
                moKeyIncoterm.getValue()[0] == SModSysConsts.LOGS_INC_DAF ||
                moKeyIncoterm.getValue()[0] == SModSysConsts.LOGS_INC_DDU ||
                moKeyIncoterm.getValue()[0] == SModSysConsts.LOGS_INC_DDP)) {

            validation.setMessage("El '" + SGuiUtils.getLabelName(jlModeOfTransportationType.getText()) +
                    "' no puede ser '" + moKeyModeOfTransportationType.getSelectedItem().getItem()
                    + "' para el incoterm '" + moKeyIncoterm.getSelectedItem().getItem() + "'.");
            validation.setComponent(moKeyModeOfTransportationType.getComponent());
        }

        // Validate when capacity mass used is less that the configuration percentage:

        // Validate when value of rate or currency in catalogue is different:

        // Validate incoterm with mode of transportation:

        return validation;
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof javax.swing.JComboBox && e.getStateChange() == ItemEvent.SELECTED) {
            JComboBox comboBox = (JComboBox)  e.getSource();

            if (comboBox == moKeyIncoterm) {
                actionEnabledFieldsIncoterms();
            }
            else if (comboBox == moKeyDeliveryType) {
                actionEnabledFieldsIncoterms();
            }
            else if (comboBox == moKeySpotSource) {
                actionSpotSourceChanged();
                //actionReloadVehicleType();
                actionReloadRate();
            }
            else if (comboBox == moKeySpotDestiny) {
                actionSpotDestinyChanged();
                //actionReloadVehicleType();
                actionReloadRate();
            }
            else if (comboBox == moKeyCarrierType) {
                actionCarrierTypeStateChanged();
            }
            else if (comboBox == moKeyCarrier) {
                //actionReloadVehicleType();
                actionReloadRate();
            }
            else if (comboBox == moKeyVehicleType) {
                actionVehicleTypeStateChanged();
                actionReloadRate();
            }
            else if (comboBox == moKeyVehicle_n) {
                actionVehicle_nStateChanged();
            }
            else if (comboBox == moKeyRateSystem) {
                actionRateStateChanged();
                actionComputeTotalCost();
                actionComputeIndicatorValues();
            }
        }
    }

    @Override
    public void focusGained(FocusEvent e) {

    }

    @Override
    public void focusLost(FocusEvent e) {
         if (e.getSource() instanceof javax.swing.JTextField) {
            JTextField textField = (JTextField) e.getSource();

            if (textField == moDecExchangeRate.getComponent() ||
                    textField == moDecExportDeclaration.getComponent() ||
                    textField == moDecCarriageExportFreight.getComponent() ||
                    textField == moDecCarriageExportDelay.getComponent() ||
                    textField == moDecCarriageExportOther.getComponent() ||
                    textField == moDecUploadingExport.getComponent() ||
                    textField == moDecLoadingExport.getComponent() ||
                    textField == moDecCarriageImport.getComponent() ||
                    textField == moDecUploadingImport.getComponent() ||
                    textField == moDecInsurance.getComponent() ||
                    textField == moDecLoadingImport.getComponent() ||
                    textField == moDecCarriageImportFreight.getComponent() ||
                    textField == moDecCarriageImportDelay.getComponent() ||
                    textField == moDecCarriageImportOther.getComponent() ||
                    textField == moDecCustomsImport.getComponent() ||
                    textField == moDecTariff.getComponent()) {

                actionComputeTotalCost();
                actionComputeIndicatorValues();
            }
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbUpdateRate) {
                actionComputeTotalCost();
                actionComputeIndicatorValues();
            }
            else if (button == jbExchangeRate) {
                actionPickExchangeRate();
            }
        }
    }

    @Override
    public void notifyRowNew(int gridType, int gridSubtype, int row, SGridRow gridRow) {
        validateDestinyEntries(gridRow);
    }

    @Override
    public void notifyRowEdit(int gridType, int gridSubtype, int row, SGridRow gridRow) {

    }

    @Override
    public void notifyRowDelete(int gridType, int gridSubtype, int row, SGridRow gridRow) {

    }
}
