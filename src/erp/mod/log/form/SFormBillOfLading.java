/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.log.form;

import erp.cfd.SCfdXmlCatalogs;
import erp.client.SClientInterface;
import erp.data.SDataConstantsSys;
import erp.gui.session.SSessionCustom;
import erp.lib.SLibConstants;
import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import erp.mod.log.db.SDbBillOfLading;
import erp.mod.log.db.SDbBolLocation;
import erp.mod.log.db.SDbBolMerchandise;
import erp.mod.log.db.SDbBolMerchandiseQuantity;
import erp.mod.log.db.SDbBolPerson;
import erp.mod.log.db.SDbBolTransportationMode;
import erp.mod.log.db.SDbInsurer;
import erp.mod.log.db.SDbTrailer;
import erp.mod.log.db.SDbVehicle;
import java.awt.BorderLayout;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JRadioButton;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridPaneFormOwner;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiItem;
import sa.lib.gui.SGuiParams;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;

/**
 *
 * @author Isabel Serv√≠n
 */
public class SFormBillOfLading extends sa.lib.gui.bean.SBeanForm implements SGridPaneFormOwner, ItemListener {
    
    private SDbBillOfLading moRegistry;

    private SGridPaneForm moGridLocations;
    
    private SFormBolLocation moFormLocation;
    
    private boolean mbFormSettingsOk;
    
    /**
     * Creates new form SFormShipment
     * @param client
     * @param title
     * @param subType
     */
    public SFormBillOfLading(SGuiClient client, String title, int subType) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.LOG_BOL, subType, title);
        windowActivate();
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        bgTypeLocations = new javax.swing.ButtonGroup();
        jPanel15 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel23 = new javax.swing.JPanel();
        jPanel21 = new javax.swing.JPanel();
        jlFiscalIdReceptor = new javax.swing.JLabel();
        moTextFiscalIdReceptor = new sa.lib.gui.bean.SBeanFieldText();
        moTextTaxRegime = new sa.lib.gui.bean.SBeanFieldText();
        jPanel46 = new javax.swing.JPanel();
        jlBillOfLadingTp = new javax.swing.JLabel();
        moTextBillOfLadingTp = new sa.lib.gui.bean.SBeanFieldText();
        jPanel25 = new javax.swing.JPanel();
        moBoolInternationalShip = new sa.lib.gui.bean.SBeanFieldBoolean();
        jPanel26 = new javax.swing.JPanel();
        jlInputOutput = new javax.swing.JLabel();
        moKeyInputOutput = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel39 = new javax.swing.JPanel();
        jlInputOutputWay = new javax.swing.JLabel();
        moKeyInputOutputWay = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel82 = new javax.swing.JPanel();
        jlCountry = new javax.swing.JLabel();
        moKeyCountry = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel78 = new javax.swing.JPanel();
        jlSerie = new javax.swing.JLabel();
        moTextSerie = new sa.lib.gui.bean.SBeanFieldText();
        jPanel24 = new javax.swing.JPanel();
        jlNumber = new javax.swing.JLabel();
        moTextNumber = new sa.lib.gui.bean.SBeanFieldText();
        jPanel30 = new javax.swing.JPanel();
        jlDate = new javax.swing.JLabel();
        moDateDate = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel44 = new javax.swing.JPanel();
        jlEnvironmentalInsurer = new javax.swing.JLabel();
        moKeyEnvironmentalInsurer = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel79 = new javax.swing.JPanel();
        jlEnvironmentalPolicy = new javax.swing.JLabel();
        moTextEnvironmentalPolicy = new sa.lib.gui.bean.SBeanFieldText();
        jPanel45 = new javax.swing.JPanel();
        jlMerchandiseInsurer = new javax.swing.JLabel();
        moKeyMerchandiseInsurer = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel80 = new javax.swing.JPanel();
        jlMerchandisePolicy = new javax.swing.JLabel();
        moTextMerchandisePolicy = new sa.lib.gui.bean.SBeanFieldText();
        jPanel81 = new javax.swing.JPanel();
        jlPremium = new javax.swing.JLabel();
        moTextPremium = new sa.lib.gui.bean.SBeanFieldText();
        jPanel28 = new javax.swing.JPanel();
        jlBizPartner = new javax.swing.JLabel();
        moKeyBizPartner = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel76 = new javax.swing.JPanel();
        jlCfdiUsage = new javax.swing.JLabel();
        moKeyCfdiUsage = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel77 = new javax.swing.JPanel();
        jlCfdiRelated = new javax.swing.JLabel();
        moTextCfdiRelated = new sa.lib.gui.bean.SBeanFieldText();
        jPanel5 = new javax.swing.JPanel();
        jPanel33 = new javax.swing.JPanel();
        jlVehicle = new javax.swing.JLabel();
        moKeyVehicle = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel34 = new javax.swing.JPanel();
        jlPlate = new javax.swing.JLabel();
        moTextPlate = new sa.lib.gui.bean.SBeanFieldText();
        jPanel35 = new javax.swing.JPanel();
        jlPermissonType = new javax.swing.JLabel();
        moKeyPermissonType = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel36 = new javax.swing.JPanel();
        jlPermissonNumber = new javax.swing.JLabel();
        moTextPermissonNumber = new sa.lib.gui.bean.SBeanFieldText();
        jPanel64 = new javax.swing.JPanel();
        jlInsurer = new javax.swing.JLabel();
        moKeyInsurer = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel37 = new javax.swing.JPanel();
        jlInsurancePolicy = new javax.swing.JLabel();
        moTextInsurancePolicy = new sa.lib.gui.bean.SBeanFieldText();
        jPanel38 = new javax.swing.JPanel();
        jlVehConfiguration = new javax.swing.JLabel();
        moKeyVehConfiguration = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel40 = new javax.swing.JPanel();
        jlTrailer1 = new javax.swing.JLabel();
        moKeyTrailer1 = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel42 = new javax.swing.JPanel();
        jlTrailerSubtype1 = new javax.swing.JLabel();
        moKeyTrailerSubtype1 = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel41 = new javax.swing.JPanel();
        jlTrailerPlate1 = new javax.swing.JLabel();
        moTextTrailerPlate1 = new sa.lib.gui.bean.SBeanFieldText();
        jPanel70 = new javax.swing.JPanel();
        jlTrailer2 = new javax.swing.JLabel();
        moKeyTrailer2 = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel72 = new javax.swing.JPanel();
        jlTrailerSubtype2 = new javax.swing.JLabel();
        moKeyTrailerSubtype2 = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel71 = new javax.swing.JPanel();
        jlTrailerPlate2 = new javax.swing.JLabel();
        moTextTrailerPlate2 = new sa.lib.gui.bean.SBeanFieldText();
        jPanel6 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jPanel31 = new javax.swing.JPanel();
        moRadioMyLocations = new sa.lib.gui.bean.SBeanFieldRadio();
        jPanel22 = new javax.swing.JPanel();
        moRadioCustomerLocations = new sa.lib.gui.bean.SBeanFieldRadio();
        jPanel32 = new javax.swing.JPanel();
        moRadioSupplierLocations = new sa.lib.gui.bean.SBeanFieldRadio();
        jPanel8 = new javax.swing.JPanel();
        jPanel55 = new javax.swing.JPanel();
        jlDriver = new javax.swing.JLabel();
        moKeyDriver = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel57 = new javax.swing.JPanel();
        jlDriverFiscalId = new javax.swing.JLabel();
        moTextDriverFiscalId = new sa.lib.gui.bean.SBeanFieldText();
        jPanel56 = new javax.swing.JPanel();
        jlDriverLicense = new javax.swing.JLabel();
        moTextDriverLicense = new sa.lib.gui.bean.SBeanFieldText();
        jPanel58 = new javax.swing.JPanel();
        jlOwner = new javax.swing.JLabel();
        moKeyOwner = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel59 = new javax.swing.JPanel();
        jlOwnerFiscalId = new javax.swing.JLabel();
        moTextOwnerFiscalId = new sa.lib.gui.bean.SBeanFieldText();
        jPanel61 = new javax.swing.JPanel();
        jlTransportationPartOwner = new javax.swing.JLabel();
        moKeyTransportationPartOwner = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel60 = new javax.swing.JPanel();
        jlLessee = new javax.swing.JLabel();
        moKeyLessee = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel73 = new javax.swing.JPanel();
        jlLesseeFiscalId = new javax.swing.JLabel();
        moTextLesseeFiscalId = new sa.lib.gui.bean.SBeanFieldText();
        jPanel62 = new javax.swing.JPanel();
        jlTransportationPartLessee = new javax.swing.JLabel();
        moKeyTransportationPartLessee = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel74 = new javax.swing.JPanel();
        jlNotified = new javax.swing.JLabel();
        moKeyNotified = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel75 = new javax.swing.JPanel();
        jlNotifiedFiscalId = new javax.swing.JLabel();
        moTextNotifiedFiscalId = new sa.lib.gui.bean.SBeanFieldText();
        jPanel27 = new javax.swing.JPanel();
        jlTotalDistance = new javax.swing.JLabel();
        moDecimalTotalDistance = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel29 = new javax.swing.JPanel();
        jlGrossWeight = new javax.swing.JLabel();
        moDecimalGrossWeight = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel43 = new javax.swing.JPanel();
        jlGrossWeightUnit = new javax.swing.JLabel();
        moKeyGrossWeightUnit = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel4 = new javax.swing.JPanel();
        jpDestinies = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();

        jPanel15.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel23.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del embarque:"));
        jPanel23.setLayout(new java.awt.GridLayout(17, 1, 0, 5));

        jPanel21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFiscalIdReceptor.setText("Receptor:");
        jlFiscalIdReceptor.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel21.add(jlFiscalIdReceptor);

        moTextFiscalIdReceptor.setEnabled(false);
        jPanel21.add(moTextFiscalIdReceptor);

        moTextTaxRegime.setToolTipText("Regimen fiscal");
        moTextTaxRegime.setEnabled(false);
        jPanel21.add(moTextTaxRegime);

        jPanel23.add(jPanel21);

        jPanel46.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBillOfLadingTp.setText("CFDI tipo:*");
        jlBillOfLadingTp.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel46.add(jlBillOfLadingTp);

        moTextBillOfLadingTp.setEnabled(false);
        jPanel46.add(moTextBillOfLadingTp);

        jPanel23.add(jPanel46);

        jPanel25.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moBoolInternationalShip.setText("Transporte internacional");
        moBoolInternationalShip.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel25.add(moBoolInternationalShip);

        jPanel23.add(jPanel25);

        jPanel26.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlInputOutput.setText("Entrada o salida:");
        jlInputOutput.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel26.add(jlInputOutput);

        moKeyInputOutput.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "N/A", "Entrada", "Salida" }));
        moKeyInputOutput.setEnabled(false);
        moKeyInputOutput.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel26.add(moKeyInputOutput);

        jPanel23.add(jPanel26);

        jPanel39.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlInputOutputWay.setText("V√≠a entrada salida:");
        jlInputOutputWay.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel39.add(jlInputOutputWay);

        moKeyInputOutputWay.setEnabled(false);
        moKeyInputOutputWay.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel39.add(moKeyInputOutputWay);

        jPanel23.add(jPanel39);

        jPanel82.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCountry.setText("Pa√≠s entrada salida:");
        jlCountry.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel82.add(jlCountry);

        moKeyCountry.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel82.add(moKeyCountry);

        jPanel23.add(jPanel82);

        jPanel78.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSerie.setText("Serie:");
        jlSerie.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel78.add(jlSerie);

        moTextSerie.setEnabled(false);
        jPanel78.add(moTextSerie);

        jPanel23.add(jPanel78);

        jPanel24.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNumber.setText("Folio:*");
        jlNumber.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel24.add(jlNumber);
        jPanel24.add(moTextNumber);

        jPanel23.add(jPanel24);

        jPanel30.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDate.setText("Fecha:*");
        jlDate.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel30.add(jlDate);
        jPanel30.add(moDateDate);

        jPanel23.add(jPanel30);

        jPanel44.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlEnvironmentalInsurer.setText("Aseg. medio ambiente:");
        jlEnvironmentalInsurer.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel44.add(jlEnvironmentalInsurer);

        moKeyEnvironmentalInsurer.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel44.add(moKeyEnvironmentalInsurer);

        jPanel23.add(jPanel44);

        jPanel79.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlEnvironmentalPolicy.setText("Poliza med. ambiente:");
        jlEnvironmentalPolicy.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel79.add(jlEnvironmentalPolicy);

        moTextEnvironmentalPolicy.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel79.add(moTextEnvironmentalPolicy);

        jPanel23.add(jPanel79);

        jPanel45.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlMerchandiseInsurer.setText("Aseg. mercancia:");
        jlMerchandiseInsurer.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel45.add(jlMerchandiseInsurer);

        moKeyMerchandiseInsurer.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel45.add(moKeyMerchandiseInsurer);

        jPanel23.add(jPanel45);

        jPanel80.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlMerchandisePolicy.setText("Poliza mercancia:");
        jlMerchandisePolicy.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel80.add(jlMerchandisePolicy);

        moTextMerchandisePolicy.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel80.add(moTextMerchandisePolicy);

        jPanel23.add(jPanel80);

        jPanel81.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPremium.setText("Prima seguro:");
        jlPremium.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel81.add(jlPremium);

        moTextPremium.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel81.add(moTextPremium);

        jPanel23.add(jPanel81);

        jPanel28.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBizPartner.setText("Asoc. negocios:*");
        jlBizPartner.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel28.add(jlBizPartner);

        moKeyBizPartner.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel28.add(moKeyBizPartner);

        jPanel23.add(jPanel28);

        jPanel76.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCfdiUsage.setText("Uso CFDI:");
        jlCfdiUsage.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel76.add(jlCfdiUsage);

        moKeyCfdiUsage.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel76.add(moKeyCfdiUsage);

        jPanel23.add(jPanel76);

        jPanel77.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCfdiRelated.setText("CFDI relacionado:");
        jlCfdiRelated.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel77.add(jlCfdiRelated);

        moTextCfdiRelated.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel77.add(moTextCfdiRelated);

        jPanel23.add(jPanel77);

        jPanel1.add(jPanel23, java.awt.BorderLayout.WEST);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del veh√≠culo:"));
        jPanel5.setLayout(new java.awt.GridLayout(15, 1, 0, 5));

        jPanel33.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlVehicle.setText("Veh√≠culo:*");
        jlVehicle.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel33.add(jlVehicle);

        moKeyVehicle.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel33.add(moKeyVehicle);

        jPanel5.add(jPanel33);

        jPanel34.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPlate.setText("Placa:");
        jlPlate.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel34.add(jlPlate);

        moTextPlate.setEditable(false);
        moTextPlate.setEnabled(false);
        jPanel34.add(moTextPlate);

        jPanel5.add(jPanel34);

        jPanel35.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPermissonType.setText("Tipo permiso SCT:");
        jlPermissonType.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel35.add(jlPermissonType);

        moKeyPermissonType.setEnabled(false);
        moKeyPermissonType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel35.add(moKeyPermissonType);

        jPanel5.add(jPanel35);

        jPanel36.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPermissonNumber.setText("Num permiso SCT:");
        jlPermissonNumber.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel36.add(jlPermissonNumber);

        moTextPermissonNumber.setEditable(false);
        moTextPermissonNumber.setEnabled(false);
        moTextPermissonNumber.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel36.add(moTextPermissonNumber);

        jPanel5.add(jPanel36);

        jPanel64.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlInsurer.setText("Aseguradora:");
        jlInsurer.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel64.add(jlInsurer);

        moKeyInsurer.setEnabled(false);
        moKeyInsurer.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel64.add(moKeyInsurer);

        jPanel5.add(jPanel64);

        jPanel37.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlInsurancePolicy.setText("P√≥liza de seguro:");
        jlInsurancePolicy.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel37.add(jlInsurancePolicy);

        moTextInsurancePolicy.setEditable(false);
        moTextInsurancePolicy.setEnabled(false);
        moTextInsurancePolicy.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel37.add(moTextInsurancePolicy);

        jPanel5.add(jPanel37);

        jPanel38.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlVehConfiguration.setText("Conf. vehicular:");
        jlVehConfiguration.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel38.add(jlVehConfiguration);

        moKeyVehConfiguration.setEnabled(false);
        moKeyVehConfiguration.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel38.add(moKeyVehConfiguration);

        jPanel5.add(jPanel38);

        jPanel40.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTrailer1.setText("Remolque 1:");
        jlTrailer1.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel40.add(jlTrailer1);

        moKeyTrailer1.setEditable(true);
        moKeyTrailer1.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel40.add(moKeyTrailer1);

        jPanel5.add(jPanel40);

        jPanel42.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTrailerSubtype1.setText("Subtipo rem 1:");
        jlTrailerSubtype1.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel42.add(jlTrailerSubtype1);

        moKeyTrailerSubtype1.setEnabled(false);
        moKeyTrailerSubtype1.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel42.add(moKeyTrailerSubtype1);

        jPanel5.add(jPanel42);

        jPanel41.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTrailerPlate1.setText("Placa rem 1:");
        jlTrailerPlate1.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel41.add(jlTrailerPlate1);

        moTextTrailerPlate1.setEditable(false);
        moTextTrailerPlate1.setEnabled(false);
        moTextTrailerPlate1.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel41.add(moTextTrailerPlate1);

        jPanel5.add(jPanel41);

        jPanel70.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTrailer2.setText("Remolque 2:");
        jlTrailer2.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel70.add(jlTrailer2);

        moKeyTrailer2.setEditable(true);
        moKeyTrailer2.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel70.add(moKeyTrailer2);

        jPanel5.add(jPanel70);

        jPanel72.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTrailerSubtype2.setText("Subtipo rem 2:");
        jlTrailerSubtype2.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel72.add(jlTrailerSubtype2);

        moKeyTrailerSubtype2.setEnabled(false);
        moKeyTrailerSubtype2.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel72.add(moKeyTrailerSubtype2);

        jPanel5.add(jPanel72);

        jPanel71.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTrailerPlate2.setText("Placa rem 2:");
        jlTrailerPlate2.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel71.add(jlTrailerPlate2);

        moTextTrailerPlate2.setEditable(false);
        moTextTrailerPlate2.setEnabled(false);
        moTextTrailerPlate2.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel71.add(moTextTrailerPlate2);

        jPanel5.add(jPanel71);

        jPanel1.add(jPanel5, java.awt.BorderLayout.CENTER);

        jPanel6.setLayout(new java.awt.BorderLayout());

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Ubicaciones de:"));
        jPanel9.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel31.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        bgTypeLocations.add(moRadioMyLocations);
        moRadioMyLocations.setSelected(true);
        moRadioMyLocations.setText("Propias");
        jPanel31.add(moRadioMyLocations);

        jPanel9.add(jPanel31);

        jPanel22.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        bgTypeLocations.add(moRadioCustomerLocations);
        moRadioCustomerLocations.setText("Clientes");
        jPanel22.add(moRadioCustomerLocations);

        jPanel9.add(jPanel22);

        jPanel32.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        bgTypeLocations.add(moRadioSupplierLocations);
        moRadioSupplierLocations.setText("Proveedores");
        moRadioSupplierLocations.setPreferredSize(new java.awt.Dimension(130, 23));
        jPanel32.add(moRadioSupplierLocations);

        jPanel9.add(jPanel32);

        jPanel6.add(jPanel9, java.awt.BorderLayout.SOUTH);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos adicionales:"));
        jPanel8.setLayout(new java.awt.GridLayout(14, 1, 0, 5));

        jPanel55.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDriver.setText("Operador:*");
        jlDriver.setPreferredSize(new java.awt.Dimension(110, 23));
        jPanel55.add(jlDriver);

        moKeyDriver.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "No", "S√≠" }));
        moKeyDriver.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel55.add(moKeyDriver);

        jPanel8.add(jPanel55);

        jPanel57.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDriverFiscalId.setText("RFC operador:");
        jlDriverFiscalId.setPreferredSize(new java.awt.Dimension(110, 23));
        jPanel57.add(jlDriverFiscalId);

        moTextDriverFiscalId.setEnabled(false);
        moTextDriverFiscalId.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel57.add(moTextDriverFiscalId);

        jPanel8.add(jPanel57);

        jPanel56.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDriverLicense.setText("Licencia operador:");
        jlDriverLicense.setPreferredSize(new java.awt.Dimension(110, 23));
        jPanel56.add(jlDriverLicense);

        moTextDriverLicense.setEnabled(false);
        moTextDriverLicense.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel56.add(moTextDriverLicense);

        jPanel8.add(jPanel56);

        jPanel58.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlOwner.setText("Propietario:");
        jlOwner.setPreferredSize(new java.awt.Dimension(110, 23));
        jPanel58.add(jlOwner);

        moKeyOwner.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "No", "S√≠" }));
        moKeyOwner.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel58.add(moKeyOwner);

        jPanel8.add(jPanel58);

        jPanel59.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlOwnerFiscalId.setText("RFC propietario:");
        jlOwnerFiscalId.setPreferredSize(new java.awt.Dimension(110, 23));
        jPanel59.add(jlOwnerFiscalId);

        moTextOwnerFiscalId.setEnabled(false);
        moTextOwnerFiscalId.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel59.add(moTextOwnerFiscalId);

        jPanel8.add(jPanel59);

        jPanel61.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTransportationPartOwner.setText("Parte transporte:");
        jlTransportationPartOwner.setPreferredSize(new java.awt.Dimension(110, 23));
        jPanel61.add(jlTransportationPartOwner);

        moKeyTransportationPartOwner.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "No", "S√≠" }));
        moKeyTransportationPartOwner.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel61.add(moKeyTransportationPartOwner);

        jPanel8.add(jPanel61);

        jPanel60.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlLessee.setText("Arrendatario:");
        jlLessee.setPreferredSize(new java.awt.Dimension(110, 23));
        jPanel60.add(jlLessee);

        moKeyLessee.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "No", "S√≠" }));
        moKeyLessee.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel60.add(moKeyLessee);

        jPanel8.add(jPanel60);

        jPanel73.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlLesseeFiscalId.setText("RFC arrendatario:");
        jlLesseeFiscalId.setPreferredSize(new java.awt.Dimension(110, 23));
        jPanel73.add(jlLesseeFiscalId);

        moTextLesseeFiscalId.setEnabled(false);
        moTextLesseeFiscalId.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel73.add(moTextLesseeFiscalId);

        jPanel8.add(jPanel73);

        jPanel62.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTransportationPartLessee.setText("Parte transporte:");
        jlTransportationPartLessee.setPreferredSize(new java.awt.Dimension(110, 23));
        jPanel62.add(jlTransportationPartLessee);

        moKeyTransportationPartLessee.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "No", "S√≠" }));
        moKeyTransportationPartLessee.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel62.add(moKeyTransportationPartLessee);

        jPanel8.add(jPanel62);

        jPanel74.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNotified.setText("Notificado:");
        jlNotified.setPreferredSize(new java.awt.Dimension(110, 23));
        jPanel74.add(jlNotified);

        moKeyNotified.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "No", "S√≠" }));
        moKeyNotified.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel74.add(moKeyNotified);

        jPanel8.add(jPanel74);

        jPanel75.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNotifiedFiscalId.setText("RFC notificado:");
        jlNotifiedFiscalId.setPreferredSize(new java.awt.Dimension(110, 23));
        jPanel75.add(jlNotifiedFiscalId);

        moTextNotifiedFiscalId.setEnabled(false);
        moTextNotifiedFiscalId.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel75.add(moTextNotifiedFiscalId);

        jPanel8.add(jPanel75);

        jPanel27.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTotalDistance.setText("Tot dist. recorrida:*");
        jlTotalDistance.setPreferredSize(new java.awt.Dimension(110, 23));
        jPanel27.add(jlTotalDistance);
        jPanel27.add(moDecimalTotalDistance);

        jPanel8.add(jPanel27);

        jPanel29.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlGrossWeight.setText("Peso bruto total:*");
        jlGrossWeight.setPreferredSize(new java.awt.Dimension(110, 23));
        jPanel29.add(jlGrossWeight);
        jPanel29.add(moDecimalGrossWeight);

        jPanel8.add(jPanel29);

        jPanel43.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlGrossWeightUnit.setText("Unidad peso bruto:*");
        jlGrossWeightUnit.setPreferredSize(new java.awt.Dimension(110, 23));
        jPanel43.add(jlGrossWeightUnit);

        moKeyGrossWeightUnit.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel43.add(moKeyGrossWeightUnit);

        jPanel8.add(jPanel43);

        jPanel6.add(jPanel8, java.awt.BorderLayout.NORTH);

        jPanel1.add(jPanel6, java.awt.BorderLayout.EAST);

        jPanel15.add(jPanel1, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel15, java.awt.BorderLayout.NORTH);

        jPanel4.setLayout(new java.awt.BorderLayout(5, 5));

        jpDestinies.setFocusable(false);
        jpDestinies.setLayout(new java.awt.BorderLayout());

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Ubicaciones del traslado:"));
        jPanel10.setLayout(new java.awt.BorderLayout());
        jpDestinies.add(jPanel10, java.awt.BorderLayout.CENTER);

        jPanel4.add(jpDestinies, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel4, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgTypeLocations;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel33;
    private javax.swing.JPanel jPanel34;
    private javax.swing.JPanel jPanel35;
    private javax.swing.JPanel jPanel36;
    private javax.swing.JPanel jPanel37;
    private javax.swing.JPanel jPanel38;
    private javax.swing.JPanel jPanel39;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel40;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JPanel jPanel42;
    private javax.swing.JPanel jPanel43;
    private javax.swing.JPanel jPanel44;
    private javax.swing.JPanel jPanel45;
    private javax.swing.JPanel jPanel46;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel55;
    private javax.swing.JPanel jPanel56;
    private javax.swing.JPanel jPanel57;
    private javax.swing.JPanel jPanel58;
    private javax.swing.JPanel jPanel59;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel60;
    private javax.swing.JPanel jPanel61;
    private javax.swing.JPanel jPanel62;
    private javax.swing.JPanel jPanel64;
    private javax.swing.JPanel jPanel70;
    private javax.swing.JPanel jPanel71;
    private javax.swing.JPanel jPanel72;
    private javax.swing.JPanel jPanel73;
    private javax.swing.JPanel jPanel74;
    private javax.swing.JPanel jPanel75;
    private javax.swing.JPanel jPanel76;
    private javax.swing.JPanel jPanel77;
    private javax.swing.JPanel jPanel78;
    private javax.swing.JPanel jPanel79;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel80;
    private javax.swing.JPanel jPanel81;
    private javax.swing.JPanel jPanel82;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JLabel jlBillOfLadingTp;
    private javax.swing.JLabel jlBizPartner;
    private javax.swing.JLabel jlCfdiRelated;
    private javax.swing.JLabel jlCfdiUsage;
    private javax.swing.JLabel jlCountry;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlDriver;
    private javax.swing.JLabel jlDriverFiscalId;
    private javax.swing.JLabel jlDriverLicense;
    private javax.swing.JLabel jlEnvironmentalInsurer;
    private javax.swing.JLabel jlEnvironmentalPolicy;
    private javax.swing.JLabel jlFiscalIdReceptor;
    private javax.swing.JLabel jlGrossWeight;
    private javax.swing.JLabel jlGrossWeightUnit;
    private javax.swing.JLabel jlInputOutput;
    private javax.swing.JLabel jlInputOutputWay;
    private javax.swing.JLabel jlInsurancePolicy;
    private javax.swing.JLabel jlInsurer;
    private javax.swing.JLabel jlLessee;
    private javax.swing.JLabel jlLesseeFiscalId;
    private javax.swing.JLabel jlMerchandiseInsurer;
    private javax.swing.JLabel jlMerchandisePolicy;
    private javax.swing.JLabel jlNotified;
    private javax.swing.JLabel jlNotifiedFiscalId;
    private javax.swing.JLabel jlNumber;
    private javax.swing.JLabel jlOwner;
    private javax.swing.JLabel jlOwnerFiscalId;
    private javax.swing.JLabel jlPermissonNumber;
    private javax.swing.JLabel jlPermissonType;
    private javax.swing.JLabel jlPlate;
    private javax.swing.JLabel jlPremium;
    private javax.swing.JLabel jlSerie;
    private javax.swing.JLabel jlTotalDistance;
    private javax.swing.JLabel jlTrailer1;
    private javax.swing.JLabel jlTrailer2;
    private javax.swing.JLabel jlTrailerPlate1;
    private javax.swing.JLabel jlTrailerPlate2;
    private javax.swing.JLabel jlTrailerSubtype1;
    private javax.swing.JLabel jlTrailerSubtype2;
    private javax.swing.JLabel jlTransportationPartLessee;
    private javax.swing.JLabel jlTransportationPartOwner;
    private javax.swing.JLabel jlVehConfiguration;
    private javax.swing.JLabel jlVehicle;
    private javax.swing.JPanel jpDestinies;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolInternationalShip;
    private sa.lib.gui.bean.SBeanFieldDate moDateDate;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecimalGrossWeight;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecimalTotalDistance;
    private sa.lib.gui.bean.SBeanFieldKey moKeyBizPartner;
    private sa.lib.gui.bean.SBeanFieldKey moKeyCfdiUsage;
    private sa.lib.gui.bean.SBeanFieldKey moKeyCountry;
    private sa.lib.gui.bean.SBeanFieldKey moKeyDriver;
    private sa.lib.gui.bean.SBeanFieldKey moKeyEnvironmentalInsurer;
    private sa.lib.gui.bean.SBeanFieldKey moKeyGrossWeightUnit;
    private sa.lib.gui.bean.SBeanFieldKey moKeyInputOutput;
    private sa.lib.gui.bean.SBeanFieldKey moKeyInputOutputWay;
    private sa.lib.gui.bean.SBeanFieldKey moKeyInsurer;
    private sa.lib.gui.bean.SBeanFieldKey moKeyLessee;
    private sa.lib.gui.bean.SBeanFieldKey moKeyMerchandiseInsurer;
    private sa.lib.gui.bean.SBeanFieldKey moKeyNotified;
    private sa.lib.gui.bean.SBeanFieldKey moKeyOwner;
    private sa.lib.gui.bean.SBeanFieldKey moKeyPermissonType;
    private sa.lib.gui.bean.SBeanFieldKey moKeyTrailer1;
    private sa.lib.gui.bean.SBeanFieldKey moKeyTrailer2;
    private sa.lib.gui.bean.SBeanFieldKey moKeyTrailerSubtype1;
    private sa.lib.gui.bean.SBeanFieldKey moKeyTrailerSubtype2;
    private sa.lib.gui.bean.SBeanFieldKey moKeyTransportationPartLessee;
    private sa.lib.gui.bean.SBeanFieldKey moKeyTransportationPartOwner;
    private sa.lib.gui.bean.SBeanFieldKey moKeyVehConfiguration;
    private sa.lib.gui.bean.SBeanFieldKey moKeyVehicle;
    private sa.lib.gui.bean.SBeanFieldRadio moRadioCustomerLocations;
    private sa.lib.gui.bean.SBeanFieldRadio moRadioMyLocations;
    private sa.lib.gui.bean.SBeanFieldRadio moRadioSupplierLocations;
    private sa.lib.gui.bean.SBeanFieldText moTextBillOfLadingTp;
    private sa.lib.gui.bean.SBeanFieldText moTextCfdiRelated;
    private sa.lib.gui.bean.SBeanFieldText moTextDriverFiscalId;
    private sa.lib.gui.bean.SBeanFieldText moTextDriverLicense;
    private sa.lib.gui.bean.SBeanFieldText moTextEnvironmentalPolicy;
    private sa.lib.gui.bean.SBeanFieldText moTextFiscalIdReceptor;
    private sa.lib.gui.bean.SBeanFieldText moTextInsurancePolicy;
    private sa.lib.gui.bean.SBeanFieldText moTextLesseeFiscalId;
    private sa.lib.gui.bean.SBeanFieldText moTextMerchandisePolicy;
    private sa.lib.gui.bean.SBeanFieldText moTextNotifiedFiscalId;
    private sa.lib.gui.bean.SBeanFieldText moTextNumber;
    private sa.lib.gui.bean.SBeanFieldText moTextOwnerFiscalId;
    private sa.lib.gui.bean.SBeanFieldText moTextPermissonNumber;
    private sa.lib.gui.bean.SBeanFieldText moTextPlate;
    private sa.lib.gui.bean.SBeanFieldText moTextPremium;
    private sa.lib.gui.bean.SBeanFieldText moTextSerie;
    private sa.lib.gui.bean.SBeanFieldText moTextTaxRegime;
    private sa.lib.gui.bean.SBeanFieldText moTextTrailerPlate1;
    private sa.lib.gui.bean.SBeanFieldText moTextTrailerPlate2;
    // End of variables declaration//GEN-END:variables

    /*
    * Private methods:
    */

    private void windowActivate() {
        mbFormSettingsOk = true;
        if (((SClientInterface) miClient).getSessionXXX().getCurrentCompanyBranchId() == 0) {
            miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_GUI_SESSION_BRANCH);   // no company branch selected
            mbFormSettingsOk = false;
            actionCancel();
        }
    }
    
    @Override
    public void actionCancel() {
        if (jbCancel.isEnabled()) {
            if (!mbFormSettingsOk) {
                mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
                setVisible(false);
            }
            else {
                super.actionCancel();
            }
        }
    }
    
    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 1050, 720);
        
        //moFieldKeyBizPartnerGroup = new SGuiFieldKeyGroup(miClient);
        moTextFiscalIdReceptor.setTextSettings(SGuiUtils.getLabelName(jlFiscalIdReceptor.getText()), 20);
        moTextBillOfLadingTp.setTextSettings(SGuiUtils.getLabelName(jlBillOfLadingTp), 1);
        moBoolInternationalShip.setBooleanSettings(moBoolInternationalShip.getText(), false);
        moKeyInputOutput.setKeySettings(miClient, SGuiUtils.getLabelName(jlInputOutput.getText()), false);
        moKeyInputOutputWay.setKeySettings(miClient, SGuiUtils.getLabelName(jlInputOutputWay.getText()), false);
        moKeyCountry.setKeySettings(miClient, SGuiUtils.getLabelName(jlCountry), false);
        moTextSerie.setTextSettings(SGuiUtils.getLabelName(jlSerie.getText()), 15);
        moTextNumber.setTextSettings(SGuiUtils.getLabelName(jlNumber.getText()), 15);
        moDateDate.setDateSettings(miClient, SGuiUtils.getLabelName(jlDate.getText()), true);
        moDecimalTotalDistance.setDecimalSettings(SGuiUtils.getLabelName(jlTotalDistance.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, true);
        moDecimalGrossWeight.setDecimalSettings(SGuiUtils.getLabelName(jlGrossWeight.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, true);
        moKeyGrossWeightUnit.setKeySettings(miClient, SGuiUtils.getLabelName(jlGrossWeightUnit.getText()), true);
        moKeyEnvironmentalInsurer.setKeySettings(miClient, SGuiUtils.getLabelName(jlEnvironmentalInsurer.getText()), false);
        moTextEnvironmentalPolicy.setTextSettings(SGuiUtils.getLabelName(jlEnvironmentalPolicy.getText()), 30, 0);
        moKeyMerchandiseInsurer.setKeySettings(miClient, SGuiUtils.getLabelName(jlMerchandiseInsurer.getText()), false);
        moTextMerchandisePolicy.setTextSettings(SGuiUtils.getLabelName(jlMerchandisePolicy.getText()), 30, 0);
        moTextPremium.setTextSettings(SGuiUtils.getLabelName(jlPremium.getText()), 30, 0);
        moKeyBizPartner.setKeySettings(miClient, SGuiUtils.getLabelName(jlBizPartner.getText()), true);
        moKeyCfdiUsage.setKeySettings(miClient, SGuiUtils.getLabelName(jlCfdiUsage.getText()), false);
        moKeyVehicle.setKeySettings(miClient, SGuiUtils.getLabelName(jlVehicle.getText()), true);
        moTextPlate.setTextSettings(SGuiUtils.getLabelName(jlPlate.getText()), 15);
        moKeyPermissonType.setKeySettings(miClient, SGuiUtils.getLabelName(jlPermissonType.getText()), false);
        moTextPermissonNumber.setTextSettings(SGuiUtils.getLabelName(jlPermissonNumber.getText()), 50);
        moKeyInsurer.setKeySettings(miClient, SGuiUtils.getLabelName(jlInsurer.getText()), true);
        moTextInsurancePolicy.setTextSettings(SGuiUtils.getLabelName(jlInsurancePolicy.getText()), 30);
        moKeyVehConfiguration.setKeySettings(miClient, SGuiUtils.getLabelName(jlVehConfiguration.getText()), true);
        moKeyTrailer1.setKeySettings(miClient, SGuiUtils.getLabelName(jlTrailer1.getText()), false);
        moKeyTrailerSubtype1.setKeySettings(miClient, SGuiUtils.getLabelName(jlTrailer1), false);
        moTextTrailerPlate1.setTextSettings(SGuiUtils.getLabelName(jlTrailerPlate1.getText()), 15);
        moKeyTrailer2.setKeySettings(miClient, SGuiUtils.getLabelName(jlTrailer2.getText()), false);
        moKeyTrailerSubtype2.setKeySettings(miClient, SGuiUtils.getLabelName(jlTrailer2), false);
        moTextTrailerPlate2.setTextSettings(SGuiUtils.getLabelName(jlTrailerPlate2.getText()), 15);
        moKeyDriver.setKeySettings(miClient, SGuiUtils.getLabelName(jlDriver), true);
        moTextDriverFiscalId.setTextSettings(SGuiUtils.getLabelName(jlDriverFiscalId.getText()), 25);
        moTextDriverLicense.setTextSettings(SGuiUtils.getLabelName(jlDriverLicense.getText()), 16);
        moKeyOwner.setKeySettings(miClient, SGuiUtils.getLabelName(jlOwner), false);
        moTextOwnerFiscalId.setTextSettings(SGuiUtils.getLabelName(jlOwnerFiscalId.getText()), 25);
        moKeyTransportationPartOwner.setKeySettings(miClient, SGuiUtils.getLabelName(jlTransportationPartOwner.getText()), false);
        moKeyLessee.setKeySettings(miClient, SGuiUtils.getLabelName(jlLessee), false);
        moTextLesseeFiscalId.setTextSettings(SGuiUtils.getLabelName(jlLesseeFiscalId.getText()), 25);
        moKeyTransportationPartLessee.setKeySettings(miClient, SGuiUtils.getLabelName(jlTransportationPartLessee.getText()), false);
        moKeyNotified.setKeySettings(miClient, SGuiUtils.getLabelName(jlNotified), false);
        moTextNotifiedFiscalId.setTextSettings(SGuiUtils.getLabelName(jlNotifiedFiscalId.getText()), 25);
        
        moFields.addField(moTextFiscalIdReceptor);
        moFields.addField(moTextBillOfLadingTp);
        moFields.addField(moBoolInternationalShip);
        moFields.addField(moKeyInputOutput);
        moFields.addField(moKeyInputOutputWay);
        moFields.addField(moKeyCountry);
        moFields.addField(moTextNumber);
        moFields.addField(moDateDate);
        moFields.addField(moDecimalTotalDistance);
        moFields.addField(moDecimalGrossWeight);
        moFields.addField(moKeyGrossWeightUnit);
        moFields.addField(moKeyEnvironmentalInsurer);
        moFields.addField(moTextEnvironmentalPolicy);
        moFields.addField(moKeyMerchandiseInsurer);
        moFields.addField(moTextMerchandisePolicy);
        moFields.addField(moTextPremium);
        moFields.addField(moKeyBizPartner);
        moFields.addField(moKeyCfdiUsage);
        moFields.addField(moKeyVehicle);
        moFields.addField(moTextPlate);
        moFields.addField(moKeyPermissonType);
        moFields.addField(moTextPermissonNumber);
        moFields.addField(moKeyInsurer);
        moFields.addField(moTextInsurancePolicy);
        moFields.addField(moKeyVehConfiguration);
        moFields.addField(moKeyTrailer1);
        moFields.addField(moKeyTrailerSubtype1);
        moFields.addField(moTextTrailerPlate1);
        moFields.addField(moKeyTrailer2);
        moFields.addField(moKeyTrailerSubtype2);
        moFields.addField(moTextTrailerPlate2);
        moFields.addField(moKeyDriver);
        moFields.addField(moTextDriverFiscalId);
        moFields.addField(moTextDriverLicense);
        moFields.addField(moKeyOwner);
        moFields.addField(moTextOwnerFiscalId);
        moFields.addField(moKeyTransportationPartOwner);
        moFields.addField(moKeyLessee);
        moFields.addField(moTextLesseeFiscalId);
        moFields.addField(moKeyTransportationPartLessee);
        moFields.addField(moKeyNotified);
        moFields.addField(moTextNotifiedFiscalId);
        
        moFields.setFormButton(jbSave);

        moGridLocations = new SGridPaneForm(miClient, SModConsts.LOG_BOL_LOCATION, SLibConsts.UNDEFINED, "Ubicaciones") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(true, true, true);
            }

            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> gridColumnsForm = new ArrayList<>();

                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT, "Tipo de ubicacion"));   //inicial, medio, final
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Distancia recorrida"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_M, "Origen"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_M, "Destino"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_M, "Asoc. de negocios"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_M, "Sucursal"));

                return gridColumnsForm;
            }

            @Override
            public void actionRowNew() {
                SGuiParams params = new SGuiParams();
                
                if (moKeyVehicle.getSelectedIndex() <= 0) {
                    miClient.showMsgBoxInformation(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlVehicle) + "'.");
                    moKeyVehicle.requestFocus();
                }
                else if (moKeyDriver.getSelectedIndex() <= 0) {
                    miClient.showMsgBoxInformation(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlDriver) + "'.");
                    moKeyDriver.requestFocus();
                }
                else {
                    params.getParamsMap().put(SModConsts.LOG_BOL, moRegistry);
                    params.getParamsMap().put(SModConsts.BPSU_BP, moKeyBizPartner.getValue());
                    params.getParamsMap().put(SModConsts.LOGX_LOCATION_TP, moRadioMyLocations.isSelected() ? 1 : moRadioCustomerLocations.isSelected() ? 2 : moRadioSupplierLocations.isSelected() ? 3 : 0);
                    params.getParamsMap().put(1, moGridLocations.getModel().getGridRows().isEmpty());
                    params.getParamsMap().put(SModConsts.LOG_BOL_LOCATION, moGridLocations.getModel().getGridRows());
                    
                    moFormParams = params;
                    super.actionRowNew();
                }
            }

            @Override
            public void actionRowEdit() {
                SGuiParams params = new SGuiParams();
                params.getParamsMap().put(SModConsts.LOG_BOL, moRegistry);
                params.getParamsMap().put(SModConsts.LOG_BOL_LOCATION, getFirstRows());
                moFormParams = params; 
                super.actionRowEdit();
            }
        };

        //mvFormGrids.add(moGridDestinies);
        moFormLocation = new SFormBolLocation(miClient, moRegistry, "Ubicaci√≥n");
        moGridLocations.setForm(moFormLocation);
        moGridLocations.setPaneFormOwner(this);


        jPanel10.add(moGridLocations, BorderLayout.CENTER);
    }
    
    private Vector<SGridRow> getFirstRows() {
        Vector<SGridRow> rows = new Vector<>(); 
        int selectedRow = moGridLocations.getTable().getSelectedRow();//.getSelectedGridRow().getRowPrimaryKey();
        for (int i = 0; i < selectedRow; i++) {
            rows.add(moGridLocations.getModel().getGridRows().get(i));
        }
        return rows;
    }

    private void enabledFields() {
        if (!moBoolInternationalShip.isSelected()) {
            moKeyInputOutput.setEnabled(false);
            moKeyInputOutputWay.setEnabled(false);
            moKeyCountry.setEnabled(false);
        }
        moKeyBizPartner.setEnabled(false);
        moKeyPermissonType.setEnabled(false);
        moKeyInsurer.setEnabled(false);
        moKeyVehConfiguration.setEnabled(false);
        moKeyTrailerSubtype1.setEnabled(false);
        moKeyTrailerSubtype2.setEnabled(false);
    }
    
    private void populateLocations() throws SQLException {
        try {
            Vector<SGridRow> vRows = new Vector<>();
            ArrayList<SDbBolLocation> aRows;

            aRows =  moRegistry.getBolLocations();
            for (SDbBolLocation row : aRows) {
                vRows.add(row);
            }
            moGridLocations.populateGrid(vRows);
            moGridLocations.clearSortKeys();
            moGridLocations.setSelectedGridRow(0);
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }

    private void updateTotalDistance() {
        double distance = 0;
        for (SGridRow row : moGridLocations.getModel().getGridRows()) {
                distance += ((SDbBolLocation) row).getDistance();
        }
        moDecimalTotalDistance.setValue(distance);
    }
    
    private void updateGrossWeight() {
        ArrayList<Integer> itemKeys = new ArrayList<>();
        double weight = 0;
        for (SGridRow row : moGridLocations.getModel().getGridRows()) {
            for (SDbBolMerchandiseQuantity qty : ((SDbBolLocation) row).getXtaMerchandiseQuantityCharge()) {
                itemKeys.add(qty.getXtaMerchandise().getFkItemId());
                weight += qty.getQuantity();
            }
        }
        moDecimalGrossWeight.setValue(weight);
    }
    
    private void setVehicleDriver(int vehPk){
        try {
            String sql = "SELECT id_driver FROM " + SModConsts.TablesMap.get(SModConsts.LOG_DRIVER_VEH) + " WHERE id_veh = " + vehPk;
            ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql);
            if (resultSet.next()) {
                moKeyDriver.setValue(new int[] { resultSet.getInt(1) } );
            }
        }
        catch(Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }
    
    private void actionKeyVehicle() {
        if (moKeyVehicle.getSelectedIndex() >= 1) {
            SDbVehicle veh = (SDbVehicle) miClient.getSession().readRegistry(SModConsts.LOG_VEH, moKeyVehicle.getValue() );
            moTextPlate.setText(veh.getPlate());
            SGuiUtils.locateItemByCode(moKeyPermissonType, veh.getPermissonSctType());
            moTextPermissonNumber.setText(veh.getPermissonSctNumber());
            moKeyInsurer.setValue(new int[] { veh.getFkInsurerId_n() });
            moTextInsurancePolicy.setText(veh.getInsurancePolicy());
            SGuiUtils.locateItemByCode(moKeyVehConfiguration, veh.getVehicleConfiguration());
            setVehicleDriver(veh.getPkVehicleId());
        }
        else {
            moTextPlate.setText("");
            moKeyPermissonType.setSelectedIndex(0);
            moTextPermissonNumber.setText("");
            moKeyInsurer.setSelectedIndex(0);
            moTextInsurancePolicy.setText("");
            moKeyVehConfiguration.setSelectedIndex(0);
        }
    }
    
    private void actionKeyTrailer1(){
        if (moKeyTrailer1.getSelectedIndex() >= 1) {
            SDbTrailer tra = (SDbTrailer) miClient.getSession().readRegistry(SModConsts.LOG_TRAILER, moKeyTrailer1.getValue() );
            SGuiUtils.locateItemByCode(moKeyTrailerSubtype1, tra.getTrailerSubtype());
            moTextTrailerPlate1.setText(tra.getPlate());
        }        
        else {
            moKeyTrailerSubtype1.setSelectedIndex(0);
            moTextTrailerPlate1.setText("");
        }
    }
    
    private void actionKeyTrailer2(){
        if (moKeyTrailer2.getSelectedIndex() >= 1) {
            SDbTrailer tra = (SDbTrailer) miClient.getSession().readRegistry(SModConsts.LOG_TRAILER, moKeyTrailer2.getValue() );
            SGuiUtils.locateItemByCode(moKeyTrailerSubtype2, tra.getTrailerSubtype());
            moTextTrailerPlate2.setText(tra.getPlate());
        }
        else {
            moKeyTrailerSubtype2.setSelectedIndex(0);
            moTextTrailerPlate2.setText("");
        }
    }
    
    private void actionKeyDriver() {
        if (moKeyDriver.getSelectedIndex() >= 1) {
            SDbBolPerson per = (SDbBolPerson) miClient.getSession().readRegistry(SModConsts.LOG_BOL_PERSON, moKeyDriver.getValue() );
            moTextDriverFiscalId.setText("".equals(per.getFiscalId()) && !"".equals(per.getFiscalForeginId()) ? per.getFiscalForeginId() : per.getFiscalId());
            moTextDriverLicense.setText(per.getDriverLicense());
        }
        else {
            moTextDriverFiscalId.setText("");
            moTextDriverLicense.setText("");
        }
    }
    
    private void actionKeyOwner() {
        if (moKeyOwner.getSelectedIndex() >= 1) {
            SDbBolPerson per = (SDbBolPerson) miClient.getSession().readRegistry(SModConsts.LOG_BOL_PERSON, moKeyOwner.getValue() );
            moTextOwnerFiscalId.setText("".equals(per.getFiscalId()) && !"".equals(per.getFiscalForeginId()) ? per.getFiscalForeginId() : per.getFiscalId());
        }
        else {
            moTextOwnerFiscalId.setText("");
        }
    } 
    
    private void actionKeyLessee() {
        if (moKeyLessee.getSelectedIndex() >= 1) {
            SDbBolPerson per = (SDbBolPerson) miClient.getSession().readRegistry(SModConsts.LOG_BOL_PERSON, moKeyLessee.getValue() );
            moTextLesseeFiscalId.setText("".equals(per.getFiscalId()) && !"".equals(per.getFiscalForeginId()) ? per.getFiscalForeginId() : per.getFiscalId());
        }
        else {
            moTextLesseeFiscalId.setText("");
        }
    } 
    
    private void actionKeyNotified() {
        if (moKeyNotified.getSelectedIndex() >= 1) {
            SDbBolPerson per = (SDbBolPerson) miClient.getSession().readRegistry(SModConsts.LOG_BOL_PERSON, moKeyNotified.getValue() );
            moTextNotifiedFiscalId.setText("".equals(per.getFiscalId()) && !"".equals(per.getFiscalForeginId()) ? per.getFiscalForeginId() : per.getFiscalId());
        }
        else {
            moTextNotifiedFiscalId.setText("");
        }
    } 
    
    private void actionBoolInternationalShip() {
        moKeyInputOutput.setSelectedIndex(0);
        moKeyInputOutputWay.setSelectedIndex(0);
        moKeyCountry.setSelectedIndex(0);
        moKeyInputOutput.setEnabled(moBoolInternationalShip.isSelected());
        moKeyInputOutputWay.setEnabled(moBoolInternationalShip.isSelected());
        moKeyCountry.setEnabled(moBoolInternationalShip.isSelected());
    }
    
    private void actionLocations() {
        if (moRadioMyLocations.isSelected()) {
            moKeyBizPartner.removeAllItems();
            miClient.getSession().populateCatalogue(moKeyBizPartner, SModConsts.BPSU_BP, SLibConsts.UNDEFINED, null);
            moKeyBizPartner.setValue(new int[] { miClient.getSession().getConfigCompany().getCompanyId() });
            moKeyBizPartner.setEnabled(false);
        }
        else if (moRadioCustomerLocations.isSelected()) {
            moKeyBizPartner.removeAllItems();
            miClient.getSession().populateCatalogue(moKeyBizPartner, SModConsts.BPSU_BP, SDataConstantsSys.BPSS_CT_BP_CUS, null);
            moKeyBizPartner.setEnabled(true);
        }
        else if (moRadioSupplierLocations.isSelected()) {
            moKeyBizPartner.removeAllItems();
            miClient.getSession().populateCatalogue(moKeyBizPartner, SModConsts.BPSU_BP, SDataConstantsSys.BPSS_CT_BP_SUP, null);
            moKeyBizPartner.setEnabled(true);
        }
    }
    
    private SGuiValidation validateLocations() {
        SGuiValidation validation = new SGuiValidation();
        int start = 0;
        int end = 0;
        moRegistry.getBolLocations().clear();
        for (SGridRow row : moGridLocations.getModel().getGridRows()) {
            moRegistry.getBolLocations().add((SDbBolLocation) row);
        }
        for (SDbBolLocation location : moRegistry.getBolLocations()) {
            if (location.getLocationType() == 1) {
                start++;
            }
            else if (location.getLocationType() == 3) {
                end++;
            }
        }
        if (start == 0) {
            validation.setMessage("Debe existir una ubicaci√≥n inicial");
        }
        else if (start > 1) {
            validation.setMessage("Debe existir unicamente una ubicaci√≥n inicial");
        }
        if (end == 0) {
            validation.setMessage("Debe existir una ubicaci√≥n final");
        }
        if (end > 1) {
            validation.setMessage("Debe existir unicamente una ubicaci√≥n final");
        }
        
        return validation;
    }
    
    private SGuiValidation validateMerchandises() {
        SGuiValidation validation = new SGuiValidation();
        for (SDbBolMerchandise merch : moRegistry.getBolMerchandises()) {
            if (merch.getDiferenceWeightChargedDischarged() > 0) {
                validation.setMessage("El √≠tem " + merch.getXtaItem().getItem() + " no esta completamente descargado.");
            }
            else if (merch.getDiferenceWeightChargedDischarged() < 0) {
                validation.setMessage("El √≠tem " + merch.getXtaItem().getItem() + " tiene una mayor cantidad de descarga que de carga.");
            }
        }
        
        return validation;
    }
    
     private void saveDistanceLocations(SDbBillOfLading registry) {
        try {
            Statement statement = miClient.getSession().getDatabase().getConnection().createStatement();
            int[] startAdd = new int[] { 0, 0};
            int[] endAdd = new int [] { 0, 0};
            double distance = 0;
            for (SDbBolLocation loc : registry.getBolLocations()) {
                if (loc.getLocationType() == 1) { // Inicial
                    startAdd = new int[] { loc.getFkOriginBizPartnerAddress_n(), loc.getFkOriginAddressAddress_n() }; 
                }
                else if (loc.getLocationType() == 3) { // Final
                    endAdd = new int[] { loc.getFkDestinationBizPartnerAddress_n(), loc.getFkDestinationAddressAddress_n() };
                    distance = loc.getDistance();
                }
            }
            String sql = "SELECT * FROM log_dist_location "
                    + "WHERE (id_bpb_add_1 = " + startAdd[0] + " AND id_add_add_1 = " + startAdd[1] + " "
                    + "AND id_bpb_add_2 = " + endAdd[0] + " AND id_add_add_2 = " + endAdd[1] + ") OR ("
                    + "id_bpb_add_1 = " + endAdd[0] + " AND id_add_add_1 = " + endAdd[1] + " "
                    + "AND id_bpb_add_2 = " + startAdd[0] + " AND id_add_add_2 = " + startAdd[1] + ")"; 
            ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql);
            if (!resultSet.next()) {
                sql = "INSERT INTO log_dist_location VALUES ("
                        + startAdd[0] + ", " + startAdd[1] + ", "
                        + endAdd[0] + ", " + endAdd[1] + ", "
                        + distance + ");" ;
                statement.execute(sql);
            }
        }
        catch(Exception e) {}
    }


    /*
     * Public methods
     */

    @Override
    public void addAllListeners() {
        moBoolInternationalShip.addItemListener(this);
        moKeyVehicle.addItemListener(this);
        moKeyTrailer1.addItemListener(this);
        moKeyTrailer2.addItemListener(this);
        moKeyDriver.addItemListener(this);
        moKeyOwner.addItemListener(this);
        moKeyLessee.addItemListener(this);
        moKeyNotified.addItemListener(this);
        moRadioMyLocations.addItemListener(this);
        moRadioCustomerLocations.addItemListener(this);
        moRadioSupplierLocations.addItemListener(this);
    }

    @Override
    public void removeAllListeners() {
        moBoolInternationalShip.removeItemListener(this);
        moKeyVehicle.removeItemListener(this);
        moKeyTrailer1.removeItemListener(this);
        moKeyTrailer2.removeItemListener(this);
        moKeyDriver.removeItemListener(this);
        moKeyOwner.removeItemListener(this);
        moKeyLessee.removeItemListener(this);
        moKeyNotified.removeItemListener(this);
        moRadioMyLocations.removeItemListener(this);
        moRadioCustomerLocations.removeItemListener(this);
        moRadioSupplierLocations.removeItemListener(this);
    }

    @Override
    public void reloadCatalogues() {
        try {
            SCfdXmlCatalogs catalogs = ((SSessionCustom) miClient.getSession().getSessionCustom()).getCfdXmlCatalogs();
            catalogs.populateComboBox(moKeyInputOutputWay, SDataConstantsSys.TRNS_CFD_CAT_BOL_TRA, miClient.getSession().getSystemDate());
            catalogs.populateComboBox(moKeyCfdiUsage, SDataConstantsSys.TRNS_CFD_CAT_CFD_USE, miClient.getSession().getSystemDate());
            catalogs.populateComboBox(moKeyPermissonType, SDataConstantsSys.TRNS_CFD_CAT_BOL_PER_TP, miClient.getSession().getSystemDate());
            catalogs.populateComboBox(moKeyVehConfiguration, SDataConstantsSys.TRNS_CFD_CAT_BOL_MOTOR_CFG, miClient.getSession().getSystemDate());
            catalogs.populateComboBox(moKeyTrailerSubtype1, SDataConstantsSys.TRNS_CFD_CAT_BOL_TRAILER_STP, miClient.getSession().getSystemDate());
            catalogs.populateComboBox(moKeyTrailerSubtype2, SDataConstantsSys.TRNS_CFD_CAT_BOL_TRAILER_STP, miClient.getSession().getSystemDate());
            catalogs.populateComboBox(moKeyTransportationPartOwner, SDataConstantsSys.TRNS_CFD_CAT_BOL_TRANSP_PART, miClient.getSession().getSystemDate());
            catalogs.populateComboBox(moKeyTransportationPartLessee, SDataConstantsSys.TRNS_CFD_CAT_BOL_TRANSP_PART, miClient.getSession().getSystemDate());
            
            miClient.getSession().populateCatalogue(moKeyCountry, SModConsts.LOCU_CTY, SLibConsts.UNDEFINED, null);
            miClient.getSession().populateCatalogue(moKeyGrossWeightUnit, SModConsts.ITMU_UNIT, SLibConsts.UNDEFINED, null);
            miClient.getSession().populateCatalogue(moKeyEnvironmentalInsurer, SModConsts.LOG_INSURER, SLibConsts.UNDEFINED, null);
            miClient.getSession().populateCatalogue(moKeyMerchandiseInsurer, SModConsts.LOG_INSURER, SLibConsts.UNDEFINED, null);
            miClient.getSession().populateCatalogue(moKeyBizPartner, SModConsts.BPSU_BP, SLibConsts.UNDEFINED, null);
            miClient.getSession().populateCatalogue(moKeyVehicle, SModConsts.LOG_VEH, SLibConsts.UNDEFINED, null);
            miClient.getSession().populateCatalogue(moKeyInsurer, SModConsts.LOG_INSURER, SLibConsts.UNDEFINED, null);
            miClient.getSession().populateCatalogue(moKeyTrailer1, SModConsts.LOG_TRAILER, SLibConstants.UNDEFINED, null);
            miClient.getSession().populateCatalogue(moKeyTrailer2, SModConsts.LOG_TRAILER, SLibConstants.UNDEFINED, null);
            miClient.getSession().populateCatalogue(moKeyDriver, SModConsts.LOG_BOL_PERSON, SModSysConsts.LOGS_TP_BOL_PERSON_DRI, null);
            miClient.getSession().populateCatalogue(moKeyOwner, SModConsts.LOG_BOL_PERSON, SModSysConsts.LOGS_TP_BOL_PERSON_OWN, null);
            miClient.getSession().populateCatalogue(moKeyLessee, SModConsts.LOG_BOL_PERSON, SModSysConsts.LOGS_TP_BOL_PERSON_LES, null);
            miClient.getSession().populateCatalogue(moKeyNotified, SModConsts.LOG_BOL_PERSON, SModSysConsts.LOGS_TP_BOL_PERSON_NOT, null);
                        
            moKeyInputOutput.removeAllItems();
            SGuiItem entrada = new SGuiItem("Entrada");
            entrada.setCode("E"); 
            entrada.setCodeVisible(false);
            SGuiItem salida = new SGuiItem("Salida");
            salida.setCode("S"); 
            salida.setCodeVisible(false);
            moKeyInputOutput.addItem(new SGuiItem("(Seleccionar opci√≥n)"));
            moKeyInputOutput.addItem(entrada);
            moKeyInputOutput.addItem(salida);
            
            moTextPlate.setText("");
            moTextPermissonNumber.setText("");
            moTextInsurancePolicy.setText("");
            moTextTrailerPlate1.setText("");
            moTextTrailerPlate2.setText("");
            moTextDriverFiscalId.setText("");
            moTextDriverLicense.setText("");
            moTextOwnerFiscalId.setText("");
            moTextLesseeFiscalId.setText("");
            moTextNotifiedFiscalId.setText("");
        
            populateLocations();

        } catch (SQLException e) {
            SLibUtils.showException(this, e);
        }
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbBillOfLading) registry;
        
        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            moRegistry.computeNumber(miClient.getSession(), mnFormSubtype);
            jtfRegistryKey.setText("");
            moBoolInternationalShip.setSelected(false);
            moTextFiscalIdReceptor.setText(((SClientInterface) miClient).getSessionXXX().getCompany().getDbmsDataCompany().getFiscalId());
            moKeyGrossWeightUnit.setValue(new int[] { 59 }); // KILOGRAMOS
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
            moBoolInternationalShip.setSelected(moRegistry.isInternationalBol());
            moTextFiscalIdReceptor.setText(((SClientInterface) miClient).getSessionXXX().getCompany().getDbmsDataCompany().getFiscalId());
            moKeyGrossWeightUnit.setValue(new int[] { moRegistry.getFkGrossWeightUnit() });
        }

        moTextTaxRegime.setValue(((SClientInterface)miClient).getSessionXXX().getParamsCompany().getDbmsDataCfgCfd().getCfdRegimenFiscal());
        if (mnFormSubtype == SDataConstantsSys.TRNS_TP_CFD_BOL) {
            moTextBillOfLadingTp.setValue("T");
        }
        else if (mnFormSubtype == SDataConstantsSys.TRNS_TP_CFD_INV) {
            moTextBillOfLadingTp.setValue("I");
        }
        moKeyCountry.setValue(new int[] { moRegistry.getFkInputOutputCountry_n() });
        SGuiUtils.locateItemByCode(moKeyInputOutput, moRegistry.getInputOutputBol());
        SGuiUtils.locateItemByCode(moKeyInputOutputWay, moRegistry.getInputOutputWay());
        moTextSerie.setText(moRegistry.getSeries());
        moTextNumber.setText(moRegistry.getNumber() + "");
        moDateDate.setValue(moRegistry.getDate());
        moDecimalTotalDistance.setValue(moRegistry.getTotalDistance());
        moDecimalGrossWeight.setValue(moRegistry.getGrossWeight());
        moKeyEnvironmentalInsurer.setValue(new int[] { moRegistry.getFkEnviromentalInsurer_n() }); 
        moTextEnvironmentalPolicy.setText(moRegistry.getEnviromentalInsurerPolicy());
        moKeyMerchandiseInsurer.setValue(new int[] { moRegistry.getFkMerchandiseInsurer_n() });
        moTextMerchandisePolicy.setText(moRegistry.getMerchandiseInsurerPolicy());
        moTextPremium.setText(moRegistry.getPremium());
        moKeyBizPartner.setValue(new int[] { miClient.getSession().getConfigCompany().getCompanyId() });
        //moKeyBizPartnerBranch.setValue(new int[] { ... });
        //moKeyCfdiUsage.setValue(new int[] { ... });
        //moTextCfdiRelated.setText(...);    
        
        setFormEditable(true);
        
        if (moRegistry.isRegistryNew()) {
            moDateDate.setValue(miClient.getSession().getCurrentDate());
        }
        else {
            SDbVehicle vehicle = (SDbVehicle) miClient.getSession().readRegistry(SModConsts.LOG_VEH, new int[] { moRegistry.getBolTransportationMode().getFkVehicleId() }, SLibConstants.EXEC_MODE_SILENT);
            SDbTrailer trailer1 = (SDbTrailer) miClient.getSession().readRegistry(SModConsts.LOG_TRAILER, new int[] { moRegistry.getBolTransportationMode().getFkTrailerId_1_n() }, SLibConstants.EXEC_MODE_SILENT);
            SDbTrailer trailer2 = (SDbTrailer) miClient.getSession().readRegistry(SModConsts.LOG_TRAILER, new int[] { moRegistry.getBolTransportationMode().getFkTrailerId_2_n() }, SLibConstants.EXEC_MODE_SILENT);
            
            moKeyVehicle.setValue(new int[] { vehicle.getPkVehicleId() });
            moTextPlate.setValue(vehicle.getPlate());
            SGuiUtils.locateItemByCode(moKeyPermissonType, vehicle.getPermissonSctType());
            moTextPermissonNumber.setText( vehicle.getPermissonSctNumber() );
            moKeyInsurer.setValue(new int[] { vehicle.getFkInsurerId_n() } );
            moTextInsurancePolicy.setValue( vehicle.getInsurancePolicy() );
            SGuiUtils.locateItemByCode(moKeyVehConfiguration, vehicle.getVehicleConfiguration());
            moKeyTrailer1.setValue(new int[] { trailer1.getPkTrailerId() });
            moTextTrailerPlate1.setText(trailer1.getPlate());
            SGuiUtils.locateItemByCode(moKeyTrailerSubtype1, trailer1.getTrailerSubtype());
            moKeyTrailer2.setValue(new int[] { trailer2.getPkTrailerId() });
            moTextTrailerPlate2.setText(trailer2.getPlate());
            SGuiUtils.locateItemByCode(moKeyTrailerSubtype2, trailer2.getTrailerSubtype());

            SDbBolPerson driver = (SDbBolPerson) miClient.getSession().readRegistry(SModConsts.LOG_BOL_PERSON, new int[] { moRegistry.getBolTransportationMode().getFkDriverId() }, SLibConstants.EXEC_MODE_SILENT);
            SDbBolPerson owner = (SDbBolPerson) miClient.getSession().readRegistry(SModConsts.LOG_BOL_PERSON, new int[] { moRegistry.getBolTransportationMode().getFkVehicleOwnerId_n()}, SLibConstants.EXEC_MODE_SILENT);
            SDbBolPerson lessee = (SDbBolPerson) miClient.getSession().readRegistry(SModConsts.LOG_BOL_PERSON, new int[] { moRegistry.getBolTransportationMode().getFkVehicleLesseeId_n()}, SLibConstants.EXEC_MODE_SILENT);
            SDbBolPerson notified = (SDbBolPerson) miClient.getSession().readRegistry(SModConsts.LOG_BOL_PERSON, new int[] { moRegistry.getBolTransportationMode().getFkNotifiedId_n() }, SLibConstants.EXEC_MODE_SILENT);
            
            moKeyDriver.setValue(new int[] { driver.getPkBolPersonId() });
            moTextDriverFiscalId.setText(driver.getFiscalId().isEmpty() ? driver.getFiscalForeginId() : driver.getFiscalId());
            moTextDriverLicense.setText(driver.getDriverLicense());
            moKeyOwner.setValue(new int[] { owner.getPkBolPersonId() });
            moTextOwnerFiscalId.setText(owner.getFiscalId().isEmpty() ? owner.getFiscalForeginId() : owner.getFiscalId());
            SGuiUtils.locateItemByCode(moKeyTransportationPartOwner, moRegistry.getBolTransportationMode().getTransportationPartOwner());
            moKeyLessee.setValue(new int[] { lessee.getPkBolPersonId() });
            moTextLesseeFiscalId.setText(lessee.getFiscalId().isEmpty() ? lessee.getFiscalForeginId() : lessee.getFiscalId());
            SGuiUtils.locateItemByCode(moKeyTransportationPartLessee, moRegistry.getBolTransportationMode().getTransportationPartLessee());
            moKeyNotified.setValue(new int[] { notified.getPkBolPersonId() });
            moTextNotifiedFiscalId.setText(notified.getFiscalId().isEmpty() ? notified.getFiscalForeginId() : notified.getFiscalId());
        }
        
        addAllListeners();
        enabledFields();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbBillOfLading registry = (SDbBillOfLading) moRegistry.clone();

        if (registry.isRegistryNew()) {
        }
        
        SDbInsurer environmental = (SDbInsurer) miClient.getSession().readRegistry(SModConsts.LOG_INSURER, moKeyEnvironmentalInsurer.getValue(), SLibConstants.EXEC_MODE_SILENT);
        SDbInsurer merchansise = (SDbInsurer) miClient.getSession().readRegistry(SModConsts.LOG_INSURER, moKeyMerchandiseInsurer.getValue(), SLibConstants.EXEC_MODE_SILENT);
 
        registry.setFiscalIdReceptor(moTextFiscalIdReceptor.getValue());
        registry.setBillOfLadingType(moTextBillOfLadingTp.getValue());
        registry.setSeries(moTextSerie.getText());
        registry.setNumber(moTextNumber.getText());
        registry.setDate(moDateDate.getValue());
        registry.setInternationalBol(moBoolInternationalShip.isSelected());
        registry.setInputOutputBol(moKeyInputOutput.getSelectedItem().getCode());
        registry.setInputOutputWay(moKeyInputOutputWay.getSelectedItem().getCode());
        registry.setTotalDistance(moDecimalTotalDistance.getValue());
        registry.setGrossWeight(moDecimalGrossWeight.getValue());
        registry.setMerchandiseNodes(registry.getBolMerchandises().size());
        registry.setEnviromentalInsurerPolicy(moTextEnvironmentalPolicy.getValue());
        registry.setMerchandiseInsurerPolicy(moTextMerchandisePolicy.getValue());
        registry.setPremium(moTextPremium.getValue());
        registry.setFkCompanyBranchId(((SClientInterface) miClient).getSessionXXX().getCurrentCompanyBranchId());
        registry.setFkInputOutputCountry_n(moKeyCountry.getValue().length == 0 ? 0 : moKeyCountry.getValue()[0]);
        registry.setFkGrossWeightUnit(moKeyGrossWeightUnit.getValue()[0]);
        registry.setFkEnviromentalInsurer_n(moKeyEnvironmentalInsurer.getValue().length == 0 ? 0 : moKeyEnvironmentalInsurer.getValue()[0]);
        registry.setFkMerchandiseInsurer_n(moKeyMerchandiseInsurer.getValue().length == 0 ? 0 :moKeyMerchandiseInsurer.getValue()[0]);
        registry.setFkBillOfLadingStatusId(SDataConstantsSys.TRNS_ST_DPS_EMITED);
        registry.readBizPartner(miClient.getSession(), miClient.getSession().getConfigCompany().getCompanyId());
        registry.setXtaEnvironmentalInsurer(environmental);
        registry.setXtaMerchandiseInsurer(merchansise);
        registry.updateSatCtyCode(miClient.getSession());
        registry.updateGrossWeightUnitCode(miClient.getSession());
        registry.setXtaTaxRegime(moTextTaxRegime.getValue()); 
        
        SDbBolTransportationMode transportation = registry.getBolTransportationMode();
        
        transportation.setTransportationPartOwner(moKeyTransportationPartOwner.getSelectedItem().getCode());
        transportation.setTransportationPartLessee(moKeyTransportationPartLessee.getSelectedItem().getCode());
        transportation.setFkVehicleId(moKeyVehicle.getValue()[0]);
        transportation.setFkDriverId(moKeyDriver.getValue()[0]);
        transportation.setFkTrailerId_1_n(moKeyTrailer1.getValue().length == 0 ? 0 : moKeyTrailer1.getValue()[0]);
        transportation.setFkTrailerId_2_n(moKeyTrailer2.getValue().length == 0 ? 0 : moKeyTrailer2.getValue()[0]);
        transportation.setFkVehicleOwnerId_n(moKeyOwner.getValue().length == 0 ? 0 : moKeyOwner.getValue()[0]);
        transportation.setFkVehicleLesseeId_n(moKeyLessee.getValue().length == 0 ? 0 : moKeyLessee.getValue()[0]);
        transportation.setFkNotifiedId_n(moKeyNotified.getValue().length == 0 ? 0 : moKeyNotified.getValue()[0]);
        
        SDbVehicle veh = (SDbVehicle) miClient.getSession().readRegistry(SModConsts.LOG_VEH, moKeyVehicle.getValue(), SLibConstants.EXEC_MODE_SILENT);
        SDbTrailer tra1 = (SDbTrailer) miClient.getSession().readRegistry(SModConsts.LOG_TRAILER, moKeyTrailer1.getValue(), SLibConstants.EXEC_MODE_SILENT);
        SDbTrailer tra2 = (SDbTrailer) miClient.getSession().readRegistry(SModConsts.LOG_TRAILER, moKeyTrailer2.getValue(), SLibConstants.EXEC_MODE_SILENT);
        SDbBolPerson driver = (SDbBolPerson) miClient.getSession().readRegistry(SModConsts.LOG_BOL_PERSON, moKeyDriver.getValue(), SLibConstants.EXEC_MODE_SILENT);
        SDbBolPerson owner = (SDbBolPerson) miClient.getSession().readRegistry(SModConsts.LOG_BOL_PERSON, moKeyOwner.getValue(), SLibConstants.EXEC_MODE_SILENT);
        SDbBolPerson lessee = (SDbBolPerson) miClient.getSession().readRegistry(SModConsts.LOG_BOL_PERSON, moKeyLessee.getValue(), SLibConstants.EXEC_MODE_SILENT);
        SDbBolPerson notified = (SDbBolPerson) miClient.getSession().readRegistry(SModConsts.LOG_BOL_PERSON, moKeyNotified.getValue(), SLibConstants.EXEC_MODE_SILENT);
        
        transportation.setXtaVehicle(veh);
        transportation.setXtaTrailer1(tra1);
        transportation.setXtaTrailer2(tra2);
        transportation.setXtaDriver(driver);
        transportation.setXtaOwner(owner);
        transportation.setXtaLessee(lessee);
        transportation.setXtaNotified(notified);
        
        registry.getBolLocations().clear();
        for (SGridRow row : moGridLocations.getModel().getGridRows()) {
            registry.getBolLocations().add((SDbBolLocation) row);
        }
        
        saveDistanceLocations(registry);
        
        return registry;
    }

    @Override
    public void setValue(int type, Object value) {

    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        
        if (validation.isValid()) {
            if (moBoolInternationalShip.isSelected()) {
                if (moKeyInputOutput.getSelectedIndex() == 0) {
                    validation.setMessage("Debe estar seleccionada una opci√≥n en el campo \"Entrada o salida\".");
                    validation.setComponent(moKeyInputOutput);
                }
                else if (moKeyInputOutputWay.getSelectedIndex() == 0) {
                    validation.setMessage("Debe estar seleccionada una opci√≥n en el campo \"V√≠a entrada salida\".");
                    validation.setComponent(moKeyInputOutputWay);
                }
                else if (moKeyCountry.getSelectedIndex() == 0) {
                    validation.setMessage("Debe estar seleccionada una opci√≥n en el campo \"Pa√≠s entrada salida\".");
                    validation.setComponent(moKeyCountry);
                }
            }
        }
        
        if (validation.isValid()) {
            if (moKeyEnvironmentalInsurer.getSelectedIndex() > 0 && moTextEnvironmentalPolicy.getValue().isEmpty()) {
                validation.setMessage("Debe especificar una p√≥liza de seguro de medio ambiente.");
                validation.setComponent(moTextEnvironmentalPolicy);
            }
            else if (moKeyMerchandiseInsurer.getSelectedIndex() > 0 && moTextMerchandisePolicy.getValue().isEmpty()) {
                validation.setMessage("Debe especificar una p√≥liza de seguro de la mercancia.");
                validation.setComponent(moTextMerchandisePolicy);
            }
        }

        if (validation.isValid()) {
            if (moGridLocations.getTable().getRowCount() <= 0) {
                validation.setMessage("Se debe capturar al menos una ubicaci√≥n.");
            }
        }
        
        if (validation.isValid()) {
            validation = validateLocations();
        }
        
        if (validation.isValid()) {
            validation = validateMerchandises();
        }

        return validation;
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof javax.swing.JComboBox && e.getStateChange() == ItemEvent.SELECTED) {
            JComboBox comboBox = (JComboBox)  e.getSource();

            if (comboBox == moKeyVehicle) {
                actionKeyVehicle();
            }
            else if (comboBox == moKeyTrailer1) {
                actionKeyTrailer1();
            }
            else if (comboBox == moKeyTrailer2) {
                actionKeyTrailer2();
            }
            else if (comboBox == moKeyDriver) {
                actionKeyDriver();
            }
            else if (comboBox == moKeyOwner) {
                actionKeyOwner();
            }
            else if (comboBox == moKeyLessee) {
                actionKeyLessee();
            }
            else if (comboBox == moKeyNotified) {
                actionKeyNotified();
            }
        }
        
        if (e.getSource() instanceof javax.swing.JCheckBox) {
            JCheckBox checkBox = (JCheckBox) e.getSource();
            
            if (checkBox == moBoolInternationalShip) {
                actionBoolInternationalShip();
            }
        }
        
        if (e.getSource() instanceof javax.swing.JRadioButton) {
            JRadioButton radioButton = (JRadioButton) e.getSource();
            
            if (radioButton == moRadioMyLocations) {
                actionLocations();
            }
            else if (radioButton == moRadioCustomerLocations) {
                actionLocations();
            }
            else if (radioButton == moRadioSupplierLocations) {
                actionLocations();
            }
        }
    }


    @Override
    public void notifyRowNew(int gridType, int gridSubtype, int row, SGridRow gridRow) {
        updateTotalDistance();
        updateGrossWeight();
    }

    @Override
    public void notifyRowEdit(int gridType, int gridSubtype, int row, SGridRow gridRow) {
        updateTotalDistance();
        updateGrossWeight();
    }
    
    @Override
    public void notifyRowDelete(int gridType, int gridSubtype, int row, SGridRow gridRow) {
        ArrayList<SDbBolMerchandise> merchandise = moRegistry.getBolMerchandises();
        for(int i = 0; i < merchandise.size(); i++){
            moRegistry.removeMerchandise(merchandise.get(i));
        }
        updateTotalDistance();
        updateGrossWeight();
    }
}
