/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.hrs.form;

import erp.gui.SGuiUtilities;
import erp.mod.SModConsts;
import erp.mod.hrs.db.SHrsUtils;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.util.Date;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JTextField;
import sa.gui.util.SUtilConsts;
import sa.lib.SLibConsts;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiItem;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFormDialog;

/**
 *
 * @author Claudio Peña
 */
public class SDialogLayoutEmployee extends SBeanFormDialog implements FocusListener, ActionListener {

    public static Date moDateValueApplication;
    
    private int mnFkLayoutTypeEmployee;
    private int mnLayoutSua;
    
    /**
     * Creates new form SDialogLayoutEmployee
     */
    public SDialogLayoutEmployee(SGuiClient client, String title, int typeLayout) {
        setFormSettings(client, SModConsts.HRSX_PAY_LAY, SLibConsts.UNDEFINED, SLibConsts.UNDEFINED, title);
        mnLayoutSua = typeLayout;
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jtfMode = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jlDateStart = new javax.swing.JLabel();
        moDateStart = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel5 = new javax.swing.JPanel();
        jlDateEnd = new javax.swing.JLabel();
        moDateEnd = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel9 = new javax.swing.JPanel();

        setTitle("Layout movimientos empleados");

        jPanel1.setMaximumSize(new java.awt.Dimension(450, 300));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder("Tipo de layout:"));
        jPanel15.setMaximumSize(new java.awt.Dimension(450, 350));
        jPanel15.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel16.setMaximumSize(new java.awt.Dimension(450, 350));
        jPanel16.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jtfMode.setEditable(false);
        jtfMode.setFocusable(false);
        jtfMode.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel16.add(jtfMode);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateStart.setText("Fecha inicial: *");
        jlDateStart.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlDateStart);
        jPanel4.add(moDateStart);

        jPanel16.add(jPanel4);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateEnd.setText("Fecha final: *");
        jlDateEnd.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlDateEnd);
        jPanel5.add(moDateEnd);

        jPanel16.add(jPanel5);

        jPanel15.add(jPanel16, java.awt.BorderLayout.NORTH);

        jPanel9.setMaximumSize(new java.awt.Dimension(450, 350));
        jPanel9.setLayout(new java.awt.BorderLayout());
        jPanel15.add(jPanel9, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel15, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JLabel jlDateEnd;
    private javax.swing.JLabel jlDateStart;
    private javax.swing.JTextField jtfMode;
    private sa.lib.gui.bean.SBeanFieldDate moDateEnd;
    private sa.lib.gui.bean.SBeanFieldDate moDateStart;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
         switch (mnLayoutSua) {
            case SModConsts.HRSX_LAYOUT_SUA_HIRE:
                jtfMode.setText("Layout alta de empleados");
                break;
            case SModConsts.HRSX_LAYOUT_SUA_SSC:
                jtfMode.setText("Layout modificación SBC de empleados");
                break;
            case SModConsts.HRSX_LAYOUT_SUA_DISMISS:
                jtfMode.setText("Layout baja de empleados");
                break;
            default:
        }
        
        SGuiUtils.setWindowBounds(this, 450, 300);

        moDateValueApplication = miClient.getSession().getCurrentDate();
        
        jbSave.setText("Aceptar");

        moDateStart.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateStart.getText()), true);
        moDateEnd.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateEnd.getText()), true);
        
        moFields.addField(moDateStart);
        moFields.addField(moDateEnd);

        moFields.setFormButton(jbSave);
                
        populateLayoutType();
        removeAllListeners();
        addAllListeners();
    }

    public Date getDateEmission() {
        return moDateValueApplication;
    }

    public void setFormReset() {
        moDateStart.setValue(miClient.getSession().getCurrentDate());
        moDateEnd.setValue(miClient.getSession().getCurrentDate());
    }
    
    private void populateLayoutType() {
        Vector<SGuiItem> items = new Vector<>();

        items.add(new SGuiItem(new int[] { SLibConsts.UNDEFINED }, "(" + SUtilConsts.TXT_SELECT + " tipo de layout)"));
        items.add(new SGuiItem(new int[] { SModConsts.HRSX_LAYOUT_SUA_HIRE}, "Layout alta usuario"));
        items.add(new SGuiItem(new int[] { SModConsts.HRSX_LAYOUT_SUA_SSC }, "Layout modificación usuario"));
        items.add(new SGuiItem(new int[] { SModConsts.HRSX_LAYOUT_SUA_DISMISS }, "Layout eliminar usuario"));
    }

    @Override
    public void reloadCatalogues() {
        populateLayoutType();  
    }
    
    @Override
    public SGuiValidation validateForm() {
        String msg = "";
        SGuiValidation validation = moFields.validateFields();
        
        msg = SGuiUtilities.validateDateRange(moDateStart.getValue(), moDateEnd.getValue());

        if (!msg.isEmpty()) {
                validation.setMessage(msg);
                validation.setComponent(moDateStart);  
        }
        
        return validation;
    }
    
    
    @Override
    public void actionSave() {
       if (jbSave.isEnabled()) {
            if (SGuiUtils.computeValidation(miClient, validateForm())) {
                switch (mnLayoutSua) {
                    case SModConsts.HRSX_LAYOUT_SUA_HIRE:
                        SHrsUtils.createLayoutEmployeeRegister(miClient ,mnLayoutSua ,moDateStart.getValue() ,moDateEnd.getValue());
                        break;
                    case SModConsts.HRSX_LAYOUT_SUA_SSC:
                        SHrsUtils.createLayoutEmployeeModification(miClient ,mnLayoutSua ,moDateStart.getValue() ,moDateEnd.getValue());
                        break;
                    case SModConsts.HRSX_LAYOUT_SUA_DISMISS:
                        SHrsUtils.createLayoutEmployeeDelete(miClient ,mnLayoutSua ,moDateStart.getValue() ,moDateEnd.getValue());
                        break;
                    default :
                }
                mnFormResult = SGuiConsts.FORM_RESULT_OK;
                dispose();
            }
        }
    }

    @Override
    public void addAllListeners() {
        moDateStart.getComponent().addFocusListener(this);
        moDateEnd.getComponent().addFocusListener(this);        
    }

    @Override
    public void removeAllListeners() {
        moDateStart.getComponent().removeFocusListener(this);
        moDateEnd.getComponent().removeFocusListener(this);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {

    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void focusGained(FocusEvent e) {

    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof javax.swing.JTextField) {
            JTextField textField = (JTextField) e.getSource();

            if (textField == moDateStart.getComponent()) {
                moDateValueApplication = moDateEnd.getValue();
            }
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
        }
    }
}
