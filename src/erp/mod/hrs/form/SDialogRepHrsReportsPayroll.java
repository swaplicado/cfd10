/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.hrs.form;

import erp.client.SClientInterface;
import erp.mbps.data.SDataBizPartner;
import erp.mod.SModConsts;
import erp.mod.hrs.db.SDbPayroll;
import java.awt.BorderLayout;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbConsts;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanDialogReport;
import sa.lib.gui.bean.SBeanFieldBoolean;
import sa.lib.gui.bean.SBeanFieldRadio;

/**
 *
 * @author Juan Barajas, Sergio Flores
 */
public class SDialogRepHrsReportsPayroll extends SBeanDialogReport implements ChangeListener, ItemListener {
    
    protected SDbPayroll moPayroll;
    protected int mnPayrollId;
    protected int mnPaymentTypeId;
    protected SPanelHrsDepartments moPanelHrsDepartments;
    
    /**
     * Creates new form SDialogRepHrsReportsPayroll
     * @param client
     * @param title
     */
    public SDialogRepHrsReportsPayroll(SGuiClient client, String title) {
        setFormSettings(client, SLibConsts.UNDEFINED, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbGrpReport = new javax.swing.ButtonGroup();
        moGroupOrderByEmployee = new javax.swing.ButtonGroup();
        moGroupOrderByDepartament = new javax.swing.ButtonGroup();
        jbGrpReportType = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jlYear = new javax.swing.JLabel();
        moIntPeriodYear = new sa.lib.gui.bean.SBeanFieldInteger();
        jlPaymentType = new javax.swing.JLabel();
        moTextPaymentType = new sa.lib.gui.bean.SBeanFieldText();
        jPanel11 = new javax.swing.JPanel();
        jlPayrollNumber = new javax.swing.JLabel();
        moIntPayrollNumber = new sa.lib.gui.bean.SBeanFieldInteger();
        jlDateStart = new javax.swing.JLabel();
        moTextDateStart = new sa.lib.gui.bean.SBeanFieldText();
        jlDateEnd = new javax.swing.JLabel();
        moTextDateEnd = new sa.lib.gui.bean.SBeanFieldText();
        jPanel8 = new javax.swing.JPanel();
        moBoolShowGroupDepartament = new sa.lib.gui.bean.SBeanFieldBoolean();
        jPanel7 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        moRadReportPrePayroll = new sa.lib.gui.bean.SBeanFieldRadio();
        moRadReportPayroll = new sa.lib.gui.bean.SBeanFieldRadio();
        moRadReportPayrollReceipt = new sa.lib.gui.bean.SBeanFieldRadio();
        moRadReportListEarning = new sa.lib.gui.bean.SBeanFieldRadio();
        moRadReportListDeductions = new sa.lib.gui.bean.SBeanFieldRadio();
        moRadReportPayrollSummary = new sa.lib.gui.bean.SBeanFieldRadio();
        jPanel16 = new javax.swing.JPanel();
        moRadReportTypeEmpDep = new sa.lib.gui.bean.SBeanFieldRadio();
        moRadReportTypeDepEmp = new sa.lib.gui.bean.SBeanFieldRadio();
        jPanel2 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        moRadOrderByNumEmployee = new sa.lib.gui.bean.SBeanFieldRadio();
        moRadOrderByNameEmployee = new sa.lib.gui.bean.SBeanFieldRadio();
        jPanel15 = new javax.swing.JPanel();
        moRadOrderByNumDepartament = new sa.lib.gui.bean.SBeanFieldRadio();
        moRadOrderByNameDepartament = new sa.lib.gui.bean.SBeanFieldRadio();
        jpDepartments = new javax.swing.JPanel();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Parámetros del reporte:"));
        jPanel1.setLayout(new java.awt.BorderLayout(5, 5));

        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos de la nómina:"));
        jPanel6.setLayout(new java.awt.GridLayout(3, 1));

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlYear.setText("Ejercicio:");
        jlYear.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jlYear);

        moIntPeriodYear.setEditable(false);
        jPanel10.add(moIntPeriodYear);

        jlPaymentType.setText("Período pago:");
        jlPaymentType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jlPaymentType);

        moTextPaymentType.setEditable(false);
        moTextPaymentType.setText("sBeanFieldText1");
        jPanel10.add(moTextPaymentType);

        jPanel6.add(jPanel10);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPayrollNumber.setText("Número nómina:");
        jlPayrollNumber.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlPayrollNumber);

        moIntPayrollNumber.setEditable(false);
        jPanel11.add(moIntPayrollNumber);

        jlDateStart.setText("Fecha inicial:");
        jlDateStart.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlDateStart);

        moTextDateStart.setEditable(false);
        moTextDateStart.setText("sBeanFieldText1");
        moTextDateStart.setToolTipText("");
        jPanel11.add(moTextDateStart);

        jlDateEnd.setText("Fecha final:");
        jlDateEnd.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlDateEnd);

        moTextDateEnd.setEditable(false);
        moTextDateEnd.setText("sBeanFieldText1");
        moTextDateEnd.setToolTipText("");
        jPanel11.add(moTextDateEnd);

        jPanel6.add(jPanel11);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 2));

        moBoolShowGroupDepartament.setText("Agrupar por departamento");
        moBoolShowGroupDepartament.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel8.add(moBoolShowGroupDepartament);

        jPanel6.add(jPanel8);

        jPanel5.add(jPanel6, java.awt.BorderLayout.NORTH);

        jPanel1.add(jPanel5, java.awt.BorderLayout.NORTH);

        jPanel7.setLayout(new java.awt.BorderLayout());

        jPanel13.setLayout(new java.awt.BorderLayout());

        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder("Reporte:"));
        jPanel12.setLayout(new java.awt.GridLayout(6, 1));

        jbGrpReport.add(moRadReportPrePayroll);
        moRadReportPrePayroll.setSelected(true);
        moRadReportPrePayroll.setText("Prenómina");
        moRadReportPrePayroll.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel12.add(moRadReportPrePayroll);

        jbGrpReport.add(moRadReportPayroll);
        moRadReportPayroll.setText("Nómina");
        moRadReportPayroll.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel12.add(moRadReportPayroll);

        jbGrpReport.add(moRadReportPayrollReceipt);
        moRadReportPayrollReceipt.setText("Recibos de nómina ");
        moRadReportPayrollReceipt.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel12.add(moRadReportPayrollReceipt);

        jbGrpReport.add(moRadReportListEarning);
        moRadReportListEarning.setText("Listado de percepciones");
        moRadReportListEarning.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel12.add(moRadReportListEarning);

        jbGrpReport.add(moRadReportListDeductions);
        moRadReportListDeductions.setText("Listado de deducciones");
        moRadReportListDeductions.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel12.add(moRadReportListDeductions);

        jbGrpReport.add(moRadReportPayrollSummary);
        moRadReportPayrollSummary.setText("Nómina resumen");
        moRadReportPayrollSummary.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel12.add(moRadReportPayrollSummary);

        jPanel4.add(jPanel12, java.awt.BorderLayout.WEST);

        jPanel16.setBorder(javax.swing.BorderFactory.createTitledBorder("Tipo de reporte:"));
        jPanel16.setLayout(new java.awt.GridLayout(5, 1));

        jbGrpReportType.add(moRadReportTypeEmpDep);
        moRadReportTypeEmpDep.setSelected(true);
        moRadReportTypeEmpDep.setText("Por empleado y departamento");
        moRadReportTypeEmpDep.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel16.add(moRadReportTypeEmpDep);

        jbGrpReportType.add(moRadReportTypeDepEmp);
        moRadReportTypeDepEmp.setText("Por departamento y empleado");
        moRadReportTypeDepEmp.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel16.add(moRadReportTypeDepEmp);

        jPanel4.add(jPanel16, java.awt.BorderLayout.CENTER);

        jPanel13.add(jPanel4, java.awt.BorderLayout.WEST);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder("Ordenamiento del empleado:"));
        jPanel14.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        moGroupOrderByEmployee.add(moRadOrderByNumEmployee);
        moRadOrderByNumEmployee.setText("Número del empleado");
        jPanel14.add(moRadOrderByNumEmployee);

        moGroupOrderByEmployee.add(moRadOrderByNameEmployee);
        moRadOrderByNameEmployee.setSelected(true);
        moRadOrderByNameEmployee.setText("Nombre del empleado");
        jPanel14.add(moRadOrderByNameEmployee);

        jPanel2.add(jPanel14, java.awt.BorderLayout.NORTH);

        jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder("Ordenamiento del departamento:"));
        jPanel15.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        moGroupOrderByDepartament.add(moRadOrderByNumDepartament);
        moRadOrderByNumDepartament.setText("Código del departamento");
        jPanel15.add(moRadOrderByNumDepartament);

        moGroupOrderByDepartament.add(moRadOrderByNameDepartament);
        moRadOrderByNameDepartament.setSelected(true);
        moRadOrderByNameDepartament.setText("Nombre del departamento");
        jPanel15.add(moRadOrderByNameDepartament);

        jPanel2.add(jPanel15, java.awt.BorderLayout.SOUTH);

        jPanel13.add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel7.add(jPanel13, java.awt.BorderLayout.NORTH);

        jpDepartments.setBorder(javax.swing.BorderFactory.createTitledBorder("Seleccionar departamentos:"));
        jpDepartments.setLayout(new java.awt.BorderLayout());
        jPanel7.add(jpDepartments, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel7, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.ButtonGroup jbGrpReport;
    private javax.swing.ButtonGroup jbGrpReportType;
    private javax.swing.JLabel jlDateEnd;
    private javax.swing.JLabel jlDateStart;
    private javax.swing.JLabel jlPaymentType;
    private javax.swing.JLabel jlPayrollNumber;
    private javax.swing.JLabel jlYear;
    private javax.swing.JPanel jpDepartments;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolShowGroupDepartament;
    private javax.swing.ButtonGroup moGroupOrderByDepartament;
    private javax.swing.ButtonGroup moGroupOrderByEmployee;
    private sa.lib.gui.bean.SBeanFieldInteger moIntPayrollNumber;
    private sa.lib.gui.bean.SBeanFieldInteger moIntPeriodYear;
    private sa.lib.gui.bean.SBeanFieldRadio moRadOrderByNameDepartament;
    private sa.lib.gui.bean.SBeanFieldRadio moRadOrderByNameEmployee;
    private sa.lib.gui.bean.SBeanFieldRadio moRadOrderByNumDepartament;
    private sa.lib.gui.bean.SBeanFieldRadio moRadOrderByNumEmployee;
    private sa.lib.gui.bean.SBeanFieldRadio moRadReportListDeductions;
    private sa.lib.gui.bean.SBeanFieldRadio moRadReportListEarning;
    private sa.lib.gui.bean.SBeanFieldRadio moRadReportPayroll;
    private sa.lib.gui.bean.SBeanFieldRadio moRadReportPayrollReceipt;
    private sa.lib.gui.bean.SBeanFieldRadio moRadReportPayrollSummary;
    private sa.lib.gui.bean.SBeanFieldRadio moRadReportPrePayroll;
    private sa.lib.gui.bean.SBeanFieldRadio moRadReportTypeDepEmp;
    private sa.lib.gui.bean.SBeanFieldRadio moRadReportTypeEmpDep;
    private sa.lib.gui.bean.SBeanFieldText moTextDateEnd;
    private sa.lib.gui.bean.SBeanFieldText moTextDateStart;
    private sa.lib.gui.bean.SBeanFieldText moTextPaymentType;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 880, 550);
        
        moRadReportPrePayroll.addChangeListener(this);
        moRadReportPayroll.addChangeListener(this);
        moRadReportListEarning.addChangeListener(this);
        moRadReportListDeductions.addChangeListener(this);
        moRadReportPayrollSummary.addChangeListener(this);
        
        moBoolShowGroupDepartament.addItemListener(this);
        moBoolShowGroupDepartament.setSelected(true);
        moRadOrderByNameEmployee.setSelected(true);
        moRadOrderByNameDepartament.setSelected(true);
        
        moPanelHrsDepartments = new SPanelHrsDepartments(miClient);

        jpDepartments.add(moPanelHrsDepartments, BorderLayout.CENTER);

        moFields.setFormButton(jbPrint);
        
        reloadCatalogues();
    }

    private void actionEnableShowGroupDepartament() {
        if (moRadReportListEarning.isSelected() || moRadReportListDeductions.isSelected() || moRadReportPayrollSummary.isSelected()) {
            moBoolShowGroupDepartament.setEnabled(false);
        }
        else {
            moBoolShowGroupDepartament.setEnabled(true);
        }
    }
    
    private void actionEnableFieldsOrderBy() {
        if (moBoolShowGroupDepartament.isSelected()) {
            moRadOrderByNumDepartament.setEnabled(true);
            moRadOrderByNameDepartament.setEnabled(true);
            moRadOrderByNameDepartament.setSelected(true);
            
            moRadReportTypeDepEmp.setEnabled(true);
            moRadReportTypeEmpDep.setSelected(true);
        }
        else {
            moRadOrderByNumDepartament.setEnabled(false);
            moRadOrderByNameDepartament.setEnabled(false);
            moRadOrderByNameDepartament.setSelected(false);
            moRadOrderByNameEmployee.setSelected(true);
            
            moRadReportTypeDepEmp.setEnabled(false);
            moRadReportTypeEmpDep.setSelected(true);
        }
    }
    
    private String getOrderBy(final int reportId) {
        String orderBy = "";
        
        switch (reportId) {
            case SModConsts.HRSR_PRE_PAY:
            case SModConsts.HRSR_PAY:
            case SModConsts.HRSR_PAY_RCP_PAY:
                orderBy = "ORDER BY ";
                break;
            case SModConsts.HRSR_LIST_EAR:
                orderBy = "ORDER BY ear.name, ear.code, ear.id_ear, ";
                break;
            case SModConsts.HRSR_LIST_DED:
                orderBy = "ORDER BY ded.name, ded.code, ded.id_ded, ";
                break;
            case SModConsts.HRSR_PAY_SUM:
                break;
        }
        
        if (!orderBy.isEmpty()) {
            if (moRadReportTypeEmpDep.isSelected()) {
                if (moBoolShowGroupDepartament.isSelected()) {
                    if (moRadOrderByNumDepartament.isSelected()) {
                        orderBy += "dep.code, dep.id_dep, ";
                    }
                    else if (moRadOrderByNameDepartament.isSelected()) {
                        orderBy += "dep.name, dep.id_dep, ";
                    }
                }
                
                if (moRadOrderByNumEmployee.isSelected()) {
                    orderBy += "CAST(emp.num AS UNSIGNED INTEGER), bp.id_bp ";
                }
                else if (moRadOrderByNameEmployee.isSelected()) {
                    orderBy += "bp.bp, bp.id_bp ";
                }
            }
            else if (moRadReportTypeDepEmp.isSelected()) {
                if (moBoolShowGroupDepartament.isSelected()) {
                    if (moRadOrderByNumDepartament.isSelected()) {
                        orderBy += "dep.code, dep.id_dep, ";
                    }
                    else if (moRadOrderByNameDepartament.isSelected()) {
                        orderBy += "dep.name, dep.id_dep, ";
                    }
                }

                if (moRadOrderByNumEmployee.isSelected()) {
                    orderBy += "CAST(emp.num AS UNSIGNED INTEGER), bp.id_bp ";
                }
                else if (moRadOrderByNameEmployee.isSelected()) {
                    orderBy += "bp.bp, bp.id_bp ";
                }
            }
        }
        
        return orderBy;
    }
    
    private void renderPayroll() {
        moPayroll = (SDbPayroll)  miClient.getSession().readRegistry(SModConsts.HRS_PAY, new int[] { mnPayrollId }, SDbConsts.MODE_STEALTH);
        
        moIntPeriodYear.setText(moPayroll.getFiscalYear() + "");
        moIntPayrollNumber.setText(moPayroll.getNumber() + "");
        moTextPaymentType.setValue(miClient.getSession().readField(SModConsts.HRSS_TP_PAY, new int[] { mnPaymentTypeId = moPayroll.getFkPaymentTypeId() }, SDbRegistry.FIELD_NAME));
        moTextDateStart.setValue(SLibUtils.DateFormatDate.format(moPayroll.getDateStart()));
        moTextDateEnd.setValue(SLibUtils.DateFormatDate.format(moPayroll.getDateEnd()));
    }
    
    public void reloadCatalogues() {
        
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        
        if (validation.isValid()) {
            validation = moPanelHrsDepartments.validatePanel();
        }
        
        return validation;
    }

    @Override
    public void createParamsMap() {
        SDataBizPartner bizPartnerCompany = null;
        String sDepartamentsId = "";
        String sDepartamentsName = "";

        bizPartnerCompany = new SDataBizPartner();
        bizPartnerCompany.read(new int[] { ((SClientInterface) miClient).getSessionXXX().getCompany().getPkCompanyId() }, miClient.getSession().getStatement());
        
        try {
            moParamsMap = miClient.createReportParams();
            
            sDepartamentsId = (String) moPanelHrsDepartments.getValue(SGuiConsts.PARAM_KEY);
            sDepartamentsName = (String) moPanelHrsDepartments.getValue(SGuiConsts.PARAM_ITEM);
            moParamsMap.put("sSqlWhereDepartaments", sDepartamentsId.isEmpty() ? "" : " AND dep.id_dep IN(" + sDepartamentsId + ") ");
            moParamsMap.put("sDepartaments", sDepartamentsName.isEmpty() || (boolean) moPanelHrsDepartments.getValue(SGuiConsts.PARAM_ROWS) ? "(TODOS)" : sDepartamentsName + " ");
            moParamsMap.put("sPayrollType", moPayroll.getNumber() + "  " + (String) miClient.getSession().readField(SModConsts.HRSS_TP_PAY, new int[] { moPayroll.getFkPaymentTypeId() }, SDbRegistry.FIELD_NAME));

            if (moRadReportPrePayroll.isSelected()) {
                mnFormType = SModConsts.HRSR_PRE_PAY;

                moParamsMap.put("nPayrollId", mnPayrollId);
                moParamsMap.put("RegistroPatronal", ((SClientInterface) miClient).getSessionXXX().getParamsCompany().getRegistrySs());
                moParamsMap.put("sEmiRfc", bizPartnerCompany.getFiscalId());
                moParamsMap.put("nYear", moIntPeriodYear.getValue());
                moParamsMap.put("sSqlOrderBy", getOrderBy(mnFormType));
                moParamsMap.put("bShowGroupDepartament", moBoolShowGroupDepartament.isSelected());
            }
            else if (moRadReportPayroll.isSelected()) {
                mnFormType = SModConsts.HRSR_PAY;
                
                moParamsMap.put("nPayrollId", mnPayrollId);
                moParamsMap.put("RegistroPatronal", ((SClientInterface) miClient).getSessionXXX().getParamsCompany().getRegistrySs());
                moParamsMap.put("sEmiRfc", bizPartnerCompany.getFiscalId());
                moParamsMap.put("tDateStart", moPayroll.getDateStart());
                moParamsMap.put("tDateEnd", moPayroll.getDateEnd());
                moParamsMap.put("nYear", moIntPeriodYear.getValue());
                moParamsMap.put("sSqlOrderBy", getOrderBy(mnFormType));
                moParamsMap.put("bShowGroupDepartament", moBoolShowGroupDepartament.isSelected());
            }
            else if (moRadReportPayrollReceipt.isSelected()) {
                mnFormType = SModConsts.HRSR_PAY_RCP_PAY;
                
                moParamsMap.put("nPayrollId", mnPayrollId);
                moParamsMap.put("RegistroPatronal", ((SClientInterface) miClient).getSessionXXX().getParamsCompany().getRegistrySs());
                moParamsMap.put("sEmiRfc", bizPartnerCompany.getFiscalId());
                moParamsMap.put("tDateStart", moPayroll.getDateStart());
                moParamsMap.put("tDateEnd", moPayroll.getDateEnd());
                moParamsMap.put("nYear", moIntPeriodYear.getValue());
                moParamsMap.put("sSqlOrderBy", getOrderBy(mnFormType));
            }
            else if (moRadReportListEarning.isSelected()) {
                mnFormType = SModConsts.HRSR_LIST_EAR;
                
                moParamsMap.put("sTitle", "DE PERCEPCIONES");
                moParamsMap.put("nPayrollId", mnPayrollId);
                moParamsMap.put("tDateStart", moPayroll.getDateStart());
                moParamsMap.put("tDateEnd", moPayroll.getDateEnd());
                moParamsMap.put("nYear", moIntPeriodYear.getValue());
                moParamsMap.put("sSqlOrderBy", getOrderBy(mnFormType));
            }
            else if (moRadReportListDeductions.isSelected()) {
                mnFormType = SModConsts.HRSR_LIST_DED;
                
                moParamsMap.put("sTitle", "DE DEDUCCIONES");
                moParamsMap.put("nPayrollId", mnPayrollId);
                moParamsMap.put("tDateStart", moPayroll.getDateStart());
                moParamsMap.put("tDateEnd", moPayroll.getDateEnd());
                moParamsMap.put("nYear", moIntPeriodYear.getValue());
                moParamsMap.put("sSqlOrderBy", getOrderBy(mnFormType));
            }
            else if (moRadReportPayrollSummary.isSelected()) {
                mnFormType = SModConsts.HRSR_PAY_SUM;
                
                moParamsMap.put("nPayrollId", mnPayrollId);
                moParamsMap.put("RegistroPatronal", ((SClientInterface) miClient).getSessionXXX().getParamsCompany().getRegistrySs());
                moParamsMap.put("sEmiRfc", bizPartnerCompany.getFiscalId());
                moParamsMap.put("tDateStart", moPayroll.getDateStart());
                moParamsMap.put("tDateEnd", moPayroll.getDateEnd());
                moParamsMap.put("nYear", moIntPeriodYear.getValue());
            }
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }
    
    public void setReportsParams(final int payrollId) {
        mnPayrollId = payrollId;
        
        renderPayroll();
    }
    
    @Override
    public void stateChanged(ChangeEvent e) {
        if (e.getSource() instanceof SBeanFieldRadio) {
            if ((SBeanFieldRadio) e.getSource() == moRadReportPrePayroll ||
                    (SBeanFieldRadio) e.getSource() == moRadReportPayroll ||
                    (SBeanFieldRadio) e.getSource() == moRadReportListEarning ||
                    (SBeanFieldRadio) e.getSource() == moRadReportListDeductions ||
                    (SBeanFieldRadio) e.getSource() == moRadReportPayrollSummary) {
                if (moRadReportPrePayroll.isSelected() || moRadReportPayroll.isSelected() || moRadReportListEarning.isSelected() || 
                        moRadReportListDeductions.isSelected() || moRadReportPayrollSummary.isSelected()) {
                    actionEnableShowGroupDepartament();
                }
            }
            
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof SBeanFieldBoolean) {
            if ((SBeanFieldBoolean) e.getSource() == moBoolShowGroupDepartament) {
                actionEnableFieldsOrderBy();
            }
        }
    }
}
