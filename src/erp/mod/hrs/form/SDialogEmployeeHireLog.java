/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.hrs.form;

import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import erp.mod.hrs.db.SDbEmployee;
import erp.mod.hrs.db.SDbEmployeeHireLog;
import erp.mod.hrs.db.SHrsUtils;
import java.util.ArrayList;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFormDialog;

/**
 *
 * @author Juan Barajas, Sergio Flores
 */
public class SDialogEmployeeHireLog extends SBeanFormDialog {

    protected SDbEmployee moEmployee;
    protected SDbEmployeeHireLog moEmployeeHireLog;
    protected ArrayList<SDbEmployeeHireLog> maEmployeeHireLogs;
    protected boolean mbIsEdit;

    /**
     * Creates new form SDialogEmployeeHireLog
     */
    public SDialogEmployeeHireLog(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.HRS_EMP_LOG_HIRE, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jlAction = new javax.swing.JLabel();
        jtfAction = new javax.swing.JTextField();
        jPanel11 = new javax.swing.JPanel();
        jlDate = new javax.swing.JLabel();
        moDateDate = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel12 = new javax.swing.JPanel();
        jlEmployeeDismissalType = new javax.swing.JLabel();
        moKeyEmployeeDismissalType = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel13 = new javax.swing.JPanel();
        jlNotes = new javax.swing.JLabel();
        moTextNotes = new sa.lib.gui.bean.SBeanFieldText();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAction.setText("Acción:");
        jlAction.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlAction);

        jtfAction.setEditable(false);
        jtfAction.setFocusable(false);
        jtfAction.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel3.add(jtfAction);

        jPanel2.add(jPanel3);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDate.setText("Fecha:*");
        jlDate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlDate);
        jPanel11.add(moDateDate);

        jPanel2.add(jPanel11);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlEmployeeDismissalType.setText("Motivo baja:*");
        jlEmployeeDismissalType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jlEmployeeDismissalType);

        moKeyEmployeeDismissalType.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel12.add(moKeyEmployeeDismissalType);

        jPanel2.add(jPanel12);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNotes.setText("Notas:");
        jlNotes.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jlNotes);

        moTextNotes.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel13.add(moTextNotes);

        jPanel2.add(jPanel13);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel jlAction;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlEmployeeDismissalType;
    private javax.swing.JLabel jlNotes;
    private javax.swing.JTextField jtfAction;
    private sa.lib.gui.bean.SBeanFieldDate moDateDate;
    private sa.lib.gui.bean.SBeanFieldKey moKeyEmployeeDismissalType;
    private sa.lib.gui.bean.SBeanFieldText moTextNotes;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 560, 350);
        moEmployeeHireLog = null;
        mbIsEdit = false;

        jbSave.setText("Aceptar");

        moDateDate.setDateSettings(miClient, SGuiUtils.getLabelName(jlDate.getText()), true);
        moKeyEmployeeDismissalType.setKeySettings(miClient, SGuiUtils.getLabelName(jlEmployeeDismissalType.getText()), true);
        moTextNotes.setTextSettings(SGuiUtils.getLabelName(jlNotes.getText()), 255, 0);

        moFields.addField(moDateDate);
        moFields.addField(moKeyEmployeeDismissalType);
        moFields.addField(moTextNotes);

        moFields.setFormButton(jbSave);

        moTextNotes.setValue("");
        moDateDate.setValue(miClient.getSession().getCurrentDate());

        reloadCatalogues();
        addAllListeners();
    }
    
    private void renderHireLog(final int[] employeePk) {
        moEmployeeHireLog = new SDbEmployeeHireLog();
        
        try {
            readEmployee(employeePk);
            
            if (mbIsEdit) {
                if (moEmployee.isActive()) {
                    jtfAction.setText("Modificación última alta");
                }
                else {
                    jtfAction.setText("Modificación última baja");
                }
            }
            else {
                if (moEmployee.isActive()) {
                    jtfAction.setText("Baja");
                }
                else {
                    jtfAction.setText("Alta");
                }
            }

            if (moEmployee.isActive()) {
                moEmployeeHireLog = SHrsUtils.getEmployeeLastHire(miClient.getSession(), moEmployee.getPkEmployeeId(), 0, "");
            }
            else if (mbIsEdit) {
                moEmployeeHireLog = SHrsUtils.getEmployeeLastDismiss(miClient.getSession(), moEmployee.getPkEmployeeId(), 0, "");
            }
            
            moKeyEmployeeDismissalType.setEnabled((moEmployee.isActive() && !mbIsEdit) || (!moEmployee.isActive() && mbIsEdit));
            
            if (mbIsEdit) {
                moDateDate.setValue(moEmployee.isActive() ? moEmployeeHireLog.getDateHire() : moEmployeeHireLog.getDateDismissal_n());
                moKeyEmployeeDismissalType.setValue(new int[] { moEmployeeHireLog.getFkEmployeeDismissalTypeId() });
                moTextNotes.setValue(moEmployee.isActive() ? moEmployeeHireLog.getNotesHire() : moEmployeeHireLog.getNotesDismissal());
            }
        }
        catch (Exception e) {
            SLibUtils.printException(this, e);
        }
    }

    private void readEmployee(final int[] employeePk) {
        moEmployee = new SDbEmployee();

        try {
            moEmployee.read(miClient.getSession(), employeePk);
        }
        catch (Exception e) {
            SLibUtils.printException(this, e);
        }
    }
    
    private boolean validateDate() throws Exception {
        if (moEmployee.isActive()) {
            if (moEmployee.getDateLastHire().compareTo(moDateDate.getValue()) > 0) {
                throw new Exception(SGuiConsts.ERR_MSG_FIELD_DATE_ + "'" + SGuiUtils.getLabelName(jlDate) + "'" + SGuiConsts.ERR_MSG_FIELD_DATE_GREAT_EQUAL + "última alta '" + moEmployee.getDateLastHire() + "'.");
            }
        }
        else {
            if (moEmployee.getDateLastDismissal_n() != null) {
                if (moEmployee.getDateLastDismissal_n().compareTo(moDateDate.getValue()) >= 0) {
                    throw new Exception(SGuiConsts.ERR_MSG_FIELD_DATE_ + "'" + SGuiUtils.getLabelName(jlDate) + "'" + SGuiConsts.ERR_MSG_FIELD_DATE_GREAT + "última baja '" + moEmployee.getDateLastDismissal_n() + "'.");
                }
            }
        }
        
        return true;
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyEmployeeDismissalType, SModConsts.HRSU_TP_EMP_DIS, SLibConsts.UNDEFINED, null);
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            if (moKeyEmployeeDismissalType.isEnabled() && moKeyEmployeeDismissalType.getValue()[0] == SModSysConsts.HRSU_TP_EMP_DIS_NON) {
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DIF + "'" + SGuiUtils.getLabelName(jlEmployeeDismissalType) + "'.");
                validation.setComponent(moKeyEmployeeDismissalType);
            }
            else if (!mbIsEdit) {
                try {
                    validateDate();
                    SHrsUtils.validateEmployeeHireLog(miClient.getSession(), moEmployee.getPkEmployeeId(), !moEmployee.isActive());
                }
                catch (Exception e) {
                    SLibUtils.printException(this, e);
                    validation.setMessage(e.getMessage());
                    validation.setComponent(moDateDate);
                }
            }
        }
        
        return validation;
    }

    @Override
    public void addAllListeners() {
        
    }

    @Override
    public void removeAllListeners() {
        
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {

    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setValue(final int type, final Object value) {
        switch (type) {
            case SGuiConsts.PARAM_BPR:
                renderHireLog((int[]) value);
                break;
            case SGuiConsts.PARAM_KEY:
                mbIsEdit = true;
                renderHireLog((int[]) value);
            default:
        }
    }

    /**
     * Get requested value.
     * @param type SModConsts.HRSU_EMP or SModConsts.HRS_EMP_LOG_HIRE.
     * @return Requested value.
     */
    @Override
    public Object getValue(final int type) {
        Object value = null;
        
        switch (type) {
            case SModConsts.HRSU_EMP:
                if (!moKeyEmployeeDismissalType.isEnabled()) {
                    moEmployee.setAuxEmployeeDismissalTypeId(SModSysConsts.HRSU_TP_EMP_DIS_NON);
                    moEmployee.setDateLastHire(moDateDate.getValue());
                }
                else {
                    moEmployee.setAuxEmployeeDismissalTypeId(moKeyEmployeeDismissalType.getValue()[0]);
                    moEmployee.setDateLastDismissal_n(moDateDate.getValue());
                }
                
                moEmployee.setAuxHireLogDate(moDateDate.getValue());
                moEmployee.setAuxHireLogNotes(moTextNotes.getValue());
                moEmployee.setActive(!moEmployee.isActive());
                
                value = moEmployee;
                break;
                
            case SModConsts.HRS_EMP_LOG_HIRE:
                if (!moKeyEmployeeDismissalType.isEnabled()) {
                    moEmployeeHireLog.setFkEmployeeDismissalTypeId(SModSysConsts.HRSU_TP_EMP_DIS_NON);
                    moEmployeeHireLog.setDateHire(moDateDate.getValue());
                    moEmployeeHireLog.setNotesHire(moTextNotes.getValue());                    
                }
                else {
                    moEmployeeHireLog.setFkEmployeeDismissalTypeId(moKeyEmployeeDismissalType.getValue()[0]);
                    moEmployeeHireLog.setDateDismissal_n(moDateDate.getValue());
                    moEmployeeHireLog.setNotesDismissal(moTextNotes.getValue());                    
                }
                
                value = moEmployeeHireLog;
                break;
                
            default:
        }

        return value;
    }
}
