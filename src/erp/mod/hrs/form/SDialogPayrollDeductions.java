/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.hrs.form;

import erp.mod.SModConsts;
import erp.mod.hrs.db.SDbDeduction;
import erp.mod.hrs.db.SDbPayrollReceiptDeduction;
import erp.mod.hrs.db.SHrsPayroll;
import erp.mod.hrs.db.SHrsReceipt;
import erp.mod.hrs.db.SHrsReceiptDeduction;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridPaneFormOwner;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiItem;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFormDialog;

/**
 *
 * @author Juan Barajas, Sergio Flores
 */
public class SDialogPayrollDeductions extends SBeanFormDialog implements SGridPaneFormOwner, ItemListener, ActionListener, CellEditorListener {

    private static final int COL_VAL = 1;
    private static final int COL_AMT_UNT = 3;
    private static final int COL_SET_FLAG = 5;
    
    private SHrsPayroll moHrsPayroll;
    private ArrayList<SHrsReceipt> maHrsReceipts;
    private SDbDeduction moDeduction;
    private HashMap<Integer, SDbDeduction> moDeductionsMap;
    private SGridPaneForm moGridEmployeeRow;

    /**
     * Creates new form SDialogPayrollDeductions
     * @param client
     * @param title
     */
    public SDialogPayrollDeductions(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.HRSX_PAY_REC_DED, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpMain = new javax.swing.JPanel();
        jpDeduction = new javax.swing.JPanel();
        jlDeduction = new javax.swing.JLabel();
        moKeyDeduction = new sa.lib.gui.bean.SBeanFieldKey();
        jpEmployee = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jlValue = new javax.swing.JLabel();
        moCompValue = new sa.lib.gui.bean.SBeanCompoundField();
        jbSetAll = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jbClear = new javax.swing.JButton();
        jbClearAll = new javax.swing.JButton();
        jpTotal = new javax.swing.JPanel();
        jlTotal = new javax.swing.JLabel();
        moCurTotal = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jlTotalHelp = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jpMain.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpMain.setLayout(new java.awt.BorderLayout());

        jpDeduction.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 5, 0));

        jlDeduction.setText("Deducción:");
        jlDeduction.setPreferredSize(new java.awt.Dimension(100, 23));
        jpDeduction.add(jlDeduction);

        moKeyDeduction.setPreferredSize(new java.awt.Dimension(250, 23));
        jpDeduction.add(moKeyDeduction);

        jpMain.add(jpDeduction, java.awt.BorderLayout.NORTH);

        jpEmployee.setLayout(new java.awt.BorderLayout());

        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlValue.setText("Cantidad/monto:");
        jlValue.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel2.add(jlValue);

        moCompValue.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel2.add(moCompValue);

        jbSetAll.setText("Asignar a todos");
        jbSetAll.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jbSetAll.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel2.add(jbSetAll);

        jPanel4.add(jPanel2, java.awt.BorderLayout.WEST);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbClear.setText("Limpiar");
        jbClear.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbClear.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel3.add(jbClear);

        jbClearAll.setText("Limpiar todo");
        jbClearAll.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jbClearAll.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel3.add(jbClearAll);

        jPanel4.add(jPanel3, java.awt.BorderLayout.EAST);

        jpEmployee.add(jPanel4, java.awt.BorderLayout.NORTH);

        jpMain.add(jpEmployee, java.awt.BorderLayout.CENTER);

        jpTotal.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTotal.setText("Total asignado:");
        jlTotal.setPreferredSize(new java.awt.Dimension(100, 23));
        jpTotal.add(jlTotal);

        moCurTotal.setEditable(false);
        jpTotal.add(moCurTotal);

        jlTotalHelp.setForeground(java.awt.Color.gray);
        jlTotalHelp.setText("(monto total de la deducción actual en esta nómina)");
        jlTotalHelp.setPreferredSize(new java.awt.Dimension(300, 23));
        jpTotal.add(jlTotalHelp);

        jpMain.add(jpTotal, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jpMain, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JButton jbClear;
    private javax.swing.JButton jbClearAll;
    private javax.swing.JButton jbSetAll;
    private javax.swing.JLabel jlDeduction;
    private javax.swing.JLabel jlTotal;
    private javax.swing.JLabel jlTotalHelp;
    private javax.swing.JLabel jlValue;
    private javax.swing.JPanel jpDeduction;
    private javax.swing.JPanel jpEmployee;
    private javax.swing.JPanel jpMain;
    private javax.swing.JPanel jpTotal;
    private sa.lib.gui.bean.SBeanCompoundField moCompValue;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurTotal;
    private sa.lib.gui.bean.SBeanFieldKey moKeyDeduction;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 640, 400);
        
        jbSave.setText("Cerrar");
        jbCancel.setEnabled(false);

        moKeyDeduction.setKeySettings(miClient, SGuiUtils.getLabelName(jlDeduction.getText()), true);
        moCompValue.setCompoundFieldSettings(miClient);
        moCompValue.getField().setDecimalSettings(SGuiUtils.getLabelName(jlValue), SGuiConsts.GUI_TYPE_DEC_QTY, true);
        moCompValue.getField().setNextButton(jbSetAll);
        
        moFields.addField(moKeyDeduction);
        moFields.addField(moCompValue.getField());
        moFields.setFormButton(jbSave);
        
        // read-only field:
        moCurTotal.setCompoundFieldSettings(miClient);
        moCurTotal.getField().setDecimalSettings(SGuiUtils.getLabelName(jlTotal), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        
        moGridEmployeeRow = new SGridPaneForm(miClient, SModConsts.HRSX_PAY_REC_DED, SLibConsts.UNDEFINED, "Empleados") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false, false, false);
            }

            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                SGridColumnForm columnForm;
                ArrayList<SGridColumnForm> gridColumnsForm = new ArrayList<>();

                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_BPR_S, "Empleado"));
                columnForm = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_QTY, "Cantidad", 55);
                columnForm.setEditable(true);
                gridColumnsForm.add(columnForm);
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_UNT, "Unidad", 45));
                columnForm = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "Monto unitario $", 80);
                columnForm.setEditable(true);
                gridColumnsForm.add(columnForm);
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "Monto $", 80));
                columnForm = new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_S, "Pago");
                columnForm.setEditable(true);
                gridColumnsForm.add(columnForm);
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_M, "Crédito/préstamo"));
                
                moGridEmployeeRow.getTable().getDefaultEditor(Boolean.class).addCellEditorListener(SDialogPayrollDeductions.this);
                moGridEmployeeRow.getTable().getDefaultEditor(Double.class).addCellEditorListener(SDialogPayrollDeductions.this);
                
                return gridColumnsForm;
            }
        };

        moGridEmployeeRow.setForm(null);
        moGridEmployeeRow.setPaneFormOwner(this);
        jpEmployee.add(moGridEmployeeRow, BorderLayout.CENTER);

        reloadCatalogues();
        addAllListeners();
        
        enableFields(false);
    }
    
    @SuppressWarnings("unchecked")
    private void setPayroll(SHrsPayroll payroll) {
        moHrsPayroll = payroll;

        // populate map of deductions & combo box at the same time:
        
        moDeductionsMap = new HashMap<>();
        
        moKeyDeduction.removeAllItems();
        moKeyDeduction.addItem(new SGuiItem(new int[] { 0 }, "- Deducción -"));

        for (SDbDeduction deduction : moHrsPayroll.getDeductions()) {
            if (deduction.isMassAsignable()) {
                moDeductionsMap.put(deduction.getPkDeductionId(), deduction);
                
                moKeyDeduction.addItem(new SGuiItem(deduction.getPrimaryKey(), (deduction.getCode() + " - " + deduction.getName()), deduction.getFkDeductionComputationTypeId()));
            }
        }
    }
    
    private void enableFields(final boolean enable) {
        moCompValue.getField().setEditable(enable);
        jbSetAll.setEnabled(enable);
    }
    
    private SDbPayrollReceiptDeduction createPayrollReceipDeduction(SHrsReceipt hrsReceipt, SHrsReceiptDeduction hrsReceiptDeduction) {
        double unitsAlleged;
        double amountUnitAlleged;
        int moveId;
        
        if (hrsReceiptDeduction.getPayrollReceiptDeduction() != null) {
            unitsAlleged = hrsReceiptDeduction.getPayrollReceiptDeduction().getUnitsAlleged();
            amountUnitAlleged = hrsReceiptDeduction.getPayrollReceiptDeduction().getAmountUnitary();
            moveId = hrsReceiptDeduction.getPayrollReceiptDeduction().getPkMoveId();
        }
        else {
            if (hrsReceiptDeduction.getDeduction().isBasedOnUnits()) {
                unitsAlleged = 0;
                amountUnitAlleged = 0;
            }
            else {
                unitsAlleged = 1;
                amountUnitAlleged = 0;
            }
            moveId = hrsReceipt.getHrsReceiptDeductions().size() + 1;
        }
        
        return hrsReceipt.getHrsPayroll().createPayrollReceiptDeduction(
                hrsReceipt, hrsReceiptDeduction.getDeduction(), 
                unitsAlleged, amountUnitAlleged, false, 
                0, 0, moveId);
    }
    
    private void refreshGridRows() {
        int row = moGridEmployeeRow.getTable().getSelectedRow();
        moGridEmployeeRow.renderGridRows();
        moGridEmployeeRow.setSelectedGridRow(row);
        computeTotal();
    }
    
    private void computeTotal() {
        double total = 0;
        
        if (moKeyDeduction.getSelectedIndex() > 0) {
            for (SHrsReceipt hrsReceipt : maHrsReceipts) {
                for (SHrsReceiptDeduction hrsReceiptDeduction : hrsReceipt.getHrsReceiptDeductions()) {
                    if (hrsReceiptDeduction.getDeduction().getPkDeductionId() == moDeduction.getPkDeductionId()) {
                        total = SLibUtils.roundAmount(total + hrsReceiptDeduction.getPayrollReceiptDeduction().getAmount_r());
                    }
                }
            }
        }
        
        moCurTotal.getField().setValue(total);
    }
    
    private void computeSetAll() throws Exception {
        double unitsAlleged;
        double amountUnitAlleged;
        
        if (moKeyDeduction.getSelectedIndex() > 0) {
            if (moDeduction.isBasedOnUnits()) {
                unitsAlleged = moCompValue.getField().getValue();
                amountUnitAlleged = 0;
            }
            else {
                unitsAlleged = 1;
                amountUnitAlleged = moCompValue.getField().getValue();
            }
            
            for (SGridRow gridRow : moGridEmployeeRow.getModel().getGridRows()) { // process grid
                SHrsReceiptDeduction hrsReceiptDeductionCopy = (SHrsReceiptDeduction) gridRow;
                SHrsReceipt hrsReceipt = hrsReceiptDeductionCopy.getHrsReceipt();
                
                double units = unitsAlleged;
                hrsReceiptDeductionCopy.getPayrollReceiptDeduction().setUnitsAlleged(unitsAlleged);
                hrsReceiptDeductionCopy.getPayrollReceiptDeduction().setUnits(units);

                double amount;
                if (moDeduction.isBasedOnUnits()) {
                    amount = SLibUtils.roundAmount(amountUnitAlleged * units);
                }
                else {
                    hrsReceiptDeductionCopy.getPayrollReceiptDeduction().setAmountUnitary(amountUnitAlleged);
                    amount = amountUnitAlleged;
                }
                
                hrsReceiptDeductionCopy.getPayrollReceiptDeduction().setAmountSystem_r(amount);
                hrsReceiptDeductionCopy.getPayrollReceiptDeduction().setAmount_r(amount);

                hrsReceiptDeductionCopy.getPayrollReceiptDeduction().setUserEdited(false);
                hrsReceiptDeductionCopy.getPayrollReceiptDeduction().setAutomatic(false);
                
                if (hrsReceipt.getHrsReceiptDeduction(hrsReceiptDeductionCopy.getPayrollReceiptDeduction().getPkMoveId()) == null) {
                    hrsReceipt.addHrsReceiptDeduction(hrsReceiptDeductionCopy);
                }
                else {
                    hrsReceipt.replaceHrsReceiptDeduction(hrsReceiptDeductionCopy.getPayrollReceiptDeduction().getPkMoveId(), hrsReceiptDeductionCopy);
                }
            }
            
            refreshGridRows();
        }
    }
    
    private void actionPerformedSetAll() {
        try {
            SGuiValidation validation = moFields.validateFields();
            if (!SGuiUtils.computeValidation(miClient, validation)) {
                return;
            }

            computeSetAll();

            moCompValue.getField().resetField();
            moKeyDeduction.requestFocusInWindow();
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }
    
    private void actionPerformedClear() {
        SHrsReceiptDeduction hrsReceiptDeductionCopy = (SHrsReceiptDeduction) moGridEmployeeRow.getSelectedGridRow();

        if (hrsReceiptDeductionCopy != null) {
            hrsReceiptDeductionCopy.clearAmount();
            
            SHrsReceipt hrsReceipt = hrsReceiptDeductionCopy.getHrsReceipt();
            hrsReceipt.replaceHrsReceiptDeduction(hrsReceiptDeductionCopy.getPayrollReceiptDeduction().getPkMoveId(), hrsReceiptDeductionCopy);

            refreshGridRows();
        }
    }

    private void actionPerformedClearAll() {
        if (miClient.showMsgBoxConfirm("¿Está seguro que desea limpiar todas las capturas?") == JOptionPane.YES_OPTION) {
            for (SGridRow gridRow : moGridEmployeeRow.getModel().getGridRows()) { // process grid
                SHrsReceiptDeduction hrsReceiptDeductionCopy = (SHrsReceiptDeduction) gridRow;
                
                hrsReceiptDeductionCopy.clearAmount();

                SHrsReceipt hrsReceipt = hrsReceiptDeductionCopy.getHrsReceipt();
                hrsReceipt.replaceHrsReceiptDeduction(hrsReceiptDeductionCopy.getPayrollReceiptDeduction().getPkMoveId(), hrsReceiptDeductionCopy);
            }
            
            refreshGridRows();
        }
    }
    
    
    private void itemStateChangedDeduction() {
        Vector<SGridRow> rows = new Vector<>();
        
        if (moKeyDeduction.getSelectedIndex() <= 0) {
            moDeduction = null;
        }
        else {
            moDeduction = moDeductionsMap.get(moKeyDeduction.getValue()[0]);
            moCompValue.setCompoundText(moHrsPayroll.getDeductionComputationTypesMap().get(moDeduction.getFkDeductionComputationTypeId()));
            
            // prepare grid rows:
            
            for (SHrsReceipt hrsReceipt : maHrsReceipts) {
                SDbPayrollReceiptDeduction payrollReceiptDeduction = null;

                for (SHrsReceiptDeduction hrsReceiptDeduction : hrsReceipt.getHrsReceiptDeductions()) {
                    if (hrsReceiptDeduction.getDeduction().getPkDeductionId() == moDeduction.getPkDeductionId()) {
                        payrollReceiptDeduction = hrsReceiptDeduction.getPayrollReceiptDeduction();
                        break;
                    }
                }

                // add HRS receipt deduction as a copy:
                
                SHrsReceiptDeduction hrsReceiptDeductionCopy = new SHrsReceiptDeduction(SHrsReceiptDeduction.INPUT_BY_DED);
                hrsReceiptDeductionCopy.setHrsReceipt(hrsReceipt);
                hrsReceiptDeductionCopy.setDeduction(moDeduction);
                
                if (payrollReceiptDeduction != null) {
                    hrsReceiptDeductionCopy.setPayrollReceiptDeduction(payrollReceiptDeduction);
                }
                else {
                    hrsReceiptDeductionCopy.setPayrollReceiptDeduction(createPayrollReceipDeduction(hrsReceipt, hrsReceiptDeductionCopy));
                }

                rows.add(hrsReceiptDeductionCopy);
            }
        }
        
        enableFields(!rows.isEmpty());
        
        moGridEmployeeRow.populateGrid(rows);
        moGridEmployeeRow.getTable().getDefaultEditor(Boolean.class).addCellEditorListener(this);
        moGridEmployeeRow.getTable().getDefaultEditor(Double.class).addCellEditorListener(this);
        moGridEmployeeRow.setSelectedGridRow(0);
        computeTotal();
    }
    
    private void processCellEdition() {
        boolean refresh = false;
        SHrsReceiptDeduction hrsReceiptDeductionCopy = (SHrsReceiptDeduction) moGridEmployeeRow.getSelectedGridRow(); // get copy of HRS receipt deduction
        
        if (hrsReceiptDeductionCopy != null) {
            switch (moGridEmployeeRow.getTable().getSelectedColumn()) {
                case COL_VAL:
                    if (hrsReceiptDeductionCopy.isEditableValueAlleged()) {
                        refresh = true;
                    }
                    else {
                        miClient.showMsgBoxWarning("No se puede modificar la 'Cantidad' de la deducción '" + hrsReceiptDeductionCopy.getDeduction().getName() + "'.");
                    }
                    break;
                case COL_AMT_UNT:
                    if (hrsReceiptDeductionCopy.isEditableAmountUnitary(hrsReceiptDeductionCopy.getAmountBeingEdited())) {
                        refresh = true;
                    }
                    else {
                        miClient.showMsgBoxWarning("No se puede modificar el 'Monto unitario' de la deducción '" + hrsReceiptDeductionCopy.getDeduction().getName() + "'."
                                + (!hrsReceiptDeductionCopy.getDeduction().isBenefit() ? "" : "El monto capturado no puede ser menor que " + SLibUtils.getDecimalFormatAmount().format(hrsReceiptDeductionCopy.getAmountOriginal()) + "."));
                    }
                    break;
                case COL_SET_FLAG:
                    refresh = true;
                    break;
                default:
            }
            
            if (refresh) {
                SHrsReceipt hrsReceipt = hrsReceiptDeductionCopy.getHrsReceipt(); // convenience variable
                
                if (hrsReceipt.getHrsReceiptDeduction(hrsReceiptDeductionCopy.getPayrollReceiptDeduction().getPkMoveId()) == null) {
                    hrsReceipt.addHrsReceiptDeduction(hrsReceiptDeductionCopy);
                }
                else {
                    hrsReceipt.replaceHrsReceiptDeduction(hrsReceiptDeductionCopy.getPayrollReceiptDeduction().getPkMoveId(), hrsReceiptDeductionCopy);
                }
                
                refreshGridRows();
            }
        }
    }
    
    @Override
    public void actionSave() {
        // remove unused deductions:

        for (SHrsReceipt receipt : maHrsReceipts) {
            ArrayList<SHrsReceiptDeduction> removableHrsReceiptDeductions = new ArrayList<>();
            
            for (SHrsReceiptDeduction receiptDeduction : receipt.getHrsReceiptDeductions()) {
                if (!receiptDeduction.isApplying()) {
                    removableHrsReceiptDeductions.add(receiptDeduction);
                }
            }
            
            for (SHrsReceiptDeduction removableHrsReceiptDeduction : removableHrsReceiptDeductions) {
                receipt.removeHrsReceiptDeduction(removableHrsReceiptDeduction.getPayrollReceiptDeduction().getPkMoveId());
            }
        }
        
        super.actionSave();
    }

    @Override
    public void actionCancel() {
        mnFormResult = SGuiConsts.FORM_RESULT_CANCEL;
        dispose();
    }
    
    @Override
    public void addAllListeners() {
        moKeyDeduction.addItemListener(this);
        jbSetAll.addActionListener(this);
        jbClear.addActionListener(this);
        jbClearAll.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        moKeyDeduction.removeItemListener(this);
        jbSetAll.removeActionListener(this);
        jbClear.removeActionListener(this);
        jbClearAll.removeActionListener(this);
    }

    @Override
    public void reloadCatalogues() {
        
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public SGuiValidation validateForm() {
        return new SGuiValidation();
    }

    @Override
    @SuppressWarnings("unchecked")
    public void setValue(final int type, final Object value) {
        try {
            switch (type) {
                case SModConsts.HRS_PAY:
                    setPayroll((SHrsPayroll) value);
                    break;
                case SModConsts.HRS_PAY_RCP:
                    maHrsReceipts = (ArrayList<SHrsReceipt>) value;
                    break;
                default:
            }
        }
        catch (Exception e ) {
            SLibUtils.printException(this, e);
        }
    }

    @Override
    public Object getValue(final int type) {
        Object value = null;
        
        switch (type) {
            case SModConsts.HRS_PAY_RCP:
                value = maHrsReceipts;
                break;
            default:
        }

        return value;
    }
    
    @Override
    public void notifyRowNew(int gridType, int gridSubtype, int row, SGridRow gridRow) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void notifyRowEdit(int gridType, int gridSubtype, int row, SGridRow gridRow) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void notifyRowDelete(int gridType, int gridSubtype, int row, SGridRow gridRow) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbSetAll) {
                actionPerformedSetAll();
            }
            else if (button == jbClear) {
                actionPerformedClear();
            }
            else if (button == jbClearAll) {
                actionPerformedClearAll();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof JComboBox && e.getStateChange() == ItemEvent.SELECTED) {
            JComboBox comboBox = (JComboBox)  e.getSource();

            if (comboBox == moKeyDeduction) {
                itemStateChangedDeduction();
            }
        }
    }

    @Override
    public void editingStopped(ChangeEvent e) {
        processCellEdition();
    }

    @Override
    public void editingCanceled(ChangeEvent e) {
        
    }
}
