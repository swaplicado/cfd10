/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.hrs.form;

import erp.mod.SModConsts;
import erp.mod.hrs.db.SDbDeduction;
import erp.mod.hrs.db.SDbPayrollReceiptDeduction;
import erp.mod.hrs.db.SHrsPayroll;
import erp.mod.hrs.db.SHrsReceipt;
import erp.mod.hrs.db.SHrsReceiptDeduction;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridPaneFormOwner;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiItem;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFormDialog;

/**
 *
 * @author Juan Barajas, Sergio Flores
 */
public class SDialogPayrollDeductions extends SBeanFormDialog implements SGridPaneFormOwner, ItemListener, ActionListener, CellEditorListener {

    protected static final int COL_AMOUNT_UNIT = 1;
    protected static final int COL_SET_FLAG = 4;
    
    protected SHrsPayroll moHrsPayroll;
    protected ArrayList<SHrsReceipt> maHrsReceipts;
    protected HashMap<Integer, SDbDeduction> moDeductionsMap;
    protected SGridPaneForm moGridEmployeeRow;

    /**
     * Creates new form SDialogPayrollDeductions
     * @param client
     * @param title
     */
    public SDialogPayrollDeductions(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.HRSX_PAY_REC_DED, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jlDeduction = new javax.swing.JLabel();
        moKeyDeduction = new sa.lib.gui.bean.SBeanFieldKey();
        jpEmployee = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jlValue = new javax.swing.JLabel();
        moCompValue = new sa.lib.gui.bean.SBeanCompoundField();
        jbAdd = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jbClean = new javax.swing.JButton();
        jbCleanAll = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 5, 0));

        jlDeduction.setText("Deducción:");
        jlDeduction.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel12.add(jlDeduction);

        moKeyDeduction.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel12.add(moKeyDeduction);

        jPanel1.add(jPanel12, java.awt.BorderLayout.NORTH);

        jpEmployee.setLayout(new java.awt.BorderLayout());

        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlValue.setText("Valor:");
        jlValue.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel2.add(jlValue);

        moCompValue.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel2.add(moCompValue);

        jbAdd.setText("Agregar");
        jPanel2.add(jbAdd);

        jPanel4.add(jPanel2, java.awt.BorderLayout.WEST);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbClean.setText("Limpiar");
        jbClean.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbClean.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel3.add(jbClean);

        jbCleanAll.setText("Limpiar todo");
        jbCleanAll.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbCleanAll.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel3.add(jbCleanAll);

        jPanel4.add(jPanel3, java.awt.BorderLayout.EAST);

        jpEmployee.add(jPanel4, java.awt.BorderLayout.NORTH);

        jPanel1.add(jpEmployee, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JButton jbAdd;
    private javax.swing.JButton jbClean;
    private javax.swing.JButton jbCleanAll;
    private javax.swing.JLabel jlDeduction;
    private javax.swing.JLabel jlValue;
    private javax.swing.JPanel jpEmployee;
    private sa.lib.gui.bean.SBeanCompoundField moCompValue;
    private sa.lib.gui.bean.SBeanFieldKey moKeyDeduction;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 560, 350);
        
        jbSave.setText("Aceptar");

        moKeyDeduction.setKeySettings(miClient, SGuiUtils.getLabelName(jlDeduction.getText()), false);
        moCompValue.setCompoundFieldSettings(miClient);
        moCompValue.getField().setDecimalSettings(SGuiUtils.getLabelName(jlValue), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moCompValue.getField().setNextButton(jbAdd);
        moCompValue.setCompoundText("");
        
        moFields.addField(moKeyDeduction);
        
        moFields.setFormButton(jbSave);
        
        moGridEmployeeRow = new SGridPaneForm(miClient, SModConsts.HRSX_PAY_REC_DED, SLibConsts.UNDEFINED, "Empleados") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false, false, false);
            }

            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                SGridColumnForm columnForm;
                ArrayList<SGridColumnForm> gridColumnsForm = new ArrayList<>();

                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_BPR_S, "Empleado"));
                columnForm = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_QTY, "Valor", 50);
                columnForm.setEditable(true);
                gridColumnsForm.add(columnForm);
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_UNT, "Unidad", 45));
                columnForm = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT_UNIT, "Monto unitario $", 100);
                columnForm.setEditable(true);
                gridColumnsForm.add(columnForm);
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "Monto $", 75));
                columnForm = new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_S, "Pago");
                columnForm.setEditable(true);
                gridColumnsForm.add(columnForm);
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_M, "Crédito/préstamo"));
                
                moGridEmployeeRow.getTable().getDefaultEditor(Boolean.class).addCellEditorListener(SDialogPayrollDeductions.this);
                moGridEmployeeRow.getTable().getDefaultEditor(Double.class).addCellEditorListener(SDialogPayrollDeductions.this);
                
                return gridColumnsForm;
            }
        };

        moGridEmployeeRow.setForm(null);
        moGridEmployeeRow.setPaneFormOwner(this);
        jpEmployee.add(moGridEmployeeRow, BorderLayout.CENTER);

        reloadCatalogues();
        addAllListeners();
        
        enableFields(false);
    }
    
    private void enableFields(final boolean enable) {
        moCompValue.getField().setEditable(enable);
        jbAdd.setEnabled(enable);
    }
    
    private void processEdition() {
        itemStateChangedDeduction();
        moGridEmployeeRow.renderGridRows();
        moGridEmployeeRow.setSelectedGridRow(0);
    }
    
    private SDbPayrollReceiptDeduction createPayrollReceipDeduction(SHrsReceipt hrsReceipt, SHrsReceiptDeduction hrsReceiptDeduction) {
        double units = hrsReceiptDeduction.getPayrollReceiptDeduction().getUnitsAlleged();
        double amountUnit = hrsReceiptDeduction.getPayrollReceiptDeduction().getAmountUnitary();
        
        return hrsReceipt.getHrsPayroll().createPayrollReceiptDeduction(
                hrsReceipt, hrsReceiptDeduction.getDeduction(), 
                units, amountUnit, false, 
                0, 0, hrsReceiptDeduction.getPayrollReceiptDeduction().getPkMoveId());
    }
    
    private void initEmployee() {
        for (SGridRow row : moGridEmployeeRow.getModel().getGridRows()) { // process grid
            SHrsReceiptDeduction hrsReceiptDeduction = (SHrsReceiptDeduction) row;
            
            hrsReceiptDeduction.setApplying(false);
            hrsReceiptDeduction.getPayrollReceiptDeduction().setAmountUnitary(0);
            hrsReceiptDeduction.computeDeduction();
            hrsReceiptDeduction.getPayrollReceiptDeduction().setFkLoanEmployeeId_n(0);
            hrsReceiptDeduction.getPayrollReceiptDeduction().setFkLoanLoanId_n(0);
            hrsReceiptDeduction.getPayrollReceiptDeduction().setFkLoanTypeId_n(0);
        }
    }

    private void updateReceiptsDeductionRows(final boolean addAll) {
        for (SGridRow row : moGridEmployeeRow.getModel().getGridRows()) { // process grid
            SHrsReceiptDeduction hrsReceiptDeduction = (SHrsReceiptDeduction) row;
            
            hrsReceiptDeduction.setDeduction(moDeductionsMap.get(hrsReceiptDeduction.getRowPrimaryKey()[0]));
            
            for (SHrsReceipt hrsReceipt : maHrsReceipts) { // process receipt
                if (addAll) {
                    hrsReceiptDeduction.getPayrollReceiptDeduction().setAmountUnitary(moCompValue.getField().getValue());
                }
                
                if (hrsReceipt.getHrsEmployee().getEmployee().getPkEmployeeId() == hrsReceiptDeduction.getHrsReceipt().getHrsEmployee().getEmployee().getPkEmployeeId()) {
                    boolean found = false;
                    
                    hrsReceiptDeduction.setHrsReceipt(hrsReceipt);

                    for (SHrsReceiptDeduction hrsReceiptDeductionExisting : hrsReceipt.getHrsReceiptDeductions()) { // read array list ear/ded
                        if (SLibUtils.compareKeys(hrsReceiptDeductionExisting.getRowPrimaryKey(), hrsReceiptDeduction.getRowPrimaryKey())) {  // exists ear/ded
                            found = true;
                            hrsReceiptDeductionExisting.setApplying(hrsReceiptDeduction.isApplying());
                            
                            if (addAll) {
                                hrsReceiptDeductionExisting.getPayrollReceiptDeduction().setAmountUnitary(hrsReceiptDeduction.getPayrollReceiptDeduction().getAmountUnitary());
                                hrsReceiptDeductionExisting.getPayrollReceiptDeduction().setAmount_r(hrsReceiptDeduction.getPayrollReceiptDeduction().getAmountUnitary());
                            }
                            
                            hrsReceipt.replaceHrsReceiptDeduction(hrsReceiptDeductionExisting.getPayrollReceiptDeduction().getPkMoveId(), hrsReceiptDeduction);
                            
                            if (!hrsReceiptDeductionExisting.getPayrollReceiptDeduction().isAutomatic() && hrsReceiptDeductionExisting.getPayrollReceiptDeduction().getAmountUnitary() == 0) {
                                hrsReceipt.removeHrsReceiptDeduction(hrsReceiptDeductionExisting.getPayrollReceiptDeduction().getPkMoveId());
                            }
                            break;
                        }
                    }

                    if (!found) { // not exists
                        if (hrsReceiptDeduction.getPayrollReceiptDeduction().getAmountUnitary() != 0) {  // not is 0 o nulo
                            if (addAll) {
                                hrsReceiptDeduction.setPayrollReceiptDeduction(createPayrollReceipDeduction(hrsReceipt, hrsReceiptDeduction));
                            }
                            hrsReceipt.addHrsReceiptDeduction(hrsReceiptDeduction); // add ear/ded to array list
                        }
                    }
                }
            }
        }
    }
    
    private void itemStateChangedDeduction() {
        Vector<SGridRow> rows = new Vector<>();

        updateReceiptsDeductionRows(false);

        /* XXX Sergio Flores, 2019-04-10: Remover este bloque si no se necesita!
        moGridEmployeeRow.getModel().clearGridRows();
        moGridEmployeeRow.getModel().clearGrid();
        */
        
        if (moKeyDeduction.getSelectedIndex() > 0) {
            moCompValue.setCompoundText(moHrsPayroll.getDeductionComputationTypesMap().get((int) moKeyDeduction.getSelectedItem().getComplement()));

            for (SHrsReceipt hrsReceipt : maHrsReceipts) { // read receipt
                boolean found = false;

                for (SHrsReceiptDeduction hrsReceiptDeduction : hrsReceipt.getHrsReceiptDeductions()) { // read array list ear/ded
                    if (SLibUtils.compareKeys(hrsReceiptDeduction.getHrsReceipt().getHrsEmployee().getEmployee().getPrimaryKey(), hrsReceipt.getHrsEmployee().getEmployee().getPrimaryKey())) {
                        if (SLibUtils.compareKeys(new int[] { hrsReceiptDeduction.getDeduction().getPkDeductionId() }, new int[] { moKeyDeduction.getValue()[0] })) {  // exists ear/ded
                            SHrsReceiptDeduction hrsReceiptDeductionNew = new SHrsReceiptDeduction(SHrsReceiptDeduction.INPUT_BY_DED);
                            hrsReceiptDeductionNew.setHrsReceipt(hrsReceipt);
                            hrsReceiptDeductionNew.setDeduction(hrsReceiptDeduction.getDeduction());
                            hrsReceiptDeductionNew.setPayrollReceiptDeduction(hrsReceiptDeduction.getPayrollReceiptDeduction());
                            
                            rows.add(hrsReceiptDeductionNew);
                            found = true;
                        }
                    }
                }

                if (!found) {
                    if (!moDeductionsMap.get(moKeyDeduction.getValue()[0]).isLoan()) {
                        SHrsReceiptDeduction hrsReceiptDeductionNew = new SHrsReceiptDeduction(SHrsReceiptDeduction.INPUT_BY_DED);
                        hrsReceiptDeductionNew.setHrsReceipt(hrsReceipt);
                        hrsReceiptDeductionNew.setDeduction(moDeductionsMap.get(moKeyDeduction.getValue()[0]));
                        hrsReceiptDeductionNew.setPayrollReceiptDeduction(createPayrollReceipDeduction(hrsReceipt, hrsReceiptDeductionNew));

                        rows.add(hrsReceiptDeductionNew);
                    }
                }
            }
        }
        
        enableFields(!rows.isEmpty() && !moDeductionsMap.get(moKeyDeduction.getValue()[0]).isBasedOnDaysWorked());
        
        moGridEmployeeRow.populateGrid(rows);
        moGridEmployeeRow.clearSortKeys();
        moGridEmployeeRow.setSelectedGridRow(0);
    }
    
    private void actionAdd() {
        if (moCompValue.getField().getValue() <= 0) {
            miClient.showMsgBoxWarning(SGuiConsts.ERR_MSG_FIELD_DIF + "'" + SGuiUtils.getLabelName(jlValue) + "'.");
            moCompValue.getField().getComponent().requestFocus();
        }
        else {
            updateReceiptsDeductionRows(true);
            itemStateChangedDeduction();
            moCompValue.getField().setValue(0);
        }
    }
    
    public void actionClean() {
        if (jbClean.isEnabled()) {
            if (moGridEmployeeRow.getTable().getSelectedRowCount() == 1) {
                SHrsReceiptDeduction hrsReceiptDeduction = (SHrsReceiptDeduction) moGridEmployeeRow.getSelectedGridRow();
                
                hrsReceiptDeduction.setApplying(false);
                hrsReceiptDeduction.getPayrollReceiptDeduction().setAmountUnitary(0);
                
                hrsReceiptDeduction.getPayrollReceiptDeduction().setFkLoanEmployeeId_n(0);
                hrsReceiptDeduction.getPayrollReceiptDeduction().setFkLoanLoanId_n(0);
                hrsReceiptDeduction.getPayrollReceiptDeduction().setFkLoanTypeId_n(0);
                
                hrsReceiptDeduction.computeDeduction();
                
                moGridEmployeeRow.renderGridRows();
                moGridEmployeeRow.setSelectedGridRow(moGridEmployeeRow.getModel().getGridRows().indexOf(hrsReceiptDeduction));
            }
        }
    }

    public void actionCleanAll() {
        if (jbCleanAll.isEnabled()) {
            if (moGridEmployeeRow.getTable().getRowCount() > 0) {
                if (miClient.showMsgBoxConfirm("¿Está seguro que desea limpiar todas las capturas?") == JOptionPane.YES_OPTION) {
                    initEmployee();

                    moGridEmployeeRow.renderGridRows();
                    moGridEmployeeRow.getTable().requestFocus();
                    moGridEmployeeRow.setSelectedGridRow(0);
                }
            }
        }
    }
    
    private void populateDeductions(ArrayList<SDbDeduction> deductions) {
        Vector<SGuiItem> items = new Vector<>();
        
        try {
            items.add(new SGuiItem(new int[] { 0 }, "- Deducción -"));

            for (SDbDeduction deduction : deductions) {
                items.add(new SGuiItem(deduction.getPrimaryKey(), (deduction.getCode() + " - " + deduction.getName()), deduction.getFkDeductionComputationTypeId()));
            }
            
            moKeyDeduction.removeAllItems();
            for (SGuiItem item : items) {
                moKeyDeduction.addItem(item);
            }
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
        
    }
    
    @Override
    public void addAllListeners() {
        moKeyDeduction.addItemListener(this);
        jbAdd.addActionListener(this);
        jbClean.addActionListener(this);
        jbCleanAll.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        moKeyDeduction.removeItemListener(this);
        jbAdd.removeActionListener(this);
        jbClean.removeActionListener(this);
        jbCleanAll.removeActionListener(this);
    }

    @Override
    public void reloadCatalogues() {
        
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        return validation;
    }

    @Override
    public void setValue(final int type, final Object value) {
        try {
            switch (type) {
                case SModConsts.HRS_PAY:
                    moHrsPayroll = (SHrsPayroll) value;
                    populateDeductions(moHrsPayroll.getDeductions());

                    moDeductionsMap = new HashMap<>();
                    for (SDbDeduction deduction : moHrsPayroll.getDeductions()) {
                        moDeductionsMap.put(deduction.getPkDeductionId(), deduction);
                    }
                    break;
                    
                case SModConsts.HRS_PAY_RCP:
                    maHrsReceipts = (ArrayList<SHrsReceipt>) value;
                    break;
                    
                default:
            }
        }
        catch (Exception e ) {
            SLibUtils.printException(this, e);
        }
    }

    @Override
    public Object getValue(final int type) {
        Object value = null;
        
        switch (type) {
            case SModConsts.HRS_PAY_RCP:
                value = maHrsReceipts;
                break;
            default:
        }

        return value;
    }
    
    @Override
    public void actionSave() {
        updateReceiptsDeductionRows(false);
        super.actionSave();
    }

    @Override
    public void notifyRowNew(int gridType, int gridSubtype, int row, SGridRow gridRow) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void notifyRowEdit(int gridType, int gridSubtype, int row, SGridRow gridRow) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void notifyRowDelete(int gridType, int gridSubtype, int row, SGridRow gridRow) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbAdd) {
                actionAdd();
            }
            else if (button == jbClean) {
                actionClean();
            }
            else if (button == jbCleanAll) {
                actionCleanAll();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof JComboBox && e.getStateChange() == ItemEvent.SELECTED) {
            JComboBox comboBox = (JComboBox)  e.getSource();

            if (comboBox == moKeyDeduction) {
                itemStateChangedDeduction();
            }
        }
    }

    @Override
    public void editingStopped(ChangeEvent e) {
        switch (moGridEmployeeRow.getTable().getSelectedColumn()) {
            case COL_AMOUNT_UNIT:
            case COL_SET_FLAG:
                processEdition();
                break;
            default:
        }
    }

    @Override
    public void editingCanceled(ChangeEvent e) {
        
    }
}
