/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.hrs.form;

import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import erp.mod.hrs.db.SHrsEmployeeDays;
import erp.mod.hrs.db.SHrsReceiptEarning;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import sa.lib.SLibConsts;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFieldDecimal;
import sa.lib.gui.bean.SBeanFormDialog;

/**
 *
 * @author Juan Barajas, Sergio Flores
 */
public class SDialogPayrollEarning extends SBeanFormDialog implements FocusListener {
    
    private final SHrsReceiptEarning moHrsReceiptEarning;
    private final SHrsEmployeeDays moHrsEmployeeDays;
    private double mdOriginalUnitsAlleged;
    private double mdOriginalAmount;

    /**
     * Creates new form SDialogPayrollEarning
     * @param client
     * @param hrsReceiptEarning
     * @param title
     */

    public SDialogPayrollEarning(SGuiClient client, SHrsReceiptEarning hrsReceiptEarning, String title) {
        setFormSettings(client, SModConsts.HRS_PAY_RCP_EAR, SLibConsts.UNDEFINED, SLibConsts.UNDEFINED, title);
        moHrsReceiptEarning = hrsReceiptEarning;
        moHrsEmployeeDays = moHrsReceiptEarning.getHrsReceipt().getHrsEmployee().createEmployeeDays();
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jlEarning = new javax.swing.JLabel();
        moTextEarning = new sa.lib.gui.bean.SBeanFieldText();
        jPanel13 = new javax.swing.JPanel();
        jlUnitsAlleged = new javax.swing.JLabel();
        moCompUnitsAlleged = new sa.lib.gui.bean.SBeanCompoundField();
        jPanel4 = new javax.swing.JPanel();
        jlUnits = new javax.swing.JLabel();
        moCompUnits = new sa.lib.gui.bean.SBeanCompoundField();
        jPanel15 = new javax.swing.JPanel();
        jlAmountUnit = new javax.swing.JLabel();
        moCurAmountUnit = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jPanel5 = new javax.swing.JPanel();
        jlFactorAmount = new javax.swing.JLabel();
        moDecFactorAmount = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel14 = new javax.swing.JPanel();
        jlAmount = new javax.swing.JLabel();
        moCurAmount = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();

        setTitle("Percepción");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(6, 1, 0, 5));

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlEarning.setText("Percepción:");
        jlEarning.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlEarning);

        moTextEarning.setEditable(false);
        moTextEarning.setText("sBeanFieldText1");
        moTextEarning.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel7.add(moTextEarning);

        jPanel2.add(jPanel7);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlUnitsAlleged.setText("Valor:*");
        jlUnitsAlleged.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jlUnitsAlleged);
        jPanel13.add(moCompUnitsAlleged);

        jPanel2.add(jPanel13);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlUnits.setText("Valor ajustado:*");
        jlUnits.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlUnits);
        jPanel4.add(moCompUnits);

        jPanel2.add(jPanel4);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAmountUnit.setText("Monto unitario:");
        jlAmountUnit.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel15.add(jlAmountUnit);
        jPanel15.add(moCurAmountUnit);

        jPanel2.add(jPanel15);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFactorAmount.setText("Factor ajuste:");
        jlFactorAmount.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlFactorAmount);
        jPanel5.add(moDecFactorAmount);

        jPanel2.add(jPanel5);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAmount.setText("Monto:*");
        jlAmount.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jlAmount);
        jPanel14.add(moCurAmount);

        jPanel2.add(jPanel14);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JLabel jlAmount;
    private javax.swing.JLabel jlAmountUnit;
    private javax.swing.JLabel jlEarning;
    private javax.swing.JLabel jlFactorAmount;
    private javax.swing.JLabel jlUnits;
    private javax.swing.JLabel jlUnitsAlleged;
    private sa.lib.gui.bean.SBeanCompoundField moCompUnits;
    private sa.lib.gui.bean.SBeanCompoundField moCompUnitsAlleged;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurAmount;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurAmountUnit;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecFactorAmount;
    private sa.lib.gui.bean.SBeanFieldText moTextEarning;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 480, 300);

        jbSave.setText("Aceptar");

        moTextEarning.setTextSettings(SGuiUtils.getLabelName(jlEarning.getText()), 255, 0);
        moCompUnitsAlleged.setCompoundFieldSettings(miClient);
        moCompUnitsAlleged.getField().setDecimalSettings(SGuiUtils.getLabelName(jlUnitsAlleged.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, true);
        moCompUnitsAlleged.getField().setValue(0d);
        moCompUnitsAlleged.setCompoundText("");
        moCompUnits.setCompoundFieldSettings(miClient);
        moCompUnits.getField().setDecimalSettings(SGuiUtils.getLabelName(jlUnits.getText()), SGuiConsts.GUI_TYPE_DEC_AMT_UNIT, true);
        moCompUnits.getField().setValue(0d);
        moCompUnits.setCompoundText("");
        moCurAmountUnit.setCompoundFieldSettings(miClient);
        moCurAmountUnit.getField().setDecimalSettings(SGuiUtils.getLabelName(jlAmountUnit.getText()), SGuiConsts.GUI_TYPE_DEC_AMT_UNIT, false);
        moDecFactorAmount.setDecimalSettings(SGuiUtils.getLabelName(jlFactorAmount.getText()), SGuiConsts.GUI_TYPE_DEC, false);
        moCurAmount.setCompoundFieldSettings(miClient);
        moCurAmount.getField().setDecimalSettings(SGuiUtils.getLabelName(jlAmount.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, true);

        moFields.addField(moCompUnitsAlleged.getField());
        moFields.addField(moCompUnits.getField());
        moFields.addField(moCurAmountUnit.getField());
        moFields.addField(moDecFactorAmount);
        moFields.addField(moCurAmount.getField());

        moFields.setFormButton(jbSave);

        renderEarning();
        moTextEarning.setEditable(false);
        moCurAmountUnit.setEditable(false);
        moDecFactorAmount.setEditable(false);
        
        removeAllListeners();
        reloadCatalogues();
        addAllListeners();
    }
    
    private void enableFields() {
        boolean editable = moHrsReceiptEarning.getEarning().areUnitsModifiable();
        moCompUnitsAlleged.getField().setEditable(editable);
        moCompUnits.getField().setEditable(editable);
    }
    
    private void renderEarning() {
        mdOriginalUnitsAlleged = moHrsReceiptEarning.getPayrollReceiptEarning().getUnitsAlleged();
        mdOriginalAmount = moHrsReceiptEarning.getPayrollReceiptEarning().getAmount_r();
        
        moTextEarning.setValue(moHrsReceiptEarning.getEarning().getName());
        
        String earningUnit = moHrsReceiptEarning.getHrsReceipt().getHrsPayroll().getEarningComputationTypesMap().get(moHrsReceiptEarning.getEarning().getFkEarningComputationTypeId());
        
        moCompUnitsAlleged.getField().setValue(moHrsReceiptEarning.getPayrollReceiptEarning().getUnitsAlleged());
        moCompUnitsAlleged.setCompoundText(earningUnit);
        
        moCompUnits.getField().setValue(moHrsReceiptEarning.getPayrollReceiptEarning().getUnits());
        moCompUnits.setCompoundText(earningUnit);
        
        moCurAmountUnit.getField().setValue(moHrsReceiptEarning.getPayrollReceiptEarning().getAmountUnitary());
        moDecFactorAmount.setValue(moHrsReceiptEarning.getPayrollReceiptEarning().getFactorAmount());
        moCurAmount.getField().setValue(moHrsReceiptEarning.getPayrollReceiptEarning().getAmount_r());
        
        enableFields();
    }
    
    private void actionCalculateUnits() {
        double units = moHrsEmployeeDays.computeEarningUnits(moCompUnitsAlleged.getField().getValue(), moHrsReceiptEarning.getEarning());
        moCompUnits.getField().setValue(units);
        
        actionCalculateAmount();
    }
    
    private void actionCalculateAmount() {
        double amount = SHrsEmployeeDays.computeEarningAmount(moCompUnits.getField().getValue(), moCurAmountUnit.getField().getValue(), moHrsReceiptEarning.getEarning());
        moCurAmount.getField().setValue(amount);
    }
    
    @Override
    public void reloadCatalogues() {
        
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        if (validation.isValid() && moCompUnits.getField().getValue() < moCompUnitsAlleged.getField().getValue()) {
            validation.setMessage(SGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + SGuiUtils.getLabelName(jlUnits) + "'" + SGuiConsts.ERR_MSG_FIELD_VAL_GREAT_EQUAL + "'" + SGuiUtils.getLabelName(jlUnitsAlleged) + "'.");
            validation.setComponent(moCompUnits.getField().getComponent());
        }
        
        return validation;
    }
    
    @Override
    public void actionSave() {
        if (jbSave.isEnabled()) {
            if (SGuiUtils.computeValidation(miClient, validateForm())) {
                if (!moHrsReceiptEarning.getEarning().isBasedOnUnits()) {
                    if (moHrsReceiptEarning.getEarning().getFkBenefitTypeId() != SModSysConsts.HRSS_TP_BEN_VAC_BON) {
                        moHrsReceiptEarning.getPayrollReceiptEarning().setAmountUnitary(moCurAmount.getField().getValue());
                    }
                }
                else {
                    moHrsReceiptEarning.getPayrollReceiptEarning().setUnitsAlleged(moCompUnitsAlleged.getField().getValue());
                    moHrsReceiptEarning.getPayrollReceiptEarning().setUnits(moCompUnits.getField().getValue());
                }

                moHrsReceiptEarning.getPayrollReceiptEarning().setAmount_r(moCurAmount.getField().getValue());
                moHrsReceiptEarning.getPayrollReceiptEarning().setUserEdited(moCompUnitsAlleged.getField().getValue() != mdOriginalUnitsAlleged || moCurAmount.getField().getValue() != mdOriginalAmount);
                
                moHrsReceiptEarning.getHrsReceipt().replaceHrsReceiptEarning(moHrsReceiptEarning.getPayrollReceiptEarning().getPkMoveId(), moHrsReceiptEarning);

                if (!moHrsReceiptEarning.getPayrollReceiptEarning().isAutomatic() && moHrsReceiptEarning.getPayrollReceiptEarning().getUnits()== 0) { 
                    moHrsReceiptEarning.getHrsReceipt().removeHrsReceiptEarning(moHrsReceiptEarning.getPayrollReceiptEarning().getPkMoveId());
                }
                
                mnFormResult = SGuiConsts.FORM_RESULT_OK;
                dispose();
            }
        }
    }

    @Override
    public void addAllListeners() {
        moCompUnitsAlleged.getField().getComponent().addFocusListener(this);
        moCompUnits.getField().getComponent().addFocusListener(this);
    }

    @Override
    public void removeAllListeners() {
        moCompUnitsAlleged.getField().getComponent().removeFocusListener(this);
        moCompUnits.getField().getComponent().removeFocusListener(this);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void focusGained(FocusEvent e) {

    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof SBeanFieldDecimal) {
            SBeanFieldDecimal decimalField = (SBeanFieldDecimal) e.getSource();

            if (decimalField == moCompUnits.getField().getComponent()) {
                actionCalculateAmount();
            }
            else if (decimalField == moCompUnitsAlleged.getField().getComponent()) {
                actionCalculateUnits();
            }
        }
    }
}
