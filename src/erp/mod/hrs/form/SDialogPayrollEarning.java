/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.hrs.form;

import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import erp.mod.hrs.db.SHrsPayrollReceiptEarning;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFieldDecimal;
import sa.lib.gui.bean.SBeanFormDialog;

/**
 *
 * @author Juan Barajas, Sergio Flores
 */
public class SDialogPayrollEarning extends SBeanFormDialog implements FocusListener {
    
    private SHrsPayrollReceiptEarning moHrsPayrollReceiptEarning;
    private double mdUnitAux;
    private double mdUnitAllegedAux;
    private double mdAmountAux;

    /**
     * Creates new form SDialogPayrollEarning
     * @param client
     * @param payrollReceiptEarning
     * @param title
     */

    public SDialogPayrollEarning(SGuiClient client, SHrsPayrollReceiptEarning payrollReceiptEarning, String title) {
        setFormSettings(client, SModConsts.HRS_PAY_RCP_EAR, SLibConsts.UNDEFINED, SLibConsts.UNDEFINED, title);
        moHrsPayrollReceiptEarning = payrollReceiptEarning;
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jlEarning = new javax.swing.JLabel();
        moTextEarning = new sa.lib.gui.bean.SBeanFieldText();
        jPanel13 = new javax.swing.JPanel();
        jlUnitAlleged = new javax.swing.JLabel();
        moCompUnitAlleged = new sa.lib.gui.bean.SBeanCompoundField();
        jPanel4 = new javax.swing.JPanel();
        jlUnit = new javax.swing.JLabel();
        moCompUnit = new sa.lib.gui.bean.SBeanCompoundField();
        jPanel15 = new javax.swing.JPanel();
        jlAmountUnt = new javax.swing.JLabel();
        moCurAmountUnt = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jPanel5 = new javax.swing.JPanel();
        jlFactorAmount = new javax.swing.JLabel();
        moDecFactorAmount = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel14 = new javax.swing.JPanel();
        jlAmount = new javax.swing.JLabel();
        moCurAmount = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();

        setTitle("Percepción");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(6, 1, 0, 5));

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlEarning.setText("Percepción:");
        jlEarning.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlEarning);

        moTextEarning.setEditable(false);
        moTextEarning.setText("sBeanFieldText1");
        moTextEarning.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel7.add(moTextEarning);

        jPanel2.add(jPanel7);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlUnitAlleged.setText("Valor:*");
        jlUnitAlleged.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jlUnitAlleged);
        jPanel13.add(moCompUnitAlleged);

        jPanel2.add(jPanel13);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlUnit.setText("Valor ajustado:*");
        jlUnit.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlUnit);
        jPanel4.add(moCompUnit);

        jPanel2.add(jPanel4);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAmountUnt.setText("Monto unitario:");
        jlAmountUnt.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel15.add(jlAmountUnt);
        jPanel15.add(moCurAmountUnt);

        jPanel2.add(jPanel15);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFactorAmount.setText("Factor ajuste:");
        jlFactorAmount.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlFactorAmount);
        jPanel5.add(moDecFactorAmount);

        jPanel2.add(jPanel5);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAmount.setText("Monto:*");
        jlAmount.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jlAmount);
        jPanel14.add(moCurAmount);

        jPanel2.add(jPanel14);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JLabel jlAmount;
    private javax.swing.JLabel jlAmountUnt;
    private javax.swing.JLabel jlEarning;
    private javax.swing.JLabel jlFactorAmount;
    private javax.swing.JLabel jlUnit;
    private javax.swing.JLabel jlUnitAlleged;
    private sa.lib.gui.bean.SBeanCompoundField moCompUnit;
    private sa.lib.gui.bean.SBeanCompoundField moCompUnitAlleged;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurAmount;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurAmountUnt;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecFactorAmount;
    private sa.lib.gui.bean.SBeanFieldText moTextEarning;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 480, 300);

        jbSave.setText("Aceptar");

        moTextEarning.setTextSettings(SGuiUtils.getLabelName(jlEarning.getText()), 255, 0);
        moCompUnitAlleged.setCompoundFieldSettings(miClient);
        moCompUnitAlleged.getField().setDecimalSettings(SGuiUtils.getLabelName(jlUnitAlleged.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, true);
        moCompUnitAlleged.getField().setValue(0d);
        moCompUnitAlleged.setCompoundText("");
        moCompUnit.setCompoundFieldSettings(miClient);
        moCompUnit.getField().setDecimalSettings(SGuiUtils.getLabelName(jlUnit.getText()), SGuiConsts.GUI_TYPE_DEC_AMT_UNIT, true);
        moCompUnit.getField().setValue(0d);
        moCompUnit.setCompoundText("");
        moCurAmountUnt.setCompoundFieldSettings(miClient);
        moCurAmountUnt.getField().setDecimalSettings(SGuiUtils.getLabelName(jlAmountUnt.getText()), SGuiConsts.GUI_TYPE_DEC_AMT_UNIT, false);
        moDecFactorAmount.setDecimalSettings(SGuiUtils.getLabelName(jlFactorAmount.getText()), SGuiConsts.GUI_TYPE_DEC, false);
        moCurAmount.setCompoundFieldSettings(miClient);
        moCurAmount.getField().setDecimalSettings(SGuiUtils.getLabelName(jlAmount.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, true);

        moFields.addField(moCompUnitAlleged.getField());
        moFields.addField(moCompUnit.getField());
        moFields.addField(moCurAmountUnt.getField());
        moFields.addField(moDecFactorAmount);
        moFields.addField(moCurAmount.getField());

        moFields.setFormButton(jbSave);

        renderEarning();
        moTextEarning.setEditable(false);
        moCurAmountUnt.setEditable(false);
        moDecFactorAmount.setEditable(false);
        
        removeAllListeners();
        reloadCatalogues();
        addAllListeners();
    }
    
    private void enableFields() {
        moCompUnitAlleged.getField().setEditable(moHrsPayrollReceiptEarning.getEarning().getFkEarningComputationTypeId() != SModSysConsts.HRSS_TP_EAR_COMP_AMT && !moHrsPayrollReceiptEarning.getEarning().isDaysWorkedBasedOn());
        moCompUnit.getField().setEditable(moHrsPayrollReceiptEarning.getEarning().getFkEarningComputationTypeId() != SModSysConsts.HRSS_TP_EAR_COMP_AMT && !moHrsPayrollReceiptEarning.getEarning().isDaysWorkedBasedOn());
    }
    
    private void renderEarning() {
        mdUnitAllegedAux = moHrsPayrollReceiptEarning.getReceiptEarning().getUnitsAlleged();
        mdUnitAux = moHrsPayrollReceiptEarning.getReceiptEarning().getUnits();
        mdAmountAux = moHrsPayrollReceiptEarning.getReceiptEarning().getAmount_r();
        
        moTextEarning.setValue(moHrsPayrollReceiptEarning.getEarning().getName());
        moCompUnitAlleged.getField().setValue(mdUnitAllegedAux);
        moCompUnitAlleged.setCompoundText((String) miClient.getSession().readField(SModConsts.HRSS_TP_EAR_COMP, new int[] { moHrsPayrollReceiptEarning.getEarning().getFkEarningComputationTypeId() }, SDbRegistry.FIELD_CODE));
        moCompUnit.getField().setValue(mdUnitAux);
        moCompUnit.setCompoundText((String) miClient.getSession().readField(SModConsts.HRSS_TP_EAR_COMP, new int[] { moHrsPayrollReceiptEarning.getEarning().getFkEarningComputationTypeId() }, SDbRegistry.FIELD_CODE));
        moCurAmountUnt.getField().setValue(moHrsPayrollReceiptEarning.getReceiptEarning().getAmountUnitary());
        moDecFactorAmount.setValue(moHrsPayrollReceiptEarning.getReceiptEarning().getFactorAmount());
        moCurAmount.getField().setValue(mdAmountAux);
        enableFields();
    }
    
    private void actionCalculateUnits() {
        double units = 0;
        
        units = SLibUtils.round((!moHrsPayrollReceiptEarning.getEarning().isDaysAdjustment() ? moCompUnitAlleged.getField().getValue() * moHrsPayrollReceiptEarning.getHrsReceipt().getHrsEmployee().getEmployeeDays().getFactorCalendar() : moCompUnitAlleged.getField().getValue() * moHrsPayrollReceiptEarning.getHrsReceipt().getHrsEmployee().getEmployeeDays().getFactorCalendar() * moHrsPayrollReceiptEarning.getHrsReceipt().getHrsEmployee().getEmployeeDays().getFactorDaysPaid()), SLibUtils.DecimalFormatValue8D.getMaximumFractionDigits());
        moCompUnit.getField().setValue(units);
        actionCalculateAmount();
    }
    
    private void actionCalculateAmount() {
        if (mdUnitAllegedAux != moCompUnitAlleged.getField().getValue() || mdUnitAux != moCompUnit.getField().getValue()) {
            moCurAmount.getField().setValue(SLibUtils.round((moCompUnit.getField().getValue() * moHrsPayrollReceiptEarning.getReceiptEarning().getAmountUnitary() * moHrsPayrollReceiptEarning.getEarning().getUnitsFactor()), SLibUtils.DecimalFormatValue2D.getMaximumFractionDigits()));
        }
        mdUnitAllegedAux = moCompUnitAlleged.getField().getValue();
        mdUnitAux = moCompUnit.getField().getValue();
    }
    
    public void setFormReset() {
    }

    @Override
    public void reloadCatalogues() {
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        if (validation.isValid() && moCompUnit.getField().getValue() < moCompUnitAlleged.getField().getValue()) {
            validation.setMessage(SGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + SGuiUtils.getLabelName(jlUnit) + "'" + SGuiConsts.ERR_MSG_FIELD_VAL_GREAT_EQUAL + "'" + SGuiUtils.getLabelName(jlUnitAlleged) + "'.");
            validation.setComponent(moCompUnit.getField().getComponent());
        }
        
        return validation;
    }
    
    @Override
    public void actionSave() {
        if (jbSave.isEnabled()) {
            if (SGuiUtils.computeValidation(miClient, validateForm())) {
                
                moHrsPayrollReceiptEarning.setXtaValueAlleged(moCompUnitAlleged.getField().getValue());
                moHrsPayrollReceiptEarning.setXtaValue(moCompUnit.getField().getValue());
                moHrsPayrollReceiptEarning.setXtaAmount(moCurAmount.getField().getValue());

                if (moHrsPayrollReceiptEarning.getEarning().getFkEarningComputationTypeId() == SModSysConsts.HRSS_TP_EAR_COMP_AMT) {
                    if (moHrsPayrollReceiptEarning.getEarning().getFkBenefitTypeId() != SModSysConsts.HRSS_TP_BEN_VAC_BON) {
                        moHrsPayrollReceiptEarning.getReceiptEarning().setAmountUnitary(moHrsPayrollReceiptEarning.getXtaAmount());
                    }
                }
                else {
                    moHrsPayrollReceiptEarning.getReceiptEarning().setUnitsAlleged(moHrsPayrollReceiptEarning.getXtaValueAlleged());
                    moHrsPayrollReceiptEarning.getReceiptEarning().setUnits(moHrsPayrollReceiptEarning.getXtaValue());
                }

                moHrsPayrollReceiptEarning.getReceiptEarning().setAmount_r(moCurAmount.getField().getValue());
                moHrsPayrollReceiptEarning.getReceiptEarning().setUserEdited(moCurAmount.getField().getValue() != mdAmountAux);
                
                moHrsPayrollReceiptEarning.getHrsReceipt().replaceEarning(moHrsPayrollReceiptEarning.getPkMoveId(), moHrsPayrollReceiptEarning);

                if (!moHrsPayrollReceiptEarning.getReceiptEarning().isAutomatic() && moHrsPayrollReceiptEarning.getXtaValue() == 0) { 
                    moHrsPayrollReceiptEarning.getHrsReceipt().removeEarning(moHrsPayrollReceiptEarning.getPkMoveId());
                }
                
                mnFormResult = SGuiConsts.FORM_RESULT_OK;
                dispose();
            }
        }
    }

    @Override
    public void addAllListeners() {
        moCompUnitAlleged.getField().getComponent().addFocusListener(this);
        moCompUnit.getField().getComponent().addFocusListener(this);
    }

    @Override
    public void removeAllListeners() {
        moCompUnitAlleged.getField().getComponent().removeFocusListener(this);
        moCompUnit.getField().getComponent().removeFocusListener(this);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {

    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void focusGained(FocusEvent e) {

    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof SBeanFieldDecimal) {
            SBeanFieldDecimal decimalField = (SBeanFieldDecimal) e.getSource();

            if (decimalField == moCompUnit.getField().getComponent()) {
                actionCalculateAmount();
            }
            else if (decimalField == moCompUnitAlleged.getField().getComponent()) {
                actionCalculateUnits();
            }
        }
    }
}
