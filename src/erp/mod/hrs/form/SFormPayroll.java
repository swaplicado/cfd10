/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.hrs.form;

import erp.data.SDataConstantsSys;
import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import erp.mod.hrs.db.SDbAbsenceConsumption;
import erp.mod.hrs.db.SDbConfig;
import erp.mod.hrs.db.SDbPayroll;
import erp.mod.hrs.db.SDbPayrollReceipt;
import erp.mod.hrs.db.SDbPayrollReceiptIssue;
import erp.mod.hrs.db.SDbWorkingDaySettings;
import erp.mod.hrs.db.SHrsConsts;
import erp.mod.hrs.db.SHrsPayroll;
import erp.mod.hrs.db.SHrsPayrollDataProvider;
import erp.mod.hrs.db.SHrsPayrollReceipt;
import erp.mod.hrs.db.SHrsPayrollReceiptDeduction;
import erp.mod.hrs.db.SHrsPayrollReceiptEarning;
import erp.mod.hrs.db.SHrsPayrollRowEmployeeAvailable;
import erp.mod.hrs.db.SHrsPayrollRowEmployeeReceipt;
import erp.mod.hrs.db.SHrsUtils;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import sa.gui.util.SUtilConsts;
import sa.lib.SLibConsts;
import sa.lib.SLibTimeUtils;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFieldInteger;
import sa.lib.gui.bean.SBeanFieldRadio;
import sa.lib.gui.bean.SBeanForm;

/**
 *
 * @author Juan Barajas, Néstor Ávalos, Sergio Flores, Edwin Carmona, Sergio Flores
 */
public class SFormPayroll extends SBeanForm implements ActionListener, ItemListener, FocusListener, ChangeListener {

    private final static String TXT_WITH_TAX_SUB_PAY = "CON pago de subsidio para el empleo";
    private final static String TXT_WITHOUT_TAX_SUB_PAY = "SIN pago de subsidio para el empleo";
    
    private SDbPayroll moRegistry;
    private SDbConfig moConfig;
    private SDbWorkingDaySettings moWorkingDaySettings;
    private SHrsPayroll moHrsPayroll;

    private SGridPaneForm moGridPaneEmployeesAvailable;
    private SGridPaneForm moGridPaneEmployeesReceipt;
    private SHrsPayrollRowEmployeeAvailable moHrsPayrollEmployeeAvailable;
    private SHrsPayrollRowEmployeeReceipt moHrsPayrollEmployeeReceipt;
    private ArrayList<SDbPayrollReceipt> maDeletedPayrollReceipts;

    private int mnDefaultPeriodYear;
    private int mnDefaultNumber;
    private int mnDefaultPeriod;
    private int mnCurrentPeriodYear;
    private int mnCurrentNumber;
    private int mnCurrentPeriod;
    private Date mtDefaultDateStart;
    private Date mtDefaultDateEnd;
    private Date mtCurrentDateStart;
    private Date mtCurrentDateEnd;
    
    private int mnDaysCalendarPayroll;
    
    private boolean mbIsReadOnly;
    private boolean mbIsPayrollCopy;
    private boolean mbIsWithTaxSubsidy;
    /**
     * Creates new form SFormPayroll
     * @param client
     * @param title
     * @param subtype
     */
    public SFormPayroll(SGuiClient client, String title, int subtype) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.HRS_PAY, subtype, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        gpoRadioPayrollType = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jtpPayroll = new javax.swing.JTabbedPane();
        jpPayroll = new javax.swing.JPanel();
        jPanel41 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jlPaymentType = new javax.swing.JLabel();
        jtfPaymentType = new javax.swing.JTextField();
        jPanel35 = new javax.swing.JPanel();
        jlYear = new javax.swing.JLabel();
        moIntPeriodYear = new sa.lib.gui.bean.SBeanFieldInteger();
        jbEditPeriodYear = new javax.swing.JButton();
        jPanel42 = new javax.swing.JPanel();
        jlFiscalYear = new javax.swing.JLabel();
        moIntFiscalYear = new sa.lib.gui.bean.SBeanFieldInteger();
        jbEditFiscalYear = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jlNumber = new javax.swing.JLabel();
        moIntNumber = new sa.lib.gui.bean.SBeanFieldInteger();
        jbEditNumber = new javax.swing.JButton();
        jbGetNextNumber = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jlDateStart = new javax.swing.JLabel();
        moDateDateStart = new sa.lib.gui.bean.SBeanFieldDate();
        jbEditDates = new javax.swing.JButton();
        jtfDefaultDateStart = new javax.swing.JTextField();
        jPanel11 = new javax.swing.JPanel();
        jlDateEnd = new javax.swing.JLabel();
        moDateDateEnd = new sa.lib.gui.bean.SBeanFieldDate();
        jLabel1 = new javax.swing.JLabel();
        jtfDefaultDateEnd = new javax.swing.JTextField();
        jPanel36 = new javax.swing.JPanel();
        jlPeriod = new javax.swing.JLabel();
        moIntPeriod = new sa.lib.gui.bean.SBeanFieldInteger();
        jbEditPeriod = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        jlPayrollDays = new javax.swing.JLabel();
        moIntPayrollDays = new sa.lib.gui.bean.SBeanFieldInteger();
        jPanel13 = new javax.swing.JPanel();
        jlWorkingDays = new javax.swing.JLabel();
        moIntWorkingDays = new sa.lib.gui.bean.SBeanFieldInteger();
        jPanel16 = new javax.swing.JPanel();
        jlNotes = new javax.swing.JLabel();
        moTextNotes = new sa.lib.gui.bean.SBeanFieldText();
        jPanel17 = new javax.swing.JPanel();
        moRadNormal = new sa.lib.gui.bean.SBeanFieldRadio();
        jPanel43 = new javax.swing.JPanel();
        moRadSpecial = new sa.lib.gui.bean.SBeanFieldRadio();
        jPanel45 = new javax.swing.JPanel();
        moRadExOrd = new sa.lib.gui.bean.SBeanFieldRadio();
        jPanel21 = new javax.swing.JPanel();
        jPanel24 = new javax.swing.JPanel();
        jlTaxComputationType = new javax.swing.JLabel();
        moKeyTaxComputationType = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel25 = new javax.swing.JPanel();
        jlTax = new javax.swing.JLabel();
        moKeyTax = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel26 = new javax.swing.JPanel();
        jlTaxSubsidy = new javax.swing.JLabel();
        moKeyTaxSubsidy = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel27 = new javax.swing.JPanel();
        jlSsContribution = new javax.swing.JLabel();
        moKeySsContribution = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel19 = new javax.swing.JPanel();
        moBoolSsContribution = new sa.lib.gui.bean.SBeanFieldBoolean();
        jPanel18 = new javax.swing.JPanel();
        jlTaxSubsidyOption = new javax.swing.JLabel();
        moTextTaxSubsidyOption = new sa.lib.gui.bean.SBeanFieldText();
        jbTaxSubsidyOptionChange = new javax.swing.JButton();
        jPanel22 = new javax.swing.JPanel();
        jlMwzType = new javax.swing.JLabel();
        moKeyMwzType = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel14 = new javax.swing.JPanel();
        jlMwzWage = new javax.swing.JLabel();
        moDecMwzWage = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jPanel23 = new javax.swing.JPanel();
        jlMwzReferenceType = new javax.swing.JLabel();
        moKeyMwzReferenceType = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel15 = new javax.swing.JPanel();
        jlMwzReferenceWage = new javax.swing.JLabel();
        moDecMwzReferenceWage = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jPanel34 = new javax.swing.JPanel();
        jlUmaAmount = new javax.swing.JLabel();
        moDecUmaAmount = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jPanel46 = new javax.swing.JPanel();
        jlUmiAmount = new javax.swing.JLabel();
        moDecUmiAmount = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jPanel44 = new javax.swing.JPanel();
        moBoolClosed = new sa.lib.gui.bean.SBeanFieldBoolean();
        jPanel20 = new javax.swing.JPanel();
        jPanel38 = new javax.swing.JPanel();
        jPanel28 = new javax.swing.JPanel();
        jlTotalEarnings = new javax.swing.JLabel();
        moDecTotalEarnings = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jPanel29 = new javax.swing.JPanel();
        jlTotalDeductions = new javax.swing.JLabel();
        moDecTotalDeductions = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jPanel30 = new javax.swing.JPanel();
        jlTotalNet = new javax.swing.JLabel();
        moDecTotalNet = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jPanel37 = new javax.swing.JPanel();
        jbGoTabReceipts = new javax.swing.JButton();
        jpReceipts = new javax.swing.JPanel();
        jPanel33 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel31 = new javax.swing.JPanel();
        jPanel39 = new javax.swing.JPanel();
        jbEmployeeViewActive = new javax.swing.JButton();
        jbEmployeeViewAll = new javax.swing.JButton();
        jPanel40 = new javax.swing.JPanel();
        jbReceiptCaptureEarnings = new javax.swing.JButton();
        jbReceiptCaptureDeductions = new javax.swing.JButton();
        jpAvailableEmployees = new javax.swing.JPanel();
        jlTotalAvailables = new javax.swing.JLabel();
        jpPayrollReceipts = new javax.swing.JPanel();
        jlTotalSelected = new javax.swing.JLabel();
        jpControls = new javax.swing.JPanel();
        jPanel32 = new javax.swing.JPanel();
        jlDummy01 = new javax.swing.JLabel();
        jbReceiptAdd = new javax.swing.JButton();
        jbReceiptAddAll = new javax.swing.JButton();
        jbReceiptRemove = new javax.swing.JButton();
        jbReceiptRemoveAll = new javax.swing.JButton();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jtpPayroll.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        jtpPayroll.setAutoscrolls(true);
        jtpPayroll.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jpPayroll.setLayout(new java.awt.BorderLayout());

        jPanel41.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel41.setLayout(new java.awt.BorderLayout());

        jPanel7.setLayout(new java.awt.GridLayout(1, 2, 5, 0));

        jPanel6.setLayout(new java.awt.GridLayout(13, 1, 0, 5));

        jPanel8.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPaymentType.setText("Período de pago:");
        jlPaymentType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlPaymentType);

        jtfPaymentType.setEditable(false);
        jtfPaymentType.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jtfPaymentType.setText("jTextField1");
        jtfPaymentType.setFocusable(false);
        jtfPaymentType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jtfPaymentType);

        jPanel6.add(jPanel8);

        jPanel35.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlYear.setText("Año nómina:*");
        jlYear.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel35.add(jlYear);
        jPanel35.add(moIntPeriodYear);

        jbEditPeriodYear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_edit.gif"))); // NOI18N
        jbEditPeriodYear.setToolTipText("Modificar");
        jbEditPeriodYear.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel35.add(jbEditPeriodYear);

        jPanel6.add(jPanel35);

        jPanel42.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFiscalYear.setText("Año fiscal:*");
        jlFiscalYear.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel42.add(jlFiscalYear);
        jPanel42.add(moIntFiscalYear);

        jbEditFiscalYear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_edit.gif"))); // NOI18N
        jbEditFiscalYear.setToolTipText("Modificar");
        jbEditFiscalYear.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel42.add(jbEditFiscalYear);

        jPanel6.add(jPanel42);

        jPanel9.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNumber.setText("Número nómina:*");
        jlNumber.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlNumber);
        jPanel9.add(moIntNumber);

        jbEditNumber.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_edit.gif"))); // NOI18N
        jbEditNumber.setToolTipText("Modificar");
        jbEditNumber.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel9.add(jbEditNumber);

        jbGetNextNumber.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_action.gif"))); // NOI18N
        jbGetNextNumber.setToolTipText("Obtener número nómina");
        jbGetNextNumber.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel9.add(jbGetNextNumber);

        jPanel6.add(jPanel9);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateStart.setText("Fecha inicial:*");
        jlDateStart.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jlDateStart);
        jPanel10.add(moDateDateStart);

        jbEditDates.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_edit.gif"))); // NOI18N
        jbEditDates.setToolTipText("Modificar");
        jbEditDates.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel10.add(jbEditDates);

        jtfDefaultDateStart.setEditable(false);
        jtfDefaultDateStart.setText("jTextField1");
        jtfDefaultDateStart.setToolTipText("Fecha inicial por default");
        jtfDefaultDateStart.setFocusable(false);
        jtfDefaultDateStart.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel10.add(jtfDefaultDateStart);

        jPanel6.add(jPanel10);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateEnd.setText("Fecha final:*");
        jlDateEnd.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlDateEnd);
        jPanel11.add(moDateDateEnd);

        jLabel1.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel11.add(jLabel1);

        jtfDefaultDateEnd.setEditable(false);
        jtfDefaultDateEnd.setText("jTextField2");
        jtfDefaultDateEnd.setToolTipText("Fecha final por default");
        jtfDefaultDateEnd.setFocusable(false);
        jtfDefaultDateEnd.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel11.add(jtfDefaultDateEnd);

        jPanel6.add(jPanel11);

        jPanel36.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPeriod.setText("Período nómina:*");
        jlPeriod.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel36.add(jlPeriod);
        jPanel36.add(moIntPeriod);

        jbEditPeriod.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_edit.gif"))); // NOI18N
        jbEditPeriod.setToolTipText("Modificar");
        jbEditPeriod.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel36.add(jbEditPeriod);

        jPanel6.add(jPanel36);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPayrollDays.setText("Días nómina:*");
        jlPayrollDays.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jlPayrollDays);

        moIntPayrollDays.setEditable(false);
        jPanel12.add(moIntPayrollDays);

        jPanel6.add(jPanel12);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWorkingDays.setText("Días laborables:*");
        jlWorkingDays.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jlWorkingDays);

        moIntWorkingDays.setEditable(false);
        jPanel13.add(moIntWorkingDays);

        jPanel6.add(jPanel13);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNotes.setText("Notas:");
        jlNotes.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel16.add(jlNotes);

        moTextNotes.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel16.add(moTextNotes);

        jPanel6.add(jPanel16);

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        gpoRadioPayrollType.add(moRadNormal);
        moRadNormal.setText("Es nómina normal");
        moRadNormal.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel17.add(moRadNormal);

        jPanel6.add(jPanel17);

        jPanel43.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        gpoRadioPayrollType.add(moRadSpecial);
        moRadSpecial.setText("Es nómina especial");
        moRadSpecial.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel43.add(moRadSpecial);

        jPanel6.add(jPanel43);

        jPanel45.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        gpoRadioPayrollType.add(moRadExOrd);
        moRadExOrd.setText("Es nómina extraordinaria");
        moRadExOrd.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel45.add(moRadExOrd);

        jPanel6.add(jPanel45);

        jPanel7.add(jPanel6);

        jPanel21.setLayout(new java.awt.GridLayout(13, 1, 0, 5));

        jPanel24.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTaxComputationType.setText("Tipo cálculo impuesto:*");
        jlTaxComputationType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel24.add(jlTaxComputationType);

        moKeyTaxComputationType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel24.add(moKeyTaxComputationType);

        jPanel21.add(jPanel24);

        jPanel25.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTax.setText("Tabla impuesto:*");
        jlTax.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel25.add(jlTax);

        moKeyTax.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel25.add(moKeyTax);

        jPanel21.add(jPanel25);

        jPanel26.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTaxSubsidy.setText("Tabla subsidio empleo:*");
        jlTaxSubsidy.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel26.add(jlTaxSubsidy);

        moKeyTaxSubsidy.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel26.add(moKeyTaxSubsidy);

        jPanel21.add(jPanel26);

        jPanel27.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSsContribution.setText("Tabla retención SS:*");
        jlSsContribution.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel27.add(jlSsContribution);

        moKeySsContribution.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel27.add(moKeySsContribution);

        jPanel21.add(jPanel27);

        jPanel19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moBoolSsContribution.setText("Con cálculo de retención SS");
        moBoolSsContribution.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel19.add(moBoolSsContribution);

        jPanel21.add(jPanel19);

        jPanel18.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTaxSubsidyOption.setText("Opción subsidio empleo:");
        jlTaxSubsidyOption.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel18.add(jlTaxSubsidyOption);

        moTextTaxSubsidyOption.setEditable(false);
        moTextTaxSubsidyOption.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel18.add(moTextTaxSubsidyOption);

        jbTaxSubsidyOptionChange.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/gui/img/icon_upd.gif"))); // NOI18N
        jbTaxSubsidyOptionChange.setToolTipText("Cambiar preferencia de pago de subsidio para el empleo");
        jbTaxSubsidyOptionChange.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel18.add(jbTaxSubsidyOptionChange);

        jPanel21.add(jPanel18);

        jPanel22.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlMwzType.setText("Área geográfica:*");
        jlMwzType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel22.add(jlMwzType);

        moKeyMwzType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel22.add(moKeyMwzType);

        jPanel21.add(jPanel22);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlMwzWage.setText("Salario mín. área geográfica:");
        jlMwzWage.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel14.add(jlMwzWage);

        moDecMwzWage.setEditable(false);
        jPanel14.add(moDecMwzWage);

        jPanel21.add(jPanel14);

        jPanel23.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel23.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlMwzReferenceType.setText("Área geográfica referencia:*");
        jlMwzReferenceType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel23.add(jlMwzReferenceType);

        moKeyMwzReferenceType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel23.add(moKeyMwzReferenceType);

        jPanel21.add(jPanel23);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlMwzReferenceWage.setText("Salario mín. área geográfica referencia:");
        jlMwzReferenceWage.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel15.add(jlMwzReferenceWage);

        moDecMwzReferenceWage.setEditable(false);
        jPanel15.add(moDecMwzReferenceWage);

        jPanel21.add(jPanel15);

        jPanel34.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlUmaAmount.setText("Monto UMA:");
        jlUmaAmount.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel34.add(jlUmaAmount);

        moDecUmaAmount.setEditable(false);
        jPanel34.add(moDecUmaAmount);

        jPanel21.add(jPanel34);

        jPanel46.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlUmiAmount.setText("Monto UMI:");
        jlUmiAmount.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel46.add(jlUmiAmount);

        moDecUmiAmount.setEditable(false);
        jPanel46.add(moDecUmiAmount);

        jPanel21.add(jPanel46);

        jPanel44.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moBoolClosed.setText("Es nómina cerrada");
        moBoolClosed.setEnabled(false);
        moBoolClosed.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel44.add(moBoolClosed);

        jPanel21.add(jPanel44);

        jPanel7.add(jPanel21);

        jPanel41.add(jPanel7, java.awt.BorderLayout.NORTH);

        jpPayroll.add(jPanel41, java.awt.BorderLayout.CENTER);

        jPanel20.setBorder(javax.swing.BorderFactory.createTitledBorder("Totales de la nómina:"));
        jPanel20.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel38.setLayout(new java.awt.GridLayout(4, 1, 5, 5));

        jPanel28.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));

        jlTotalEarnings.setText("Total percepciones:");
        jlTotalEarnings.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel28.add(jlTotalEarnings);

        moDecTotalEarnings.setEditable(false);
        jPanel28.add(moDecTotalEarnings);

        jPanel38.add(jPanel28);

        jPanel29.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));

        jlTotalDeductions.setText("Total deducciones:");
        jlTotalDeductions.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel29.add(jlTotalDeductions);

        moDecTotalDeductions.setEditable(false);
        jPanel29.add(moDecTotalDeductions);

        jPanel38.add(jPanel29);

        jPanel30.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));

        jlTotalNet.setText("Total neto:");
        jlTotalNet.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel30.add(jlTotalNet);

        moDecTotalNet.setEditable(false);
        jPanel30.add(moDecTotalNet);

        jPanel38.add(jPanel30);

        jPanel37.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));

        jbGoTabReceipts.setText("Ir a recibos");
        jbGoTabReceipts.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel37.add(jbGoTabReceipts);

        jPanel38.add(jPanel37);

        jPanel20.add(jPanel38, java.awt.BorderLayout.NORTH);

        jpPayroll.add(jPanel20, java.awt.BorderLayout.SOUTH);

        jtpPayroll.addTab("Nómina", jpPayroll);

        jpReceipts.setLayout(new java.awt.BorderLayout());

        jPanel33.setLayout(new java.awt.BorderLayout());
        jpReceipts.add(jPanel33, java.awt.BorderLayout.NORTH);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Recibos de la nómina:"));
        jPanel5.setLayout(new java.awt.BorderLayout(5, 5));

        jPanel31.setLayout(new java.awt.GridLayout(1, 2, 0, 5));

        jPanel39.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jbEmployeeViewActive.setText("Ver empleados activos");
        jbEmployeeViewActive.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbEmployeeViewActive.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel39.add(jbEmployeeViewActive);

        jbEmployeeViewAll.setText("Ver todos los empleados");
        jbEmployeeViewAll.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbEmployeeViewAll.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel39.add(jbEmployeeViewAll);

        jPanel31.add(jPanel39);

        jPanel40.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jbReceiptCaptureEarnings.setText("Capturar percepciones");
        jbReceiptCaptureEarnings.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbReceiptCaptureEarnings.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel40.add(jbReceiptCaptureEarnings);

        jbReceiptCaptureDeductions.setText("Capturar deducciones");
        jbReceiptCaptureDeductions.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbReceiptCaptureDeductions.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel40.add(jbReceiptCaptureDeductions);

        jPanel31.add(jPanel40);

        jPanel5.add(jPanel31, java.awt.BorderLayout.NORTH);

        jpAvailableEmployees.setBorder(javax.swing.BorderFactory.createTitledBorder("Empleados disponibles:"));
        jpAvailableEmployees.setPreferredSize(new java.awt.Dimension(350, 100));
        jpAvailableEmployees.setLayout(new java.awt.BorderLayout());

        jlTotalAvailables.setText("[number of available employees]");
        jpAvailableEmployees.add(jlTotalAvailables, java.awt.BorderLayout.SOUTH);

        jPanel5.add(jpAvailableEmployees, java.awt.BorderLayout.LINE_START);

        jpPayrollReceipts.setBorder(javax.swing.BorderFactory.createTitledBorder("Recibos de nómina:"));
        jpPayrollReceipts.setPreferredSize(new java.awt.Dimension(475, 100));
        jpPayrollReceipts.setLayout(new java.awt.BorderLayout());

        jlTotalSelected.setText("[number of selected employees]");
        jpPayrollReceipts.add(jlTotalSelected, java.awt.BorderLayout.PAGE_END);

        jPanel5.add(jpPayrollReceipts, java.awt.BorderLayout.LINE_END);

        jpControls.setLayout(new java.awt.BorderLayout());

        jPanel32.setLayout(new java.awt.GridLayout(5, 1, 0, 5));
        jPanel32.add(jlDummy01);

        jbReceiptAdd.setText(">");
        jbReceiptAdd.setToolTipText("Agregar");
        jbReceiptAdd.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel32.add(jbReceiptAdd);

        jbReceiptAddAll.setText(">>");
        jbReceiptAddAll.setToolTipText("Agregar todos");
        jbReceiptAddAll.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel32.add(jbReceiptAddAll);

        jbReceiptRemove.setText("<");
        jbReceiptRemove.setToolTipText("Remover");
        jbReceiptRemove.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel32.add(jbReceiptRemove);

        jbReceiptRemoveAll.setText("<<");
        jbReceiptRemoveAll.setToolTipText("Remover todos");
        jbReceiptRemoveAll.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel32.add(jbReceiptRemoveAll);

        jpControls.add(jPanel32, java.awt.BorderLayout.PAGE_START);

        jPanel5.add(jpControls, java.awt.BorderLayout.CENTER);

        jpReceipts.add(jPanel5, java.awt.BorderLayout.CENTER);

        jtpPayroll.addTab("Recibos", jpReceipts);

        jPanel1.add(jtpPayroll, java.awt.BorderLayout.CENTER);
        jtpPayroll.getAccessibleContext().setAccessibleName("Configuración");

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup gpoRadioPayrollType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel33;
    private javax.swing.JPanel jPanel34;
    private javax.swing.JPanel jPanel35;
    private javax.swing.JPanel jPanel36;
    private javax.swing.JPanel jPanel37;
    private javax.swing.JPanel jPanel38;
    private javax.swing.JPanel jPanel39;
    private javax.swing.JPanel jPanel40;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JPanel jPanel42;
    private javax.swing.JPanel jPanel43;
    private javax.swing.JPanel jPanel44;
    private javax.swing.JPanel jPanel45;
    private javax.swing.JPanel jPanel46;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbEditDates;
    private javax.swing.JButton jbEditFiscalYear;
    private javax.swing.JButton jbEditNumber;
    private javax.swing.JButton jbEditPeriod;
    private javax.swing.JButton jbEditPeriodYear;
    private javax.swing.JButton jbEmployeeViewActive;
    private javax.swing.JButton jbEmployeeViewAll;
    private javax.swing.JButton jbGetNextNumber;
    private javax.swing.JButton jbGoTabReceipts;
    private javax.swing.JButton jbReceiptAdd;
    private javax.swing.JButton jbReceiptAddAll;
    private javax.swing.JButton jbReceiptCaptureDeductions;
    private javax.swing.JButton jbReceiptCaptureEarnings;
    private javax.swing.JButton jbReceiptRemove;
    private javax.swing.JButton jbReceiptRemoveAll;
    private javax.swing.JButton jbTaxSubsidyOptionChange;
    private javax.swing.JLabel jlDateEnd;
    private javax.swing.JLabel jlDateStart;
    private javax.swing.JLabel jlDummy01;
    private javax.swing.JLabel jlFiscalYear;
    private javax.swing.JLabel jlMwzReferenceType;
    private javax.swing.JLabel jlMwzReferenceWage;
    private javax.swing.JLabel jlMwzType;
    private javax.swing.JLabel jlMwzWage;
    private javax.swing.JLabel jlNotes;
    private javax.swing.JLabel jlNumber;
    private javax.swing.JLabel jlPaymentType;
    private javax.swing.JLabel jlPayrollDays;
    private javax.swing.JLabel jlPeriod;
    private javax.swing.JLabel jlSsContribution;
    private javax.swing.JLabel jlTax;
    private javax.swing.JLabel jlTaxComputationType;
    private javax.swing.JLabel jlTaxSubsidy;
    private javax.swing.JLabel jlTaxSubsidyOption;
    private javax.swing.JLabel jlTotalAvailables;
    private javax.swing.JLabel jlTotalDeductions;
    private javax.swing.JLabel jlTotalEarnings;
    private javax.swing.JLabel jlTotalNet;
    private javax.swing.JLabel jlTotalSelected;
    private javax.swing.JLabel jlUmaAmount;
    private javax.swing.JLabel jlUmiAmount;
    private javax.swing.JLabel jlWorkingDays;
    private javax.swing.JLabel jlYear;
    private javax.swing.JPanel jpAvailableEmployees;
    private javax.swing.JPanel jpControls;
    private javax.swing.JPanel jpPayroll;
    private javax.swing.JPanel jpPayrollReceipts;
    private javax.swing.JPanel jpReceipts;
    private javax.swing.JTextField jtfDefaultDateEnd;
    private javax.swing.JTextField jtfDefaultDateStart;
    private javax.swing.JTextField jtfPaymentType;
    private javax.swing.JTabbedPane jtpPayroll;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolClosed;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolSsContribution;
    private sa.lib.gui.bean.SBeanFieldDate moDateDateEnd;
    private sa.lib.gui.bean.SBeanFieldDate moDateDateStart;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moDecMwzReferenceWage;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moDecMwzWage;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moDecTotalDeductions;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moDecTotalEarnings;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moDecTotalNet;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moDecUmaAmount;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moDecUmiAmount;
    private sa.lib.gui.bean.SBeanFieldInteger moIntFiscalYear;
    private sa.lib.gui.bean.SBeanFieldInteger moIntNumber;
    private sa.lib.gui.bean.SBeanFieldInteger moIntPayrollDays;
    private sa.lib.gui.bean.SBeanFieldInteger moIntPeriod;
    private sa.lib.gui.bean.SBeanFieldInteger moIntPeriodYear;
    private sa.lib.gui.bean.SBeanFieldInteger moIntWorkingDays;
    private sa.lib.gui.bean.SBeanFieldKey moKeyMwzReferenceType;
    private sa.lib.gui.bean.SBeanFieldKey moKeyMwzType;
    private sa.lib.gui.bean.SBeanFieldKey moKeySsContribution;
    private sa.lib.gui.bean.SBeanFieldKey moKeyTax;
    private sa.lib.gui.bean.SBeanFieldKey moKeyTaxComputationType;
    private sa.lib.gui.bean.SBeanFieldKey moKeyTaxSubsidy;
    private sa.lib.gui.bean.SBeanFieldRadio moRadExOrd;
    private sa.lib.gui.bean.SBeanFieldRadio moRadNormal;
    private sa.lib.gui.bean.SBeanFieldRadio moRadSpecial;
    private sa.lib.gui.bean.SBeanFieldText moTextNotes;
    private sa.lib.gui.bean.SBeanFieldText moTextTaxSubsidyOption;
    // End of variables declaration//GEN-END:variables

    /*
     * Private methods
     */
    
    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 1024, 640);

        jtfPaymentType.setText((String) miClient.getSession().readField(SModConsts.HRSS_TP_PAY, new int[] { mnFormSubtype }, SDbRegistry.FIELD_NAME));
        jtfPaymentType.setCaretPosition(0);

        moHrsPayrollEmployeeAvailable = new SHrsPayrollRowEmployeeAvailable();
        moHrsPayrollEmployeeReceipt = new SHrsPayrollRowEmployeeReceipt();
        maDeletedPayrollReceipts = new ArrayList<>();

        moIntPeriodYear.setIntegerSettings(SGuiUtils.getLabelName(jlYear.getText()), SGuiConsts.GUI_TYPE_INT_CAL_YEAR, true);
        moIntPeriodYear.setMinInteger(2000);
        moIntPeriodYear.setMaxInteger(2100);
        moIntFiscalYear.setIntegerSettings(SGuiUtils.getLabelName(jlFiscalYear.getText()), SGuiConsts.GUI_TYPE_INT_CAL_YEAR, true);
        moIntFiscalYear.setMinInteger(2000);
        moIntFiscalYear.setMaxInteger(2100);
        moIntNumber.setIntegerSettings(SGuiUtils.getLabelName(jlNumber.getText()), SGuiConsts.GUI_TYPE_INT_RAW, true);
        moIntNumber.setMaxInteger(SHrsConsts.YEAR_WEEKS_EXTENDED);
        moDateDateStart.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateStart.getText()), true);
        moDateDateEnd.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateEnd.getText()), true);
        moIntPeriod.setIntegerSettings(SGuiUtils.getLabelName(jlPeriod.getText()), SGuiConsts.GUI_TYPE_INT_CAL_MONTH, true);
        moIntPeriod.setMaxInteger(SHrsConsts.YEAR_MONTHS);
        moIntPayrollDays.setIntegerSettings(SGuiUtils.getLabelName(jlPayrollDays.getText()), SGuiConsts.GUI_TYPE_INT, true);
        moIntWorkingDays.setIntegerSettings(SGuiUtils.getLabelName(jlWorkingDays.getText()), SGuiConsts.GUI_TYPE_INT, true);
        moTextNotes.setTextSettings(SGuiUtils.getLabelName(jlNotes.getText()), 255, 0);
        moRadNormal.setBooleanSettings(SGuiUtils.getLabelName(moRadNormal.getText()), false);
        moRadSpecial.setBooleanSettings(SGuiUtils.getLabelName(moRadSpecial.getText()), false);
        moRadExOrd.setBooleanSettings(SGuiUtils.getLabelName(moRadExOrd.getText()), false);
        moKeyTaxComputationType.setKeySettings(miClient, SGuiUtils.getLabelName(jlTaxComputationType.getText()), true);
        moKeyTax.setKeySettings(miClient, SGuiUtils.getLabelName(jlTax.getText()), true);
        moKeyTaxSubsidy.setKeySettings(miClient, SGuiUtils.getLabelName(jlTaxSubsidy.getText()), true);
        moKeySsContribution.setKeySettings(miClient, SGuiUtils.getLabelName(jlSsContribution.getText()), true);
        moBoolSsContribution.setBooleanSettings(SGuiUtils.getLabelName(moBoolSsContribution.getText()), false);
        moTextTaxSubsidyOption.setTextSettings("", 255);
        moKeyMwzType.setKeySettings(miClient, SGuiUtils.getLabelName(jlMwzType.getText()), true);
        moDecMwzWage.setCompoundFieldSettings(miClient);
        moDecMwzWage.getField().setDecimalSettings(SGuiUtils.getLabelName(jlMwzWage.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, true);
        moKeyMwzReferenceType.setKeySettings(miClient, SGuiUtils.getLabelName(jlMwzReferenceType.getText()), true);
        moDecMwzReferenceWage.setCompoundFieldSettings(miClient);
        moDecMwzReferenceWage.getField().setDecimalSettings(SGuiUtils.getLabelName(jlMwzReferenceWage.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, true);
        moDecUmaAmount.setCompoundFieldSettings(miClient);
        moDecUmaAmount.getField().setDecimalSettings(SGuiUtils.getLabelName(jlUmaAmount.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, true);
        moDecUmiAmount.setCompoundFieldSettings(miClient);
        moDecUmiAmount.getField().setDecimalSettings(SGuiUtils.getLabelName(jlUmiAmount.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, true);
        moBoolClosed.setBooleanSettings(SGuiUtils.getLabelName(moBoolClosed.getText()), false);
        moDecTotalEarnings.setCompoundFieldSettings(miClient);
        moDecTotalEarnings.getField().setDecimalSettings(SGuiUtils.getLabelName(jlTotalEarnings.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecTotalDeductions.setCompoundFieldSettings(miClient);
        moDecTotalDeductions.getField().setDecimalSettings(SGuiUtils.getLabelName(jlTotalDeductions.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecTotalNet.setCompoundFieldSettings(miClient);
        moDecTotalNet.getField().setDecimalSettings(SGuiUtils.getLabelName(jlTotalNet.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);

        moFields.addField(moIntPeriodYear);
        moFields.addField(moIntFiscalYear);
        moFields.addField(moIntNumber);
        moFields.addField(moDateDateStart);
        moFields.addField(moDateDateEnd);
        moFields.addField(moIntPeriod);
        moFields.addField(moIntPayrollDays); // is read-only
        moFields.addField(moIntWorkingDays); // is read-only
        moFields.addField(moTextNotes);
        moFields.addField(moRadNormal);
        moFields.addField(moRadSpecial);
        moFields.addField(moRadExOrd);
        moFields.addField(moKeyTaxComputationType);
        moFields.addField(moKeyTax);
        moFields.addField(moKeyTaxSubsidy);
        moFields.addField(moKeySsContribution);
        moFields.addField(moBoolSsContribution);
        moFields.addField(moTextTaxSubsidyOption); // is read-only
        moFields.addField(moKeyMwzType);
        moFields.addField(moDecMwzWage.getField()); // is read-only
        moFields.addField(moKeyMwzReferenceType);
        moFields.addField(moDecMwzReferenceWage.getField()); // is read-only
        moFields.addField(moDecUmaAmount.getField()); // is read-only
        moFields.addField(moDecUmiAmount.getField()); // is read-only
        moFields.addField(moBoolClosed); // is read-only
        moFields.setFormButton(jbSave);

        jtpPayroll.setSelectedIndex(0);

        moGridPaneEmployeesAvailable = new SGridPaneForm(miClient, SModConsts.HRSX_PAY_REC_EMP, SLibConsts.UNDEFINED, "Empleados disponibles", null) {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                int col = 0;
                ArrayList<SGridColumnForm> gridColumnsForm = new ArrayList<>();
                SGridColumnForm[] columns = new SGridColumnForm[2];

                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_BPR_L, "Empleado", 250);
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_BPR, "Clave");

                gridColumnsForm.addAll(Arrays.asList((SGridColumnForm[]) columns));

                return gridColumnsForm;
            }
        };

        moGridPaneEmployeesAvailable.setForm(null);
        moGridPaneEmployeesAvailable.setPaneFormOwner(null);
        jpAvailableEmployees.add(moGridPaneEmployeesAvailable, BorderLayout.CENTER);

        moGridPaneEmployeesReceipt = new SGridPaneForm(miClient, SModConsts.HRSX_PAY_REC_REC, SLibConsts.UNDEFINED, "Recibos de nómina", null) {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false, true, false);
            }

            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                int col = 0;
                ArrayList<SGridColumnForm> gridColumnsForm = new ArrayList<>();
                SGridColumnForm[] columns = new SGridColumnForm[5];

                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_BPR_L, "Empleado", 250);
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_BPR, "Clave");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Total percepciones $");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Total deducciones $");
                columns[col++] = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Total neto $");

                gridColumnsForm.addAll(Arrays.asList((SGridColumnForm[]) columns));

                return gridColumnsForm;
            }

            @Override
            public void actionRowEdit() {
                SHrsPayrollRowEmployeeReceipt hrsPayrollEmployeeReceipt = null;
                SDialogPayrollEmployee payrollEmployee = null;
                SHrsPayrollReceipt payrollReceipt = null;
                boolean edit = true;

                try {
                    if (jtTable.getSelectedRowCount() != 1) {
                        miClient.showMsgBoxInformation(SGridConsts.MSG_SELECT_ROW);
                    }
                    else {
                        hrsPayrollEmployeeReceipt = (SHrsPayrollRowEmployeeReceipt) moGridPaneEmployeesReceipt.getSelectedGridRow();

                        payrollEmployee = new SDialogPayrollEmployee(miClient, "Recibo de nómina");
                        payrollReceipt = hrsPayrollEmployeeReceipt.getHrsPayrollReceipt().clone();
                        
                        if (!mbIsReadOnly) {
                            payrollReceipt.computeReceipt();
                        }
                        
                        edit = (hrsPayrollEmployeeReceipt.getHrsPayrollReceipt().getReceipt().getPayrollReceiptIssue() == null && !mbIsReadOnly) ||
                                (!(hrsPayrollEmployeeReceipt.getHrsPayrollReceipt().getReceipt().getPayrollReceiptIssue() != null && hrsPayrollEmployeeReceipt.getHrsPayrollReceipt().getReceipt().getPayrollReceiptIssue().getFkReceiptStatusId() == SDataConstantsSys.TRNS_ST_DPS_EMITED) && !mbIsReadOnly);

                        //payrollEmployee.setValue(SGuiConsts.PARAM_REQ_PAY, (!hrsPayrollEmployeeReceipt.getHrsPayrollReceipt().getReceipt().isStamped() && !mbIsReadOnly)); XXX (jbarajas, 2015-10-07) remove by new table receipt issue
                        payrollEmployee.setValue(SGuiConsts.PARAM_REQ_PAY, edit);
                        payrollEmployee.setValue(SModConsts.HRS_PAY_RCP, payrollReceipt);
                        payrollEmployee.setValue(SModConsts.HRS_EAR, moHrsPayroll.getEarnigs());
                        payrollEmployee.setValue(SModConsts.HRS_DED, moHrsPayroll.getDeductions());
                        payrollEmployee.setFormVisible(true);

                        if (payrollEmployee.getFormResult() == SGuiConsts.FORM_RESULT_OK) {
                            moHrsPayroll.replaceReceipt(hrsPayrollEmployeeReceipt.getPkEmployeeId(), (SHrsPayrollReceipt) payrollEmployee.getValue(SModConsts.HRS_PAY_RCP), true);
                            int index = moGridPaneEmployeesReceipt.getTable().getSelectedRow();
                            populateEmployeesReceipt();
                            moGridPaneEmployeesReceipt.setSelectedGridRow(index);
                            computePayrollValue();
                        }
                    }
                }
                catch (Exception e) {
                    SLibUtils.printException(this, e);
                }
            }
            
            /* XXX jbarajas 09/03/2016 Eliminate confusing for users.
            @Override
            public void actionMouseClicked() {
                SFormPayroll.this.actionReceiptRemove();
            }
            */
        };

        moGridPaneEmployeesReceipt.setForm(null);
        moGridPaneEmployeesReceipt.setPaneFormOwner(null);
        jpPayrollReceipts.add(moGridPaneEmployeesReceipt, BorderLayout.CENTER);

        mvFormGrids.add(moGridPaneEmployeesAvailable);
        mvFormGrids.add(moGridPaneEmployeesReceipt);
    }

    private void computeTotals() {
        int countAvailables = 0;
        int countSelected = 0;
        
        for (int i = 0; i < moGridPaneEmployeesAvailable.getModel().getRowCount(); i++) {
            countAvailables++;
        }
        for (int i = 0; i < moGridPaneEmployeesReceipt.getModel().getRowCount(); i++) {
            countSelected++;
        }
        
        jlTotalAvailables.setText(" " + countAvailables + " empleados disponibles.");
        jlTotalSelected.setText(" " + countSelected + " recibos de nomina.");
    }

    private void clearCurrentValues() {
        mnCurrentPeriodYear = 0;
        mnCurrentNumber = 0;
        mtCurrentDateStart = null;
        mtCurrentDateEnd = null;
        mnCurrentPeriod = 0;
    }
    
    private void enableFieldsCfdiStatus() {
        boolean enable = true;
        
        try {
            mbIsReadOnly = moRegistry.isClosed() || moRegistry.isDeleted();
            
            if (mbIsReadOnly) {
                enable = false;
            }
            else {
                for (SHrsPayrollReceipt receipt : moHrsPayroll.getHrsReceipts()) {
                    //if (receipt.getReceipt().isStamped()) { XXX (jbarajas, 2015-10-07) remove by new table receipt issue
                    if (receipt.getReceipt().getPayrollReceiptIssue() != null && receipt.getReceipt().getPayrollReceiptIssue().getFkReceiptStatusId() == SDataConstantsSys.TRNS_ST_DPS_EMITED) {
                        enable = false;
                        break;
                    }
                }
            }
            moTextNotes.setEnabled(enable);
            moKeyTaxComputationType.setEnabled(enable);
            moKeyTax.setEnabled(enable);
            moKeyTaxSubsidy.setEnabled(enable);
            moKeySsContribution.setEnabled(enable);
            moBoolSsContribution.setEnabled(enable);
            moKeyMwzType.setEnabled(enable);
            moKeyMwzReferenceType.setEnabled(enable);
            jbReceiptCaptureEarnings.setEnabled(enable);
            jbReceiptCaptureDeductions.setEnabled(enable);
            jbTaxSubsidyOptionChange.setEnabled(!mbIsReadOnly);
            jbReceiptAdd.setEnabled(!mbIsReadOnly);
            jbReceiptAddAll.setEnabled(!mbIsReadOnly);
            jbReceiptRemove.setEnabled(!mbIsReadOnly);
            jbReceiptRemoveAll.setEnabled(!mbIsReadOnly);
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }

    private void updateFieldsStatus() {
        moIntPeriodYear.setEditable(false);
        moIntFiscalYear.setEditable(false);
        moIntNumber.setEditable(false);
        moDateDateStart.setEditable(false);
        moDateDateEnd.setEditable(false);
        moIntPeriod.setEditable(false);

        if (moGridPaneEmployeesReceipt.getTable().getRowCount() == 0) {
            jbEditPeriodYear.setEnabled(true);
            jbEditFiscalYear.setEnabled(true);
            jbEditNumber.setEnabled(true);
            jbGetNextNumber.setEnabled(true);
            jbEditDates.setEnabled(true);
            jbEditPeriod.setEnabled(true);
            moRadNormal.setEnabled(true);
            moRadSpecial.setEnabled(true);
            moRadExOrd.setEnabled(true);
        }
        else {
            jbEditPeriodYear.setEnabled(mbIsPayrollCopy);
            jbEditFiscalYear.setEnabled(mbIsPayrollCopy);
            jbEditNumber.setEnabled(mbIsPayrollCopy);
            jbGetNextNumber.setEnabled(mbIsPayrollCopy);
            jbEditDates.setEnabled(mbIsPayrollCopy);
            jbEditPeriod.setEnabled(mbIsPayrollCopy);
            moRadNormal.setEnabled(mbIsPayrollCopy);
            moRadSpecial.setEnabled(mbIsPayrollCopy);
            moRadExOrd.setEnabled(mbIsPayrollCopy);
        }
    }
    
    private int getPaysheetTypeId() {
        int type = SLibConsts.UNDEFINED;
        
        if (moRadNormal.isSelected()) {
            type = SModSysConsts.HRSS_TP_PAY_SHT_NOR;
        }
        else if (moRadSpecial.isSelected()) {
            type = SModSysConsts.HRSS_TP_PAY_SHT_SPE;
        }
        else if (moRadExOrd.isSelected()) {
            type = SModSysConsts.HRSS_TP_PAY_SHT_EXT;
        }
        
        return type;
    }
    
    private void setPaysheetTypeId(int type) {
        switch(type) {
        
            case SModSysConsts.HRSS_TP_PAY_SHT_NOR:
                moRadNormal.setSelected(true);
                break;
            case SModSysConsts.HRSS_TP_PAY_SHT_SPE:
                moRadSpecial.setSelected(true);
                break;
            case SModSysConsts.HRSS_TP_PAY_SHT_EXT:
                moRadExOrd.setSelected(true);
                break;
            default:
                moRadNormal.setSelected(true);
        }
    }
    
    private void validatePayrollReceiptCfdi(SHrsPayrollRowEmployeeReceipt employeeReceipt) throws Exception {
        SDbPayrollReceiptIssue issue = employeeReceipt.getHrsPayrollReceipt().getReceipt().getPayrollReceiptIssue();
        
        if (issue != null && issue.getFkReceiptStatusId() == SDataConstantsSys.TRNS_ST_DPS_EMITED) {
            throw new Exception("No se puede remover el recibo de '" + employeeReceipt.getName() + "', está emitido.");
        }
    }

    private void computePayroll() {
        moRegistry.setFiscalYear(moIntFiscalYear.getValue());
        moRegistry.setPeriodYear(moIntPeriodYear.getValue());
        moRegistry.setPeriod(moIntPeriod.getValue());
        moRegistry.setNumber(moIntNumber.getValue());
        moRegistry.setDateStart(moDateDateStart.getValue());
        moRegistry.setDateEnd(moDateDateEnd.getValue());
        moRegistry.setCalendarDays_r(mnDaysCalendarPayroll);
        moRegistry.setReceiptDays(moIntPayrollDays.getValue());
        moRegistry.setWorkingDays(moIntWorkingDays.getValue());
        moRegistry.setUmaAmount(moDecUmaAmount.getField().getValue());
        moRegistry.setUmiAmount(moDecUmiAmount.getField().getValue());
        moRegistry.setMwzWage(moDecMwzWage.getField().getValue());
        moRegistry.setMwzReferenceWage(moDecMwzReferenceWage.getField().getValue());
        moRegistry.setNotes(moTextNotes.getValue());
        moRegistry.setTaxSubsidy(mbIsWithTaxSubsidy);
        moRegistry.setSsContribution(moBoolSsContribution.getValue());
        moRegistry.setFortnightStandard(moConfig.isFortnightStandard());
        //moRegistry.setAccounting(...);
        moRegistry.setClosed(moBoolClosed.getValue());
        
        moRegistry.setFkPaymentTypeId(mnFormSubtype);
        moRegistry.setFkPaysheetTypeId(getPaysheetTypeId());

        if (moKeyMwzType.getSelectedIndex() > 0) {
            moRegistry.setFkMwzTypeId(moKeyMwzType.getValue()[0]);
        }

        if (moKeyMwzReferenceType.getSelectedIndex() > 0) {
            moRegistry.setFkMwzReferenceTypeId(moKeyMwzReferenceType.getValue()[0]);
        }
        
        if (moKeyTaxComputationType.getSelectedIndex() > 0) {
            moRegistry.setFkTaxComputationTypeId(moKeyTaxComputationType.getValue()[0]);
        }

        if (moKeyTax.getSelectedIndex() > 0) {
            moRegistry.setFkTaxId(moKeyTax.getValue()[0]);
        }

        if (moKeyTaxSubsidy.getSelectedIndex() > 0) {
            moRegistry.setFkTaxSubsidyId(moKeyTaxSubsidy.getValue()[0]);
        }

        if (moKeySsContribution.getSelectedIndex() > 0) {
            moRegistry.setFkSsContributionId(moKeySsContribution.getValue()[0]);
        }
        
        moHrsPayroll.setPayroll(moRegistry);
        populateEmployeesReceipt();
    }
    
    private void computeReceipts() {
        try {
            computePayroll();
            moHrsPayroll.computeReceipts();
            computePayrollValue();
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }
    
    private void computePayrollValue() {
        moDecTotalEarnings.getField().setValue(moHrsPayroll.getTotalEarnings());
        moDecTotalDeductions.getField().setValue(moHrsPayroll.getTotalDeductions());
        moDecTotalNet.getField().setValue(moDecTotalEarnings.getField().getValue() - moDecTotalDeductions.getField().getValue());
    }

    private void resetDays() {
        int workingDays = 0;

        if (moDateDateStart.getValue() != null && moDateDateEnd.getValue() != null) {
            if (moDateDateStart.getValue().compareTo(moDateDateEnd.getValue()) > 0) {
                mnDaysCalendarPayroll = 0;
            }
            else {
                mnDaysCalendarPayroll = (int) SLibTimeUtils.getDaysDiff(moDateDateEnd.getValue(), moDateDateStart.getValue()) + 1;
            }
        }

        if (mnDaysCalendarPayroll > 0) {
            workingDays = (mnFormSubtype == SModSysConsts.HRSS_TP_PAY_WEE ? moWorkingDaySettings.getWorkingDaysWeek() : moConfig.isFortnightStandard() ? SHrsConsts.FORTNIGHT_FIXED_DAYS : mnDaysCalendarPayroll);
            
            moIntPayrollDays.setValue(mnFormSubtype == SModSysConsts.HRSS_TP_PAY_FOR && moConfig.isFortnightStandard() ? SHrsConsts.FORTNIGHT_FIXED_DAYS : mnDaysCalendarPayroll);
            moIntWorkingDays.setValue(workingDays <= 0 ? 0 : workingDays);
        }
    }
    
    private void resetSalaries() throws Exception {
        moDecMwzWage.getField().setValue(moKeyMwzType.getSelectedIndex() <= 0 ? 0d : SHrsUtils.getRecentMinimumWage(miClient.getSession(), moKeyMwzType.getValue()[0], moDateDateEnd.getValue()));
        moDecMwzReferenceWage.getField().setValue(moKeyMwzReferenceType.getSelectedIndex() <= 0 ? 0d : SHrsUtils.getRecentMinimumWage(miClient.getSession(), moKeyMwzReferenceType.getValue()[0], moDateDateEnd.getValue()));
    }

    private void resetUmaUmiAmounts() throws Exception {
        moDecUmaAmount.getField().setValue(SHrsUtils.getRecentUma(miClient.getSession(), moDateDateEnd.getValue()));
        moDecUmiAmount.getField().setValue(SHrsUtils.getRecentUmi(miClient.getSession(), moDateDateEnd.getValue()));
    }

    private void resetWithholdingTables() throws Exception {
        moKeyTax.setValue(new int[] { SHrsUtils.getRecentTaxTable(miClient.getSession(), moDateDateEnd.getValue()) });
        moKeyTaxSubsidy.setValue(new int[] { SHrsUtils.getRecentTaxSubsidyTable(miClient.getSession(), moDateDateEnd.getValue()) });
        moKeySsContribution.setValue(new int[] { SHrsUtils.getRecentSsContributionTable(miClient.getSession(), moDateDateEnd.getValue()) });
    }

    private void setDefaultPeriodYear(final int year) throws Exception {
        mnDefaultPeriodYear = year;
        moIntPeriodYear.setValue(mnDefaultPeriodYear);
        moIntFiscalYear.setValue(mnDefaultPeriodYear);

        setDefaultNumber(mnDefaultPeriodYear);
    }

    private void setDefaultNumber(final int year) throws Exception {
        mnDefaultNumber = SHrsUtils.getPayrollNextNumber(miClient.getSession(), year, mnFormSubtype, getPaysheetTypeId());
        moIntNumber.setValue(mnDefaultNumber);

        setDefaultPeriod(mnDefaultPeriodYear, mnDefaultNumber);
    }

    private void setDefaultPeriod(final int year, final int number) throws Exception {
        Date[] period = SHrsUtils.getPayrollPeriod(miClient.getSession(), year, number, mnFormSubtype);
        int[] periodEnd = SLibTimeUtils.digestMonth(period[1]);
        int[] periodStart = null;

        if (periodEnd[0] == year) {
            mnDefaultPeriod = periodEnd[1];
        }
        else if (periodEnd[0] == year + 1) {
            periodStart = SLibTimeUtils.digestMonth(period[0]);
            mnDefaultPeriod = periodStart[1]; // on last week period, period end date can belong to next year
        }
        else {
            throw new Exception(SHrsConsts.ERR_PERIOD_DATE_INVALID);
        }

        mtDefaultDateStart = period[0];
        mtDefaultDateEnd = period[1];

        jtfDefaultDateStart.setText(SLibUtils.DateFormatDate.format(mtDefaultDateStart));
        jtfDefaultDateEnd.setText(SLibUtils.DateFormatDate.format(mtDefaultDateEnd));

        moDateDateStart.setValue(mtDefaultDateStart);
        moDateDateEnd.setValue(mtDefaultDateEnd);
        moIntPeriod.setValue(mnDefaultPeriod);
        
        triggerResets();
    }
    
    private void triggerResets() throws Exception {
        resetDays();
        resetSalaries();
        resetUmaUmiAmounts();
        resetWithholdingTables();
        populateEmployeesAvailable(false);
    }

    private void populateEmployeesAvailable(final boolean active) throws Exception {
        Vector<SGridRow> rows = new Vector<>();

        moHrsPayrollEmployeeAvailable.obtainEmployeesAvailable(miClient.getSession(), mnFormSubtype, active, moDateDateStart.getValue(), moDateDateEnd.getValue(), obtainEmployeesReceiptIds());
        for (SHrsPayrollRowEmployeeAvailable row : moHrsPayrollEmployeeAvailable.getHrsPayrollEmployeesAvailable()) {
            rows.add(row);
        }

        // XXX check this!!!
        //moGridPaneEmployeesAvailable.clearGridRows();
        //mvFormGrids.add(moGridPaneEmployeesAvailable);
        moGridPaneEmployeesAvailable.populateGrid(rows);
        computeTotals();
    }

    private void populateEmployeesReceipt() {
        Vector<SGridRow> rows = new Vector<>();

        try {
            moHrsPayrollEmployeeReceipt.setEmployeeReceipts(moHrsPayroll.getHrsReceipts());
            for (SHrsPayrollRowEmployeeReceipt receipt : moHrsPayrollEmployeeReceipt.getHrsPayrollEmployeesReceipt()) {
                rows.add(receipt);
            }
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }

        // XXX check this!!!
        //moGridPaneEmployeesReceipt.clearGridRows();
        //mvFormGrids.add(moGridPaneEmployeesReceipt);
        moGridPaneEmployeesReceipt.populateGrid(rows);
    }

    // XXX WTF???
    private String obtainEmployeesReceiptIds() {
        SHrsPayrollRowEmployeeReceipt row = null;
        String employeesReceiptIds = "";

        for (int i = 0; i < moGridPaneEmployeesReceipt.getModel().getRowCount(); i++) {
            row = (SHrsPayrollRowEmployeeReceipt) moGridPaneEmployeesReceipt.getGridRow(i);
            employeesReceiptIds = employeesReceiptIds + row.getPkEmployeeId() + ", ";
        }

        return employeesReceiptIds;
    }

    private void actionEditPeriodYear() {
        jbEditPeriodYear.setEnabled(false);
        moIntPeriodYear.setEditable(true);
        moIntPeriodYear.requestFocus();
    }
    
    private void actionEditFiscalYear() {
        jbEditFiscalYear.setEnabled(false);
        moIntFiscalYear.setEditable(true);
        moIntFiscalYear.requestFocus();
    }
    
    private void actionEditNumber() {
        jbEditNumber.setEnabled(false);
        moIntNumber.setEditable(true);
        moIntNumber.requestFocus();
    }

    private void actionApplyPeriodYear() throws Exception {
        setDefaultPeriodYear(moIntPeriodYear.getValue());
    }

    private void actionApplyNumber() throws Exception {
        setDefaultPeriod(moIntPeriodYear.getValue(), moIntNumber.getValue());
    }

    private void actionGetNextNumber() throws Exception {
        setDefaultPeriodYear(moIntPeriodYear.getValue());
        moIntNumber.requestFocus();
    }

    private void actionEditDates() {
        jbEditDates.setEnabled(false);
        moDateDateStart.setEditable(true);
        moDateDateEnd.setEditable(true);
        moDateDateStart.requestFocus();
    }

    private void actionEditPeriod() {
        jbEditPeriod.setEnabled(false);
        moIntPeriod.setEditable(true);
        moIntPeriod.requestFocus();
    }

    private void actionTaxSubsidyChange() {
       if (mbIsWithTaxSubsidy) {
           if (miClient.showMsgBoxConfirm("Se quitará el pago de subsidio para el empleo a todos los recibos que lo tengan.\n" + SGuiConsts.MSG_CNF_CONT) == JOptionPane.YES_OPTION) {
               mbIsWithTaxSubsidy = false;
           }
       }
       else {
           mbIsWithTaxSubsidy = true;
       }
       moTextTaxSubsidyOption.setValue(mbIsWithTaxSubsidy ? TXT_WITH_TAX_SUB_PAY : TXT_WITHOUT_TAX_SUB_PAY);
       computeReceipts();
    }

    private void actionGoTabReceipts() {
        SGuiValidation validation = validateForm();

        if (!SGuiUtils.computeValidation(miClient, validation)) {
            jtpPayroll.setSelectedIndex(0);
        }
        else {
            jtpPayroll.setSelectedIndex(1);

            if (!mbIsReadOnly) {
                computePayroll();
            }
        }
    }
    
    private void itemStatePaysheetType() {
        moBoolSsContribution.setSelected(!moRadSpecial.isSelected());
    }
    
    private void changeNumber() {
        if (jbEditNumber.isEnabled()) {
            try {
                setDefaultPeriodYear(moIntPeriodYear.getValue());
            }
            catch (Exception ex) {
                SLibUtils.printException(this, ex);
            }
        }
    }

    private boolean actionReceiptAdd() {
        int index = 0;
        boolean added = true;
        SDbPayrollReceipt payrollReceipt = null;
        SHrsPayrollReceipt hrsPayrollReceipt = null;
        SHrsPayrollRowEmployeeAvailable rowEmployeeAvailable = null;
        SHrsPayrollRowEmployeeReceipt rowEmployeeReceipt = null;

        if (moGridPaneEmployeesAvailable.getSelectedGridRow() == null) {
            miClient.showMsgBoxWarning(SGridConsts.MSG_SELECT_ROW);
        }
        else if (mbIsReadOnly) {
            miClient.showMsgBoxWarning("No se puede agregar el recibo, la nómina está solo lectura.");
        }
        else {
            rowEmployeeReceipt = new SHrsPayrollRowEmployeeReceipt();
            rowEmployeeAvailable = (SHrsPayrollRowEmployeeAvailable) moGridPaneEmployeesAvailable.getSelectedGridRow();

            try {
                index = moGridPaneEmployeesAvailable.getTable().getSelectedRow();
                
                hrsPayrollReceipt = moHrsPayroll.createReceipt(rowEmployeeAvailable.getPkEmployeeId(), moIntPeriodYear.getValue(), moIntPeriod.getValue(), moIntFiscalYear.getValue(), moDateDateStart.getValue(), moDateDateEnd.getValue(), moKeyTaxComputationType.getValue()[0]);

                for (int i = 0; i < maDeletedPayrollReceipts.size(); i++) {
                    payrollReceipt = maDeletedPayrollReceipts.get(i);

                    if (hrsPayrollReceipt.getReceipt().getPkEmployeeId() == payrollReceipt.getPkEmployeeId()) {
                        hrsPayrollReceipt.getReceipt().setRegistryNew(false);
                        maDeletedPayrollReceipts.remove(i);
                        break;
                    }
                }
                
                moGridPaneEmployeesAvailable.removeGridRow(moGridPaneEmployeesAvailable.getTable().getSelectedRow());
                moGridPaneEmployeesAvailable.renderGridRows();
                moGridPaneEmployeesAvailable.setSelectedGridRow(index < moGridPaneEmployeesAvailable.getModel().getRowCount() ? index : moGridPaneEmployeesAvailable.getModel().getRowCount() - 1);

                rowEmployeeReceipt.setPkEmployeeId(rowEmployeeAvailable.getPkEmployeeId());
                rowEmployeeReceipt.setFkPaymentTypeId(rowEmployeeAvailable.getFkPaymentTypeId());
                rowEmployeeReceipt.setCode(rowEmployeeAvailable.getCode());
                rowEmployeeReceipt.setName(rowEmployeeAvailable.getName());
                rowEmployeeReceipt.setTotalEarnings(hrsPayrollReceipt.getTotalEarnings());
                rowEmployeeReceipt.setTotalDeductions(hrsPayrollReceipt.getTotalDeductions());
                rowEmployeeReceipt.setTotalNet(hrsPayrollReceipt.getTotalEarnings() - hrsPayrollReceipt.getTotalDeductions());
                rowEmployeeReceipt.setHrsPayrollReceipt(hrsPayrollReceipt);

                moGridPaneEmployeesReceipt.addGridRow(rowEmployeeReceipt);
                moGridPaneEmployeesReceipt.renderGridRows();
                moGridPaneEmployeesReceipt.setSelectedGridRow(moGridPaneEmployeesReceipt.getTable().convertRowIndexToView(moGridPaneEmployeesReceipt.getModel().getRowCount() - 1));

                updateFieldsStatus();
                computePayrollValue();
                computeTotals();
            }
            catch (Exception e) {
                added = false;
                SLibUtils.showException(this, e);
            }
        }

        return added;
    }

    private void actionReceiptAddAll() {
        int from = 0;
        int rows = moGridPaneEmployeesAvailable.getTable().getRowCount();

        for (int row = 0; row < rows; row++) {
            moGridPaneEmployeesAvailable.setSelectedGridRow(from);
            if (!actionReceiptAdd()) {
                from++;
            }
        }
    }

    private boolean actionReceiptRemove() {
        int index = 0;
        boolean ok = true;
        SHrsPayrollRowEmployeeAvailable rowEmployeeAvailable = null;
        SHrsPayrollRowEmployeeReceipt rowEmployeeReceipt = null;
        
        if (moGridPaneEmployeesReceipt.getSelectedGridRow() == null) {
            miClient.showMsgBoxWarning("Se debe seleccionar un registro.");
            jbReceiptRemove.requestFocus();
        }
        else if (mbIsReadOnly) {
            miClient.showMsgBoxWarning("No se puede remover el recibo, la nómina está solo lectura.");
        }
        else {
            rowEmployeeAvailable = new SHrsPayrollRowEmployeeAvailable();
            rowEmployeeReceipt = new SHrsPayrollRowEmployeeReceipt();
            rowEmployeeReceipt = (SHrsPayrollRowEmployeeReceipt) moGridPaneEmployeesReceipt.getSelectedGridRow();

            try {
                index = moGridPaneEmployeesReceipt.getTable().getSelectedRow();
                
                validatePayrollReceiptCfdi(rowEmployeeReceipt);
                
                if (!rowEmployeeReceipt.getHrsPayrollReceipt().getReceipt().isRegistryNew()) {
                    maDeletedPayrollReceipts.add(rowEmployeeReceipt.getHrsPayrollReceipt().getReceipt());
                }
                moHrsPayroll.removeReceipt(rowEmployeeReceipt.getPkEmployeeId());

                moGridPaneEmployeesReceipt.removeGridRow(moGridPaneEmployeesReceipt.getTable().getSelectedRow());
                moGridPaneEmployeesReceipt.renderGridRows();
                moGridPaneEmployeesReceipt.setSelectedGridRow(index < moGridPaneEmployeesReceipt.getModel().getRowCount() ? index : moGridPaneEmployeesReceipt.getModel().getRowCount() - 1);
                
                if (mnFormSubtype == rowEmployeeReceipt.getFkPaymentTypeId()) {
                    rowEmployeeAvailable.setPkEmployeeId(rowEmployeeReceipt.getPkEmployeeId());
                    rowEmployeeAvailable.setFkPaymentTypeId(rowEmployeeReceipt.getFkPaymentTypeId());
                    rowEmployeeAvailable.setCode(rowEmployeeReceipt.getCode());
                    rowEmployeeAvailable.setName(rowEmployeeReceipt.getName());

                    moGridPaneEmployeesAvailable.addGridRow(rowEmployeeAvailable);
                    moGridPaneEmployeesAvailable.renderGridRows();
                    moGridPaneEmployeesAvailable.setSelectedGridRow(moGridPaneEmployeesAvailable.getTable().convertRowIndexToView(moGridPaneEmployeesAvailable.getModel().getRowCount() - 1));
                }
                
                updateFieldsStatus();
                computePayrollValue();
                computeTotals();
            }
            catch (Exception e) {
                ok = false;
                SLibUtils.showException(this, e);
            }
        }

        return ok;
    }

    private void actionReceiptRemoveAll() {
        moGridPaneEmployeesReceipt.setSelectedGridRow(0);

        while (moGridPaneEmployeesReceipt.getSelectedGridRow() != null) {
            if (!actionReceiptRemove()) {
                break;
            }
            moGridPaneEmployeesReceipt.setSelectedGridRow(0);
        }
    }

    private void actionEmployeeViewActive() {
        try {
            populateEmployeesAvailable(false);
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }

    private void actionEmployeeViewAll() {
        try {
            populateEmployeesAvailable(true);
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }

    // XXX Improve this method!!!
    private void actionReceiptCaptureDeductions() {
        SHrsPayrollRowEmployeeReceipt hrsPayrollEmployeeReceipt = null;
        ArrayList<SHrsPayrollReceipt> aHrsPayrollReceipt = null;
        SDialogPayrollDeductions ded = null;

        try {
            aHrsPayrollReceipt = new ArrayList<SHrsPayrollReceipt>();
            ded = new SDialogPayrollDeductions(miClient, "Capturar deducción"); // XXX WTF!!!

            for (int i = 0; i < moGridPaneEmployeesReceipt.getTable().getRowCount(); i++) {
                hrsPayrollEmployeeReceipt = (SHrsPayrollRowEmployeeReceipt) moGridPaneEmployeesReceipt.getGridRow(i);
                
                aHrsPayrollReceipt.add(hrsPayrollEmployeeReceipt.getHrsPayrollReceipt().clone());
            }

            ded.setValue(SModConsts.HRS_DED, moHrsPayroll.getDeductions());
            ded.setValue(SModConsts.HRS_PAY_RCP, aHrsPayrollReceipt);
            ded.setFormVisible(true);

            if (ded.getFormResult() == SGuiConsts.FORM_RESULT_OK) {
                for (SHrsPayrollReceipt hrsPayrollReceipt : (ArrayList<SHrsPayrollReceipt>) ded.getValue(SModConsts.HRS_PAY_RCP)) {
                    moHrsPayroll.replaceReceipt(hrsPayrollReceipt.getHrsEmployee().getEmployee().getPkEmployeeId(), hrsPayrollReceipt, true);
                }
                populateEmployeesReceipt();
                computePayrollValue();
            }
        }
        catch (Exception e) {
            SLibUtils.printException(this, e);
        }
    }

    // XXX Improve this method!!!
    private void actionReceiptCaptureEarnings() {
        SHrsPayrollRowEmployeeReceipt hrsPayrollEmployeeReceipt = null;
        ArrayList<SHrsPayrollReceipt> aHrsPayrollReceipt = null;
        SDialogPayrollEarnings ear = null;

        try {
            aHrsPayrollReceipt = new ArrayList<SHrsPayrollReceipt>();
            ear = new SDialogPayrollEarnings(miClient, "Capturar percepción");  // XXX WTF!!!

            for (int i = 0; i < moGridPaneEmployeesReceipt.getTable().getRowCount(); i++) {
                hrsPayrollEmployeeReceipt = (SHrsPayrollRowEmployeeReceipt) moGridPaneEmployeesReceipt.getGridRow(i);
                
                aHrsPayrollReceipt.add(hrsPayrollEmployeeReceipt.getHrsPayrollReceipt().clone());
            }

            ear.setValue(SModConsts.HRS_EAR, moHrsPayroll.getEarnigs());
            ear.setValue(SModConsts.HRS_PAY_RCP, aHrsPayrollReceipt);
            ear.setFormVisible(true);

            if (ear.getFormResult() == SGuiConsts.FORM_RESULT_OK) {
                for (SHrsPayrollReceipt hrsPayrollReceipt : (ArrayList<SHrsPayrollReceipt>) ear.getValue(SModConsts.HRS_PAY_RCP)) {
                    moHrsPayroll.replaceReceipt(hrsPayrollReceipt.getHrsEmployee().getEmployee().getPkEmployeeId(), hrsPayrollReceipt, true);
                }
                populateEmployeesReceipt();
                computePayrollValue();
            }
        }
        catch (Exception e) {
            SLibUtils.printException(this, e);
        }
    }
    
    private void focusLostPeriodYear() throws Exception {
        if (moIntPeriodYear.getValue() < 2000) {
            moIntPeriodYear.setValue(2000);
        }
        else if (moIntPeriodYear.getValue() > 2100) {
            moIntPeriodYear.setValue(2100);
        }

        if (mnCurrentPeriodYear != moIntPeriodYear.getValue()) {
            actionApplyPeriodYear();
        }
        mnCurrentPeriodYear = 0;
    }

    private void focusLostNumber() throws Exception {
        if (moIntNumber.getValue() < 1) {
            moIntNumber.setValue(1);
        }
        else if (mnFormSubtype == SModSysConsts.HRSS_TP_PAY_WEE && moIntNumber.getValue() > SHrsConsts.YEAR_WEEKS_EXTENDED) {
            moIntNumber.setValue(SHrsConsts.YEAR_WEEKS_EXTENDED);
        }
        else if (mnFormSubtype == SModSysConsts.HRSS_TP_PAY_FOR && moIntNumber.getValue() > SHrsConsts.YEAR_FORTNIGHTS) {
            moIntNumber.setValue(SHrsConsts.YEAR_FORTNIGHTS);
        }

        if (mnCurrentNumber != moIntNumber.getValue()) {
            actionApplyNumber();
        }
        mnCurrentNumber = 0;
    }

    private void focusLostDateStart() throws Exception {
        if (moDateDateStart.getValue() == null || moDateDateStart.getValue().compareTo(mtDefaultDateStart) < 0) {
            moDateDateStart.setValue(mtDefaultDateStart);
        }

        if (mtCurrentDateStart != moDateDateStart.getValue()) {
            triggerResets();
        }
        
        mtCurrentDateStart = null;
    }

    private void focusLostDateEnd() throws Exception {
        if (moDateDateEnd.getValue() == null || moDateDateEnd.getValue().compareTo(mtDefaultDateEnd) > 0) {
            moDateDateEnd.setValue(mtDefaultDateEnd);
        }

        if (mtCurrentDateEnd != moDateDateEnd.getValue()) {
            triggerResets();
        }
        
        mtCurrentDateEnd = null;
    }

    private void focusLostPeriod() throws Exception {
        int[] dateStart = null;
        int[] dateEnd = null;

        if (mnCurrentPeriod != moIntPeriod.getValue()) {
            dateStart = SLibTimeUtils.digestMonth(moDateDateStart.getValue());
            dateEnd = SLibTimeUtils.digestMonth(moDateDateEnd.getValue());

            if (moIntPeriodYear.getValue() == dateStart[0] && moIntPeriod.getValue() < dateStart[1]) {
                moIntPeriod.setValue(dateStart[1]);
            }
            else if (moIntPeriodYear.getValue() == dateEnd[0] && moIntPeriod.getValue() > dateEnd[1]) {
                moIntPeriod.setValue(dateEnd[1]);
            }
            else if (moIntPeriod.getValue() <= 0) {
                moIntPeriod.setValue(dateEnd[1]);
            }
        }
        mnCurrentPeriod = 0;
    }

    /*
     * Public methods
     */

    /*
     * Overriden methods
     */

    @Override
    public void addAllListeners() {
        jbEditPeriodYear.addActionListener(this);
        jbEditFiscalYear.addActionListener(this);
        jbEditNumber.addActionListener(this);
        jbGetNextNumber.addActionListener(this);
        jbEditDates.addActionListener(this);
        jbEditPeriod.addActionListener(this);
        jbGoTabReceipts.addActionListener(this);
        jbReceiptAdd.addActionListener(this);
        jbReceiptAddAll.addActionListener(this);
        jbReceiptRemove.addActionListener(this);
        jbReceiptRemoveAll.addActionListener(this);
        jbEmployeeViewActive.addActionListener(this);
        jbEmployeeViewAll.addActionListener(this);
        jbReceiptCaptureEarnings.addActionListener(this);
        jbReceiptCaptureDeductions.addActionListener(this);
        jbTaxSubsidyOptionChange.addActionListener(this);
        
        moRadNormal.addItemListener(this);
        moRadSpecial.addItemListener(this);
        moRadExOrd.addItemListener(this);

        moKeyMwzType.addItemListener(this);
        moKeyMwzReferenceType.addItemListener(this);
        moKeyTaxComputationType.addItemListener(this);
        moKeyTax.addItemListener(this);
        moKeyTaxSubsidy.addItemListener(this);
        moKeySsContribution.addItemListener(this);
        moBoolSsContribution.addItemListener(this);

        moIntPeriodYear.addFocusListener(this);
        moIntNumber.addFocusListener(this);
        moDateDateStart.getComponent().addFocusListener(this);
        moDateDateEnd.getComponent().addFocusListener(this);
        moIntPeriod.addFocusListener(this);

        jtpPayroll.addChangeListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbEditPeriodYear.removeActionListener(this);
        jbEditFiscalYear.removeActionListener(this);
        jbEditNumber.removeActionListener(this);
        jbGetNextNumber.removeActionListener(this);
        jbEditDates.removeActionListener(this);
        jbEditPeriod.removeActionListener(this);
        jbGoTabReceipts.removeActionListener(this);
        jbReceiptAdd.removeActionListener(this);
        jbReceiptAddAll.removeActionListener(this);
        jbReceiptRemove.removeActionListener(this);
        jbReceiptRemoveAll.removeActionListener(this);
        jbEmployeeViewActive.removeActionListener(this);
        jbEmployeeViewAll.removeActionListener(this);
        jbReceiptCaptureEarnings.removeActionListener(this);
        jbReceiptCaptureDeductions.removeActionListener(this);
        jbTaxSubsidyOptionChange.removeActionListener(this);

        moRadNormal.removeItemListener(this);
        moRadSpecial.removeItemListener(this);
        moRadExOrd.removeItemListener(this);
        
        moKeyMwzType.removeItemListener(this);
        moKeyMwzReferenceType.removeItemListener(this);
        moKeyTaxComputationType.removeItemListener(this);
        moKeyTax.removeItemListener(this);
        moKeyTaxSubsidy.removeItemListener(this);
        moKeySsContribution.removeItemListener(this);
        moBoolSsContribution.removeItemListener(this);

        moIntPeriodYear.removeFocusListener(this);
        moIntNumber.removeFocusListener(this);
        moDateDateStart.getComponent().removeFocusListener(this);
        moDateDateEnd.getComponent().removeFocusListener(this);
        moIntPeriod.removeFocusListener(this);

        jtpPayroll.removeChangeListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyMwzType, SModConsts.HRSU_TP_MWZ, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyMwzReferenceType, SModConsts.HRSU_TP_MWZ, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyTaxComputationType, SModConsts.HRSS_TP_TAX_COMP, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyTax, SModConsts.HRS_TAX, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyTaxSubsidy, SModConsts.HRS_TAX_SUB, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeySsContribution, SModConsts.HRS_SSC, SLibConsts.UNDEFINED, null);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbPayroll) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;
        mbIsReadOnly = false;
        mbIsWithTaxSubsidy = true;
        maDeletedPayrollReceipts.clear();
        
        removeAllListeners();
        reloadCatalogues();

        moConfig = (SDbConfig) miClient.getSession().readRegistry(SModConsts.HRS_CFG, new int[] { SUtilConsts.BPR_CO_ID });
        moWorkingDaySettings = SHrsUtils.getPayrollWorkingDaySettings(miClient.getSession(), mnFormSubtype);
                
        if (SHrsUtils.validatePayroll(miClient.getSession(), moConfig, moWorkingDaySettings)) {
            mbIsPayrollCopy = moRegistry.isRegistryNew() && moRegistry.getPkPayrollId() != SLibConsts.UNDEFINED;

            if (moRegistry.isRegistryNew()) {
                jtfRegistryKey.setText("");

                // Set default values:

                moRegistry.setFkPaymentTypeId(mnFormSubtype);
                moRegistry.setFkPaysheetTypeId(SModSysConsts.HRSS_TP_PAY_SHT_NOR);
                moRegistry.setClosed(false);
                moRegistry.setSsContribution(true);
                moRegistry.setTaxSubsidy(mbIsWithTaxSubsidy);

                // Set default payroll settings:

                moRegistry.setFkTaxComputationTypeId(mbIsPayrollCopy ? moRegistry.getFkTaxComputationTypeId() : moConfig.getFkTaxComputationTypeId());

                moRegistry.setFkMwzTypeId(mbIsPayrollCopy ? moRegistry.getFkMwzTypeId() : moConfig.getFkMwzTypeId());
                moRegistry.setFkMwzReferenceTypeId(mbIsPayrollCopy ? moRegistry.getFkMwzReferenceTypeId() : moConfig.getFkMwzReferenceTypeId());
            }
            else {
                jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
            }

            // Set payroll settings:

            moKeyTaxComputationType.setValue(new int[] { moRegistry.getFkTaxComputationTypeId() });

            moKeyMwzType.setValue(new int[] { moRegistry.getFkMwzTypeId() });
            moKeyMwzReferenceType.setValue(new int[] { moRegistry.getFkMwzReferenceTypeId() });

            // Set payroll values:

            setPaysheetTypeId(moRegistry.getFkPaysheetTypeId());
            
            if (moRegistry.getPkPayrollId() == SLibConsts.UNDEFINED && !mbIsPayrollCopy) {
                // Set period:
                
                setDefaultPeriodYear(miClient.getSession().getCurrentYear());
                moRegistry.setPeriodYear(mnDefaultPeriodYear);
                moRegistry.setNumber(mnDefaultNumber);
                moRegistry.setDateStart(mtDefaultDateStart);
                moRegistry.setDateEnd(mtDefaultDateEnd);
                moRegistry.setPeriod(mnDefaultPeriod);
            }
            else {
                // Set period:

                moIntPeriodYear.setValue(mnDefaultPeriodYear = moRegistry.getPeriodYear());
                moIntFiscalYear.setValue(moRegistry.getFiscalYear());

                moIntNumber.setValue(mnDefaultNumber = moRegistry.getNumber());

                setDefaultPeriod(moRegistry.getPeriodYear(), moRegistry.getNumber());
                moDateDateStart.setValue(moRegistry.getDateStart());
                moDateDateEnd.setValue(moRegistry.getDateEnd());
                moIntPeriod.setValue(moRegistry.getPeriod());

                // Set days:
                moIntPayrollDays.setValue(moRegistry.getReceiptDays());
                moIntWorkingDays.setValue(moRegistry.getWorkingDays());
                
                // Set salaries:
                moDecMwzWage.getField().setValue(moRegistry.getMwzWage());
                moDecMwzReferenceWage.getField().setValue(moRegistry.getMwzReferenceWage());
                
                // Set UMA:
                moDecUmaAmount.getField().setValue(moRegistry.getUmaAmount());

                // Set UMI:
                moDecUmiAmount.getField().setValue(moRegistry.getUmiAmount());

                // Set withholding tables:
                moKeyTax.setValue(new int[] { moRegistry.getFkTaxId() });
                moKeyTaxSubsidy.setValue(new int[] { moRegistry.getFkTaxSubsidyId() });
                moKeySsContribution.setValue(new int[] { moRegistry.getFkSsContributionId() });
            }

            moTextNotes.setValue(moRegistry.getNotes());
            moBoolClosed.setValue(moRegistry.isClosed());
            moBoolSsContribution.setValue(moRegistry.isSsContribution());
            mbIsWithTaxSubsidy = moRegistry.isTaxSubsidy();
            moTextTaxSubsidyOption.setValue(mbIsWithTaxSubsidy ? TXT_WITH_TAX_SUB_PAY : TXT_WITHOUT_TAX_SUB_PAY);

            moDecTotalEarnings.getField().setValue(moRegistry.getAuxTotalEarnings());
            moDecTotalDeductions.getField().setValue(moRegistry.getAuxTotalDeductions());
            moDecTotalNet.getField().setValue(moRegistry.getAuxTotalNet());

            moHrsPayroll = (new SHrsPayrollDataProvider(miClient.getSession())).createHrsPayroll(moConfig, moWorkingDaySettings, moRegistry, mbIsPayrollCopy);

            jtpPayroll.setSelectedIndex(0);

            setFormEditable(true);
            
            populateEmployeesReceipt();         // XXX This method MUST be invoked just before populateEmployeesAvailable()! Improve this!
            populateEmployeesAvailable(false);
            computeTotals();

            clearCurrentValues();
            updateFieldsStatus();
            enableFieldsCfdiStatus();
            jbSave.setEnabled(!mbIsReadOnly);

            addAllListeners();
        }
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbPayroll registry = moRegistry.clone();
        SDbPayrollReceipt payrollReceipt = null;

        if (registry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
        }

        registry.setPeriodYear(moIntPeriodYear.getValue());
        registry.setFiscalYear(moIntFiscalYear.getValue());
        registry.setPeriod(moIntPeriod.getValue());
        registry.setNumber(moIntNumber.getValue());
        registry.setDateStart(moDateDateStart.getValue());
        registry.setDateEnd(moDateDateEnd.getValue());
        registry.setReceiptDays(moIntPayrollDays.getValue());
        registry.setWorkingDays(moIntWorkingDays.getValue());
        registry.setMwzWage(moDecMwzWage.getField().getValue());
        registry.setMwzReferenceWage(moDecMwzReferenceWage.getField().getValue());
        registry.setNotes(moTextNotes.getValue());
        registry.setFkPaysheetTypeId(getPaysheetTypeId());
        registry.setSsContribution(moBoolSsContribution.getValue());
        registry.setTaxSubsidy(mbIsWithTaxSubsidy);
        registry.setClosed(moBoolClosed.getValue());
        registry.setFkPaymentTypeId(mnFormSubtype);
        registry.setFkMwzTypeId(moKeyMwzType.getValue()[0]);
        registry.setFkMwzReferenceTypeId(moKeyMwzReferenceType.getValue()[0]);
        registry.setFkTaxComputationTypeId(moKeyTaxComputationType.getValue()[0]);
        registry.setFkTaxId(moKeyTax.getValue()[0]);
        registry.setFkTaxSubsidyId(moKeyTaxSubsidy.getValue()[0]);
        registry.setFkSsContributionId(moKeySsContribution.getValue()[0]);

        registry.getChildPayrollReceipts().clear();
        for (SHrsPayrollReceipt hrsPayrollReceipt : moHrsPayroll.getHrsReceipts()) {
            payrollReceipt = hrsPayrollReceipt.getReceipt();

            // Obtain payrollReceiptEarnings:

            payrollReceipt.getChildPayrollReceiptEarnings().clear();
            for (SHrsPayrollReceiptEarning hrsPayrollReceiptEarning : hrsPayrollReceipt.getHrsReceiptEarnings()) {
                payrollReceipt.getChildPayrollReceiptEarnings().add(hrsPayrollReceiptEarning.getReceiptEarning());
            }

            // Obtain payrollReceiptDeductions:

            payrollReceipt.getChildPayrollReceiptDeductions().clear();
            for (SHrsPayrollReceiptDeduction hrsPayrollReceiptDeduction : hrsPayrollReceipt.getHrsReceiptDeductions()) {
                payrollReceipt.getChildPayrollReceiptDeductions().add(hrsPayrollReceiptDeduction.getReceiptDeduction());
            }
            
            // Obtain absenceConsumption:

            payrollReceipt.getChildAbsenceConsumption().clear();
            for (SDbAbsenceConsumption absenceConsumption : hrsPayrollReceipt.getAbsenceConsumptions()) {
                payrollReceipt.getChildAbsenceConsumption().add(absenceConsumption);
            }

            registry.getChildPayrollReceipts().add(payrollReceipt);
        }
        registry.getChildPayrollReceiptsDelete().clear();
        registry.getChildPayrollReceiptsDelete().addAll(maDeletedPayrollReceipts);

        return registry;
    }

    @Override
    public void setValue(final int type, final Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public SGuiValidation validateForm() {
        int num = 0;
        SGuiValidation validation = moFields.validateFields();

        try {
            if (validation.isValid()) {
                num = SHrsUtils.validatePayrollNumber(miClient.getSession(), moIntPeriodYear.getValue(), moIntNumber.getValue(), mnFormSubtype);
                if (moIntNumber.getValue() > num) {
                    validation.setMessage(SGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + SGuiUtils.getLabelName(jlNumber) + "'" + SGuiConsts.ERR_MSG_FIELD_VAL_LESS_EQUAL + num + ".");
                    validation.setComponent(moIntNumber);
                }

                if (validation.isValid()) {
                    try {
                        SLibTimeUtils.validatePeriod(moDateDateStart.getValue(), moDateDateEnd.getValue());
                        SHrsUtils.validatePayrollDate(moConfig, moDateDateStart.getValue(), moDateDateEnd.getValue());
                    }
                    catch (Exception ee) {
                        validation.setMessage("" + ee);
                    }

                    if (validation.isValid()) {
                        if (!SLibTimeUtils.isBelongingToPeriod(moDateDateStart.getValue(), mtDefaultDateStart, mtDefaultDateEnd)) {
                            validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DATE_ + "'" + SGuiUtils.getLabelName(jlDateStart.getText()) + "' "
                                    + SGuiConsts.ERR_MSG_FIELD_DATE_GREAT_EQUAL + "'" + SLibUtils.DateFormatDate.format(mtDefaultDateStart) + "', "
                                    + SGuiConsts.ERR_MSG_FIELD_DATE_LESS_EQUAL + "'" + SLibUtils.DateFormatDate.format(mtDefaultDateEnd) + "'.");
                            validation.setComponent(moDateDateStart);
                        }
                        else if (!SLibTimeUtils.isBelongingToPeriod((moDateDateEnd.getValue() != null ? moDateDateEnd.getValue() : mtDefaultDateEnd), mtDefaultDateStart, mtDefaultDateEnd)) {
                            validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DATE_ + "'" + SGuiUtils.getLabelName(jlDateEnd.getText()) + "' "
                                    + SGuiConsts.ERR_MSG_FIELD_DATE_GREAT_EQUAL + "'" + SLibUtils.DateFormatDate.format(mtDefaultDateStart) + "', "
                                    + SGuiConsts.ERR_MSG_FIELD_DATE_LESS_EQUAL + "'" + SLibUtils.DateFormatDate.format(mtDefaultDateEnd) + "'.");
                            validation.setComponent(moDateDateEnd);
                        }
                    }
                    
                    if (validation.isValid()) {
                        if (SLibTimeUtils.digestDate(moDateDateStart.getValue())[0] != moIntFiscalYear.getValue() &&
                                SLibTimeUtils.digestDate(moDateDateEnd.getValue())[0] != moIntFiscalYear.getValue()) {
                            validation.setMessage(SGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + SGuiUtils.getLabelName(jlFiscalYear) + "' " +
                                    SGuiConsts.ERR_MSG_FIELD_DATE_YEAR + "de al menos una de las fechas inicial o final.");
                            validation.setComponent(moIntFiscalYear);
                        }
                    }
                }
            }
        }
        catch (Exception e) {
            validation.setMessage("" + e);
        }

        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent evt) {
        try {
            if (evt.getSource() instanceof JButton) {
                JButton button = (JButton) evt.getSource();

                if (button == jbEditPeriodYear) {
                    actionEditPeriodYear();
                }
                else if (button == jbEditFiscalYear) {
                    actionEditFiscalYear();
                }
                else if (button == jbEditNumber) {
                    actionEditNumber();
                }
                else if (button == jbGetNextNumber) {
                    actionGetNextNumber();
                }
                else if (button == jbEditDates) {
                    actionEditDates();
                }
                else if (button == jbEditPeriod) {
                    actionEditPeriod();
                }
                else if (button == jbTaxSubsidyOptionChange) {
                    actionTaxSubsidyChange();
                }
                else if (button == jbGoTabReceipts) {
                    actionGoTabReceipts();
                }
                else if (button == jbReceiptAdd) {
                    actionReceiptAdd();
                }
                else if (button == jbReceiptAddAll) {
                    actionReceiptAddAll();
                }
                else if (button == jbReceiptRemove) {
                    actionReceiptRemove();
                }
                else if (button == jbReceiptRemoveAll) {
                    actionReceiptRemoveAll();
                }
                else if (button == jbEmployeeViewActive) {
                    actionEmployeeViewActive();
                }
                else if (button == jbEmployeeViewAll) {
                    actionEmployeeViewAll();
                }
                else if (button == jbReceiptCaptureEarnings) {
                    actionReceiptCaptureEarnings();
                }
                else if (button == jbReceiptCaptureDeductions) {
                    actionReceiptCaptureDeductions();
                }
            }
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }

    @Override
    public void itemStateChanged(ItemEvent evt) {
        try {
            if (evt.getSource() instanceof JComboBox && evt.getStateChange() == ItemEvent.SELECTED) {
                JComboBox comboBox = (JComboBox)  evt.getSource();

                if (comboBox == moKeyTaxComputationType) {
                    computeReceipts();
                }
                else if (comboBox == moKeyTax) {
                    computeReceipts();
                }
                else if (comboBox == moKeyTaxSubsidy) {
                    computeReceipts();
                }
                else if (comboBox == moKeySsContribution) {
                    computeReceipts();
                }
                else if (comboBox == moKeyMwzType) {
                    resetSalaries();
                    computeReceipts();
                }
                else if (comboBox == moKeyMwzReferenceType) {
                    resetSalaries();
                    computeReceipts();
                }
            }
            else if (evt.getSource() instanceof JCheckBox) {
                JCheckBox checkBox = (JCheckBox) evt.getSource();

                if (checkBox == moBoolSsContribution.getComponent()) {
                    computeReceipts();
                }
            }
            else if (evt.getSource() instanceof SBeanFieldRadio) {
                if (evt.getStateChange() == ItemEvent.SELECTED) {
                    SBeanFieldRadio radioButton = (SBeanFieldRadio) evt.getSource();

                    if (radioButton == moRadSpecial || radioButton == moRadNormal || radioButton == moRadExOrd) {
                        itemStatePaysheetType();
                        changeNumber();
                    }
                }
            }
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }

    @Override
    public void focusGained(FocusEvent evt) {
        if (evt.getSource() instanceof SBeanFieldInteger) {
            SBeanFieldInteger field = (SBeanFieldInteger) evt.getSource();

            if (field == moIntPeriodYear){
                mnCurrentPeriodYear = moIntPeriodYear.getValue();
            }
            else if (field == moIntNumber) {
                mnCurrentNumber = moIntNumber.getValue();
            }
            else if (field == moIntPeriod) {
                mnCurrentPeriod = moIntPeriod.getValue();
            }
        }
        else if (evt.getSource() instanceof JFormattedTextField) {
            JFormattedTextField formattedTextField = (JFormattedTextField) evt.getSource();

            if (formattedTextField == moDateDateStart.getComponent()) {
                mtCurrentDateStart = moDateDateStart.getValue();
            }
            else if (formattedTextField == moDateDateEnd.getComponent()) {
                mtCurrentDateEnd = moDateDateEnd.getValue();
            }
        }
    }

    @Override
    public void focusLost(FocusEvent evt) {
        try {
            if (evt.getSource() instanceof SBeanFieldInteger) {
                SBeanFieldInteger field = (SBeanFieldInteger) evt.getSource();

                if (field == moIntPeriodYear){
                    focusLostPeriodYear();
                }
                else if (field == moIntNumber) {
                    focusLostNumber();
                }
                else if (field == moIntPeriod) {
                    focusLostPeriod();
                }
            }
            else if (evt.getSource() instanceof JFormattedTextField) {
                JFormattedTextField formattedTextField = (JFormattedTextField) evt.getSource();

                if (formattedTextField == moDateDateStart.getComponent()) {
                    focusLostDateStart();
                }
                else if (formattedTextField == moDateDateEnd.getComponent()) {
                    focusLostDateEnd();
                }
            }
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
        finally {
            clearCurrentValues();
        }
    }

    @Override
    public void stateChanged(ChangeEvent evt) {
        if (evt.getSource() instanceof JTabbedPane) {
            JTabbedPane tabbedPane = (JTabbedPane) evt.getSource();

            if (tabbedPane == jtpPayroll) {
                if (tabbedPane.getSelectedIndex() == 1) {
                    actionGoTabReceipts();
                }
            }
        }
    }
}
