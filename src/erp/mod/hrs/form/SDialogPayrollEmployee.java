/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.hrs.form;

import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import erp.mod.hrs.db.SDbAbsence;
import erp.mod.hrs.db.SDbAbsenceConsumption;
import erp.mod.hrs.db.SDbBenefitTable;
import erp.mod.hrs.db.SDbDeduction;
import erp.mod.hrs.db.SDbEarning;
import erp.mod.hrs.db.SDbLoan;
import erp.mod.hrs.db.SDbPayrollReceiptDeduction;
import erp.mod.hrs.db.SDbPayrollReceiptEarning;
import erp.mod.hrs.db.SHrsBenefit;
import erp.mod.hrs.db.SHrsBenefitParams;
import erp.mod.hrs.db.SHrsEmployeeDays;
import erp.mod.hrs.db.SHrsPayrollReceipt;
import erp.mod.hrs.db.SHrsPayrollReceiptDeduction;
import erp.mod.hrs.db.SHrsPayrollReceiptEarning;
import erp.mod.hrs.db.SHrsUtils;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import sa.lib.SLibConsts;
import sa.lib.SLibTimeUtils;
import sa.lib.SLibUtils;
import sa.lib.db.SDbConsts;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridPaneFormOwner;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiParams;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFormDialog;

/**
 *
 * @author Juan Barajas, Sergio Flores
 */
public class SDialogPayrollEmployee extends SBeanFormDialog implements SGridPaneFormOwner, ItemListener, ActionListener, KeyListener, CellEditorListener {

    protected static final int COL_VAL = 2;
    protected static final int COL_AMT = 5;

    protected SHrsPayrollReceipt moHrsPayrollReceipt;
    protected HashMap<Integer, SDbEarning> moEarnigsMap;
    protected HashMap<Integer, SDbDeduction> moDeductionsMap;
    protected SDbEarning moEarning;
    protected SDbDeduction moDeduction;
    protected SDbLoan moEarningLoan;
    protected SDbLoan moDeductionLoan;
    protected SGridPaneForm moGridEarningRow;
    protected SGridPaneForm moGridDeductionRow;
    protected SGridPaneForm moGridAbsenceConsumptionRow;
    
    protected SDialogPayrollEarning modDialogPayrollEarning;
    
    protected double mdAmountLoan;
    protected SHrsBenefit moHrsBenefit;
    
    protected boolean mbEditable;

    /**
     * Creates new form SDialogPayrollEmployee
     * @param client
     * @param title
     */
    public SDialogPayrollEmployee(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.HRS_PAY_RCP, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jlName = new javax.swing.JLabel();
        moTextName = new sa.lib.gui.bean.SBeanFieldText();
        moTextNumber = new sa.lib.gui.bean.SBeanFieldText();
        jPanel17 = new javax.swing.JPanel();
        jlPaymentType = new javax.swing.JLabel();
        moTextPaymentType = new sa.lib.gui.bean.SBeanFieldText();
        jlDateBirth = new javax.swing.JLabel();
        moTextDateBirth = new sa.lib.gui.bean.SBeanFieldText();
        jlDepartament = new javax.swing.JLabel();
        moTextDepartament = new sa.lib.gui.bean.SBeanFieldText();
        jlSalaryType = new javax.swing.JLabel();
        moTextSalaryType = new sa.lib.gui.bean.SBeanFieldText();
        jlFiscalId = new javax.swing.JLabel();
        moTextFiscalId = new sa.lib.gui.bean.SBeanFieldText();
        jPanel29 = new javax.swing.JPanel();
        jlSalary = new javax.swing.JLabel();
        moDecSalary = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlDateBenefits = new javax.swing.JLabel();
        moTextDateBenefits = new sa.lib.gui.bean.SBeanFieldText();
        jlPosition = new javax.swing.JLabel();
        moTextPosition = new sa.lib.gui.bean.SBeanFieldText();
        jlEmployeeType = new javax.swing.JLabel();
        moTextEmployeeType = new sa.lib.gui.bean.SBeanFieldText();
        jlAlternativeId = new javax.swing.JLabel();
        moTextAlternativeId = new sa.lib.gui.bean.SBeanFieldText();
        jPanel18 = new javax.swing.JPanel();
        jlWage = new javax.swing.JLabel();
        moDecWage = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlDateLastHire = new javax.swing.JLabel();
        moTextDateLastHire = new sa.lib.gui.bean.SBeanFieldText();
        jlShift = new javax.swing.JLabel();
        moTextShift = new sa.lib.gui.bean.SBeanFieldText();
        jlWorkerType = new javax.swing.JLabel();
        moTextWorkerType = new sa.lib.gui.bean.SBeanFieldText();
        jlSocialSecurityNumber = new javax.swing.JLabel();
        moTextSocialSecurityNumber = new sa.lib.gui.bean.SBeanFieldText();
        jPanel19 = new javax.swing.JPanel();
        jlSalarySscBase = new javax.swing.JLabel();
        moDecSalarySscBase = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlDateLastDismiss_n = new javax.swing.JLabel();
        moTextDateLastDismiss_n = new sa.lib.gui.bean.SBeanFieldText();
        jlWorkingHoursDay = new javax.swing.JLabel();
        moIntWorkingHoursDay = new sa.lib.gui.bean.SBeanFieldInteger();
        jLabel1 = new javax.swing.JLabel();
        jlRecruitmentSchemeType = new javax.swing.JLabel();
        moTextRecruitmentSchemeType = new sa.lib.gui.bean.SBeanFieldText();
        jPanel14 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jpEarnings = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        moTextEarningCodeFind = new sa.lib.gui.bean.SBeanFieldText();
        jbEarningCodeFind = new javax.swing.JButton();
        moTextEarningName = new sa.lib.gui.bean.SBeanFieldText();
        jPanel2 = new javax.swing.JPanel();
        jlEarningLoan_n = new javax.swing.JLabel();
        jlEarningValue = new javax.swing.JLabel();
        jPanel25 = new javax.swing.JPanel();
        moKeyEarningLoan_n = new sa.lib.gui.bean.SBeanFieldKey();
        moComEarningValue = new sa.lib.gui.bean.SBeanCompoundField();
        jbEarningAdd = new javax.swing.JButton();
        jpDeductions = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        moTextDeductionCodeFind = new sa.lib.gui.bean.SBeanFieldText();
        jbDeductionCodeFind = new javax.swing.JButton();
        moTextDeductionName = new sa.lib.gui.bean.SBeanFieldText();
        jPanel3 = new javax.swing.JPanel();
        jlDeductionLoan_n = new javax.swing.JLabel();
        jlDeductionValue = new javax.swing.JLabel();
        jPanel26 = new javax.swing.JPanel();
        moKeyDeductionLoan_n = new sa.lib.gui.bean.SBeanFieldKey();
        moComDeductionValue = new sa.lib.gui.bean.SBeanCompoundField();
        jbDeductionAdd = new javax.swing.JButton();
        jPanel20 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jPanel21 = new javax.swing.JPanel();
        jpAbsenceConsumption = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jPanel22 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jlEarningsTotal = new javax.swing.JLabel();
        moCurEarningsTotal = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jPanel23 = new javax.swing.JPanel();
        jlDeductionsTotal = new javax.swing.JLabel();
        moCurDeductionsTotal = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jPanel24 = new javax.swing.JPanel();
        jlNetTotal = new javax.swing.JLabel();
        moCurNetTotal = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Recibo de nómina");

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del empleado:"));
        jPanel12.setLayout(new java.awt.BorderLayout());

        jPanel15.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 5, 0));

        jlName.setText("Nombre:");
        jlName.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel16.add(jlName);

        moTextName.setText("sBeanFieldText1");
        moTextName.setFocusable(false);
        moTextName.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        moTextName.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel16.add(moTextName);

        moTextNumber.setText("sBeanFieldText1");
        moTextNumber.setToolTipText("Clave");
        moTextNumber.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        moTextNumber.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel16.add(moTextNumber);

        jPanel15.add(jPanel16);

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 5, 0));

        jlPaymentType.setText("Período pago:");
        jlPaymentType.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel17.add(jlPaymentType);

        moTextPaymentType.setText("sBeanFieldText1");
        moTextPaymentType.setPreferredSize(new java.awt.Dimension(85, 23));
        jPanel17.add(moTextPaymentType);

        jlDateBirth.setText("Nacimiento:");
        jlDateBirth.setPreferredSize(new java.awt.Dimension(95, 23));
        jPanel17.add(jlDateBirth);

        moTextDateBirth.setText("sBeanFieldText1");
        moTextDateBirth.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel17.add(moTextDateBirth);

        jlDepartament.setText("Departamento:");
        jlDepartament.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel17.add(jlDepartament);

        moTextDepartament.setText("sBeanFieldText1");
        moTextDepartament.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel17.add(moTextDepartament);

        jlSalaryType.setText("Tipo salario:");
        jlSalaryType.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel17.add(jlSalaryType);

        moTextSalaryType.setText("sBeanFieldText1");
        jPanel17.add(moTextSalaryType);

        jlFiscalId.setText("RFC:");
        jlFiscalId.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel17.add(jlFiscalId);

        moTextFiscalId.setText("XAXX010101000");
        moTextFiscalId.setPreferredSize(new java.awt.Dimension(105, 23));
        jPanel17.add(moTextFiscalId);

        jPanel15.add(jPanel17);

        jPanel29.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSalary.setText("Salario:");
        jlSalary.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel29.add(jlSalary);

        moDecSalary.setFocusable(false);
        moDecSalary.setPreferredSize(new java.awt.Dimension(85, 23));
        jPanel29.add(moDecSalary);

        jlDateBenefits.setText("Inicio beneficios:");
        jlDateBenefits.setPreferredSize(new java.awt.Dimension(95, 23));
        jPanel29.add(jlDateBenefits);

        moTextDateBenefits.setText("sBeanFieldText1");
        moTextDateBenefits.setToolTipText("");
        moTextDateBenefits.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel29.add(moTextDateBenefits);

        jlPosition.setText("Puesto:");
        jlPosition.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel29.add(jlPosition);

        moTextPosition.setText("sBeanFieldText1");
        moTextPosition.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel29.add(moTextPosition);

        jlEmployeeType.setText("Tipo empleado:");
        jlEmployeeType.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel29.add(jlEmployeeType);

        moTextEmployeeType.setText("sBeanFieldText1");
        jPanel29.add(moTextEmployeeType);

        jlAlternativeId.setText("CURP:");
        jlAlternativeId.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel29.add(jlAlternativeId);

        moTextAlternativeId.setText("XAXX010101XXXXXX00");
        moTextAlternativeId.setPreferredSize(new java.awt.Dimension(140, 23));
        jPanel29.add(moTextAlternativeId);

        jPanel15.add(jPanel29);

        jPanel18.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 5, 0));

        jlWage.setText("Sueldo:");
        jlWage.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel18.add(jlWage);

        moDecWage.setText("0");
        moDecWage.setFocusable(false);
        moDecWage.setPreferredSize(new java.awt.Dimension(85, 23));
        jPanel18.add(moDecWage);

        jlDateLastHire.setText("Última alta:");
        jlDateLastHire.setPreferredSize(new java.awt.Dimension(95, 23));
        jPanel18.add(jlDateLastHire);

        moTextDateLastHire.setText("sBeanFieldText1");
        moTextDateLastHire.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel18.add(moTextDateLastHire);

        jlShift.setText("Turno:");
        jlShift.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel18.add(jlShift);

        moTextShift.setText("sBeanFieldText1");
        moTextShift.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel18.add(moTextShift);

        jlWorkerType.setText("Tipo obrero:");
        jlWorkerType.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel18.add(jlWorkerType);

        moTextWorkerType.setText("sBeanFieldText1");
        jPanel18.add(moTextWorkerType);

        jlSocialSecurityNumber.setText("NSS:");
        jlSocialSecurityNumber.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel18.add(jlSocialSecurityNumber);

        moTextSocialSecurityNumber.setText("00000000000");
        moTextSocialSecurityNumber.setPreferredSize(new java.awt.Dimension(85, 23));
        jPanel18.add(moTextSocialSecurityNumber);

        jPanel15.add(jPanel18);

        jPanel19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 5, 0));

        jlSalarySscBase.setText("SBC:");
        jlSalarySscBase.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel19.add(jlSalarySscBase);

        moDecSalarySscBase.setFocusable(false);
        moDecSalarySscBase.setPreferredSize(new java.awt.Dimension(85, 23));
        jPanel19.add(moDecSalarySscBase);

        jlDateLastDismiss_n.setText("Última baja:");
        jlDateLastDismiss_n.setPreferredSize(new java.awt.Dimension(95, 23));
        jPanel19.add(jlDateLastDismiss_n);

        moTextDateLastDismiss_n.setText("sBeanFieldText1");
        moTextDateLastDismiss_n.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel19.add(moTextDateLastDismiss_n);

        jlWorkingHoursDay.setText("Horas jornada:");
        jlWorkingHoursDay.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel19.add(jlWorkingHoursDay);

        moIntWorkingHoursDay.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel19.add(moIntWorkingHoursDay);

        jLabel1.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel19.add(jLabel1);

        jlRecruitmentSchemeType.setText("Régimen:");
        jlRecruitmentSchemeType.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel19.add(jlRecruitmentSchemeType);

        moTextRecruitmentSchemeType.setText("sBeanFieldText1");
        moTextRecruitmentSchemeType.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel19.add(moTextRecruitmentSchemeType);

        jPanel15.add(jPanel19);

        jPanel12.add(jPanel15, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel12, java.awt.BorderLayout.NORTH);

        jPanel14.setLayout(new java.awt.BorderLayout());

        jPanel4.setPreferredSize(new java.awt.Dimension(100, 300));
        jPanel4.setLayout(new java.awt.BorderLayout());

        jpEarnings.setBorder(javax.swing.BorderFactory.createTitledBorder("Percepciones:"));
        jpEarnings.setLayout(new java.awt.BorderLayout());

        jPanel6.setLayout(new java.awt.BorderLayout());

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 5, 0));

        moTextEarningCodeFind.setText("sBeanFieldText1");
        moTextEarningCodeFind.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                moTextEarningCodeFindKeyPressed(evt);
            }
        });
        jPanel8.add(moTextEarningCodeFind);

        jbEarningCodeFind.setText("...");
        jbEarningCodeFind.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel8.add(jbEarningCodeFind);

        moTextEarningName.setEditable(false);
        moTextEarningName.setText("sBeanFieldText1");
        moTextEarningName.setToolTipText("Nombre");
        moTextEarningName.setPreferredSize(new java.awt.Dimension(247, 23));
        jPanel8.add(moTextEarningName);

        jPanel6.add(jPanel8, java.awt.BorderLayout.NORTH);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 5, 0));

        jlEarningLoan_n.setText("Crédito/Préstamo:*");
        jlEarningLoan_n.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel2.add(jlEarningLoan_n);

        jlEarningValue.setText("Valor:");
        jlEarningValue.setToolTipText("");
        jlEarningValue.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel2.add(jlEarningValue);

        jPanel6.add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel25.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 5, 0));

        moKeyEarningLoan_n.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel25.add(moKeyEarningLoan_n);

        moComEarningValue.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel25.add(moComEarningValue);

        jbEarningAdd.setText("Agregar");
        jPanel25.add(jbEarningAdd);

        jPanel6.add(jPanel25, java.awt.BorderLayout.SOUTH);

        jpEarnings.add(jPanel6, java.awt.BorderLayout.NORTH);

        jPanel4.add(jpEarnings, java.awt.BorderLayout.WEST);

        jpDeductions.setBorder(javax.swing.BorderFactory.createTitledBorder("Deducciones:"));
        jpDeductions.setLayout(new java.awt.BorderLayout());

        jPanel7.setLayout(new java.awt.BorderLayout());

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 5, 0));

        moTextDeductionCodeFind.setText("sBeanFieldText1");
        moTextDeductionCodeFind.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                moTextDeductionCodeFindKeyPressed(evt);
            }
        });
        jPanel9.add(moTextDeductionCodeFind);

        jbDeductionCodeFind.setText("...");
        jbDeductionCodeFind.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel9.add(jbDeductionCodeFind);

        moTextDeductionName.setEditable(false);
        moTextDeductionName.setText("sBeanFieldText1");
        moTextDeductionName.setToolTipText("Nombre");
        moTextDeductionName.setPreferredSize(new java.awt.Dimension(247, 23));
        jPanel9.add(moTextDeductionName);

        jPanel7.add(jPanel9, java.awt.BorderLayout.NORTH);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 5, 0));

        jlDeductionLoan_n.setText("Crédito/Préstamo:*");
        jlDeductionLoan_n.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel3.add(jlDeductionLoan_n);

        jlDeductionValue.setText("Valor:");
        jlDeductionValue.setToolTipText("");
        jlDeductionValue.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel3.add(jlDeductionValue);

        jPanel7.add(jPanel3, java.awt.BorderLayout.CENTER);

        jPanel26.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 5, 0));

        moKeyDeductionLoan_n.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel26.add(moKeyDeductionLoan_n);

        moComDeductionValue.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel26.add(moComDeductionValue);

        jbDeductionAdd.setText("Agregar");
        jPanel26.add(jbDeductionAdd);

        jPanel7.add(jPanel26, java.awt.BorderLayout.SOUTH);

        jpDeductions.add(jPanel7, java.awt.BorderLayout.NORTH);

        jPanel4.add(jpDeductions, java.awt.BorderLayout.CENTER);

        jPanel14.add(jPanel4, java.awt.BorderLayout.NORTH);

        jPanel20.setLayout(new java.awt.BorderLayout());

        jPanel10.setLayout(new java.awt.BorderLayout());

        jPanel21.setBorder(javax.swing.BorderFactory.createTitledBorder("Consumo incidencias:"));
        jPanel21.setLayout(new java.awt.BorderLayout());

        jpAbsenceConsumption.setLayout(new java.awt.BorderLayout());
        jPanel21.add(jpAbsenceConsumption, java.awt.BorderLayout.CENTER);

        jPanel10.add(jPanel21, java.awt.BorderLayout.CENTER);

        jPanel20.add(jPanel10, java.awt.BorderLayout.CENTER);

        jPanel13.setLayout(new java.awt.BorderLayout());

        jPanel22.setBorder(javax.swing.BorderFactory.createTitledBorder("Totales:"));
        jPanel22.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.TRAILING, 5, 0));

        jlEarningsTotal.setText("Total percepciones:");
        jlEarningsTotal.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlEarningsTotal);
        jPanel5.add(moCurEarningsTotal);

        jPanel22.add(jPanel5);

        jPanel23.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.TRAILING, 5, 0));

        jlDeductionsTotal.setText("Total deducciones:");
        jlDeductionsTotal.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel23.add(jlDeductionsTotal);
        jPanel23.add(moCurDeductionsTotal);

        jPanel22.add(jPanel23);

        jPanel24.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.TRAILING, 5, 0));

        jlNetTotal.setText("Total neto:");
        jlNetTotal.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel24.add(jlNetTotal);
        jPanel24.add(moCurNetTotal);

        jPanel22.add(jPanel24);

        jPanel13.add(jPanel22, java.awt.BorderLayout.CENTER);

        jPanel20.add(jPanel13, java.awt.BorderLayout.EAST);

        jPanel14.add(jPanel20, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel14, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void moTextEarningCodeFindKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_moTextEarningCodeFindKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_F5) {
            jbEarningCodeFind.doClick();
        }
    }//GEN-LAST:event_moTextEarningCodeFindKeyPressed

    private void moTextDeductionCodeFindKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_moTextDeductionCodeFindKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_F5) {
            jbEarningCodeFind.doClick();
        }
    }//GEN-LAST:event_moTextDeductionCodeFindKeyPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbDeductionAdd;
    private javax.swing.JButton jbDeductionCodeFind;
    private javax.swing.JButton jbEarningAdd;
    private javax.swing.JButton jbEarningCodeFind;
    private javax.swing.JLabel jlAlternativeId;
    private javax.swing.JLabel jlDateBenefits;
    private javax.swing.JLabel jlDateBirth;
    private javax.swing.JLabel jlDateLastDismiss_n;
    private javax.swing.JLabel jlDateLastHire;
    private javax.swing.JLabel jlDeductionLoan_n;
    private javax.swing.JLabel jlDeductionValue;
    private javax.swing.JLabel jlDeductionsTotal;
    private javax.swing.JLabel jlDepartament;
    private javax.swing.JLabel jlEarningLoan_n;
    private javax.swing.JLabel jlEarningValue;
    private javax.swing.JLabel jlEarningsTotal;
    private javax.swing.JLabel jlEmployeeType;
    private javax.swing.JLabel jlFiscalId;
    private javax.swing.JLabel jlName;
    private javax.swing.JLabel jlNetTotal;
    private javax.swing.JLabel jlPaymentType;
    private javax.swing.JLabel jlPosition;
    private javax.swing.JLabel jlRecruitmentSchemeType;
    private javax.swing.JLabel jlSalary;
    private javax.swing.JLabel jlSalarySscBase;
    private javax.swing.JLabel jlSalaryType;
    private javax.swing.JLabel jlShift;
    private javax.swing.JLabel jlSocialSecurityNumber;
    private javax.swing.JLabel jlWage;
    private javax.swing.JLabel jlWorkerType;
    private javax.swing.JLabel jlWorkingHoursDay;
    private javax.swing.JPanel jpAbsenceConsumption;
    private javax.swing.JPanel jpDeductions;
    private javax.swing.JPanel jpEarnings;
    private sa.lib.gui.bean.SBeanCompoundField moComDeductionValue;
    private sa.lib.gui.bean.SBeanCompoundField moComEarningValue;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurDeductionsTotal;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurEarningsTotal;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurNetTotal;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecSalary;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecSalarySscBase;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecWage;
    private sa.lib.gui.bean.SBeanFieldInteger moIntWorkingHoursDay;
    private sa.lib.gui.bean.SBeanFieldKey moKeyDeductionLoan_n;
    private sa.lib.gui.bean.SBeanFieldKey moKeyEarningLoan_n;
    private sa.lib.gui.bean.SBeanFieldText moTextAlternativeId;
    private sa.lib.gui.bean.SBeanFieldText moTextDateBenefits;
    private sa.lib.gui.bean.SBeanFieldText moTextDateBirth;
    private sa.lib.gui.bean.SBeanFieldText moTextDateLastDismiss_n;
    private sa.lib.gui.bean.SBeanFieldText moTextDateLastHire;
    private sa.lib.gui.bean.SBeanFieldText moTextDeductionCodeFind;
    private sa.lib.gui.bean.SBeanFieldText moTextDeductionName;
    private sa.lib.gui.bean.SBeanFieldText moTextDepartament;
    private sa.lib.gui.bean.SBeanFieldText moTextEarningCodeFind;
    private sa.lib.gui.bean.SBeanFieldText moTextEarningName;
    private sa.lib.gui.bean.SBeanFieldText moTextEmployeeType;
    private sa.lib.gui.bean.SBeanFieldText moTextFiscalId;
    private sa.lib.gui.bean.SBeanFieldText moTextName;
    private sa.lib.gui.bean.SBeanFieldText moTextNumber;
    private sa.lib.gui.bean.SBeanFieldText moTextPaymentType;
    private sa.lib.gui.bean.SBeanFieldText moTextPosition;
    private sa.lib.gui.bean.SBeanFieldText moTextRecruitmentSchemeType;
    private sa.lib.gui.bean.SBeanFieldText moTextSalaryType;
    private sa.lib.gui.bean.SBeanFieldText moTextShift;
    private sa.lib.gui.bean.SBeanFieldText moTextSocialSecurityNumber;
    private sa.lib.gui.bean.SBeanFieldText moTextWorkerType;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 1024, 640);

        jbSave.setText("Aceptar");

        moTextName.setTextSettings(SGuiUtils.getLabelName(jlName), 150);
        moTextNumber.setTextSettings(SGuiUtils.getLabelName(jlName), 25);
        moTextPaymentType.setTextSettings(SGuiUtils.getLabelName(jlName), 100);
        moDecSalary.setDecimalSettings(SGuiUtils.getLabelName(jlSalary), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecWage.setDecimalSettings(SGuiUtils.getLabelName(jlWage), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecSalarySscBase.setDecimalSettings(SGuiUtils.getLabelName(jlSalarySscBase), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moTextDateBirth.setTextSettings(SGuiUtils.getLabelName(jlName), 50);
        moTextDateBenefits.setTextSettings(SGuiUtils.getLabelName(jlName), 50);
        moTextDateLastHire.setTextSettings(SGuiUtils.getLabelName(jlName), 50);
        moTextDateLastDismiss_n.setTextSettings(SGuiUtils.getLabelName(jlName), 50);
        moTextDepartament.setTextSettings(SGuiUtils.getLabelName(jlName), 100);
        moTextPosition.setTextSettings(SGuiUtils.getLabelName(jlName), 100);
        moTextShift.setTextSettings(SGuiUtils.getLabelName(jlName), 100);
        moIntWorkingHoursDay.setIntegerSettings(SGuiUtils.getLabelName(jlName), SGuiConsts.GUI_TYPE_INT, false);
        moTextSalaryType.setTextSettings(SGuiUtils.getLabelName(jlName), 100);
        moTextEmployeeType.setTextSettings(SGuiUtils.getLabelName(jlName), 100);
        moTextWorkerType.setTextSettings(SGuiUtils.getLabelName(jlName), 100);
        moTextRecruitmentSchemeType.setTextSettings(SGuiUtils.getLabelName(jlName), 100);
        moTextFiscalId.setTextSettings(SGuiUtils.getLabelName(jlName), 25);
        moTextAlternativeId.setTextSettings(SGuiUtils.getLabelName(jlName), 25);
        moTextSocialSecurityNumber.setTextSettings(SGuiUtils.getLabelName(jlName), 25);

        moTextEarningCodeFind.setTextSettings(SGuiUtils.getLabelName(""), 10, 0);
        moTextEarningName.setTextSettings(SGuiUtils.getLabelName(""), 100, 0);
        moKeyEarningLoan_n.setKeySettings(miClient, SGuiUtils.getLabelName(jlEarningLoan_n), false);
        moComEarningValue.setCompoundFieldSettings(miClient);
        moComEarningValue.getField().setDecimalSettings(SGuiUtils.getLabelName(jlEarningValue), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moTextDeductionCodeFind.setTextSettings(SGuiUtils.getLabelName(""), 10, 0);
        moTextDeductionName.setTextSettings(SGuiUtils.getLabelName(""), 100, 0);
        moKeyDeductionLoan_n.setKeySettings(miClient, SGuiUtils.getLabelName(jlDeductionLoan_n), false);
        moComDeductionValue.setCompoundFieldSettings(miClient);
        moComDeductionValue.getField().setDecimalSettings(SGuiUtils.getLabelName(jlDeductionValue), SGuiConsts.GUI_TYPE_DEC_QTY, false);

        moCurEarningsTotal.setCompoundFieldSettings(miClient);
        moCurEarningsTotal.getField().setDecimalSettings(SGuiUtils.getLabelName(jlEarningsTotal), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moCurDeductionsTotal.setCompoundFieldSettings(miClient);
        moCurDeductionsTotal.getField().setDecimalSettings(SGuiUtils.getLabelName(jlDeductionsTotal), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moCurNetTotal.setCompoundFieldSettings(miClient);
        moCurNetTotal.getField().setDecimalSettings(SGuiUtils.getLabelName(jlNetTotal), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        
        moFields.setFormButton(jbSave);

        moTextName.setEditable(false);
        moTextNumber.setEditable(false);
        moTextPaymentType.setEditable(false);
        moDecSalary.setEditable(false);
        moDecWage.setEditable(false);
        moDecSalarySscBase.setEditable(false);
        moTextDateBirth.setEditable(false);
        moTextDateBenefits.setEditable(false);
        moTextDateLastHire.setEditable(false);
        moTextDateLastDismiss_n.setEditable(false);
        moTextDepartament.setEditable(false);
        moTextPosition.setEditable(false);
        moTextShift.setEditable(false);
        moIntWorkingHoursDay.setEditable(false);
        moTextSalaryType.setEditable(false);
        moTextEmployeeType.setEditable(false);
        moTextWorkerType.setEditable(false);
        moTextRecruitmentSchemeType.setEditable(false);
        moTextFiscalId.setEditable(false);
        moTextAlternativeId.setEditable(false);
        moTextSocialSecurityNumber.setEditable(false);

        moCurEarningsTotal.setEditable(false);
        moCurDeductionsTotal.setEditable(false);
        moCurNetTotal.setEditable(false);

        resetEarningFields();
        resetDeductionFields();
        mbEditable = true;
        setEnableFields(mbEditable);

        moGridEarningRow = new SGridPaneForm(miClient, SModConsts.HRSX_PAY_REC_EAR, SLibConsts.UNDEFINED, "Percepciones") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false, true, true);
            }

            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                SGridColumnForm columnForm = null;
                ArrayList<SGridColumnForm> gridColumnsForm = new ArrayList<SGridColumnForm>();

                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_INT_1B, "#", 20));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Percepción", 135));
                columnForm = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "Valor", 45, moGridEarningRow.getTable().getDefaultEditor(Double.class));
                columnForm.setEditable(mbEditable);
                gridColumnsForm.add(columnForm);
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_UNT, "Unidad", 50));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT_UNIT, "Monto unitario $", 80));
                columnForm = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "Monto $", 70, moGridEarningRow.getTable().getDefaultEditor(Double.class));
                columnForm.setEditable(mbEditable);
                gridColumnsForm.add(columnForm);
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_QTY, "Valor ajustado", 60));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_UNT, "Unidad"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_M, "Crédito/Préstamo"));

                moGridEarningRow.getTable().getDefaultEditor(Double.class).addCellEditorListener(SDialogPayrollEmployee.this);

                return gridColumnsForm;
            }
            
            @Override
            public void actionRowEdit() {
                SHrsPayrollReceiptEarning hrsPayrollReceiptEarning = null;
                
                try {
                    hrsPayrollReceiptEarning = (SHrsPayrollReceiptEarning) moGridEarningRow.getSelectedGridRow();

                    modDialogPayrollEarning = new SDialogPayrollEarning(miClient, hrsPayrollReceiptEarning.clone(), "Percepción");
                    modDialogPayrollEarning.setVisible(true);
                    
                    if (modDialogPayrollEarning.getFormResult() == SGuiConsts.FORM_RESULT_OK) {
                        populateEarnings();
                        populateDeductions();
                    }
                }
                catch (Exception e) {
                    SLibUtils.printException(this, e);
                }
            }
            
            @Override
            public void actionRowDelete() {
                int moveId = 0;
                boolean delete = false;
                SHrsPayrollReceiptEarning hrsReceiptEarningRow = null;

                if (jtTable.getSelectedRowCount() != 1) {
                    miClient.showMsgBoxInformation(SGridConsts.MSG_SELECT_ROW);
                }
                else {
                    hrsReceiptEarningRow = (SHrsPayrollReceiptEarning) moGridEarningRow.getSelectedGridRow();
                    
                    if (hrsReceiptEarningRow.getReceiptEarning().isSystem()) {
                        miClient.showMsgBoxInformation(SDbConsts.MSG_REG_ + hrsReceiptEarningRow.getEarning().getName() + SDbConsts.MSG_REG_IS_SYSTEM + "\n" +
                        "Se debe eliminar mediante la eliminación del consumo de incidencia respectivo.");
                    }
                    else {
                        for (SHrsPayrollReceiptEarning earning : moHrsPayrollReceipt.getHrsReceiptEarnings()) {
                            if (SLibUtils.compareKeys(earning.getRowPrimaryKey(), hrsReceiptEarningRow.getRowPrimaryKey())) {
                                delete = true;
                                moveId = earning.getPkMoveId();
                                break;
                            }
                        }

                        if (delete) {
                            moHrsPayrollReceipt.removeEarning(moveId);
                            populateEarnings();
                            populateDeductions();
                        }
                    }
                }
            }
        };

        moGridEarningRow.setForm(null);
        moGridEarningRow.setPaneFormOwner(this);
        //mvFormGrids.add(moGridAutomaticRow);

        jpEarnings.add(moGridEarningRow, BorderLayout.CENTER);

        moGridDeductionRow = new SGridPaneForm(miClient, SModConsts.HRSX_PAY_REC_DED, SLibConsts.UNDEFINED, "Deducciones") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false, false, true);
            }

            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                SGridColumnForm columnForm = null;
                ArrayList<SGridColumnForm> gridColumnsForm = new ArrayList<SGridColumnForm>();

                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_INT_1B, "#"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Deducción", 135));
                columnForm = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "Valor", moGridDeductionRow.getTable().getDefaultEditor(Double.class));
                columnForm.setEditable(mbEditable);
                gridColumnsForm.add(columnForm);
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_UNT, "Unidad", 50));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "Monto $"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_M, "Crédito/Préstamo"));

                moGridDeductionRow.getTable().getDefaultEditor(Double.class).addCellEditorListener(SDialogPayrollEmployee.this);

                return gridColumnsForm;
            }
            
            @Override
            public void actionRowDelete() {
                int moveId = 0;
                boolean delete = false;
                SHrsPayrollReceiptDeduction hrsReceiptDeductionRow = null;

                if (jtTable.getSelectedRowCount() != 1) {
                    miClient.showMsgBoxInformation(SGridConsts.MSG_SELECT_ROW);
                }
                else {
                    hrsReceiptDeductionRow = (SHrsPayrollReceiptDeduction) moGridDeductionRow.getSelectedGridRow();
                    
                    for (SHrsPayrollReceiptDeduction deduction : moHrsPayrollReceipt.getHrsReceiptDeductions()) {
                        if (SLibUtils.compareKeys(deduction.getRowPrimaryKey(), hrsReceiptDeductionRow.getRowPrimaryKey())) {
                            delete = true;
                            moveId = deduction.getPkMoveId();
                            break;
                        }
                    }
                    
                    if (delete) {
                        moHrsPayrollReceipt.removeDeduction(moveId);
                        populateEarnings();
                        populateDeductions();
                    }
                }
            }
        };

        moGridDeductionRow.setForm(null);
        moGridDeductionRow.setPaneFormOwner(this);
        //mvFormGrids.add(moGridAutomaticRow);

        jpDeductions.add(moGridDeductionRow, BorderLayout.CENTER);
        
        moTextEarningCodeFind.requestFocus();
        
        moGridAbsenceConsumptionRow = new SGridPaneForm(miClient, SModConsts.HRS_ABS_CNS, SLibConsts.UNDEFINED, "Consumo incidencias") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(true, false, true);
            }

            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> gridColumnsForm = new ArrayList<SGridColumnForm>();

                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT, "Clase incidencia"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT, "Tipo incidencia"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CAT, "Folio"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DATE, "Inicial incidencia"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DATE, "Final incidencia"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_QTY, "Días efectivos incidencia"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DATE, "Inicial consumo"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DATE, "Final consumo"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_QTY, "Días efectivos consumo"));

                return gridColumnsForm;
            }
            
            @Override
            public void actionRowNew() {
                SDialogPayrollEmployeeAbsence payrollEmployeeAbsence;
                
                payrollEmployeeAbsence = new SDialogPayrollEmployeeAbsence(miClient, "Consumo de incidencias");

                payrollEmployeeAbsence.setValue(SModConsts.HRS_PAY_RCP, moHrsPayrollReceipt);
                payrollEmployeeAbsence.setFormVisible(true);

                if (payrollEmployeeAbsence.getFormResult() == SGuiConsts.FORM_RESULT_OK) {
                    populateAbsenceConsumption();
                    populateEarnings();
                    populateDeductions();
                }
            }
            
            @Override
            public void actionRowDelete() {
                SDbAbsenceConsumption absenceConsumption = null;
                
                try {
                    if (jtTable.getSelectedRowCount() == 0) {
                        miClient.showMsgBoxInformation(SGridConsts.MSG_SELECT_ROWS);
                    }
                    else if (miClient.showMsgBoxConfirm(SGridConsts.MSG_CONFIRM_REG_DEL) == JOptionPane.YES_OPTION) {
                        SGridRow gridRow = null;
                        SGridRow[] gridRows = getSelectedGridRows();
                        int[] rows = jtTable.getSelectedRows();

                        for (int i = 0; i < gridRows.length; i++) {
                            gridRow = gridRows[i];
                            
                            absenceConsumption = (SDbAbsenceConsumption) gridRow;
                            
                            moHrsPayrollReceipt.getHrsEmployee().getHrsPayrollReceipt().removeAbsenceConsumption(absenceConsumption);
                            moHrsPayrollReceipt.getHrsEmployee().getHrsPayrollReceipt().updateHrsPayrollReceiptEarningAbsence(absenceConsumption, false);

                            /*
                            for (SHrsPayrollReceiptEarning earning : moReceipt.getHrsEmployee().getHrsPayrollReceipt().getHrsEarnings()) {
                                if (earning.isAbsenceConsumption()) {
                                    aEarningDelete.add(earning);
                                }
                            }

                            for (SHrsPayrollReceiptEarning earning : aEarningDelete) {
                                moReceipt.getHrsEmployee().getHrsPayrollReceipt().removeEarning(earning.getPkMoveId());
                            }

                            for (SHrsPayrollReceiptEarning hrsPayrollReceiptEarningRow : moReceipt.getHrsPayroll().getHrsPayrollReceiptEarningAbsence(moReceipt.getHrsEmployee().getHrsPayrollReceipt().getAbsenceConsumptions(), moReceipt.getHrsEmployee().getHrsPayrollReceipt())) {
                                hrsPayrollReceiptEarningRow.setAbsenceConsumption(true);
                                moReceipt.getHrsEmployee().getHrsPayrollReceipt().addEarning(hrsPayrollReceiptEarningRow);
                            }
                            */
                            moModel.getGridRows().remove(moModel.getGridRows().indexOf(gridRow));
                            
                            populateAbsenceConsumption();
                            populateEarnings();
                            populateDeductions();
                        }
                    }
                }
                catch (Exception e) {
                    SLibUtils.showException(this, e);
                }
            }
        };

        moGridAbsenceConsumptionRow.setForm(null);
        moGridAbsenceConsumptionRow.setPaneFormOwner(null);
        //mvFormGrids.add(moGridAbsenceConsumptionRow);

        jpAbsenceConsumption.add(moGridAbsenceConsumptionRow, BorderLayout.CENTER);
        
        reloadCatalogues();
        addAllListeners();
    }
    
    private void enableFieldValueEarning() {
        if (moEarning != null) {
            moComEarningValue.getField().setEditable(!moEarning.isDaysWorkedBasedOn()); // not editable for earnings than dependent of worked days.
        }
    }
    
    private void validateCellEditor(int col) {
        SGridRow row = null;
        SHrsPayrollReceiptEarning hrsReceiptEarningRow = null;
        
        if (moGridEarningRow.getTable().getSelectedRowCount() != -1) {
            row = moGridEarningRow.getSelectedGridRow();
            hrsReceiptEarningRow = (SHrsPayrollReceiptEarning) row;
            
            if (col == COL_VAL) {
                if (!hrsReceiptEarningRow.getEarning().areUnitsModifiable()) {
                    miClient.showMsgBoxWarning("No se puede modificar el campo 'Valor' para la percepción '" + hrsReceiptEarningRow.getEarning().getName() + "', solo el campo 'Monto $'");
                }
            }
            else if (col == COL_AMT) {
                if (hrsReceiptEarningRow.getEarning().getFkBenefitTypeId() != SModSysConsts.HRSS_TP_BEN_NON && 
                           hrsReceiptEarningRow.getXtaAmount() > 0 && hrsReceiptEarningRow.getReceiptEarning().getAmount_r() > hrsReceiptEarningRow.getXtaAmount()) {
                    miClient.showMsgBoxWarning("El valor el campo 'Monto $' para la percepción '" + hrsReceiptEarningRow.getEarning().getName() + "', no puede ser menor a '" + hrsReceiptEarningRow.getReceiptEarning().getAmount_r() + "'.");
                }
            }
            
        }
    }

    private void processEditingAppPayment(boolean isEarning) {
        if (isEarning) {
            populateEarnings();
            populateDeductions();
        }
        else {
            computeTotal();
            moGridDeductionRow.renderGridRows();
            moGridDeductionRow.setSelectedGridRow(0);
        }
    }

    private SDbPayrollReceiptEarning createReceipEarning(SHrsPayrollReceipt payrollReceipt, SHrsPayrollReceiptEarning row) {
        double amount_unt = 0;
        double unit = 0;
        
        if (moHrsBenefit == null) {
            if (moEarning.getFkEarningComputationTypeId() == SModSysConsts.HRSS_TP_EAR_COMP_AMT) {
                unit = row.getXtaValueAlleged() == 0 ? 0d : 1d;
                amount_unt = row.getXtaValue();
            }
            else {
                unit = row.getXtaValueAlleged();
            }
        }
        else {
            unit = moHrsBenefit.getValuePayedReceipt();
        }

        return payrollReceipt.getHrsPayroll().createHrsPayrollReceiptEarning(
                payrollReceipt, moHrsBenefit, moEarning, unit, amount_unt, moHrsBenefit != null, 
                SLibConsts.UNDEFINED, SLibConsts.UNDEFINED, row.getPkMoveId());
    }

    private SDbPayrollReceiptDeduction createReceipDeduction(SHrsPayrollReceipt payrollReceipt, SHrsPayrollReceiptDeduction row) {
        SDbPayrollReceiptDeduction receiptDeduction = null;

        receiptDeduction = new SDbPayrollReceiptDeduction();

        receiptDeduction.setPkPayrollId(payrollReceipt.getReceipt().getPkPayrollId());
        receiptDeduction.setPkEmployeeId(payrollReceipt.getHrsEmployee().getEmployee().getPkEmployeeId());
        receiptDeduction.setPkMoveId(row.getPkMoveId());
        receiptDeduction.setAutomatic(false);
        receiptDeduction.setAmountUnitary(row.getXtaValue());
        receiptDeduction.setFkDeductionTypeId(row.getDeduction().getFkDeductionTypeId());
        receiptDeduction.setFkDeductionId(row.getDeduction().getPkDeductionId());
        receiptDeduction.setFkBenefitTypeId(row.getDeduction().getFkBenefitTypeId());

        return receiptDeduction;
    }
    
    private void createBenefit(final SDbEarning earning) throws Exception {
        int benefitType = 0;
        Date dateCutOff = null;
        SDbBenefitTable benefitTable = null;
        SDbBenefitTable benefitTableAux = null;
        SHrsBenefitParams benefitParams = null;
        SDialogHrsBenefit dialogHrsBenefit = null;
        
        benefitTable = SHrsUtils.getBenefitTableByEarning(miClient.getSession(), 
                earning.getPkEarningId(), 
                moHrsPayrollReceipt.getHrsPayroll().getPayroll().getFkPaymentTypeId(), 
                moHrsPayrollReceipt.getHrsPayroll().getPayroll().getDateEnd());
        
        benefitType = benefitTable.getFkBenefitTypeId();
        
        if (benefitType == SLibConsts.UNDEFINED) {
            throw new Exception("No se encontró ninguna prestación para el tipo de prestación definido en la percepción '" + earning.getName() + "'.");
        }
        else if (earning.getFkBenefitTypeId() != benefitType) {
            throw new Exception("El tipo de prestación de la percepción '" + earning.getName() + "', es diferente al tipo de prestación de la prestación '" + benefitTable.getName() + "'.");
        }
        
        // check if benefit is vacation bonus:
        if (benefitType == SModSysConsts.HRSS_TP_BEN_VAC_BON) {
            int tableAuxId = SHrsUtils.getRecentBenefitTable(miClient.getSession(), 
                    SModSysConsts.HRSS_TP_BEN_VAC, 
                    moHrsPayrollReceipt.getHrsPayroll().getPayroll().getFkPaymentTypeId(), 
                    moHrsPayrollReceipt.getHrsPayroll().getPayroll().getDateEnd());
            benefitTableAux = moHrsPayrollReceipt.getHrsPayroll().getBenefitTable(tableAuxId);
            
            if (benefitTableAux == null) {
                throw new Exception("No se encontró ninguna tabla para la prestación 'Vacaciones' que es requerida para el pago de la prestación 'Prima Vacacional'.");
            }
        }
        
        if (!moHrsPayrollReceipt.getHrsEmployee().getEmployee().isActive()) {
            dateCutOff = moHrsPayrollReceipt.getHrsEmployee().getEmployee().getDateLastDismiss_n();
            
            if (benefitType != SModSysConsts.HRSS_TP_BEN_ANN_BON && !SLibTimeUtils.isBelongingToPeriod(dateCutOff, moHrsPayrollReceipt.getHrsPayroll().getPayroll().getDateStart(), moHrsPayrollReceipt.getHrsPayroll().getPayroll().getDateEnd())) {
                dateCutOff = moHrsPayrollReceipt.getHrsPayroll().getPayroll().getDateEnd();
            }
        }
        else if (benefitType == SModSysConsts.HRSS_TP_BEN_ANN_BON) {
            dateCutOff = SLibTimeUtils.getEndOfYear(moHrsPayrollReceipt.getHrsPayroll().getPayroll().getDateEnd());
        }
        else {
            dateCutOff = moHrsPayrollReceipt.getHrsPayroll().getPayroll().getDateEnd();
        }
        
        // Create benefit params:
        benefitParams = new SHrsBenefitParams(earning, benefitTable, benefitTableAux, moHrsPayrollReceipt, dateCutOff);
        
        dialogHrsBenefit = new SDialogHrsBenefit(miClient, benefitType, "Agregar prestación");
        dialogHrsBenefit.setValue(SGuiConsts.PARAM_ROWS, benefitParams);
        dialogHrsBenefit.setVisible(true);
        
        if (dialogHrsBenefit.getFormResult() == SGuiConsts.FORM_RESULT_OK) {
            moHrsBenefit = (SHrsBenefit) dialogHrsBenefit.getValue(SGuiConsts.PARAM_ROWS);
            moComEarningValue.getField().setValue(moHrsBenefit.getValuePayedReceipt());
            actionEarningAdd();
        }
    }

    private void resetEarningFields() {
        moTextEarningCodeFind.setText("");
        moTextEarningName.setText("");
        moComEarningValue.getField().setValue(0d);
        moComEarningValue.setCompoundText("");
        moKeyEarningLoan_n.setSelectedIndex(0);
        moKeyEarningLoan_n.setEnabled(false);

        moTextEarningCodeFind.requestFocus();
    }

    private void resetDeductionFields() {
        moTextDeductionCodeFind.setText("");
        moTextDeductionName.setText("");
        moComDeductionValue.getField().setValue(0d);
        moComDeductionValue.setCompoundText("");
        moKeyDeductionLoan_n.setSelectedIndex(0);
        moKeyDeductionLoan_n.setEnabled(false);

        moTextDeductionCodeFind.requestFocus();
    }

    private void computeTotal() {
        double earningTotal = 0;
        double deductionTotal = 0;

        for (SHrsPayrollReceiptEarning hrsEarning : moHrsPayrollReceipt.getHrsReceiptEarnings()) {
            earningTotal += hrsEarning.getReceiptEarning().getAmount_r();
        }
        for (SHrsPayrollReceiptDeduction hrsDeduction : moHrsPayrollReceipt.getHrsReceiptDeductions()) {
            deductionTotal += hrsDeduction.getReceiptDeduction().getAmount_r();
        }

        moCurEarningsTotal.getField().setValue(earningTotal);
        moCurDeductionsTotal.getField().setValue(deductionTotal);
        moCurNetTotal.getField().setValue(earningTotal - deductionTotal);
    }

    private void itemStateEarningLoan_n() {
        if (moKeyEarningLoan_n.getSelectedIndex() > 0) {
            try {
                moEarningLoan = new SDbLoan();
                moEarningLoan.read(miClient.getSession(), new int[] { moKeyEarningLoan_n.getValue()[0] , moKeyEarningLoan_n.getValue()[1] });
            }
            catch (Exception e) {
                SLibUtils.printException(this, e);
            }
        }
        else {
            moComEarningValue.getField().setValue(0d);
        }
    }

    private void itemStateDeductionLoan_n() {
        if (moKeyDeductionLoan_n.getSelectedIndex() > 0) {
            try {
                moDeductionLoan = new SDbLoan();
                mdAmountLoan = 0;

                moDeductionLoan.read(miClient.getSession(), new int[] { moKeyDeductionLoan_n.getValue()[0] , moKeyDeductionLoan_n.getValue()[1] });
                mdAmountLoan = SHrsUtils.computeAmountLoan(moHrsPayrollReceipt, moDeductionLoan);
                moComDeductionValue.getField().setValue(mdAmountLoan);
            }
            catch (Exception e) {
                SLibUtils.printException(this, e);
            }
        }
        else {
            moComDeductionValue.getField().setValue(0d);
        }
    }
    
    private void setEnableFields(boolean enable) {
        moTextEarningCodeFind.setEnabled(enable);
        jbEarningCodeFind.setEnabled(enable);
        moComEarningValue.setEditable(enable);
        jbEarningAdd.setEnabled(enable);
        moTextDeductionCodeFind.setEnabled(enable);
        jbDeductionCodeFind.setEnabled(enable);
        moComDeductionValue.setEditable(enable);
        jbDeductionAdd.setEnabled(enable);
        jbSave.setEnabled(enable);
    }

    private void renderEmployee() {
        moTextName.setValue(moHrsPayrollReceipt.getHrsEmployee().getEmployee().getAuxEmployee());
        moTextNumber.setValue(moHrsPayrollReceipt.getHrsEmployee().getEmployee().getNumber());
        moTextFiscalId.setValue(moHrsPayrollReceipt.getHrsEmployee().getEmployee().getAuxFiscalId());
        moTextAlternativeId.setValue(moHrsPayrollReceipt.getHrsEmployee().getEmployee().getAuxAlternativeId());
        moTextSocialSecurityNumber.setValue(moHrsPayrollReceipt.getHrsEmployee().getEmployee().getSocialSecurityNumber());
        moTextPaymentType.setValue(miClient.getSession().readField(SModConsts.HRSS_TP_PAY, new int[] { moHrsPayrollReceipt.getHrsEmployee().getEmployee().getFkPaymentTypeId() }, SDbRegistry.FIELD_NAME));
        moDecSalary.setValue(moHrsPayrollReceipt.getHrsEmployee().getEmployee().getSalary());
        moDecWage.setValue(moHrsPayrollReceipt.getHrsEmployee().getEmployee().getWage());
        moDecSalarySscBase.setValue(moHrsPayrollReceipt.getHrsEmployee().getEmployee().getSalarySscBase());
        moTextDateBirth.setValue(SLibUtils.DateFormatDate.format(moHrsPayrollReceipt.getHrsEmployee().getEmployee().getDateBirth()));
        moTextDateBenefits.setValue(SLibUtils.DateFormatDate.format(moHrsPayrollReceipt.getHrsEmployee().getEmployee().getDateBenefits()));
        moTextDateLastHire.setValue(SLibUtils.DateFormatDate.format(moHrsPayrollReceipt.getHrsEmployee().getEmployee().getDateLastHire()));
        if (moHrsPayrollReceipt.getHrsEmployee().getEmployee().getDateLastDismiss_n() != null) {
            moTextDateLastDismiss_n.setValue(SLibUtils.DateFormatDate.format(moHrsPayrollReceipt.getHrsEmployee().getEmployee().getDateLastDismiss_n()));
        }
        else {
            moTextDateLastDismiss_n.setValue("");
        }
        moTextSalaryType.setValue(miClient.getSession().readField(SModConsts.HRSS_TP_SAL, new int[] { moHrsPayrollReceipt.getHrsEmployee().getEmployee().getFkSalaryTypeId() }, SDbRegistry.FIELD_NAME));
        moTextEmployeeType.setValue(miClient.getSession().readField(SModConsts.HRSU_TP_EMP, new int[] { moHrsPayrollReceipt.getHrsEmployee().getEmployee().getFkEmployeeTypeId() }, SDbRegistry.FIELD_NAME));
        moTextWorkerType.setValue(miClient.getSession().readField(SModConsts.HRSU_TP_WRK, new int[] { moHrsPayrollReceipt.getHrsEmployee().getEmployee().getFkWorkerTypeId() }, SDbRegistry.FIELD_NAME));
        moTextRecruitmentSchemeType.setValue(miClient.getSession().readField(SModConsts.HRSS_TP_REC_SCHE, new int[] { moHrsPayrollReceipt.getHrsEmployee().getEmployee().getFkRecruitmentSchemeTypeId()}, SDbRegistry.FIELD_NAME));
        moTextDepartament.setValue(miClient.getSession().readField(SModConsts.HRSU_DEP, new int[] { moHrsPayrollReceipt.getHrsEmployee().getEmployee().getFkDepartmentId() }, SDbRegistry.FIELD_NAME));
        moTextPosition.setValue(miClient.getSession().readField(SModConsts.HRSU_POS, new int[] { moHrsPayrollReceipt.getHrsEmployee().getEmployee().getFkPositionId() }, SDbRegistry.FIELD_NAME));
        moTextShift.setValue(miClient.getSession().readField(SModConsts.HRSU_SHT, new int[] { moHrsPayrollReceipt.getHrsEmployee().getEmployee().getFkShiftId() }, SDbRegistry.FIELD_NAME));
        moIntWorkingHoursDay.setValue(moHrsPayrollReceipt.getHrsEmployee().getEmployee().getWorkingHoursDay());
    }

    private void resetEarningLoan() {
        if (moEarning != null) {
            if (moEarning.getFkLoanTypeId() != SModSysConsts.HRSS_TP_LOAN_NON) {
                miClient.getSession().populateCatalogue(moKeyEarningLoan_n, SModConsts.HRS_LOAN, SLibConsts.UNDEFINED, new SGuiParams(new int[] { moHrsPayrollReceipt.getHrsEmployee().getEmployee().getPkEmployeeId(), moEarning.getFkLoanTypeId()}));
                moKeyEarningLoan_n.setEnabled(true);
            }
            else {
                moComEarningValue.getField().setEnabled(true);
                moKeyEarningLoan_n.setSelectedIndex(0);
                moKeyEarningLoan_n.setEnabled(false);
            }
        }
        else {
            moComEarningValue.getField().setEnabled(true);
            moKeyEarningLoan_n.setSelectedIndex(0);
            moKeyEarningLoan_n.setEnabled(false);
        }
    }

    private void resetDeductionLoan() {
        if (moDeduction != null) {
            if (moDeduction.getFkLoanTypeId() != SModSysConsts.HRSS_TP_LOAN_NON) {
                miClient.getSession().populateCatalogue(moKeyDeductionLoan_n, SModConsts.HRS_LOAN, SLibConsts.UNDEFINED, new SGuiParams(new int[] { moHrsPayrollReceipt.getHrsEmployee().getEmployee().getPkEmployeeId(), moDeduction.getFkLoanTypeId()}));
                moKeyDeductionLoan_n.setEnabled(true);
            }
            else {
                moComDeductionValue.getField().setEnabled(true);
                moKeyDeductionLoan_n.setSelectedIndex(0);
                moKeyDeductionLoan_n.setEnabled(false);
            }
        }
        else {
            moComDeductionValue.getField().setEnabled(true);
            moKeyDeductionLoan_n.setSelectedIndex(0);
            moKeyDeductionLoan_n.setEnabled(false);
        }
    }
    
    private void actionPickEarning() {
        miClient.getSession().showOptionPicker(SModConsts.HRS_EAR, SLibConsts.UNDEFINED, null, moTextEarningCodeFind);
        actionLoadEarning();
    }
    
    private void actionPickDeduction() {
        miClient.getSession().showOptionPicker(SModConsts.HRS_DED, SLibConsts.UNDEFINED, null, moTextDeductionCodeFind);
        actionLoadDeduction();
    }

    private void actionEarningAdd() {
        boolean add = true;

        if (!moTextEarningName.getValue().isEmpty()) {
            if (moEarning.getFkLoanTypeId() != SModSysConsts.HRSS_TP_LOAN_NON) {
                if (moKeyEarningLoan_n.getSelectedIndex() <= 0) {
                    miClient.showMsgBoxWarning(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlEarningLoan_n.getText()) + "'. ");
                    add = false;
                    moKeyEarningLoan_n.requestFocus();
                }
            }
            
            if (add && moEarning.getFkBenefitTypeId() != SModSysConsts.HRSS_TP_BEN_NON && moHrsBenefit == null) {
                miClient.showMsgBoxWarning("Se debe capturar el valor de la prestación.");
                add = false;
                moTextEarningCodeFind.requestFocus();
            }
            
            // Capture allow multiple perceptions in payroll receipts:
            
            if (add) {
                for (SHrsPayrollReceiptEarning earning : moHrsPayrollReceipt.getHrsReceiptEarnings()) {
                    if (SLibUtils.compareKeys(new int[] { earning.getEarning().getPkEarningId()}, new int[] { moEarning.getPkEarningId() }) &&
                            (earning.getEarning().isDaysWorkedBasedOn() || earning.getEarning().getFkEarningExemptionTypeId() == SModSysConsts.HRSS_TP_EAR_EXEM_MWZ_GBL ||
                            earning.getEarning().getFkEarningExemptionTypeYearId() == SModSysConsts.HRSS_TP_EAR_EXEM_MWZ_GBL)) {
                        miClient.showMsgBoxWarning("La percepción '" + moEarning.getName() + "' no se puede agregar, ya existe en el recibo.");
                        add = false;
                    }
                }
            }

            if (add) {
                itemStateEarning();
                resetEarningFields();
                populateDeductions();
            }
        }
    }

    private void actionDeductionAdd() {
        double balanceLoan = 0;
        boolean add = true;

        try {
            if (moTextDeductionName.getValue().length() > 0) {
                if (moDeduction.getFkLoanTypeId() != SModSysConsts.HRSS_TP_LOAN_NON) {
                    if (moKeyDeductionLoan_n.getSelectedIndex() <= 0) {
                        miClient.showMsgBoxWarning(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlDeductionLoan_n.getText()) + "'. ");
                        add = false;
                        moKeyDeductionLoan_n.requestFocus();
                    }
                    else {
                        if (SLibUtils.belongsTo(moDeductionLoan.getFkLoanTypeId(), new int[] { SModSysConsts.HRSS_TP_LOAN_LOAN_COM, SModSysConsts.HRSS_TP_LOAN_LOAN_UNI, SModSysConsts.HRSS_TP_LOAN_LOAN_3RD })) {
                            balanceLoan = SHrsUtils.getBalanceLoan(moDeductionLoan, moHrsPayrollReceipt.getHrsEmployee());

                            if (balanceLoan <= 0) {
                                miClient.showMsgBoxWarning("El crédito/préstamo '" + moDeductionLoan.getLoanIdentificator() + "' está saldado.");
                                add = false;
                                moComDeductionValue.getField().getComponent().requestFocus();
                            }
                            else if (moComDeductionValue.getField().getValue() > balanceLoan) {
                                miClient.showMsgBoxWarning(SGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + SGuiUtils.getLabelName(jlDeductionValue.getText()) + "'" + 
                                        SGuiConsts.ERR_MSG_FIELD_VAL_LESS_EQUAL + balanceLoan + ". ");
                                add = false;
                                moComDeductionValue.getField().getComponent().requestFocus();
                            }
                        }
                    }
                }
                
                if (add) {
                    for (SHrsPayrollReceiptDeduction deduction : moHrsPayrollReceipt.getHrsReceiptDeductions()) {
                        if (SLibUtils.compareKeys(new int[] { deduction.getDeduction().getPkDeductionId() }, new int[] { moDeduction.getPkDeductionId() })) {
                            miClient.showMsgBoxWarning("La deducción '" + moDeduction.getName() + "' no se puede agregar, ya existe en el recibo.");
                            add = false;
                        }
                    }
                }

                if (add) {
                    itemStateDeduction();
                    resetDeductionFields();
                }
            }
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }

    private void actionLoadEarning() {
        boolean add = true;
        moHrsBenefit = null;
        
        try {
            moEarning = null;
            for (SDbEarning earning : moEarnigsMap.values()) {
                if (earning.getCode().compareToIgnoreCase(SLibUtils.textTrim(moTextEarningCodeFind.getText())) == 0) {
                    moEarning = earning;
                    break;
                }
            }

            if (moEarning == null) {
                miClient.showMsgBoxWarning("No se encontró ninguna percepción con código '" + moTextEarningCodeFind.getText() + "'.");
                moTextEarningName.setText("");
                moTextEarningCodeFind.requestFocus();
            }
            else {
                if (moEarning.getFkAbsenceClassId_n() != SLibConsts.UNDEFINED && moEarning.getFkAbsenceTypeId_n() != SLibConsts.UNDEFINED) {
                    add = false;
                }

                if (!add) {
                    miClient.showMsgBoxWarning("No se puede agregar la percepción '" + moEarning.getName() + " (" + moEarning.getCode() + ")' de esta forma, se debe agregar mediante una incidencia.");
                }
                else {
                    moTextEarningName.setValue(moEarning.getName());
                    moComEarningValue.setCompoundText((String) miClient.getSession().readField(SModConsts.HRSS_TP_EAR_COMP, new int[] { moEarning.getFkEarningComputationTypeId() }, SDbRegistry.FIELD_CODE));

                    resetEarningLoan();

                    enableFieldValueEarning();
                    if (moKeyEarningLoan_n.isEnabled()) {
                        moKeyEarningLoan_n.requestFocus();
                    }
                    else if (moComEarningValue.getField().isEditable()) {
                        moComEarningValue.getField().getComponent().requestFocus();
                    }
                    else {
                        jbEarningAdd.requestFocus();
                    }
                    
                    // create benefit registry if is necesary:
                    if (moEarning.getFkBenefitTypeId() != SModSysConsts.HRSS_TP_BEN_NON) {
                        createBenefit(moEarning);
                    }
                }
            }
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }

    private void actionLoadDeduction() {
        try {
            moDeduction = null;
            for (SDbDeduction deduction : moDeductionsMap.values()) {
                if (deduction.getCode().compareToIgnoreCase(SLibUtils.textTrim(moTextDeductionCodeFind.getText())) == 0) {
                    moDeduction = deduction;
                }
            }
        }
        catch (Exception e) {
            SLibUtils.printException(this, e);
        }

        if (moDeduction == null) {
            miClient.showMsgBoxWarning("No se encontró ninguna deducción con código '" + moTextDeductionCodeFind.getText() + "'.");
            moTextDeductionName.setText("");
            moTextDeductionCodeFind.requestFocus();
        }
        else {
            moTextDeductionName.setValue(moDeduction.getName());
            //moComDeductionValue.setCompoundText((String) miClient.getSession().readField(SModConsts.HRSS_TP_EAR_COMP, new int[] { SModSysConsts.HRSS_TP_EAR_COMP_AMT }, SDbRegistry.FIELD_CODE)); XXX (jbarajas, 2016-04-20) new field for computation type
            moComDeductionValue.setCompoundText((String) miClient.getSession().readField(SModConsts.HRSS_TP_DED_COMP, new int[] { moDeduction.getFkDeductionComputationTypeId() }, SDbRegistry.FIELD_CODE));

            resetDeductionLoan();

            if (moKeyDeductionLoan_n.isEnabled()) {
                moKeyDeductionLoan_n.requestFocus();
            }
            else {
                moComDeductionValue.getField().getComponent().requestFocus();
            }
        }
    }

    private void itemStateEarning() {
        SHrsPayrollReceiptEarning hrsReceiptEarningRow = null;

        moGridEarningRow.getModel().clearGridRows();
        moGridEarningRow.getModel().clearGrid();

        if (moEarning != null) {
            hrsReceiptEarningRow = new SHrsPayrollReceiptEarning();

            hrsReceiptEarningRow.setEarning(moEarnigsMap.get(moEarning.getPkEarningId()));
            hrsReceiptEarningRow.setHrsReceipt(moHrsPayrollReceipt);

            hrsReceiptEarningRow.setPkMoveId(moHrsPayrollReceipt.getHrsReceiptEarnings().size() + 1);
            hrsReceiptEarningRow.setXtaEmployee(moHrsPayrollReceipt.getHrsEmployee().getEmployee().getAuxEmployee());
            
            if (moComEarningValue.getField().isEditable()) {
                hrsReceiptEarningRow.setXtaValueAlleged(moComEarningValue.getField().getValue());
            }
            else {
                hrsReceiptEarningRow.setXtaValueAlleged(1d);
            }
            
            hrsReceiptEarningRow.setXtaValue(SLibUtils.round(!moEarning.isDaysAdjustment() ? moComEarningValue.getField().getValue() * moHrsPayrollReceipt.getHrsEmployee().getEmployeeDays().getFactorCalendar() : (moComEarningValue.getField().getValue() * moHrsPayrollReceipt.getHrsEmployee().getEmployeeDays().getFactorCalendar() * moHrsPayrollReceipt.getHrsEmployee().getEmployeeDays().getFactorDaysPaid()), SLibUtils.DecimalFormatValue8D.getMaximumFractionDigits()));
            hrsReceiptEarningRow.setXtaUnit((String) miClient.getSession().readField(SModConsts.HRSS_TP_EAR_COMP, new int[] { moEarning.getFkEarningComputationTypeId() }, SDbRegistry.FIELD_CODE));
            hrsReceiptEarningRow.setReceiptEarning(createReceipEarning(moHrsPayrollReceipt, hrsReceiptEarningRow));

            try {
                if (moKeyEarningLoan_n.isEnabled() && moKeyEarningLoan_n.getValue().length > 0) {
                    hrsReceiptEarningRow.setXtaLoan(moEarningLoan.getLoanIdentificator());
                    hrsReceiptEarningRow.getReceiptEarning().setFkLoanEmployeeId_n(moKeyEarningLoan_n.getValue()[0]);
                    hrsReceiptEarningRow.getReceiptEarning().setFkLoanLoanId_n(moKeyEarningLoan_n.getValue()[1]);
                    hrsReceiptEarningRow.getReceiptEarning().setFkLoanTypeId_n(moEarningLoan.getFkLoanTypeId());
                }
                moHrsPayrollReceipt.addEarning(hrsReceiptEarningRow);
            }
            catch (Exception e) {
                SLibUtils.printException(this, e);
            }

            populateEarnings();
        }
    }

    private void itemStateDeduction() {
        SHrsPayrollReceiptDeduction hrsReceiptDeductionRow = null;

        moGridDeductionRow.getModel().clearGridRows();
        moGridDeductionRow.getModel().clearGrid();

        if (moDeduction != null) {
            hrsReceiptDeductionRow = new SHrsPayrollReceiptDeduction();

            hrsReceiptDeductionRow.setDeduction(moDeductionsMap.get(moDeduction.getPkDeductionId()));
            hrsReceiptDeductionRow.setHrsReceipt(moHrsPayrollReceipt);

            hrsReceiptDeductionRow.setPkMoveId(moHrsPayrollReceipt.getHrsReceiptDeductions().size() + 1);
            hrsReceiptDeductionRow.setXtaEmployee(moHrsPayrollReceipt.getHrsEmployee().getEmployee().getAuxEmployee());
            hrsReceiptDeductionRow.setXtaValue(moComDeductionValue.getField().getValue());
            hrsReceiptDeductionRow.setXtaUnit((String) miClient.getSession().readField(SModConsts.HRSS_TP_DED_COMP, new int[] { moDeduction.getFkDeductionComputationTypeId() }, SDbRegistry.FIELD_CODE));
            hrsReceiptDeductionRow.setReceiptDeduction(createReceipDeduction(moHrsPayrollReceipt, hrsReceiptDeductionRow));

            try {
                if (moKeyDeductionLoan_n.isEnabled() && moKeyDeductionLoan_n.getValue().length > 0) {
                    hrsReceiptDeductionRow.getReceiptDeduction().setUserEdited(mdAmountLoan != moComDeductionValue.getField().getValue());
                    hrsReceiptDeductionRow.setXtaLoan(moDeductionLoan.getLoanIdentificator());
                    hrsReceiptDeductionRow.getReceiptDeduction().setFkLoanEmployeeId_n(moKeyDeductionLoan_n.getValue()[0]);
                    hrsReceiptDeductionRow.getReceiptDeduction().setFkLoanLoanId_n(moKeyDeductionLoan_n.getValue()[1]);
                    hrsReceiptDeductionRow.getReceiptDeduction().setFkLoanTypeId_n(moDeductionLoan.getFkLoanTypeId());
                }
                moHrsPayrollReceipt.addDeduction(hrsReceiptDeductionRow);
            }
            catch (Exception e) {
                SLibUtils.printException(this, e);
            }

            populateDeductions();
        }
    }

    private void populateEarnings() {
        Vector<SGridRow> rows = new Vector<>();
        SHrsPayrollReceiptEarning hrsReceiptEarningRow = null;

        moGridEarningRow.setRowButtonsEnabled(false, true, mbEditable);
        for (SHrsPayrollReceiptEarning hrsEarningRow : moHrsPayrollReceipt.getHrsReceiptEarnings()) {
            hrsReceiptEarningRow = new SHrsPayrollReceiptEarning();

            hrsReceiptEarningRow.setEarning(hrsEarningRow.getEarning());
            hrsReceiptEarningRow.setHrsReceipt(moHrsPayrollReceipt);
            hrsReceiptEarningRow.setReceiptEarning(hrsEarningRow.getReceiptEarning());
            hrsReceiptEarningRow.setPkMoveId(hrsEarningRow.getPkMoveId());

            hrsReceiptEarningRow.setXtaEmployee(moHrsPayrollReceipt.getHrsEmployee().getEmployee().getAuxEmployee());
            hrsReceiptEarningRow.setXtaValueAlleged(hrsEarningRow.getReceiptEarning().getUnitsAlleged());
            hrsReceiptEarningRow.setXtaValue(hrsEarningRow.getReceiptEarning().getUnits());
            hrsReceiptEarningRow.setXtaUnit((String) miClient.getSession().readField(SModConsts.HRSS_TP_EAR_COMP, new int[] { hrsEarningRow.getEarning().getFkEarningComputationTypeId() }, SDbRegistry.FIELD_CODE));

            if (hrsEarningRow.getReceiptEarning() != null && hrsEarningRow.getReceiptEarning().getFkLoanEmployeeId_n() != SLibConsts.UNDEFINED) {
                hrsReceiptEarningRow.setXtaLoan(hrsEarningRow.getHrsReceipt().getHrsEmployee().getLoan(hrsEarningRow.getReceiptEarning().getFkLoanLoanId_n()).getLoanIdentificator());
            }
            rows.add(hrsReceiptEarningRow);
        }

        moGridEarningRow.populateGrid(rows);
        moGridEarningRow.clearSortKeys();
        moGridEarningRow.setSelectedGridRow(0);

        computeTotal();
    }

    private void populateDeductions() {
        Vector<SGridRow> rows = new Vector<>();
        SHrsPayrollReceiptDeduction hrsReceiptDeductionRow = null;

        moGridDeductionRow.setRowButtonsEnabled(false, false, mbEditable);
        for (SHrsPayrollReceiptDeduction hrsDeductionRow : moHrsPayrollReceipt.getHrsReceiptDeductions()) {
            hrsReceiptDeductionRow = new SHrsPayrollReceiptDeduction();

            hrsReceiptDeductionRow.setDeduction(hrsDeductionRow.getDeduction());
            hrsReceiptDeductionRow.setHrsReceipt(moHrsPayrollReceipt);
            hrsReceiptDeductionRow.setReceiptDeduction(hrsDeductionRow.getReceiptDeduction());
            hrsReceiptDeductionRow.setPkMoveId(hrsDeductionRow.getPkMoveId());
            hrsReceiptDeductionRow.setXtaEmployee(moHrsPayrollReceipt.getHrsEmployee().getEmployee().getAuxEmployee());
            hrsReceiptDeductionRow.setXtaValue(hrsDeductionRow.getReceiptDeduction().getAmountUnitary());
            hrsReceiptDeductionRow.setXtaAmount(hrsDeductionRow.getReceiptDeduction().getAmount_r());
            //hrsReceiptDeductionRow.setXtaUnit((String) miClient.getSession().readField(SModConsts.HRSS_TP_EAR_COMP, new int[] { SModSysConsts.HRSS_TP_EAR_COMP_AMT }, SDbRegistry.FIELD_CODE)); XXX (jbarajas, 2016-04-20) new field for computation type
            hrsReceiptDeductionRow.setXtaUnit((String) miClient.getSession().readField(SModConsts.HRSS_TP_DED_COMP, new int[] { hrsDeductionRow.getDeduction().getFkDeductionComputationTypeId() }, SDbRegistry.FIELD_CODE));

            if (hrsDeductionRow.getReceiptDeduction() != null && hrsDeductionRow.getReceiptDeduction().getFkLoanEmployeeId_n() != SLibConsts.UNDEFINED) {
                hrsReceiptDeductionRow.setXtaLoan(hrsDeductionRow.getHrsReceipt().getHrsEmployee().getLoan(hrsDeductionRow.getReceiptDeduction().getFkLoanLoanId_n()) == null ? "" : hrsDeductionRow.getHrsReceipt().getHrsEmployee().getLoan(hrsDeductionRow.getReceiptDeduction().getFkLoanLoanId_n()).getLoanIdentificator());
            }
            rows.add(hrsReceiptDeductionRow);
        }

        moGridDeductionRow.populateGrid(rows);
        moGridDeductionRow.clearSortKeys();
        moGridDeductionRow.setSelectedGridRow(0);

        computeTotal();
    }
    
    private void populateAbsenceConsumption() {
        Vector<SGridRow> rows = new Vector<SGridRow>();
        SDbAbsence absence = null;

        moGridAbsenceConsumptionRow.setRowButtonsEnabled(mbEditable, false, mbEditable);
        for (SDbAbsenceConsumption absenceConsumption : moHrsPayrollReceipt.getAbsenceConsumptions()) {
            absence = (SDbAbsence) miClient.getSession().readRegistry(SModConsts.HRS_ABS, new int[] { absenceConsumption.getPkEmployeeId(), absenceConsumption.getPkAbsenceId() });
            
            absenceConsumption.setAuxNumber(absence.getNumber());
            absenceConsumption.setAuxDateStart(absence.getDateStart());
            absenceConsumption.setAuxDateEnd(absence.getDateEnd());
            absenceConsumption.setAuxEffectiveDays(absence.getEffectiveDays());
            
            rows.add(absenceConsumption);
        }
        
        moGridAbsenceConsumptionRow.populateGrid(rows);
        moGridAbsenceConsumptionRow.clearSortKeys();
        moGridAbsenceConsumptionRow.setSelectedGridRow(0);
    }

    private void updateReceipts() {
        SHrsPayrollReceiptDeduction hrsReceiptDeductionRow = null;
        SHrsPayrollReceiptEarning hrsReceiptEarningRow = null;

        for (SGridRow row : moGridEarningRow.getModel().getGridRows()) {
            hrsReceiptEarningRow = (SHrsPayrollReceiptEarning) row;

            for (SHrsPayrollReceiptEarning earning : moHrsPayrollReceipt.getHrsReceiptEarnings()) {
                if (SLibUtils.compareKeys(earning.getRowPrimaryKey(), hrsReceiptEarningRow.getRowPrimaryKey())) {
                    if (!earning.getReceiptEarning().isAutomatic() && hrsReceiptEarningRow.getXtaValue() == 0) {
                        moHrsPayrollReceipt.removeEarning(earning.getPkMoveId());
                        break;
                    }
                }
            }
        }

        for (SGridRow row : moGridDeductionRow.getModel().getGridRows()) {
            hrsReceiptDeductionRow = (SHrsPayrollReceiptDeduction) row;

            for (SHrsPayrollReceiptDeduction deduction : moHrsPayrollReceipt.getHrsReceiptDeductions()) {
                if (SLibUtils.compareKeys(deduction.getRowPrimaryKey(), hrsReceiptDeductionRow.getRowPrimaryKey())) {
                    if (!deduction.getReceiptDeduction().isAutomatic() && hrsReceiptDeductionRow.getXtaValue() == 0) {
                        moHrsPayrollReceipt.removeDeduction(deduction.getPkMoveId());
                        break;
                    }
                }
            }
        }
    }

    @Override
    public void addAllListeners() {
        moTextEarningCodeFind.addKeyListener(this);
        jbEarningCodeFind.addActionListener(this);
        jbEarningCodeFind.addKeyListener(this);
        jbEarningAdd.addActionListener(this);
        jbEarningAdd.addKeyListener(this);
        moTextDeductionCodeFind.addKeyListener(this);
        jbDeductionCodeFind.addActionListener(this);
        jbDeductionAdd.addActionListener(this);
        moKeyEarningLoan_n.addItemListener(this);
        moKeyEarningLoan_n.addKeyListener(this);
        moKeyDeductionLoan_n.addItemListener(this);
        moKeyDeductionLoan_n.addKeyListener(this);
        moComEarningValue.getField().getComponent().addKeyListener(this);
        moComDeductionValue.getField().getComponent().addKeyListener(this);
        //jbUpdateTotal.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        moTextEarningCodeFind.removeKeyListener(this);
        jbEarningCodeFind.removeActionListener(this);
        jbEarningAdd.removeActionListener(this);
        moTextDeductionCodeFind.removeKeyListener(this);
        jbDeductionCodeFind.removeActionListener(this);
        jbDeductionAdd.removeActionListener(this);
        moKeyEarningLoan_n.removeItemListener(this);
        moKeyEarningLoan_n.removeKeyListener(this);
        moKeyDeductionLoan_n.removeItemListener(this);
        moKeyDeductionLoan_n.removeKeyListener(this);
        moComEarningValue.getField().getComponent().removeKeyListener(this);
        moComDeductionValue.getField().getComponent().removeKeyListener(this);
        //jbUpdateTotal.removeActionListener(this);
    }

    @Override
    public void reloadCatalogues() {
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        // Validate value the earning, according to working days:
        
        if (moHrsPayrollReceipt.getHrsPayroll().getPayroll().isNormal()) {
            double daysToBePaid = 0;
            for (SHrsPayrollReceiptEarning hrsEarningRow : moHrsPayrollReceipt.getHrsReceiptEarnings()) {
                if (hrsEarningRow.getEarning().isDaysWorked()) {
                    daysToBePaid += hrsEarningRow.getReceiptEarning().getUnitsAlleged();
                }
            }
            
            double daysAbsence = 0;
            for (SDbAbsenceConsumption absenceConsumption : moHrsPayrollReceipt.getAbsenceConsumptions()) {
                if (absenceConsumption.getAbsence().getFkAbsenceClassId() != SModSysConsts.HRSU_CL_ABS_VAC) {
                    daysAbsence += absenceConsumption.getEffectiveDays();
                }
            }
            
            SHrsEmployeeDays employeeDays = moHrsPayrollReceipt.getHrsEmployee().getEmployeeDays();
            double daysToBePaidMax = employeeDays.getWorkingDays() * employeeDays.getFactorCalendar();
            double daysCovered = daysToBePaid + daysAbsence;
            double daysDiff = daysToBePaidMax - daysCovered;
            
            if (Math.abs(daysDiff) > 0.0001) {
                String msg = "¡ADVERTENCIA! Los días laborables del empleado (" + daysToBePaidMax + " " + (daysToBePaidMax == 1 ? "día" : "días") + ") no coinciden con\n"
                        + "los días a pagar (" + daysToBePaid + " " + (daysToBePaid == 1 ? "día" : "días") + ")"
                        + (daysAbsence == 0 ? "" : " más los días de incidencias (" + daysAbsence + " " + (daysAbsence == 1 ? "día" : "días") + ")" + "; esto es: "
                        + daysToBePaidMax + " " + (daysToBePaidMax == 1 ? "día" : "días") + " vs. " + daysCovered + " " + (daysCovered == 1 ? "día" : "días")) + ".\n"
                        + "¡SE PAGARÁ " + Math.abs(daysDiff) + " " + (Math.abs(daysDiff) == 1 ? "DÍA" : "DÍAS") + " DE " + (daysDiff > 0 ? "MENOS" : "MÁS") + " AL EMPLEADO!";
                if (miClient.showMsgBoxConfirm(msg + "\n" + SGuiConsts.MSG_CNF_CONT) == JOptionPane.NO_OPTION) {
                    validation.setMessage("Ajustarse a los días laborables del empleado (" + daysToBePaidMax + " " + (daysToBePaidMax == 1 ? "día" : "días") + ").");
                    validation.setComponent(moTextEarningCodeFind);
                }
            }
        }
        
        return validation;
    }

    @Override
    public void setValue(final int type, final Object value) {
        switch (type) {
            case SGuiConsts.PARAM_REQ_PAY:
                mbEditable = (boolean) value;
                setEnableFields(mbEditable);
                break;
                
            case SModConsts.HRS_PAY_RCP:
                moHrsPayrollReceipt = (SHrsPayrollReceipt) value;
                renderEmployee();
                populateEarnings();
                populateDeductions();
                populateAbsenceConsumption();
                break;
                
            case SModConsts.HRS_EAR:
                moEarnigsMap = new HashMap<Integer, SDbEarning>();
                for (SDbEarning ear : (ArrayList<SDbEarning>) value) {
                    moEarnigsMap.put(ear.getPkEarningId(), ear);
                }
                break;
                
            case SModConsts.HRS_DED:
                moDeductionsMap = new HashMap<Integer, SDbDeduction>();
                for (SDbDeduction ded : (ArrayList<SDbDeduction>) value) {
                    moDeductionsMap.put(ded.getPkDeductionId(), ded);
                }
                break;
                
            default:
        }
    }

    @Override
    public Object getValue(final int type) {
        Object value = null;

        switch (type) {
            case SModConsts.HRS_PAY_RCP:
                updateReceipts();
                value = moHrsPayrollReceipt;
                break;
            default:
                break;
        }

        return value;
    }

    @Override
    public void actionSave() {
        try {
            if (!mbEditable) {
                mnFormResult = SGuiConsts.FORM_RESULT_CANCEL;
                dispose();
            }
            else {
                //if (moReceipt.validateDaysToBePaidWithAbsence()) {
                    updateReceipts();
                    super.actionSave();
                //}
                }
            }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }

    @Override
    public void notifyRowNew(int gridType, int gridSubtype, int row, SGridRow gridRow) {
        computeTotal();
    }

    @Override
    public void notifyRowEdit(int gridType, int gridSubtype, int row, SGridRow gridRow) {
        computeTotal();
    }

    @Override
    public void notifyRowDelete(int gridType, int gridSubtype, int row, SGridRow gridRow) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof JComboBox && e.getStateChange() == ItemEvent.SELECTED) {
            JComboBox comboBox = (JComboBox)  e.getSource();

            if (comboBox == moKeyEarningLoan_n) {
                itemStateEarningLoan_n();
            }
            else if (comboBox == moKeyDeductionLoan_n) {
                itemStateDeductionLoan_n();
            }
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbEarningAdd) {
                actionEarningAdd();
            }
            else if (button == jbEarningCodeFind) {
                actionPickEarning();
            }
            else if (button == jbDeductionAdd) {
                actionDeductionAdd();
            }
            else if (button == jbDeductionCodeFind) {
                actionPickDeduction();
            }
        }
        else if (e.getSource() instanceof JTextField) {
            JTextField textField = (JTextField) e.getSource();
        }
    }

    @Override
    public void keyTyped(KeyEvent e) {
        
    }

    @Override
    public void keyPressed(KeyEvent evt) {
        if (evt.getSource() instanceof JTextField) {
            JTextField textField = (JTextField) evt.getSource();

            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                if (textField == moComEarningValue.getField().getComponent()) {
                    jbEarningAdd.requestFocus();
                }
                else if (textField == moComDeductionValue.getField().getComponent()) {
                    jbDeductionAdd.requestFocus();
                }
                else if (textField == moTextEarningCodeFind) {
                    actionLoadEarning();
                }
                else if (textField == moTextDeductionCodeFind) {
                    actionLoadDeduction();
                }
            }
        }
        else if (evt.getSource() instanceof JComboBox) {
            JComboBox comboBox = (JComboBox) evt.getSource();

            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                if (comboBox == moKeyEarningLoan_n) {
                    moComEarningValue.getField().getComponent().requestFocus();
                }
                else if (comboBox == moKeyDeductionLoan_n) {
                    moComDeductionValue.getField().getComponent().requestFocus();
                }
            }

        }
    }

    @Override
    public void keyReleased(KeyEvent e) {
    }

    @Override
    public void editingStopped(ChangeEvent e) {
        switch (moGridEarningRow.getTable().getSelectedColumn()) {
            case COL_VAL:
                validateCellEditor(COL_VAL);
                processEditingAppPayment(true);
                break;
            case COL_AMT:
                validateCellEditor(COL_AMT);
                processEditingAppPayment(true);
                break;
            default:
        }

        switch (moGridDeductionRow.getTable().getSelectedColumn()) {
            case COL_VAL:
                processEditingAppPayment(false);
                break;
            default:
        }
    }

    @Override
    public void editingCanceled(ChangeEvent e) {
        throw new UnsupportedOperationException("Not supported yet.");
    }
}
