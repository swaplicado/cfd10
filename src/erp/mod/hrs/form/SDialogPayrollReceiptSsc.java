/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.hrs.form;

import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import erp.mod.hrs.db.SHrsConsts;
import erp.mod.hrs.db.SHrsEarningsSsContributionUpdate;
import erp.mod.hrs.db.SHrsEmployeeSsContributionUpdate;
import java.awt.BorderLayout;
import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import sa.lib.SLibConsts;
import sa.lib.SLibTimeUtils;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFormDialog;

/**
 *
 * @author Juan Barajas, Sergio Flores
 */
public class SDialogPayrollReceiptSsc extends SBeanFormDialog implements ActionListener, ListSelectionListener, CellEditorListener  {

    protected static final int COL_AMT = 2;

    protected SGridPaneForm moGridEmployeesRow;
    protected SGridPaneForm moGridEarnigsRow;
    protected int mnPeriodDays;
    
    private JButton jbSelectAll;
    private JButton jbCleanAll;
    
    /**
     * Creates new form SDialogPayrollReceiptSsContribution
     * @param client
     * @param title
     */
    public SDialogPayrollReceiptSsc(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.HRSX_SSC_UPD, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jPanel35 = new javax.swing.JPanel();
        jlYear = new javax.swing.JLabel();
        moIntPeriodYear = new sa.lib.gui.bean.SBeanFieldInteger();
        jPanel36 = new javax.swing.JPanel();
        jlPeriodStart = new javax.swing.JLabel();
        moIntPeriodStart = new sa.lib.gui.bean.SBeanFieldInteger();
        jPanel37 = new javax.swing.JPanel();
        jlPeriodEnd = new javax.swing.JLabel();
        moIntPeriodEnd = new sa.lib.gui.bean.SBeanFieldInteger();
        jPanel9 = new javax.swing.JPanel();
        jlDateUpdate = new javax.swing.JLabel();
        moDateDateUpdate = new sa.lib.gui.bean.SBeanFieldDate();
        jbShowEmployee = new javax.swing.JButton();
        jbCleanEmployee = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        jpEmployee = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jpEarning = new javax.swing.JPanel();
        jpDaysInfo = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlDaysPeriod = new javax.swing.JLabel();
        moIntDaysPeriod = new sa.lib.gui.bean.SBeanFieldInteger();
        jPanel5 = new javax.swing.JPanel();
        jlDaysIncapacity = new javax.swing.JLabel();
        moIntDaysIncapacity = new sa.lib.gui.bean.SBeanFieldInteger();
        jPanel11 = new javax.swing.JPanel();
        jlDaysAbsenteeism = new javax.swing.JLabel();
        moIntDaysAbsenteeism = new sa.lib.gui.bean.SBeanFieldInteger();
        jPanel14 = new javax.swing.JPanel();
        jlDaysSuspension = new javax.swing.JLabel();
        moIntDaysSuspension = new sa.lib.gui.bean.SBeanFieldInteger();
        jPanel15 = new javax.swing.JPanel();
        jlDaysTotal = new javax.swing.JLabel();
        moIntDaysTotal = new sa.lib.gui.bean.SBeanFieldInteger();
        jPanel17 = new javax.swing.JPanel();
        jlTotalAmount = new javax.swing.JLabel();
        moDecTotalAmount = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel16 = new javax.swing.JPanel();
        jlPaymentDailyProp = new javax.swing.JLabel();
        moDecPaymentDailyProp = new sa.lib.gui.bean.SBeanFieldDecimal();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel7.setLayout(new java.awt.BorderLayout());

        jPanel13.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jPanel35.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlYear.setText("Ejercicio:*");
        jlYear.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel35.add(jlYear);

        moIntPeriodYear.setPreferredSize(new java.awt.Dimension(103, 23));
        jPanel35.add(moIntPeriodYear);

        jPanel13.add(jPanel35);

        jPanel36.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPeriodStart.setText("Período inicial:*");
        jlPeriodStart.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel36.add(jlPeriodStart);

        moIntPeriodStart.setPreferredSize(new java.awt.Dimension(103, 23));
        jPanel36.add(moIntPeriodStart);

        jPanel13.add(jPanel36);

        jPanel37.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPeriodEnd.setText("Período final:*");
        jlPeriodEnd.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel37.add(jlPeriodEnd);

        moIntPeriodEnd.setPreferredSize(new java.awt.Dimension(103, 23));
        jPanel37.add(moIntPeriodEnd);

        jPanel13.add(jPanel37);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateUpdate.setText("Fecha actualización:");
        jlDateUpdate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlDateUpdate);
        jPanel9.add(moDateDateUpdate);

        jbShowEmployee.setText("Mostar empleados");
        jbShowEmployee.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbShowEmployee.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel9.add(jbShowEmployee);

        jbCleanEmployee.setText("Limpiar empleados");
        jbCleanEmployee.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbCleanEmployee.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel9.add(jbCleanEmployee);

        jPanel13.add(jPanel9);

        jPanel7.add(jPanel13, java.awt.BorderLayout.PAGE_START);

        jPanel1.add(jPanel7, java.awt.BorderLayout.NORTH);

        jPanel12.setLayout(new java.awt.BorderLayout());

        jpEmployee.setBorder(javax.swing.BorderFactory.createTitledBorder("Empleados:"));
        jpEmployee.setPreferredSize(new java.awt.Dimension(100, 200));
        jpEmployee.setLayout(new java.awt.BorderLayout());
        jPanel12.add(jpEmployee, java.awt.BorderLayout.NORTH);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jpEarning.setBorder(javax.swing.BorderFactory.createTitledBorder("Percepciones que intregran:"));
        jpEarning.setLayout(new java.awt.BorderLayout());
        jPanel3.add(jpEarning, java.awt.BorderLayout.CENTER);

        jpDaysInfo.setBorder(javax.swing.BorderFactory.createTitledBorder("Información de días:"));
        jpDaysInfo.setLayout(new java.awt.BorderLayout());

        jPanel6.setLayout(new java.awt.GridLayout(7, 0, 0, 5));

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDaysPeriod.setText("Días periodo:");
        jlDaysPeriod.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlDaysPeriod);

        moIntDaysPeriod.setToolTipText("Año aniversario");
        moIntDaysPeriod.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel4.add(moIntDaysPeriod);

        jPanel6.add(jPanel4);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDaysIncapacity.setText("Días incapacidad:");
        jlDaysIncapacity.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlDaysIncapacity);

        moIntDaysIncapacity.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel5.add(moIntDaysIncapacity);

        jPanel6.add(jPanel5);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDaysAbsenteeism.setText("Días ausentismo:");
        jlDaysAbsenteeism.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlDaysAbsenteeism);

        moIntDaysAbsenteeism.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel11.add(moIntDaysAbsenteeism);

        jPanel6.add(jPanel11);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDaysSuspension.setText("Días supensión:");
        jlDaysSuspension.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jlDaysSuspension);

        moIntDaysSuspension.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel14.add(moIntDaysSuspension);

        jPanel6.add(jPanel14);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDaysTotal.setText("Total días:");
        jlDaysTotal.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel15.add(jlDaysTotal);

        moIntDaysTotal.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel15.add(moIntDaysTotal);

        jPanel6.add(jPanel15);

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTotalAmount.setText("Total percepciones:");
        jlTotalAmount.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel17.add(jlTotalAmount);
        jPanel17.add(moDecTotalAmount);

        jPanel6.add(jPanel17);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPaymentDailyProp.setText("Prop. diario:");
        jlPaymentDailyProp.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel16.add(jlPaymentDailyProp);
        jPanel16.add(moDecPaymentDailyProp);

        jPanel6.add(jPanel16);

        jpDaysInfo.add(jPanel6, java.awt.BorderLayout.NORTH);

        jPanel3.add(jpDaysInfo, java.awt.BorderLayout.EAST);

        jPanel12.add(jPanel3, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel12, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel35;
    private javax.swing.JPanel jPanel36;
    private javax.swing.JPanel jPanel37;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbCleanEmployee;
    private javax.swing.JButton jbShowEmployee;
    private javax.swing.JLabel jlDateUpdate;
    private javax.swing.JLabel jlDaysAbsenteeism;
    private javax.swing.JLabel jlDaysIncapacity;
    private javax.swing.JLabel jlDaysPeriod;
    private javax.swing.JLabel jlDaysSuspension;
    private javax.swing.JLabel jlDaysTotal;
    private javax.swing.JLabel jlPaymentDailyProp;
    private javax.swing.JLabel jlPeriodEnd;
    private javax.swing.JLabel jlPeriodStart;
    private javax.swing.JLabel jlTotalAmount;
    private javax.swing.JLabel jlYear;
    private javax.swing.JPanel jpDaysInfo;
    private javax.swing.JPanel jpEarning;
    private javax.swing.JPanel jpEmployee;
    private sa.lib.gui.bean.SBeanFieldDate moDateDateUpdate;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecPaymentDailyProp;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecTotalAmount;
    private sa.lib.gui.bean.SBeanFieldInteger moIntDaysAbsenteeism;
    private sa.lib.gui.bean.SBeanFieldInteger moIntDaysIncapacity;
    private sa.lib.gui.bean.SBeanFieldInteger moIntDaysPeriod;
    private sa.lib.gui.bean.SBeanFieldInteger moIntDaysSuspension;
    private sa.lib.gui.bean.SBeanFieldInteger moIntDaysTotal;
    private sa.lib.gui.bean.SBeanFieldInteger moIntPeriodEnd;
    private sa.lib.gui.bean.SBeanFieldInteger moIntPeriodStart;
    private sa.lib.gui.bean.SBeanFieldInteger moIntPeriodYear;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 960, 600);
        
        jbSave.setText("Aceptar");

        moIntPeriodYear.setIntegerSettings(SGuiUtils.getLabelName(jlYear.getText()), SGuiConsts.GUI_TYPE_INT_CAL_YEAR, true);
        moIntPeriodYear.setMinInteger(2000);
        moIntPeriodYear.setMaxInteger(2100);
        moIntPeriodStart.setIntegerSettings(SGuiUtils.getLabelName(jlPeriodStart.getText()), SGuiConsts.GUI_TYPE_INT_CAL_MONTH, true);
        moIntPeriodStart.setMaxInteger(SHrsConsts.YEAR_MONTHS);
        moIntPeriodEnd.setIntegerSettings(SGuiUtils.getLabelName(jlPeriodEnd.getText()), SGuiConsts.GUI_TYPE_INT_CAL_MONTH, true);
        moIntPeriodEnd.setMaxInteger(SHrsConsts.YEAR_MONTHS);
        moDateDateUpdate.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateUpdate.getText()), true);
        moIntDaysPeriod.setIntegerSettings(SGuiUtils.getLabelName(jlDaysPeriod.getText()), SGuiConsts.GUI_TYPE_INT, false);
        moIntDaysIncapacity.setIntegerSettings(SGuiUtils.getLabelName(jlDaysIncapacity.getText()), SGuiConsts.GUI_TYPE_INT, false);
        moIntDaysAbsenteeism.setIntegerSettings(SGuiUtils.getLabelName(jlDaysAbsenteeism.getText()), SGuiConsts.GUI_TYPE_INT, false);
        moIntDaysSuspension.setIntegerSettings(SGuiUtils.getLabelName(jlDaysSuspension.getText()), SGuiConsts.GUI_TYPE_INT, false);
        moIntDaysTotal.setIntegerSettings(SGuiUtils.getLabelName(jlDaysTotal.getText()), SGuiConsts.GUI_TYPE_INT, false);
        moDecTotalAmount.setDecimalSettings(SGuiUtils.getLabelName(jlTotalAmount.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecPaymentDailyProp.setDecimalSettings(SGuiUtils.getLabelName(jlPaymentDailyProp.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        
        jbSelectAll = new JButton("Todo");
        jbSelectAll.setToolTipText("Seleccionar");
        jbSelectAll.setPreferredSize(new java.awt.Dimension(70, 23));

        jbCleanAll = new JButton("Nada");
        jbCleanAll.setToolTipText("Seleccionar");
        jbCleanAll.setPreferredSize(new java.awt.Dimension(70, 23));
        
        moFields.addField(moIntPeriodYear);
        moFields.addField(moIntPeriodStart);
        moFields.addField(moIntPeriodEnd);
        moFields.addField(moDateDateUpdate);
        moFields.addField(moIntDaysPeriod);
        moFields.addField(moIntDaysIncapacity);
        moFields.addField(moIntDaysAbsenteeism);
        moFields.addField(moIntDaysSuspension);
        moFields.addField(moIntDaysTotal);
        moFields.addField(moDecTotalAmount);
        moFields.addField(moDecPaymentDailyProp);
        
        moFields.setFormButton(jbSave);
        
        moGridEmployeesRow = new SGridPaneForm(miClient, SModConsts.HRSU_EMP, SLibConsts.UNDEFINED, "Empleados") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                SGridColumnForm columnForm;
                ArrayList<SGridColumnForm> gridColumnsForm = new ArrayList<>();

                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_BPR_L, "Empleado"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_BPR, "Clave empleado"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Departamento"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CAT, "Código departamento"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "SD $"));
                columnForm = new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_S, "Actualizar", moGridEmployeesRow.getTable().getDefaultEditor(Boolean.class));
                columnForm.setEditable(true);
                gridColumnsForm.add(columnForm);
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "SBC actual $"));
                columnForm = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "SBC nuevo $", moGridEmployeesRow.getTable().getDefaultEditor(Double.class));
                columnForm.setEditable(true);
                gridColumnsForm.add(columnForm);
                
                moGridEmployeesRow.getTable().getDefaultEditor(Boolean.class).addCellEditorListener(SDialogPayrollReceiptSsc.this);
                moGridEmployeesRow.getTable().getDefaultEditor(Double.class).addCellEditorListener(SDialogPayrollReceiptSsc.this);
                
                return gridColumnsForm;
            }
        };
        moGridEmployeesRow.getPanelCommandsSys(SGuiConsts.PANEL_CENTER).add(jbSelectAll);
        moGridEmployeesRow.getPanelCommandsSys(SGuiConsts.PANEL_CENTER).add(jbCleanAll);

        /*
        moGridEmployeesRow.setForm(null);
        moGridEmployeesRow.setPaneFormOwner(null);
        */
        jpEmployee.add(moGridEmployeesRow, BorderLayout.CENTER);
        //mvFormGrids.add(moGridEmployeesRow);
        
        moGridEarnigsRow = new SGridPaneForm(miClient, SModConsts.HRSX_EAR_SSC, SLibConsts.UNDEFINED, "Percepciones") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                SGridColumnForm columnForm = null;
                ArrayList<SGridColumnForm> gridColumnsForm = new ArrayList<SGridColumnForm>();

                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CAT, "Código percepción"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_M, "Percepción"));
                columnForm = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "Monto $", moGridEarnigsRow.getTable().getDefaultEditor(Double.class));
                columnForm.setEditable(true);
                gridColumnsForm.add(columnForm);
                
                moGridEarnigsRow.getTable().getDefaultEditor(Double.class).addCellEditorListener(SDialogPayrollReceiptSsc.this);
                
                return gridColumnsForm;
            }
        };

        /*
        moGridEarnigsRow.setForm(null);
        moGridEarnigsRow.setPaneFormOwner(null);
        */
        jpEarning.add(moGridEarnigsRow, BorderLayout.CENTER);
        //mvFormGrids.add(moGridEarnigsRow);
        
        reloadCatalogues();
        addAllListeners();
        
        moIntDaysPeriod.setEditable(false);
        moIntDaysIncapacity.setEditable(false);
        moIntDaysAbsenteeism.setEditable(false);
        moIntDaysSuspension.setEditable(false);
        moIntDaysTotal.setEditable(false);
        moDecTotalAmount.setEditable(false);
        moDecPaymentDailyProp.setEditable(false);
        
        moGridEmployeesRow.populateGrid(new Vector<SGridRow>(), this);
        moGridEmployeesRow.resetSortKeys();
        moGridEmployeesRow.setSelectedGridRow(0);
        
        moDateDateUpdate.setValue(miClient.getSession().getCurrentDate());
        
        populateEarnings(null);
        
        enableFields(true);
    }
    
    private void enableFields(boolean enable) {
        jbShowEmployee.setEnabled(enable);
        jbCleanEmployee.setEnabled(!enable);
        moIntPeriodYear.setEditable(enable);
        moIntPeriodStart.setEditable(enable);
        moIntPeriodEnd.setEditable(enable);
    }
    
    private void actionShowEmployee() {
        SGuiValidation validation = validateForm();
        
        if (validation.isValid()) {
            enableFields(false);
            populateEmployees();
        }
        else {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
    }
    
    private void actionCleanEmployee() {
        enableFields(true);
        moGridEmployeesRow.clearGridRows();
        moGridEarnigsRow.clearGridRows();
    }
    
    private void actionSelectAll() {
        SHrsEmployeeSsContributionUpdate row = null;
        
        try {
            for (SGridRow rowAux : moGridEmployeesRow.getModel().getGridRows()) {
                row = (SHrsEmployeeSsContributionUpdate) rowAux;
                row.setIsApply(true);
            }
            moGridEmployeesRow.renderGridRows();
            moGridEmployeesRow.setSelectedGridRow(0);
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }

    private void actionCleanAll() {
        SHrsEmployeeSsContributionUpdate row = null;
        
        try {
            for (SGridRow rowAux : moGridEmployeesRow.getModel().getGridRows()) {
                row = (SHrsEmployeeSsContributionUpdate) rowAux;
                row.setIsApply(false);
            }
            moGridEmployeesRow.renderGridRows();
            moGridEmployeesRow.setSelectedGridRow(0);
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }
    
    private void populateEmployees() {
        int employeeId = 0;
        Date mtDateStart = null;
        Date mtDateEnd = null;
        SHrsEmployeeSsContributionUpdate employeeSsContributionUpdate = null;
        String sql = "";
        ResultSet resultSet = null;
        ResultSet resultSetAux = null;
        Vector<SGridRow> rows = new Vector<>();
        Statement statement = null;
        Statement statementAux = null;
        
        mtDateStart = SLibTimeUtils.getBeginOfMonth(SLibTimeUtils.createDate(moIntPeriodYear.getValue(), moIntPeriodStart.getValue()));
        mtDateEnd = SLibTimeUtils.getEndOfMonth(SLibTimeUtils.createDate(moIntPeriodYear.getValue(), moIntPeriodEnd.getValue()));
        
        mnPeriodDays = SLibTimeUtils.countPeriodDays(mtDateStart, mtDateEnd);
        try {
            statement = miClient.getSession().getDatabase().getConnection().createStatement();
            statementAux = miClient.getSession().getDatabase().getConnection().createStatement();
            
            sql = "SELECT e.num, e.id_emp, e.sal_ssc, bp.bp, d.code, d.name, "
                    + "IF(e.fk_tp_pay = " + SModSysConsts.HRSS_TP_PAY_WEE + ", e.sal, (e.wage * " + SHrsConsts.YEAR_MONTHS + " / " + SHrsConsts.YEAR_DAYS + ")) AS _sd " 
                    + "FROM " + SModConsts.TablesMap.get(SModConsts.HRSU_EMP) + " AS e "
                    + "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.HRS_EMP_MEMBER) + " AS em ON em.id_emp = e.id_emp "
                    + "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.BPSU_BP) + " AS bp ON bp.id_bp = e.id_emp "
                    + "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.HRSU_DEP) + " AS d ON d.id_dep = e.fk_dep "
                    + "WHERE bp.b_del = 0 AND e.b_act = 1 "
                    + "ORDER BY bp, id_bp ";

            resultSet = statement.executeQuery(sql);
            while (resultSet.next()) {
                employeeSsContributionUpdate = new SHrsEmployeeSsContributionUpdate();

                employeeId = resultSet.getInt("id_emp");

                employeeSsContributionUpdate.setEmployeeId(employeeId);
                employeeSsContributionUpdate.setCodeEmployee(resultSet.getString("num"));
                employeeSsContributionUpdate.setNameEmployee(resultSet.getString("bp"));
                employeeSsContributionUpdate.setCodeDepartament(resultSet.getString("code"));
                employeeSsContributionUpdate.setNameDepartament(resultSet.getString("name"));
                employeeSsContributionUpdate.setSalaryDaily(resultSet.getDouble("_sd"));
                employeeSsContributionUpdate.setSalarySscBase(resultSet.getDouble("sal_ssc"));
                employeeSsContributionUpdate.setDaysPeriod(mnPeriodDays);

                sql = "SELECT a.fk_cl_abs, ac.eff_day "
                        + "FROM " + SModConsts.TablesMap.get(SModConsts.HRS_ABS) + " AS a "
                        + "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.HRS_ABS_CNS) + " AS ac ON ac.id_emp = a.id_emp AND ac.id_abs = a.id_abs "
                        + "WHERE a.b_del = 0 AND ac.b_del = 0 AND ac.id_emp = " + employeeId + " AND ac.dt_sta >= '" + SLibUtils.DbmsDateFormatDate.format(mtDateStart) + "' "
                        + "AND ac.dt_end <= '" + SLibUtils.DbmsDateFormatDate.format(mtDateEnd) + "' "
                        + "ORDER BY ac.id_abs, ac.id_cns ";

                resultSetAux = statementAux.executeQuery(sql);
                while (resultSetAux.next()) {
                    switch (resultSetAux.getInt("a.fk_cl_abs")) {
                        case SModSysConsts.HRSU_CL_ABS_ABS:
                            employeeSsContributionUpdate.setDaysAbsenteeism(resultSetAux.getInt("ac.eff_day"));
                            break;
                        case SModSysConsts.HRSU_CL_ABS_DIS:
                            employeeSsContributionUpdate.setDaysIncapacity(resultSetAux.getInt("ac.eff_day"));
                            break;
                    }
                    //employeeSsContributionUpdate.setDaysSuspension(resultSetAux.getInt("id_emp"));
                    employeeSsContributionUpdate.setIsApply(false);
                }
                
                employeeSsContributionUpdate.getEarningsSsContributionUpdates().addAll(getEarnings(employeeId));
                employeeSsContributionUpdate.computeSSContribution();
                
                rows.add(employeeSsContributionUpdate);
            }
        }
        catch (Exception e) {
           SLibUtils.printException(this, e);
        }
        
        moGridEmployeesRow.populateGrid(rows, this);
        moGridEmployeesRow.resetSortKeys();
        moGridEmployeesRow.setSelectedGridRow(0);
        
        populateEarnings(null);
    }
    
    private void processEditingEarningAmount() {
        loadEmployeeSelected(true);
        moGridEmployeesRow.repaint();
    }
    
    private void populateEarnings(final SHrsEmployeeSsContributionUpdate employeeSsContributionUpdate) {
       Vector<SGridRow> rows = new Vector<SGridRow>();
       
       if (employeeSsContributionUpdate != null) {
           for (SHrsEarningsSsContributionUpdate contributionUpdate: employeeSsContributionUpdate.getEarningsSsContributionUpdates()) {
               rows.add(contributionUpdate);
           }
       }
       
       moGridEarnigsRow.populateGrid(rows);
       moGridEarnigsRow.resetSortKeys();
       moGridEarnigsRow.setSelectedGridRow(0);
    }
    
    private ArrayList<SHrsEarningsSsContributionUpdate> getEarnings(final int employeeId) {
       ArrayList<SHrsEarningsSsContributionUpdate> earningsSsContributionUpdate = null;
       SHrsEarningsSsContributionUpdate earningSsContributionUpdate = null;
       String sql = "";
       ResultSet resultSet = null;
       Statement statement = null;
       double amount = 0;

       try {
           earningsSsContributionUpdate = new ArrayList<SHrsEarningsSsContributionUpdate>();
           statement = miClient.getSession().getDatabase().getConnection().createStatement();

           sql = "SELECT e.id_ear, e.code, e.name, SUM(pre.amt_r) AS _amt "
                   + "FROM " + SModConsts.TablesMap.get(SModConsts.HRS_PAY) + " AS p "
                   + "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.HRS_PAY_RCP) + " AS pr ON pr.id_pay = p.id_pay "
                   + "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.HRS_PAY_RCP_EAR) + " AS pre ON pre.id_pay = pr.id_pay AND pre.id_emp = pr.id_emp "
                   + "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.HRS_EAR) + " AS e ON e.id_ear = pre.fk_ear "
                   + "WHERE p.b_del = 0 AND pr.b_del = 0 AND pre.b_del = 0 AND pr.id_emp = " + employeeId + " AND p.per_year = " + moIntPeriodYear.getValue() + " "
                   + "AND p.per BETWEEN " + moIntPeriodStart.getValue() + " AND " + moIntPeriodEnd.getValue() + " "
                   + "GROUP BY e.id_ear "
                   + "ORDER BY e.code, e.name ";

           resultSet = statement.executeQuery(sql);
           while (resultSet.next()) {
               earningSsContributionUpdate = new SHrsEarningsSsContributionUpdate();
               
               amount = resultSet.getDouble("_amt");
               
               earningSsContributionUpdate.setEarningId(resultSet.getInt("e.id_ear"));
               earningSsContributionUpdate.setCodeEarning(resultSet.getString("e.code"));
               earningSsContributionUpdate.setNameEarning(resultSet.getString("e.name"));
               earningSsContributionUpdate.setAmountSys(amount);
               earningSsContributionUpdate.setAmount(amount);
               
               earningsSsContributionUpdate.add(earningSsContributionUpdate);
           }
       }
       catch (Exception e) {
           SLibUtils.printException(this, e);
       }
       
       return earningsSsContributionUpdate;
    }
     
    private void loadEmployeeSelected(final boolean isEdit) {
        SHrsEmployeeSsContributionUpdate employeeSsContributionUpdate = null;
        SGridRow row = null;
        
        if (moGridEmployeesRow.getSelectedGridRow() == null) {
            miClient.showMsgBoxWarning(SGridConsts.MSG_SELECT_ROW);
        }
        else {
            row = moGridEmployeesRow.getSelectedGridRow();
            
            employeeSsContributionUpdate = (SHrsEmployeeSsContributionUpdate) row;
            
            populateEarnings(employeeSsContributionUpdate);
            
            moIntDaysPeriod.setValue(mnPeriodDays);
            moIntDaysIncapacity.setValue(employeeSsContributionUpdate.getDaysIncapacity());
            moIntDaysAbsenteeism.setValue(employeeSsContributionUpdate.getDaysAbsenteeism());
            moIntDaysSuspension.setValue(employeeSsContributionUpdate.getDaysSuspension());
            moIntDaysTotal.setValue(employeeSsContributionUpdate.getTotalDays());
            moDecTotalAmount.setValue(employeeSsContributionUpdate.getTotalAmountEarnings());
            if (isEdit) {
                employeeSsContributionUpdate.computeSSContribution();
            }
            moDecPaymentDailyProp.setValue(employeeSsContributionUpdate.getPaymentDailyProportional());
        }
    }
    
    @Override
    public void addAllListeners() {
        jbShowEmployee.addActionListener(this);
        jbCleanEmployee.addActionListener(this);
        jbSelectAll.addActionListener(this);
        jbCleanAll.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbShowEmployee.removeActionListener(this);
        jbCleanEmployee.removeActionListener(this);
        jbSelectAll.removeActionListener(this);
        jbCleanAll.removeActionListener(this);
    }

    @Override
    public void reloadCatalogues() {
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        
        if (validation.isValid()) {
            if (moIntPeriodStart.getValue() > moIntPeriodEnd.getValue()) {
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + SGuiUtils.getLabelName(jlPeriodEnd.getText()) + "'" + SGuiConsts.ERR_MSG_FIELD_VAL_GREAT_EQUAL + "'" + SGuiUtils.getLabelName(jlPeriodStart.getText()) + "'.");
                validation.setComponent(moIntPeriodEnd);
            }
        }
        
        return validation;
    }

    @Override
    public void setValue(final int type, final Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public Object getValue(final int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    
    @Override
    public void actionSave() {
        boolean save = true;
        Cursor cursor = null;
        SHrsEmployeeSsContributionUpdate row = null;
        ArrayList<SHrsEmployeeSsContributionUpdate> maHrsEmployeeSsContributionUpdate = null;
        
        if (SGuiUtils.computeValidation(miClient, validateForm())) {
            try {
                maHrsEmployeeSsContributionUpdate = new ArrayList<SHrsEmployeeSsContributionUpdate>();
                cursor = getCursor();
                setCursor(new Cursor(Cursor.WAIT_CURSOR));
                
                for (SGridRow rowAux : moGridEmployeesRow.getModel().getGridRows()) {
                    row = (SHrsEmployeeSsContributionUpdate) rowAux;
                    if (row.isApply()) {
                        if (row.getSalarySscBaseNew() <= 0) {
                             miClient.showMsgBoxWarning("El valor del SBC debe ser mayor a 0.");
                             save = false;
                             break;
                        }
                        else {
                            row.setDateSalarySscBase(moDateDateUpdate.getValue());
                            maHrsEmployeeSsContributionUpdate.add(row);
                        }
                    }
                }
                
                if (save) {
                    if (maHrsEmployeeSsContributionUpdate.isEmpty()) {
                        miClient.showMsgBoxWarning("No se ha seleccionado ningún empleado para actualizar.");
                    }
                    else {
                        for (SHrsEmployeeSsContributionUpdate employeeSsContributionUpdate : maHrsEmployeeSsContributionUpdate) {
                            employeeSsContributionUpdate.save(miClient.getSession());
                        }

                        mnFormResult = SGuiConsts.FORM_RESULT_OK;
                        dispose();
                    }
                }
            }
            catch (Exception e) {
                setCursor(cursor);
                SLibUtils.showException(this, e);
            }
            finally {
                setCursor(cursor);
            }
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            
            if (button == jbShowEmployee) {
                actionShowEmployee();
            }
            else if (button == jbCleanEmployee) {
                actionCleanEmployee();
            }
            else if (button == jbSelectAll) {
                actionSelectAll();
            }
            else if (button == jbCleanAll) {
                actionCleanAll();
            }
        }
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        if (!e.getValueIsAdjusting()) {
            if (moGridEmployeesRow.getTable().getSelectedRowCount() != -1 &&
                    moGridEmployeesRow.getSelectedGridRow() != null) {
                loadEmployeeSelected(false);
            }
        }
    }

    @Override
    public void editingStopped(ChangeEvent e) {
        switch (moGridEarnigsRow.getTable().getSelectedColumn()) {
            case COL_AMT:
                processEditingEarningAmount();
                break;
            default:
                break;
        }
    }

    @Override
    public void editingCanceled(ChangeEvent e) {
        throw new UnsupportedOperationException("Not supported yet.");
    }
}
