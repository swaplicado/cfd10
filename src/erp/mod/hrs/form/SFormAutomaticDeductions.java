/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.hrs.form;

import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import erp.mod.hrs.db.SDbAutomaticDeduction;
import erp.mod.hrs.db.SDbAutomaticDeductionsAux;
import erp.mod.hrs.db.SDbDeduction;
import erp.mod.hrs.db.SDbLoan;
import erp.mod.hrs.db.SHrsUtils;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JTextField;
import sa.lib.SLibConsts;
import sa.lib.SLibTimeUtils;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridPaneFormOwner;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiParams;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanForm;

/**
 *
 * @author Juan Barajas, Sergio Flores
 */
public class SFormAutomaticDeductions extends SBeanForm implements SGridPaneFormOwner, ActionListener, ItemListener {

    private SDbAutomaticDeductionsAux moRegistry;
    private ArrayList<SDbAutomaticDeduction> maAutomaticDeductions;
    private SDbDeduction moDeduction;
    private SGridPaneForm moGridAutomaticRow;

    /**
     * Creates new form SFormAutomaticDeductions
     */
    public SFormAutomaticDeductions(SGuiClient client, String title, int formSubType) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.HRSX_AUT_DED, formSubType, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel9 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jlEmployee = new javax.swing.JLabel();
        moKeyEmployee = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel1 = new javax.swing.JPanel();
        jlWarning = new javax.swing.JLabel();
        jpRow = new javax.swing.JPanel();
        jPanel25 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        moTextCode = new sa.lib.gui.bean.SBeanFieldText();
        jbPick = new javax.swing.JButton();
        jlDummy = new javax.swing.JLabel();
        jlLoan_n = new javax.swing.JLabel();
        jlValue = new javax.swing.JLabel();
        jlDateStart = new javax.swing.JLabel();
        jlDateEnd_n = new javax.swing.JLabel();
        jPanel24 = new javax.swing.JPanel();
        moTextName = new sa.lib.gui.bean.SBeanFieldText();
        moKeyLoan_n = new sa.lib.gui.bean.SBeanFieldKey();
        moComValue = new sa.lib.gui.bean.SBeanCompoundField();
        moDateDateStart = new sa.lib.gui.bean.SBeanFieldDate();
        moDateDateEnd_n = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel26 = new javax.swing.JPanel();
        moRadNormal = new sa.lib.gui.bean.SBeanFieldRadio();
        moRadSpecial = new sa.lib.gui.bean.SBeanFieldRadio();
        moRadExOrd = new sa.lib.gui.bean.SBeanFieldRadio();
        jbAdd = new javax.swing.JButton();
        jpRows = new javax.swing.JPanel();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel9.setLayout(new java.awt.BorderLayout());

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel7.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(2, 1));

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlEmployee.setText("Empleado:*");
        jlEmployee.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jlEmployee);

        moKeyEmployee.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel13.add(moKeyEmployee);

        jPanel2.add(jPanel13);

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWarning.setForeground(java.awt.Color.red);
        jlWarning.setText("[ADVERTENCIA]");
        jlWarning.setPreferredSize(new java.awt.Dimension(1000, 23));
        jPanel1.add(jlWarning);

        jPanel2.add(jPanel1);

        jPanel7.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        jPanel9.add(jPanel7, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel9, java.awt.BorderLayout.NORTH);

        jpRow.setBorder(javax.swing.BorderFactory.createTitledBorder("Deducciones:"));
        jpRow.setLayout(new java.awt.BorderLayout());

        jPanel25.setLayout(new java.awt.GridLayout(3, 1));

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING));

        moTextCode.setText("sBeanFieldText1");
        moTextCode.setToolTipText("Deducción");
        moTextCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                moTextCodeKeyPressed(evt);
            }
        });
        jPanel5.add(moTextCode);

        jbPick.setText("...");
        jbPick.setToolTipText("Seleccionar deducción");
        jbPick.setFocusable(false);
        jbPick.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel5.add(jbPick);

        jlDummy.setPreferredSize(new java.awt.Dimension(67, 23));
        jPanel5.add(jlDummy);

        jlLoan_n.setText("Crédito/préstamo:*");
        jlLoan_n.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel5.add(jlLoan_n);

        jlValue.setText("Valor:");
        jlValue.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel5.add(jlValue);

        jlDateStart.setText("Fecha inicial:*");
        jlDateStart.setPreferredSize(new java.awt.Dimension(102, 23));
        jPanel5.add(jlDateStart);

        jlDateEnd_n.setText("Fecha final:");
        jlDateEnd_n.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlDateEnd_n);

        jPanel25.add(jPanel5);

        jPanel24.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING));

        moTextName.setEditable(false);
        moTextName.setText("sBeanFieldText1");
        moTextName.setToolTipText("Nombre");
        moTextName.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel24.add(moTextName);

        moKeyLoan_n.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel24.add(moKeyLoan_n);

        moComValue.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel24.add(moComValue);

        moDateDateStart.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel24.add(moDateDateStart);

        moDateDateEnd_n.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel24.add(moDateDateEnd_n);

        jPanel25.add(jPanel24);

        jPanel26.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING));

        buttonGroup1.add(moRadNormal);
        moRadNormal.setText("Para nóminas normales");
        moRadNormal.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel26.add(moRadNormal);

        buttonGroup1.add(moRadSpecial);
        moRadSpecial.setText("Para nóminas especiales");
        moRadSpecial.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel26.add(moRadSpecial);

        buttonGroup1.add(moRadExOrd);
        moRadExOrd.setText("Para nóminas extraordinarias");
        moRadExOrd.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel26.add(moRadExOrd);

        jbAdd.setText("Agregar");
        jPanel26.add(jbAdd);

        jPanel25.add(jPanel26);

        jpRow.add(jPanel25, java.awt.BorderLayout.NORTH);

        jpRows.setLayout(new java.awt.BorderLayout());
        jpRow.add(jpRows, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpRow, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        super.windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void moTextCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_moTextCodeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_F5) {
            jbPick.doClick();
        }
    }//GEN-LAST:event_moTextCodeKeyPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbAdd;
    private javax.swing.JButton jbPick;
    private javax.swing.JLabel jlDateEnd_n;
    private javax.swing.JLabel jlDateStart;
    private javax.swing.JLabel jlDummy;
    private javax.swing.JLabel jlEmployee;
    private javax.swing.JLabel jlLoan_n;
    private javax.swing.JLabel jlValue;
    private javax.swing.JLabel jlWarning;
    private javax.swing.JPanel jpRow;
    private javax.swing.JPanel jpRows;
    private sa.lib.gui.bean.SBeanCompoundField moComValue;
    private sa.lib.gui.bean.SBeanFieldDate moDateDateEnd_n;
    private sa.lib.gui.bean.SBeanFieldDate moDateDateStart;
    private sa.lib.gui.bean.SBeanFieldKey moKeyEmployee;
    private sa.lib.gui.bean.SBeanFieldKey moKeyLoan_n;
    private sa.lib.gui.bean.SBeanFieldRadio moRadExOrd;
    private sa.lib.gui.bean.SBeanFieldRadio moRadNormal;
    private sa.lib.gui.bean.SBeanFieldRadio moRadSpecial;
    private sa.lib.gui.bean.SBeanFieldText moTextCode;
    private sa.lib.gui.bean.SBeanFieldText moTextName;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 1024, 640);

        moKeyEmployee.setKeySettings(miClient, SGuiUtils.getLabelName(jlEmployee.getText()), true);
        moTextCode.setTextSettings(SGuiUtils.getLabelName(""), 10, 0);
        moTextName.setTextSettings(SGuiUtils.getLabelName(""), 100, 0);
        moComValue.setCompoundFieldSettings(miClient);
        moComValue.getField().setDecimalSettings(SGuiUtils.getLabelName(jlValue), SGuiConsts.GUI_TYPE_DEC_AMT_UNIT, false);
        moDateDateStart.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateStart), false);
        moDateDateEnd_n.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateEnd_n), false);
        moKeyLoan_n.setKeySettings(miClient, SGuiUtils.getLabelName(jlLoan_n), false);
        moRadNormal.setBooleanSettings(SGuiUtils.getLabelName(moRadNormal.getText()), false);
        moRadSpecial.setBooleanSettings(SGuiUtils.getLabelName(moRadSpecial.getText()), false);
        moRadExOrd.setBooleanSettings(SGuiUtils.getLabelName(moRadExOrd.getText()), false);

        moFields.addField(moKeyEmployee);
        moFields.addField(moTextCode);
        //moFields.addField(moTextName);
        moFields.addField(moKeyLoan_n);
        moFields.addField(moComValue.getField());
        moFields.addField(moDateDateStart);
        moFields.addField(moDateDateEnd_n);
        moFields.addField(moRadNormal);
        moFields.addField(moRadSpecial);
        moFields.addField(moRadExOrd);

        moFields.setFormButton(jbAdd);

        moGridAutomaticRow = new SGridPaneForm(miClient, SModConsts.HRS_AUT_DED, SLibConsts.UNDEFINED, "Deducciones") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false, false, true);
            }

            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> gridColumnsForm = new ArrayList<>();

                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CAT, "Código deducción"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_L, "Deducción"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "Unidades"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_UNT, "Unidad", 50));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_QTY, "Valor"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DATE, "Fecha inicial"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DATE, "Fecha final"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_M, "Crédito/Préstamo"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT, "Tipo nómina"));

                return gridColumnsForm;
            }
        };

        moGridAutomaticRow.setForm(null);
        moGridAutomaticRow.setPaneFormOwner(this);

        jpRow.add(moGridAutomaticRow, BorderLayout.CENTER);
        
        switch (mnFormSubtype) {
            case SModSysConsts.HRS_AUT_EMP:
                jlWarning.setText("ADVERTENCIA: ¡Las deducciones configuradas a nivel de empleado reemplazarán a las deducciones configuradas a nivel global!");
                break;
            default:
                jlWarning.setText("");
        }
    }

    private void itemStateChangedEmployee() {
        resetLoan();
    }

    private void resetLoan() {
        if (mnFormSubtype == SModSysConsts.HRS_AUT_EMP && moKeyEmployee.getSelectedIndex() > 0 && moDeduction != null && moDeduction.isLoan()) {
            miClient.getSession().populateCatalogue(moKeyLoan_n, SModConsts.HRS_LOAN, SLibConsts.UNDEFINED, new SGuiParams(new int[] { moKeyEmployee.getValue()[0], moDeduction.getFkLoanTypeId() }));
            moKeyLoan_n.setEnabled(true);
            moComValue.getField().setEnabled(false);
        }
        else {
            moKeyLoan_n.removeAllItems();
            moKeyLoan_n.setEnabled(false);
            moComValue.getField().setEnabled(true);
        }
    }

    private void updateRows() {
        SDbAutomaticDeduction automaticRow = new SDbAutomaticDeduction();
        automaticRow.setPkDeductionId(moDeduction.getPkDeductionId());
        automaticRow.setUnits(moDeduction.isBasedOnUnits() ? moComValue.getField().getValue() : 1);
        automaticRow.setAmountUnitary(!moDeduction.isBasedOnUnits() ? moComValue.getField().getValue() : 0); // when necessary, amount unit will be provided by system
        automaticRow.setAmount_r(SLibUtils.roundAmount(automaticRow.getUnits() * automaticRow.getAmountUnitary()));
        automaticRow.setDateStart(moDateDateStart.getValue());
        automaticRow.setDateEnd_n(moDateDateEnd_n.getValue());
        automaticRow.setFkPaysheetTypeId(getPaysheetTypeId());
        automaticRow.setFkDeductionTypeId(moDeduction.getFkDeductionTypeId());
        automaticRow.setFkEmployeeId_n(mnFormSubtype != SModSysConsts.HRS_AUT_EMP ? 0 : moKeyEmployee.getValue()[0]);
        
        if (moKeyLoan_n.isEnabled() && moKeyLoan_n.getValue().length > 0) {
            automaticRow.setFkLoanEmployeeId_n(moKeyLoan_n.getValue()[0]);
            automaticRow.setFkLoanLoanId_n(moKeyLoan_n.getValue()[1]);
        }

        automaticRow.setXtaDeductionCode((String) miClient.getSession().readField(SModConsts.HRS_DED, new int[] { moDeduction.getPkDeductionId() }, SDbRegistry.FIELD_CODE));
        automaticRow.setXtaDeduction((String) miClient.getSession().readField(SModConsts.HRS_DED, new int[] { moDeduction.getPkDeductionId() }, SDbRegistry.FIELD_NAME));
        automaticRow.setXtaUnit((String) miClient.getSession().readField(SModConsts.HRSS_TP_DED_COMP, new int[] { moDeduction.getFkDeductionComputationTypeId() }, SDbRegistry.FIELD_CODE));
        automaticRow.setXtaPaysheetType((String) miClient.getSession().readField(SModConsts.HRSS_TP_PAY_SHT, new int[] { getPaysheetTypeId() }, SDbRegistry.FIELD_NAME));
        
        if (moKeyLoan_n.isEnabled() && moKeyLoan_n.getValue().length > 0) {
            SDbLoan loan = (SDbLoan) miClient.getSession().readRegistry(SModConsts.HRS_LOAN, new int[] { moKeyLoan_n.getValue()[0], moKeyLoan_n.getValue()[1] });
            automaticRow.setXtaLoan(loan.composeLoanDescription());
        }

        SGridRow gridRow = (SGridRow) automaticRow;
        moGridAutomaticRow.getModel().getGridRows().add(gridRow);
        moGridAutomaticRow.getModel().renderGridRows();

        int row = moGridAutomaticRow.getModel().getRowCount() - 1;
        moGridAutomaticRow.setSelectedGridRow(row);
    }

    private void populateAutomaticRow() throws Exception {
        Vector<SGridRow> rows = new Vector<>();

        for (SDbAutomaticDeduction row : moRegistry.getAutomaticDeductions()) {
            SDbDeduction deduction = (SDbDeduction) miClient.getSession().readRegistry(SModConsts.HRS_DED, new int[] { row.getPkDeductionId() });

            row.setXtaDeductionCode((String) miClient.getSession().readField(SModConsts.HRS_DED, new int[] { row.getPkDeductionId() }, SDbRegistry.FIELD_CODE));
            row.setXtaDeduction((String) miClient.getSession().readField(SModConsts.HRS_DED, new int[] { row.getPkDeductionId() }, SDbRegistry.FIELD_NAME));
            row.setXtaUnit((String) miClient.getSession().readField(SModConsts.HRSS_TP_DED_COMP, new int[] { deduction.getFkDeductionComputationTypeId() }, SDbRegistry.FIELD_CODE));
            row.setXtaPaysheetType((String) miClient.getSession().readField(SModConsts.HRSS_TP_PAY_SHT, new int[] { row.getFkPaysheetTypeId() }, SDbRegistry.FIELD_NAME));
            
            if (row.getFkLoanEmployeeId_n() != SLibConsts.UNDEFINED) {
                SDbLoan loan = (SDbLoan) miClient.getSession().readRegistry(SModConsts.HRS_LOAN, new int[] { row.getFkLoanEmployeeId_n(), row.getFkLoanLoanId_n() });
                row.setXtaLoan(loan.composeLoanDescription());
            }

            if (!row.isDeleted()) {
                rows.add(row);
            }
        }

        moGridAutomaticRow.populateGrid(rows);
        moGridAutomaticRow.clearSortKeys();
        moGridAutomaticRow.setSelectedGridRow(0);
    }

    private void enableFields() {
        if (mnFormSubtype == SModSysConsts.HRS_AUT_EMP && moGridAutomaticRow.getTable().getRowCount() == 0) {
            moKeyEmployee.setEnabled(true);
        }
        else {
            moKeyEmployee.setEnabled(false);
        }
    }

    private void resetFields() {
        moTextCode.resetField();
        moTextName.resetField();
        moComValue.getField().resetField();
        moComValue.setCompoundText("");
        moDateDateStart.setValue(SLibTimeUtils.getBeginOfMonth(miClient.getSession().getCurrentDate()));
        moDateDateEnd_n.resetField();
        moKeyLoan_n.resetField();
        moKeyLoan_n.setEnabled(false);
        moRadNormal.setSelected(true);

        moTextCode.requestFocusInWindow();
    }
    
    private int getPaysheetTypeId() {
        int type = SLibConsts.UNDEFINED;
        
        if (moRadNormal.isSelected()) {
            type = SModSysConsts.HRSS_TP_PAY_SHT_NOR;
        }
        else if (moRadSpecial.isSelected()) {
            type = SModSysConsts.HRSS_TP_PAY_SHT_SPE;
        }
        else if (moRadExOrd.isSelected()) {
            type = SModSysConsts.HRSS_TP_PAY_SHT_EXT;
        }
        
        return type;
    }

    private void actionPick() {
        miClient.getSession().showOptionPicker(SModConsts.HRS_DED, SLibConsts.UNDEFINED, null, moTextCode);
        actionCode();
    }

    private void actionCode() {
        try {
            moDeduction = SHrsUtils.getDeduction(miClient, SLibUtils.textTrim(moTextCode.getText()));
        }
        catch (Exception e) {
            SLibUtils.printException(this, e);
        }

        if (moDeduction == null) {
            miClient.showMsgBoxWarning("No se encontró ninguna deducción con el código '" + moTextCode.getText() + "'.");
            moTextCode.requestFocusInWindow();
        }
        else {
            if (moDeduction.isBenefit()) {
                miClient.showMsgBoxWarning("No se pueden agregar deducciones automáticas de tipo prestación.");
                moTextCode.requestFocusInWindow();
            }
            else if (moDeduction.isAbsence()) {
                miClient.showMsgBoxWarning("No se pueden agregar deducciones automáticas de tipo incidencia.");
                moTextCode.requestFocusInWindow();
            }
            else if (moDeduction.isLoan() && mnFormSubtype == SModSysConsts.HRS_AUT_GBL) {
                miClient.showMsgBoxWarning("No se pueden agregar deducciones automáticas de tipo crédito/préstamo de forma global.");
                moTextCode.requestFocusInWindow();
            }
            else {
                moTextName.setValue(moDeduction.getName());
                moComValue.setCompoundText((String) miClient.getSession().readField(SModConsts.HRSS_TP_DED_COMP, new int[] { moDeduction.getFkDeductionComputationTypeId() }, SDbRegistry.FIELD_CODE));
                moComValue.getField().getComponent().requestFocusInWindow();
                if (moDeduction.isComputedByPercentage()) {
                    moComValue.getField().setValue(moDeduction.getRetPercentage());
                }

                resetLoan();
            }
        }
    }

    private void actionAdd() {
        if (moDeduction == null) {
            miClient.showMsgBoxWarning(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(moTextCode.getToolTipText()) + "'. ");
            moTextCode.requestFocusInWindow();
        }
        else if (mnFormSubtype == SModSysConsts.HRS_AUT_GBL && moDeduction.isLoan()) {
            miClient.showMsgBoxWarning(SGuiConsts.ERR_MSG_FIELD_DIF + "'" + SGuiUtils.getLabelName(moTextCode.getToolTipText()) + "'. ");
            moTextCode.requestFocusInWindow();
        }
        else if (mnFormSubtype == SModSysConsts.HRS_AUT_EMP && moDeduction.isLoan() && moKeyLoan_n.getSelectedIndex() <= 0) {
            miClient.showMsgBoxWarning(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlLoan_n.getText()) + "'. ");
            moKeyLoan_n.requestFocusInWindow();
        }
        else if (mnFormSubtype == SModSysConsts.HRS_AUT_EMP && moKeyEmployee.getSelectedIndex() <= 0) {
            miClient.showMsgBoxWarning(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlEmployee.getText()) + "'. ");
            moKeyEmployee.requestFocusInWindow();
        }
        else if (moDateDateStart.getValue() == null) {
            miClient.showMsgBoxWarning(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlDateStart.getText()) + "'. ");
            moDateDateStart.requestFocusInWindow();
        }
        else if (moDateDateEnd_n.getValue() != null && moDateDateEnd_n.getValue().before(moDateDateStart.getValue())) {
            miClient.showMsgBoxWarning(SGuiConsts.ERR_MSG_FIELD_DATE_ + "'" + SGuiUtils.getLabelName(jlDateEnd_n.getText()) + "' " +
                    SGuiConsts.ERR_MSG_FIELD_DATE_GREAT_EQUAL + SGuiConsts.ERR_MSG_FIELD_DATE_.toLowerCase() + " '" + SGuiUtils.getLabelName(jlDateStart.getText()) + "'.");
            moDateDateEnd_n.requestFocusInWindow();
        }
        else {
            updateRows();
            resetFields();
            enableFields();
        }
    }
    
    @Override
    public void addAllListeners() {
        moTextCode.addActionListener(this);
        jbPick.addActionListener(this);
        jbAdd.addActionListener(this);
        moKeyEmployee.addItemListener(this);
    }

    @Override
    public void removeAllListeners() {
        moTextCode.removeActionListener(this);
        jbPick.removeActionListener(this);
        jbAdd.removeActionListener(this);
        moKeyEmployee.removeItemListener(this);
    }

    @Override
    public void reloadCatalogues() {
        try {
            populateAutomaticRow();
            miClient.getSession().populateCatalogue(moKeyEmployee, SModConsts.HRSU_EMP, SLibConsts.UNDEFINED, null);
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbAutomaticDeductionsAux) registry;

        moDeduction = null;
        maAutomaticDeductions = new ArrayList<>();

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;
        removeAllListeners();
        reloadCatalogues();

        jtfRegistryKey.setText("");

        resetFields();

        setFormEditable(true);

        moKeyLoan_n.setEnabled(false);
        moKeyEmployee.setEnabled(false);

        if (mnFormSubtype == SModSysConsts.HRS_AUT_EMP) {
            enableFields();

            if (!moRegistry.getAutomaticDeductions().isEmpty()) {
                moKeyEmployee.setValue(new int[] { moRegistry.getAutomaticDeductions().get(0).getFkEmployeeId_n() });
            }
        }

        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbAutomaticDeductionsAux registry = moRegistry.clone();

        if (registry.isRegistryNew()) {}

        for (SGridRow row : moGridAutomaticRow.getModel().getGridRows()) {
            registry.getAutomaticDeductions().add((SDbAutomaticDeduction) row);
        }

        for (SGridRow row : maAutomaticDeductions) {
             registry.getAutomaticDeductions().add((SDbAutomaticDeduction) row);
         }

        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        return validation;
    }

    @Override
    public void notifyRowNew(int gridType, int gridSubtype, int row, SGridRow gridRow) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void notifyRowEdit(int gridType, int gridSubtype, int row, SGridRow gridRow) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void notifyRowDelete(int gridType, int gridSubtype, int row, SGridRow gridRow) {
        SDbAutomaticDeduction automaticDeduction = null;

        automaticDeduction = (SDbAutomaticDeduction) gridRow;

        if (!automaticDeduction.isRegistryNew()) {
            automaticDeduction.setDeleted(true);
            maAutomaticDeductions.add(automaticDeduction);
        }
        enableFields();
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbPick) {
                actionPick();
            }
            else if (button == jbAdd) {
                actionAdd();
            }
        }
        else if (e.getSource() instanceof JTextField) {
            JTextField textField = (JTextField) e.getSource();

            if (textField == moTextCode) {
                actionCode();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof JComboBox && e.getStateChange() == ItemEvent.SELECTED) {
            JComboBox comboBox = (JComboBox)  e.getSource();

            if (comboBox == moKeyEmployee) {
                itemStateChangedEmployee();
            }
        }
    }
}
