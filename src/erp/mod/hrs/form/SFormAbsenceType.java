/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.hrs.form;

import erp.mod.SModConsts;
import erp.mod.hrs.db.SDbAbsenceClass;
import erp.mod.hrs.db.SDbAbsenceType;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFieldKey;
import sa.lib.gui.bean.SBeanForm;

/**
 *
 * @author Sergio Flores
 */
public class SFormAbsenceType extends SBeanForm implements ItemListener {

    private SDbAbsenceType moRegistry;

    /**
     * Creates new form SFormAbsenceType
     */
    public SFormAbsenceType(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.HRSU_TP_ABS, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jlAbsenceClass = new javax.swing.JLabel();
        moKeyAbsenceClass = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel4 = new javax.swing.JPanel();
        jlCode = new javax.swing.JLabel();
        moTextCode = new sa.lib.gui.bean.SBeanFieldText();
        jPanel5 = new javax.swing.JPanel();
        jlName = new javax.swing.JLabel();
        moTextName = new sa.lib.gui.bean.SBeanFieldText();
        jPanel7 = new javax.swing.JPanel();
        jlDisabilityType = new javax.swing.JLabel();
        moKeyDisabilityType = new sa.lib.gui.bean.SBeanFieldKey();
        moBoolPayable = new sa.lib.gui.bean.SBeanFieldBoolean();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAbsenceClass.setForeground(new java.awt.Color(0, 0, 255));
        jlAbsenceClass.setText("Clase incidencia:*");
        jlAbsenceClass.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlAbsenceClass);

        moKeyAbsenceClass.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel6.add(moKeyAbsenceClass);

        jPanel2.add(jPanel6);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCode.setText("CÃ³digo:*");
        jlCode.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlCode);

        moTextCode.setText("sBeanFieldText1");
        jPanel4.add(moTextCode);

        jPanel2.add(jPanel4);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlName.setText("Nombre:*");
        jlName.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlName);

        moTextName.setText("sBeanFieldText1");
        moTextName.setPreferredSize(new java.awt.Dimension(350, 23));
        jPanel5.add(moTextName);

        jPanel2.add(jPanel5);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDisabilityType.setText("Tipo incapacidad:*");
        jlDisabilityType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlDisabilityType);

        moKeyDisabilityType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel7.add(moKeyDisabilityType);

        jPanel2.add(jPanel7);

        moBoolPayable.setText("Se paga");
        jPanel2.add(moBoolPayable);

        jPanel1.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JLabel jlAbsenceClass;
    private javax.swing.JLabel jlCode;
    private javax.swing.JLabel jlDisabilityType;
    private javax.swing.JLabel jlName;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolPayable;
    private sa.lib.gui.bean.SBeanFieldKey moKeyAbsenceClass;
    private sa.lib.gui.bean.SBeanFieldKey moKeyDisabilityType;
    private sa.lib.gui.bean.SBeanFieldText moTextCode;
    private sa.lib.gui.bean.SBeanFieldText moTextName;
    // End of variables declaration//GEN-END:variables

    /*
     * Private methods
     */

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 480, 300);

        moKeyAbsenceClass.setKeySettings(miClient, SGuiUtils.getLabelName(jlAbsenceClass), true);
        moTextCode.setTextSettings(SGuiUtils.getLabelName(jlCode.getText()), 10);
        moTextName.setTextSettings(SGuiUtils.getLabelName(jlName.getText()), 100);
        moKeyDisabilityType.setKeySettings(miClient, SGuiUtils.getLabelName(jlDisabilityType), true);
        moBoolPayable.setBooleanSettings(moBoolPayable.getText(), false);

        moFields.addField(moKeyAbsenceClass);
        moFields.addField(moTextCode);
        moFields.addField(moTextName);
        moFields.addField(moKeyDisabilityType);
        moFields.addField(moBoolPayable);

        moFields.setFormButton(jbSave);
    }

    private void itemStateAbsenceClass() {
        if (moKeyAbsenceClass.getSelectedIndex() <= 0) {
            moKeyDisabilityType.setEnabled(false);
            moKeyDisabilityType.setSelectedIndex(0);
        }
        else if (SDbAbsenceClass.isDisability(moKeyAbsenceClass.getValue()[0])) {
            moKeyDisabilityType.setEnabled(true);
        }
        else {
            moKeyDisabilityType.setEnabled(false);
            moKeyDisabilityType.setSelectedIndex(0);
        }
    }

    /*
     * Public methods
     */

    @Override
    public void addAllListeners() {
        moKeyAbsenceClass.addItemListener(this);
    }

    @Override
    public void removeAllListeners() {
        moKeyAbsenceClass.removeItemListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyAbsenceClass, SModConsts.HRSU_CL_ABS, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyDisabilityType, SModConsts.HRSS_TP_DIS, SLibConsts.UNDEFINED, null);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        int absenceClass = SLibConsts.UNDEFINED;

        moRegistry = (SDbAbsenceType) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        absenceClass = moRegistry.getPkAbsenceClassId();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            moRegistry.setSystem(false);    // all editable registries are non-system
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        moKeyAbsenceClass.setValue(new int[] { absenceClass });
        moTextName.setValue(moRegistry.getName());
        moTextCode.setValue(moRegistry.getCode());
        moKeyDisabilityType.setValue(new int[] { moRegistry.getFkDisabilityTypeId_n() });
        moBoolPayable.setValue(moRegistry.isPayable());

        setFormEditable(true);

        if (moRegistry.isRegistryNew()) {
            moKeyAbsenceClass.setEnabled(true);
        }
        else {
            moKeyAbsenceClass.setEnabled(false);
        }

        moKeyDisabilityType.setEnabled(moKeyAbsenceClass.getSelectedIndex() > 0 && SDbAbsenceClass.isDisability(moKeyAbsenceClass.getValue()[0]));

        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbAbsenceType registry = moRegistry.clone();

        if (registry.isRegistryNew()) {
            registry.setPkAbsenceClassId(moKeyAbsenceClass.getValue()[0]);
        }

        registry.setName(moTextName.getValue());
        registry.setCode(moTextCode.getValue());
        registry.setFkDisabilityTypeId_n(SDbAbsenceClass.isDisability(moKeyAbsenceClass.getValue()[0]) ? moKeyDisabilityType.getValue()[0] : 0);
        registry.setPayable(moBoolPayable.getValue());

        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        return validation;
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof SBeanFieldKey) {
            SBeanFieldKey field = (SBeanFieldKey) e.getSource();

            if (field == moKeyAbsenceClass) {
                itemStateAbsenceClass();
            }
        }
    }
}
