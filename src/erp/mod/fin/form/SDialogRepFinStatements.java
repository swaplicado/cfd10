/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.fin.form;

import erp.SClient;
import erp.client.SClientInterface;
import erp.mod.SModConsts;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Calendar;
import java.util.HashMap;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import reporter.SReporter;
import reporter.SUserDataSource;
import reporter.SUserParam;
import reporter.xml.SEnumDataSourceType;
import reporter.xml.SEnumDataType;
import reporter.xml.SEnumReportType;
import sa.lib.SLibTimeUtils;
import sa.lib.SLibUtils;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanDialogReport;

/**
 *
 * @author Alfredo Pérez
 */
public class SDialogRepFinStatements extends SBeanDialogReport implements ActionListener {

    /**
     * Creates new form SDialogRepFinStatements
     * @param client
     * @param title
     */
    public SDialogRepFinStatements(SGuiClient client, String title) {
        setFormSettings(client, SModConsts.FINR_CSH_FLW_EXP, 0, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jlDateStart = new javax.swing.JLabel();
        moDateStart = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel3 = new javax.swing.JPanel();
        jlDateEnd = new javax.swing.JLabel();
        moDateEnd = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel4 = new javax.swing.JPanel();
        jlFile = new javax.swing.JLabel();
        jtfFile = new javax.swing.JTextField();
        jbPickFile = new javax.swing.JButton();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Parámetros del reporte:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateStart.setText("Fecha inicial:*");
        jlDateStart.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlDateStart);
        jPanel11.add(moDateStart);

        jPanel2.add(jPanel11);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateEnd.setText("Fecha final:*");
        jlDateEnd.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlDateEnd);
        jPanel3.add(moDateEnd);

        jPanel2.add(jPanel3);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFile.setText("Archivo salida:*");
        jlFile.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlFile);

        jtfFile.setEditable(false);
        jtfFile.setFocusable(false);
        jtfFile.setPreferredSize(new java.awt.Dimension(450, 23));
        jPanel4.add(jtfFile);

        jbPickFile.setText("...");
        jbPickFile.setToolTipText("Seleccionar archivo...");
        jbPickFile.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel4.add(jbPickFile);

        jPanel2.add(jPanel4);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JButton jbPickFile;
    private javax.swing.JLabel jlDateEnd;
    private javax.swing.JLabel jlDateStart;
    private javax.swing.JLabel jlFile;
    private javax.swing.JTextField jtfFile;
    private sa.lib.gui.bean.SBeanFieldDate moDateEnd;
    private sa.lib.gui.bean.SBeanFieldDate moDateStart;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 640, 400);

        moDateStart.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateStart.getText()), true);
        moDateEnd.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateEnd.getText()), true);

        moFields.addField(moDateStart);
        moFields.addField(moDateEnd);

        moFields.setFormButton(jbPrint);

        moDateStart.setValue(SLibTimeUtils.getBeginOfMonth(miClient.getSession().getCurrentDate()));
        moDateEnd.setValue(SLibTimeUtils.getEndOfMonth(miClient.getSession().getCurrentDate()));

        jbPickFile.addActionListener(this);
    }

    private void actionPerformedPickFile() {
        if (miClient.getFileChooser().showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            jtfFile.setText(miClient.getFileChooser().getSelectedFile().getAbsolutePath());
            jtfFile.setCaretPosition(0);
        }
    }
    
    private HashMap<String, SUserParam> createUserParams() {
        HashMap<String, SUserParam> userParams = new HashMap<>();
        
        try {
            String[] months = SLibTimeUtils.createMonthsOfYearStd(Calendar.LONG);
            userParams.put("tFechaIni", new SUserParam("tFechaIni", SEnumDataType.DATE, moDateStart.getValue()));
            userParams.put("tFechaFin", new SUserParam("tFechaFin", SEnumDataType.DATE, moDateEnd.getValue()));
            userParams.put("sMes", new SUserParam("sMes", SEnumDataType.STRING, months[SLibTimeUtils.digestMonth(moDateEnd.getValue())[1] - 1]));
            userParams.put("tMesIni", new SUserParam("tMesIni", SEnumDataType.STRING, SLibTimeUtils.getBeginOfMonth(moDateEnd.getValue())));
            userParams.put("sCuentaTraspasoCompras", new SUserParam("sCuentaTraspasoCompras", SEnumDataType.STRING, "5100-9999-0000"));
            userParams.put("sCuentaGastosProd", new SUserParam("sCuentaGastosProd", SEnumDataType.STRING, "6000-0003-0000"));
            userParams.put("sCentroCostoRefacturacion", new SUserParam("sCentroCostoRefacturacion", SEnumDataType.STRING, "900-00-00-000"));
            userParams.put("sItemTraspasoGastosProd", new SUserParam("sItemTraspasoGastosProd", SEnumDataType.STRING, "GP9998"));
            userParams.put("sCentroCostoRefacturacion", new SUserParam("sCentroCostoRefacturacion", SEnumDataType.STRING, "900-00-00-000"));
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
        
        return userParams;
    }

    private HashMap<String, SUserDataSource> createUserDataSources() {
        HashMap<String, SUserDataSource> userDataSources = new HashMap<>();
        
        try {
            String host = ((SClient) miClient).getParamsApp().getDatabaseHostClt();
            String port = ((SClient) miClient).getParamsApp().getDatabasePortClt();
            String database = ((SClientInterface) miClient).getSessionXXX().getCompany().getDatabase();
            
            userDataSources.put("Ventas", new SUserDataSource("Ventas", SEnumDataSourceType.MYSQL, host, port, database, "query", "msquery"));
            userDataSources.put("CuentasMayor", new SUserDataSource("CuentasMayor", SEnumDataSourceType.MYSQL, host, port, database, "query", "msquery"));
            userDataSources.put("Compras", new SUserDataSource("Compras", SEnumDataSourceType.MYSQL, host, port, database, "query", "msquery"));
            userDataSources.put("CentrosCosto", new SUserDataSource("CentrosCosto", SEnumDataSourceType.MYSQL, host, port, database, "query", "msquery"));
            userDataSources.put("CentrosCostoItems", new SUserDataSource("CentrosCostoItems", SEnumDataSourceType.MYSQL, host, port, database, "query", "msquery"));
            userDataSources.put("CuentasMayorSaldos", new SUserDataSource("CuentasMayorSaldos", SEnumDataSourceType.MYSQL, host, port, database, "query", "msquery"));
            userDataSources.put("CuentasNivel2", new SUserDataSource("CuentasNivel2", SEnumDataSourceType.MYSQL, host, port, database, "query", "msquery"));
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }

        return userDataSources;
    }
    
    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            validation = SGuiUtils.validateDateRange(moDateStart, moDateEnd);

            if (validation.isValid()) {
                if (jtfFile.getText().isEmpty()) {
                    validation.setMessage(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlFile) + "'.");
                    validation.setComponent(jbPickFile);
                }
            }
        }

        return validation;
    }

    @Override
    public void actionPrint() {
        if (jbPrint.isEnabled()) {
            if (SGuiUtils.computeValidation(miClient, validateForm())) {
                try {
                    new SReporter().generateReport("reps/rbi_fin_statements.xml", jtfFile.getText(), SEnumReportType.EXCEL, createUserParams(), createUserDataSources());
                }
                catch (Exception e) {
                    SLibUtils.showException(this, e);
                }
                
                if (mbCloseOnPrint) {
                    dispose();
                }
            }
        }
    }

    @Override
    public void createParamsMap() {
        
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            if (button == jbPickFile) {
                actionPerformedPickFile();
            }
        }
    }
}
