/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.fin.form;

import erp.client.SClientInterface;
import erp.data.SDataConstants;
import erp.data.SDataReadDescriptions;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.lib.table.STableConstants;
import erp.mfin.data.SDataAccountCash;
import erp.mfin.data.SDataRecord;
import erp.mfin.form.SDialogRecordPicker;
import erp.mod.SModConsts;
import erp.mod.fin.db.SAnalystDepositRow;
import erp.mod.fin.db.SDbBankLayoutDeposits;
import erp.mod.fin.db.SDbBankLayoutDepositsAnalyst;
import erp.mod.fin.db.SFinConsts;
import erp.mod.fin.util.SImportPayments;
import erp.redis.SRedisLockUtils;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import sa.lib.SLibTimeUtils;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanForm;
import sa.lib.srv.SSrvLock;
import sa.lib.srv.SSrvUtils;
import sa.lib.srv.redis.SRedisLock;

/**
 *
 * @author Edwin Carmona
 */
public class SFormImportPayments extends SBeanForm implements ActionListener, ItemListener, CellEditorListener {    
    private static final int COL_APPLICATION = 11;
    private static final int COL_REFERENCE = 12;
    private static final int COL_EXCH_RATE = 13;
    
    private static final int ST_REGISTRY_NEW = 1;
    private static final int ST_SELECT_LAY = 2;
    private static final int ST_OPEN_REGISTRY = 3;
    private static final int ST_MOD_REGISTRY = 4;

    private JButton jbCleanExR;
    private JButton jbUpdateExR;
    private JButton jbSelectAll;
    private JButton jbCleanAll;
    private JCheckBox jckCurrentAnalyst;

    private SDbBankLayoutDeposits moRegistry;
    private SDbBankLayoutDepositsAnalyst moChildRegistry;    
    private erp.mfin.form.SDialogRecordPicker moDialogRecordPicker;
    private erp.mfin.data.SDataRecord moCurrentRecord;
    private SGridPaneForm moGridPayments;
    ArrayList<SAnalystDepositRow> maAllDeposits;
    Vector<SGridRow> mvDeposits;
    
    private int[] maAccountKey;
    private int mnCurrencyId;
    SImportPayments moImportation;
    private int mnOptionEdit;
    private int mnIndexPayment;
    private int renderOption;
    
    private HashMap<Integer, Object> moParamsMap;
    private ArrayList<SSrvLock> maLocks;
    private ArrayList<SRedisLock> maRedisLocks;
    

    /**
     * Creates new form SFormImportPayments
     * @param client
     * @param formSubtype
     * @param title
     */
    public SFormImportPayments(SGuiClient client, int formSubtype, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.FIN_LAY_BANK_DEP, formSubtype, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel23 = new javax.swing.JPanel();
        jPanel24 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        jlLayoutPath = new javax.swing.JLabel();
        moTextLayoutPath = new sa.lib.gui.bean.SBeanFieldText();
        jbLayoutPath = new javax.swing.JButton();
        jPanel32 = new javax.swing.JPanel();
        jlFileName = new javax.swing.JLabel();
        moFileName = new sa.lib.gui.bean.SBeanFieldText();
        jPanel4 = new javax.swing.JPanel();
        jlDateImportation = new javax.swing.JLabel();
        moDepositsDate = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel20 = new javax.swing.JPanel();
        jlFolio = new javax.swing.JLabel();
        moRegistryNumber = new sa.lib.gui.bean.SBeanFieldText();
        jPanel11 = new javax.swing.JPanel();
        jlRecord = new javax.swing.JLabel();
        moRecordDate = new javax.swing.JTextField();
        moRecordBranch = new javax.swing.JTextField();
        moRecordBkc = new javax.swing.JTextField();
        moRecordNumber = new javax.swing.JTextField();
        jbPickRecord = new javax.swing.JButton();
        jPanel43 = new javax.swing.JPanel();
        jlAccountBank = new javax.swing.JLabel();
        moBankAccount = new sa.lib.gui.bean.SBeanFieldText();
        jPanel25 = new javax.swing.JPanel();
        jlCurrency = new javax.swing.JLabel();
        moCurrency = new sa.lib.gui.bean.SBeanFieldText();
        jPanel14 = new javax.swing.JPanel();
        jPanel26 = new javax.swing.JPanel();
        jPanel27 = new javax.swing.JPanel();
        jlPaymentsFile = new javax.swing.JLabel();
        moPaymentsFile = new sa.lib.gui.bean.SBeanFieldInteger();
        jPanel30 = new javax.swing.JPanel();
        jlAmountFile = new javax.swing.JLabel();
        moAmountFile = new sa.lib.gui.bean.SBeanFieldDecimal();
        moCurPayFile = new sa.lib.gui.bean.SBeanFieldText();
        jPanel31 = new javax.swing.JPanel();
        jlAnalystPayments = new javax.swing.JLabel();
        moAnalystPayments = new sa.lib.gui.bean.SBeanFieldInteger();
        jPanel28 = new javax.swing.JPanel();
        jlAmountAnalyst = new javax.swing.JLabel();
        moAmountAnalyst = new sa.lib.gui.bean.SBeanFieldDecimal();
        moCurPayAna = new sa.lib.gui.bean.SBeanFieldText();
        jPanel39 = new javax.swing.JPanel();
        jlImportedPayments = new javax.swing.JLabel();
        moImportedPayments = new sa.lib.gui.bean.SBeanFieldInteger();
        jPanel29 = new javax.swing.JPanel();
        jlImportedAmount = new javax.swing.JLabel();
        moAmountImported = new sa.lib.gui.bean.SBeanFieldDecimal();
        moCurImported = new sa.lib.gui.bean.SBeanFieldText();
        jPanel36 = new javax.swing.JPanel();
        jlImportedAmountLoc = new javax.swing.JLabel();
        moAmountImportedLoc = new sa.lib.gui.bean.SBeanFieldDecimal();
        moCurImportedLoc = new sa.lib.gui.bean.SBeanFieldText();
        jPanel35 = new javax.swing.JPanel();
        jPanel33 = new javax.swing.JPanel();
        jlAnalyst = new javax.swing.JLabel();
        moAnalyst = new sa.lib.gui.bean.SBeanFieldText();
        jPanel34 = new javax.swing.JPanel();
        moDeleted = new sa.lib.gui.bean.SBeanFieldBoolean();
        jPanel41 = new javax.swing.JPanel();
        jPanel42 = new javax.swing.JPanel();
        jPanel37 = new javax.swing.JPanel();
        jPanel38 = new javax.swing.JPanel();
        jPanel21 = new javax.swing.JPanel();
        jpSettings = new javax.swing.JPanel();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel23.setPreferredSize(new java.awt.Dimension(511, 230));
        jPanel23.setLayout(new java.awt.GridLayout(1, 0));

        jPanel24.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel24.setPreferredSize(new java.awt.Dimension(511, 225));
        jPanel24.setRequestFocusEnabled(false);
        jPanel24.setLayout(new java.awt.GridLayout(1, 2));

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel13.setPreferredSize(new java.awt.Dimension(411, 120));
        jPanel13.setRequestFocusEnabled(false);
        jPanel13.setLayout(new java.awt.GridLayout(7, 1));

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlLayoutPath.setText("Seleccionar archivo:*");
        jlLayoutPath.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel17.add(jlLayoutPath);

        moTextLayoutPath.setEditable(false);
        moTextLayoutPath.setText("OPEN FILE");
        moTextLayoutPath.setMaxLength(230);
        moTextLayoutPath.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel17.add(moTextLayoutPath);

        jbLayoutPath.setText("jButton1");
        jbLayoutPath.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel17.add(jbLayoutPath);

        jPanel13.add(jPanel17);

        jPanel32.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFileName.setText("Nombre archivo:");
        jlFileName.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel32.add(jlFileName);

        moFileName.setEditable(false);
        moFileName.setText("NAME FILE");
        moFileName.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel32.add(moFileName);

        jPanel13.add(jPanel32);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateImportation.setText("Fecha importaci√≥n:");
        jlDateImportation.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel4.add(jlDateImportation);

        moDepositsDate.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel4.add(moDepositsDate);

        jPanel13.add(jPanel4);

        jPanel20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFolio.setText("Folio: ");
        jlFolio.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel20.add(jlFolio);

        moRegistryNumber.setEditable(false);
        moRegistryNumber.setText("0");
        moRegistryNumber.setEnabled(false);
        jPanel20.add(moRegistryNumber);

        jPanel13.add(jPanel20);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlRecord.setText("P√≥liza contable:");
        jlRecord.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel11.add(jlRecord);

        moRecordDate.setEditable(false);
        moRecordDate.setText("01/01/2000");
        moRecordDate.setToolTipText("Fecha de la p√≥liza contable");
        moRecordDate.setFocusable(false);
        moRecordDate.setPreferredSize(new java.awt.Dimension(65, 23));
        jPanel11.add(moRecordDate);

        moRecordBranch.setEditable(false);
        moRecordBranch.setText("BRA");
        moRecordBranch.setToolTipText("Sucursal de la empresa");
        moRecordBranch.setFocusable(false);
        moRecordBranch.setPreferredSize(new java.awt.Dimension(32, 23));
        jPanel11.add(moRecordBranch);

        moRecordBkc.setEditable(false);
        moRecordBkc.setText("BKC");
        moRecordBkc.setToolTipText("Centro contable");
        moRecordBkc.setFocusable(false);
        moRecordBkc.setPreferredSize(new java.awt.Dimension(32, 23));
        jPanel11.add(moRecordBkc);

        moRecordNumber.setEditable(false);
        moRecordNumber.setText("TP-000001");
        moRecordNumber.setToolTipText("N√∫mero de p√≥liza contable");
        moRecordNumber.setFocusable(false);
        moRecordNumber.setPreferredSize(new java.awt.Dimension(60, 23));
        jPanel11.add(moRecordNumber);

        jbPickRecord.setText("...");
        jbPickRecord.setToolTipText("Seleccionar p√≥liza contable");
        jbPickRecord.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel11.add(jbPickRecord);

        jPanel13.add(jPanel11);

        jPanel43.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAccountBank.setText("Cuenta bancaria:");
        jlAccountBank.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel43.add(jlAccountBank);

        moBankAccount.setEditable(false);
        moBankAccount.setText("BANK ACCOUNT");
        moBankAccount.setPreferredSize(new java.awt.Dimension(230, 23));
        jPanel43.add(moBankAccount);

        jPanel13.add(jPanel43);

        jPanel25.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCurrency.setText("Moneda:");
        jlCurrency.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel25.add(jlCurrency);

        moCurrency.setEditable(false);
        moCurrency.setText("CUR");
        jPanel25.add(moCurrency);

        jPanel13.add(jPanel25);

        jPanel24.add(jPanel13);

        jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel14.setPreferredSize(new java.awt.Dimension(411, 120));
        jPanel14.setRequestFocusEnabled(false);
        jPanel14.setLayout(new java.awt.GridLayout(1, 2, 0, 5));

        jPanel26.setLayout(new java.awt.GridLayout(7, 1));

        jPanel27.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPaymentsFile.setText("Pagos archivo:");
        jlPaymentsFile.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel27.add(jlPaymentsFile);

        moPaymentsFile.setEditable(false);
        jPanel27.add(moPaymentsFile);

        jPanel26.add(jPanel27);

        jPanel30.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAmountFile.setText("Monto archivo:");
        jlAmountFile.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel30.add(jlAmountFile);

        moAmountFile.setEditable(false);
        jPanel30.add(moAmountFile);

        moCurPayFile.setEditable(false);
        moCurPayFile.setText("CUR");
        moCurPayFile.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel30.add(moCurPayFile);

        jPanel26.add(jPanel30);

        jPanel31.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAnalystPayments.setText("Pagos analista:");
        jlAnalystPayments.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel31.add(jlAnalystPayments);

        moAnalystPayments.setEditable(false);
        jPanel31.add(moAnalystPayments);

        jPanel26.add(jPanel31);

        jPanel28.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAmountAnalyst.setText("Monto analista:");
        jlAmountAnalyst.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel28.add(jlAmountAnalyst);

        moAmountAnalyst.setEditable(false);
        jPanel28.add(moAmountAnalyst);

        moCurPayAna.setEditable(false);
        moCurPayAna.setText("CUR");
        moCurPayAna.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel28.add(moCurPayAna);

        jPanel26.add(jPanel28);

        jPanel39.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlImportedPayments.setText("Pagos Importados:");
        jlImportedPayments.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel39.add(jlImportedPayments);

        moImportedPayments.setEditable(false);
        jPanel39.add(moImportedPayments);

        jPanel26.add(jPanel39);

        jPanel29.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlImportedAmount.setText("Total importado:");
        jlImportedAmount.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel29.add(jlImportedAmount);

        moAmountImported.setEditable(false);
        jPanel29.add(moAmountImported);

        moCurImported.setEditable(false);
        moCurImported.setText("CUR");
        moCurImported.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel29.add(moCurImported);

        jPanel26.add(jPanel29);

        jPanel36.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlImportedAmountLoc.setText("Total importado:");
        jlImportedAmountLoc.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel36.add(jlImportedAmountLoc);

        moAmountImportedLoc.setEditable(false);
        jPanel36.add(moAmountImportedLoc);

        moCurImportedLoc.setEditable(false);
        moCurImportedLoc.setText("CUR");
        moCurImportedLoc.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel36.add(moCurImportedLoc);

        jPanel26.add(jPanel36);

        jPanel14.add(jPanel26);

        jPanel35.setLayout(new java.awt.GridLayout(7, 1));

        jPanel33.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAnalyst.setForeground(new java.awt.Color(0, 51, 255));
        jlAnalyst.setText("Analista:");
        jlAnalyst.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel33.add(jlAnalyst);

        moAnalyst.setEditable(false);
        moAnalyst.setText("ANALYST");
        jPanel33.add(moAnalyst);

        jPanel35.add(jPanel33);

        jPanel34.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moDeleted.setText("Registro eliminado");
        moDeleted.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel34.add(moDeleted);

        jPanel35.add(jPanel34);

        jPanel41.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jPanel35.add(jPanel41);

        jPanel42.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jPanel35.add(jPanel42);

        jPanel37.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jPanel35.add(jPanel37);

        jPanel38.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jPanel35.add(jPanel38);

        jPanel21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jPanel35.add(jPanel21);

        jPanel14.add(jPanel35);

        jPanel24.add(jPanel14);

        jPanel23.add(jPanel24);

        jPanel1.add(jPanel23, java.awt.BorderLayout.NORTH);

        jpSettings.setBorder(javax.swing.BorderFactory.createTitledBorder("Pagos a importar:"));
        jpSettings.setLayout(new java.awt.BorderLayout());
        jPanel1.add(jpSettings, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        getAccessibleContext().setAccessibleDescription("");
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        actionCancel();
    }//GEN-LAST:event_formWindowClosing

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel33;
    private javax.swing.JPanel jPanel34;
    private javax.swing.JPanel jPanel35;
    private javax.swing.JPanel jPanel36;
    private javax.swing.JPanel jPanel37;
    private javax.swing.JPanel jPanel38;
    private javax.swing.JPanel jPanel39;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JPanel jPanel42;
    private javax.swing.JPanel jPanel43;
    private javax.swing.JButton jbLayoutPath;
    private javax.swing.JButton jbPickRecord;
    private javax.swing.JLabel jlAccountBank;
    private javax.swing.JLabel jlAmountAnalyst;
    private javax.swing.JLabel jlAmountFile;
    private javax.swing.JLabel jlAnalyst;
    private javax.swing.JLabel jlAnalystPayments;
    private javax.swing.JLabel jlCurrency;
    private javax.swing.JLabel jlDateImportation;
    private javax.swing.JLabel jlFileName;
    private javax.swing.JLabel jlFolio;
    private javax.swing.JLabel jlImportedAmount;
    private javax.swing.JLabel jlImportedAmountLoc;
    private javax.swing.JLabel jlImportedPayments;
    private javax.swing.JLabel jlLayoutPath;
    private javax.swing.JLabel jlPaymentsFile;
    private javax.swing.JLabel jlRecord;
    private javax.swing.JPanel jpSettings;
    private sa.lib.gui.bean.SBeanFieldDecimal moAmountAnalyst;
    private sa.lib.gui.bean.SBeanFieldDecimal moAmountFile;
    private sa.lib.gui.bean.SBeanFieldDecimal moAmountImported;
    private sa.lib.gui.bean.SBeanFieldDecimal moAmountImportedLoc;
    private sa.lib.gui.bean.SBeanFieldText moAnalyst;
    private sa.lib.gui.bean.SBeanFieldInteger moAnalystPayments;
    private sa.lib.gui.bean.SBeanFieldText moBankAccount;
    private sa.lib.gui.bean.SBeanFieldText moCurImported;
    private sa.lib.gui.bean.SBeanFieldText moCurImportedLoc;
    private sa.lib.gui.bean.SBeanFieldText moCurPayAna;
    private sa.lib.gui.bean.SBeanFieldText moCurPayFile;
    private sa.lib.gui.bean.SBeanFieldText moCurrency;
    private sa.lib.gui.bean.SBeanFieldBoolean moDeleted;
    private sa.lib.gui.bean.SBeanFieldDate moDepositsDate;
    private sa.lib.gui.bean.SBeanFieldText moFileName;
    private sa.lib.gui.bean.SBeanFieldInteger moImportedPayments;
    private sa.lib.gui.bean.SBeanFieldInteger moPaymentsFile;
    private javax.swing.JTextField moRecordBkc;
    private javax.swing.JTextField moRecordBranch;
    private javax.swing.JTextField moRecordDate;
    private javax.swing.JTextField moRecordNumber;
    private sa.lib.gui.bean.SBeanFieldText moRegistryNumber;
    private sa.lib.gui.bean.SBeanFieldText moTextLayoutPath;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 1024, 640);

        moDialogRecordPicker = new SDialogRecordPicker((SClientInterface) miClient, SDataConstants.FINX_REC_USER);
        
        moDepositsDate.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateImportation.getText()), true);
        moTextLayoutPath.setTextSettings(SGuiUtils.getLabelName(jlLayoutPath), 255);
        moAmountFile.setDecimalSettings(SGuiUtils.getLabelName(jlAmountFile), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moAmountAnalyst.setDecimalSettings(SGuiUtils.getLabelName(jlAmountAnalyst), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moAmountImported.setDecimalSettings(SGuiUtils.getLabelName(jlImportedAmount), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moAmountImportedLoc.setDecimalSettings(SGuiUtils.getLabelName(jlImportedAmountLoc), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        
        jbCleanExR = new JButton("Limpiar TC");
        jbCleanExR.setToolTipText("Poner el tipo de cambio predeterminado");
        jbCleanExR.setMargin(new Insets (2,2,2,2));
        jbCleanExR.setPreferredSize(new java.awt.Dimension(85, 23));
        
        jbUpdateExR = new JButton("TC Actualizar");
        jbUpdateExR.setToolTipText("Poner tipo de cambio actual");
        jbUpdateExR.setMargin(new Insets (2,2,2,2));
        jbUpdateExR.setPreferredSize(new java.awt.Dimension(85, 23));
        
        jbSelectAll = new JButton("Todo");
        jbSelectAll.setToolTipText("Importar");
        jbSelectAll.setPreferredSize(new java.awt.Dimension(85, 23));
        
        jbSelectAll = new JButton("Todo");
        jbSelectAll.setToolTipText("Seleccionar todo");
        jbSelectAll.setPreferredSize(new java.awt.Dimension(85, 23));

        jbCleanAll = new JButton("Nada");
        jbCleanAll.setToolTipText("Selecionar nada");
        jbCleanAll.setPreferredSize(new java.awt.Dimension(85, 23));
        
        jckCurrentAnalyst = new JCheckBox("Mostrar s√≥lo pagos del analista");
        jckCurrentAnalyst.setPreferredSize(new Dimension(200, 23));
        
        moFields.addField(moDepositsDate);
        moFields.addField(moTextLayoutPath);
        moFields.setFormButton(jbLayoutPath);
        moFields.setFormButton(jbSave);

        moGridPayments = new SGridPaneForm(miClient, SModConsts.FIN_LAY_BANK, mnFormSubtype, "Pagos en archivo") {
            
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> gridColumnsForm = new ArrayList<SGridColumnForm>();
                SGridColumnForm column = null;
                
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_INT_1B, "Pago", 50));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DATE_DATETIME, "Fecha-hora pago", 200));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT, "Cliente", 250));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT, "RFC", 80));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT, "Analista", 80));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT, "Referencia", 80));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT, "Concepto", 80));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT, "Folio", 80));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT, "Tipo pago", 80));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Monto $", STableConstants.WIDTH_VALUE_2X));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CUR, "Moneda"));
                column = new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_S, "Aplicar pago", moGridPayments.getTable().getDefaultEditor(Boolean.class));
                column.setEditable(true);
                gridColumnsForm.add(column);
                column = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT, "Referencia anticipo", moGridPayments.getTable().getDefaultEditor(String.class));
                column.setEditable(true);
                gridColumnsForm.add(column);
                column = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_EXC_RATE, "TC", moGridPayments.getTable().getDefaultEditor(Double.class));
                column.setEditable(true);
                gridColumnsForm.add(column);
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Monto ML $", STableConstants.WIDTH_VALUE_2X));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_REG_PER, "Per√≠odo p√≥liza"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CO, "Centro contable"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CO, "Sucursal empresa"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CAT, "Folio p√≥liza", 65));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT, "Concepto p√≥liza", 250));
                
                moGridPayments.getTable().getDefaultEditor(Boolean.class).addCellEditorListener(SFormImportPayments.this);
                moGridPayments.getTable().getDefaultEditor(String.class).addCellEditorListener(SFormImportPayments.this);
                moGridPayments.getTable().getDefaultEditor(Double.class).addCellEditorListener(SFormImportPayments.this);

                return gridColumnsForm;
            }
        };
       
        moGridPayments.getPanelCommandsSys(SGuiConsts.PANEL_CENTER).add(jckCurrentAnalyst);
        moGridPayments.getPanelCommandsSys(SGuiConsts.PANEL_CENTER).add(jbCleanExR);
        moGridPayments.getPanelCommandsSys(SGuiConsts.PANEL_CENTER).add(jbUpdateExR);
        moGridPayments.getPanelCommandsSys(SGuiConsts.PANEL_CENTER).add(jbSelectAll);
        moGridPayments.getPanelCommandsSys(SGuiConsts.PANEL_CENTER).add(jbCleanAll);
        
        jpSettings.add(moGridPayments, BorderLayout.CENTER);
        moImportation = new SImportPayments(miClient);
        mvDeposits = new Vector<>();
        
        maLocks = new ArrayList<>();
        maRedisLocks = new ArrayList<>();
        
        renderOption = ST_REGISTRY_NEW;
    }
    
    private void enableGeneralFields() {
        switch (renderOption) {
            case ST_REGISTRY_NEW:
                moTextLayoutPath.setValue("Seleccione archivo...");
                jbLayoutPath.setEnabled(true);
                moDepositsDate.setEnabled(false);
                jbPickRecord.setEnabled(false);
                moDeleted.setEnabled(false);
                jbCleanExR.setEnabled(false);
                jbUpdateExR.setEnabled(false);
                jbSelectAll.setEnabled(false);
                jbCleanAll.setEnabled(false);
                jckCurrentAnalyst.setEnabled(false);
                jbEdit.setEnabled(false);
                jbSave.setEnabled(false);
                
                moGridPayments.getTable().setEnabled(false);
                moGridPayments.getTable().getTableHeader().setEnabled(false);
                break;
            case ST_SELECT_LAY:
                jbLayoutPath.setEnabled(true);
                moDepositsDate.setEnabled(true);
                jbPickRecord.setEnabled(true);
                moDeleted.setEnabled(true);
                jbCleanExR.setEnabled(true);
                jbUpdateExR.setEnabled(true);
                jbSelectAll.setEnabled(true);
                jbCleanAll.setEnabled(true);
                jckCurrentAnalyst.setEnabled(true);
                jbEdit.setEnabled(false);
                jbSave.setEnabled(jckCurrentAnalyst.isSelected() && moGridPayments.getModel().getGridRows().size() > 0);
                
                moGridPayments.getTable().setEnabled(true);
                moGridPayments.getTable().getTableHeader().setEnabled(true);
                break;
            case ST_OPEN_REGISTRY:
                jbLayoutPath.setEnabled(false);
                moDepositsDate.setEnabled(false);
                jbPickRecord.setEnabled(false);
                moDeleted.setEnabled(false);
                jbCleanExR.setEnabled(false);
                jbUpdateExR.setEnabled(false);
                jbSelectAll.setEnabled(false);
                jbCleanAll.setEnabled(false);
                jckCurrentAnalyst.setEnabled(false);
                jbEdit.setEnabled(true);
                jbSave.setEnabled(false);
                
                jckCurrentAnalyst.setSelected(true);
                
                moGridPayments.getTable().setEnabled(false);
                moGridPayments.getTable().getTableHeader().setEnabled(false);
                break;
            case ST_MOD_REGISTRY:
                jbLayoutPath.setEnabled(false);
                moDepositsDate.setEnabled(true);
                jbPickRecord.setEnabled(true);
                moDeleted.setEnabled(true);
                jbCleanExR.setEnabled(true);
                jbUpdateExR.setEnabled(true);
                jbSelectAll.setEnabled(true);
                jbCleanAll.setEnabled(true);
                jbEdit.setEnabled(false);
                jbSave.setEnabled(jckCurrentAnalyst.isSelected() && moGridPayments.getModel().getGridRows().size() > 0);
                
                jckCurrentAnalyst.setEnabled(true);
                
                moGridPayments.getTable().setEnabled(true);
                moGridPayments.getTable().getTableHeader().setEnabled(true);
                break;
        }
    }
 
    private boolean readRecord(Object key) {
        moCurrentRecord = (SDataRecord) SDataUtilities.readRegistry((SClientInterface) miClient, SDataConstants.FIN_REC, key, SLibConstants.EXEC_MODE_VERBOSE);
        return true;
    }

    private void renderRecord() {
        if (moCurrentRecord == null) {
            moRecordDate.setText("");
            moRecordBkc.setText("");
            moRecordBranch.setText("");
            moRecordNumber.setText("");
        }
        else {
            moRecordDate.setText(((SClientInterface) miClient).getSessionXXX().getFormatters().getDateFormat().format(moCurrentRecord.getDate()));
            moRecordBkc.setText(SDataReadDescriptions.getCatalogueDescription((SClientInterface) miClient, SDataConstants.FIN_BKC, new int[] { moCurrentRecord.getPkBookkeepingCenterId() }, SLibConstants.DESCRIPTION_CODE));
            moRecordBranch.setText(SDataReadDescriptions.getCatalogueDescription((SClientInterface) miClient, SDataConstants.BPSU_BPB, new int[] { moCurrentRecord.getFkCompanyBranchId() }, SLibConstants.DESCRIPTION_CODE));
            moRecordNumber.setText(moCurrentRecord.getRecordNumber());
        }
    }
    
    private void getRecordLocks() throws Exception {
        boolean exists = false;
        SSrvLock lock = null;
        SRedisLock rlock = null;
        SAnalystDepositRow anaRow = null;
        ArrayList<Object> recordKeys = new ArrayList<>();
        
        for (SGridRow row : moGridPayments.getModel().getGridRows()) {
            anaRow = (SAnalystDepositRow) row;
            if (anaRow.getRecord() != null) {
                
                exists = false;
                for (Object key : recordKeys) {
                    if (SLibUtils.compareKeys(key, anaRow.getRecord().getPrimaryKey())) {
                        exists = true;
                        break;
                    }
                }
                if (!exists) {
                    lock = SSrvUtils.gainLock(miClient.getSession(), ((SClientInterface) miClient).getSessionXXX().getCompany().getPkCompanyId(), SDataConstants.FIN_REC, anaRow.getRecord(), anaRow.getRecord().getRegistryTimeout());
                    rlock = SRedisLockUtils.gainLock((SClientInterface) miClient, SDataConstants.FIN_REC, anaRow.getRecord(), anaRow.getRecord().getRegistryTimeout());
                    maLocks.add(lock);
                    maRedisLocks.add(rlock);
                    recordKeys.add(anaRow.getRecord().getPrimaryKey());
                }
            }
        }
    }
    
    private void loadDeposits() {
        moGridPayments.getModel().getGridRows().clear();
        mvDeposits.clear();
        
        if (jckCurrentAnalyst.isSelected()) {
            for (SAnalystDepositRow row : maAllDeposits) {
                if (row.getPkAnalystId() == miClient.getSession().getUser().getPkUserId()) {
                    mvDeposits.add(row);
                }
            }
        }
        else {
            mvDeposits.addAll(maAllDeposits);
        }
        
        moGridPayments.populateGrid(mvDeposits);
        updateData();
    }
    
    public void updateData() {
        SAnalystDepositRow anaRow = null;
        SDataAccountCash accCash = null;
        double amountAnalyst = 0;
        double amountImported = 0;
        double amountImportedLoc = 0;
        double amountLocal = 0;
        int analystPayments = 0;
        int importedPayments = 0;
        
        if (moRegistry.isRegistryNew()) {
            moBankAccount.setValue(moImportation.getAccount());
            moCurrency.setValue(moImportation.getCurrency());
            moPaymentsFile.setValue(moImportation.getPaymentsFile());
            moAmountFile.setValue(moImportation.getAmountFile());
            moCurPayFile.setValue(moImportation.getCurrency());
            moCurPayAna.setValue(moImportation.getCurrency());
            moCurImported.setValue(moImportation.getCurrency());
        }
        
        maAccountKey = SImportPayments.getAccCashKeyByAccount(miClient.getSession(), moBankAccount.getValue());
        if (maAccountKey != null) {
            accCash = (SDataAccountCash) SDataUtilities.readRegistry((SClientInterface) miClient, SDataConstants.FIN_ACC_CASH, maAccountKey, SLibConstants.EXEC_MODE_VERBOSE);
        }
        
        for (SGridRow row : moGridPayments.getModel().getGridRows()) {
            anaRow = (SAnalystDepositRow) row;
            anaRow.setCurrencyId(accCash != null ? accCash.getFkCurrencyId() : SLibConstants.UNDEFINED);
            amountLocal = anaRow.getAmountOrigCurrency() * anaRow.getExchangeRate();
            
            if (anaRow.getPkAnalystId() == miClient.getSession().getUser().getPkUserId()) {
                amountAnalyst += anaRow.getAmountOrigCurrency();
                analystPayments++;
                anaRow.setAmountLocal(amountLocal);
            }
            if (anaRow.getImported()) {
                importedPayments++;
                amountImported += anaRow.getAmountOrigCurrency();
                amountImportedLoc += amountLocal;
            }
            else {
                anaRow.setAmountLocal(amountLocal);
            }
        }
        
        mnCurrencyId = accCash != null ? accCash.getFkCurrencyId() : SLibConstants.UNDEFINED;
        moAmountImportedLoc.setValue(amountImportedLoc);
        moCurImportedLoc.setValue(miClient.getSession().getSessionCustom().getLocalCurrencyCode());
        moAnalystPayments.setValue(analystPayments);
        moAmountAnalyst.setValue(amountAnalyst);
        moImportedPayments.setValue(importedPayments);
        moAmountImported.setValue(amountImported);
        
        enableGeneralFields();
        
        if (moGridPayments.getModel().getGridRows().size() > 0) {
            moGridPayments.getTable().setRowSelectionInterval(mnIndexPayment, mnIndexPayment);
        }
        moGridPayments.renderGridRows();
    }

    private void actionSelectAll() {
        SAnalystDepositRow anaRow = null;
        
        if (moCurrentRecord != null) {
            for (SGridRow row : moGridPayments.getModel().getGridRows()) {
                anaRow = (SAnalystDepositRow) row;
                
                if (anaRow.getPkAnalystId() == miClient.getSession().getUser().getPkUserId()) {
                    anaRow.setImported(true);
                    anaRow.setRecord(moCurrentRecord);
                }
                else {
                    anaRow.setImported(false);
                    anaRow.setRecord(null);
                }
            }
        }
        else {
            miClient.showMsgBoxError("¬°Debe seleccionar una p√≥liza contable!");
        }
        updateData();
    }

    private void actionCleanAll() {
        SAnalystDepositRow anaRow = null;
        for (SGridRow row : moGridPayments.getModel().getGridRows()) {
            anaRow = (SAnalystDepositRow) row;
            
            anaRow.setImported(false);
            anaRow.setRecord(null);
        }
    }
    
    private void actionCleanExchangeRate() {
        double exRate = 0.0;
        
        if (moGridPayments.getModel().getGridRows().size() > 0) {
            if (mnCurrencyId == ((SAnalystDepositRow) moGridPayments.getModel().getGridRows().get(0)).getCurrencyId()) {
                exRate = 1.0;
            }
            
            for (SGridRow row : moGridPayments.getModel().getGridRows()) {
                ((SAnalystDepositRow) row).setExchangeRate(exRate);
            }
            updateData();
        }
    }
    
    private void actionUpdateExchangeRate() {
        double exRate = 0.0;
        try {
            if (moGridPayments.getModel().getGridRows().size() > 0) {
                if (mnCurrencyId == ((SAnalystDepositRow) moGridPayments.getModel().getGridRows().get(0)).getCurrencyId()) {
                    exRate = 1.0;
                }
                else {
                    exRate = SDataUtilities.obtainExchangeRate((SClientInterface) miClient, mnCurrencyId, moDepositsDate.getValue());
                }
            }
        }
        catch (Exception ex) {
            SLibUtils.printException(this, ex);
        }
        finally {
            for (SGridRow row : moGridPayments.getModel().getGridRows()) {
                ((SAnalystDepositRow) row).setExchangeRate(exRate);
            }
            updateData();
        }
    }
    
    private void actionLoadLayoutPath() {
        String msXmlPath = "";
        String fileName = "";
        String nameAux = "";
        FileFilter filter = new FileNameExtensionFilter("EXP file", "exp");
        
        miClient.getFileChooser().repaint();
        miClient.getFileChooser().setAcceptAllFileFilterUsed(false);
        miClient.getFileChooser().setFileFilter(filter);

        try {
            if (miClient.getFileChooser().showOpenDialog(miClient.getFrame()) == JFileChooser.APPROVE_OPTION) {
                msXmlPath = miClient.getFileChooser().getSelectedFile().getAbsolutePath();
                nameAux = msXmlPath.substring(msXmlPath.lastIndexOf("\\")).substring(1);
                //fileName = nameAux.substring(0, nameAux.length() - 4);
                fileName = nameAux;
                
                maAllDeposits = moImportation.processFile(msXmlPath);
                
                if (maAllDeposits != null) {
                    moTextLayoutPath.setValue(msXmlPath);
                    moFileName.setValue(fileName);
                
                    renderOption = ST_SELECT_LAY;
                    loadDeposits();
                }
            }
            miClient.getFileChooser().resetChoosableFileFilters();
            miClient.getFileChooser().setAcceptAllFileFilterUsed(maAllDeposits != null);
            jckCurrentAnalyst.setSelected(maAllDeposits != null);
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }
    }

    public void actionPickRecord() {
        Object key = null;
        String message = "";

        moDialogRecordPicker.formReset();
        moDialogRecordPicker.setFilterKey(moDepositsDate.getValue());
        moDialogRecordPicker.setParams(moParamsMap);
        moDialogRecordPicker.formRefreshOptionPane();

        if (moCurrentRecord != null) {
            moDialogRecordPicker.setSelectedPrimaryKey(moCurrentRecord.getPrimaryKey());
        }

        moDialogRecordPicker.setFormVisible(true);

        if (moDialogRecordPicker.getFormResult() == SLibConstants.FORM_RESULT_OK) {
            key = moDialogRecordPicker.getSelectedPrimaryKey();

            // XXX set registry lock to accounting record

            if (readRecord(key)) {
                if (moCurrentRecord != null) {
                    if (moCurrentRecord.getIsSystem()) {
                        message = "No puede seleccionarse esta p√≥liza contable porque es de sistema.";
                    }
                    else if (moCurrentRecord.getIsAudited()) {
                        message = "No puede seleccionarse esta p√≥liza contable porque est√° auditada.";
                    }
                    else if (moCurrentRecord.getIsAuthorized()) {
                        message = "No puede seleccionarse esta p√≥liza contable porque est√° autorizada.";
                    }
                    else if (!SDataUtilities.isPeriodOpen((SClientInterface) miClient, moCurrentRecord.getDate())) {
                        message = "No puede seleccionarse esta p√≥liza contable porque su per√≠odo contable correspondiente est√° cerrado.";
                    }
                    else if (!moCurrentRecord.getDbmsDataAccountCash().getAuxBankAccountNumber().equals(moBankAccount.getValue())) {
                        message = "La cuenta de la p√≥liza contable no corresponde con la cuenta del archivo.";
                    }
                    else if (!SLibTimeUtils.isSameDate( moCurrentRecord.getDate(), moDepositsDate.getValue())) {
                        message = "La fecha de la p√≥liza contable no corresponde con la fecha de importaci√≥n.";
                    }

                    if (message.length() > 0) {
                        miClient.showMsgBoxWarning(message);
                        moCurrentRecord = null;
                    }
                    else {
                        renderRecord();
                    }
                }
            }
        }
    }
    
    public void actionFilterAnalystPayments() {
        moGridPayments.getModel().getGridRows().clear();
        mvDeposits.clear();
        
        if (jckCurrentAnalyst.isSelected()) {
            for (SAnalystDepositRow row : maAllDeposits) {
                if (row.getPkAnalystId() == miClient.getSession().getUser().getPkUserId()) {
                    mvDeposits.add(row);
                }
            }
        }
        else {
            mvDeposits.addAll(maAllDeposits);
        }
        
        moGridPayments.populateGrid(mvDeposits);
        enableGeneralFields();
    }

    private void processEditing() {
        mnIndexPayment = moGridPayments.getTable().getSelectedRow();
        SAnalystDepositRow anaRow = ((SAnalystDepositRow) moGridPayments.getGridRow(mnIndexPayment));
        double exRate = 0.0;
        boolean valid = false;
                
        try {
            exRate = SDataUtilities.obtainExchangeRate((SClientInterface) miClient, mnCurrencyId, moDepositsDate.getValue());
        }
        catch (Exception ex) {
            SLibUtils.printException(this, ex);
        }
        
        if (mnOptionEdit == COL_APPLICATION) {
            if (moCurrentRecord != null) {
                if (anaRow.getImported()) {
                    anaRow.setRecord(moCurrentRecord);
                }
                valid = true;
            }
            else {
                if (anaRow.getImported()){
                    miClient.showMsgBoxWarning("¬°Debe seleccionar una p√≥liza contable!");
                    anaRow.setImported(false);
                }
            }
            if (valid) {
                if (mnCurrencyId != miClient.getSession().getSessionCustom().getLocalCurrencyKey()[0]) {
                    anaRow.setExchangeRate(exRate);
                }
                else {
                    anaRow.setExchangeRate(1.0);
                }
            }
        }
        else if (mnOptionEdit == COL_EXCH_RATE) {
            if (mnCurrencyId == miClient.getSession().getSessionCustom().getLocalCurrencyKey()[0]) {
                miClient.showMsgBoxError("¬°No se puede modificar el tipo de cambio!");
                anaRow.setExchangeRate(1.0);
            }
        }
        
        updateData();
    }
       
    @Override
    public void addAllListeners() {
        jckCurrentAnalyst.addItemListener(this);
        jbLayoutPath.addActionListener(this);
        jbSelectAll.addActionListener(this);
        jbCleanAll.addActionListener(this);
        jbPickRecord.addActionListener(this);
        jbCleanExR.addActionListener(this);
        jbUpdateExR.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        jckCurrentAnalyst.removeItemListener(this);
        jbLayoutPath.removeActionListener(this);
        jbSelectAll.removeActionListener(this);
        jbCleanAll.removeActionListener(this);
        jbPickRecord.removeActionListener(this);
        jbCleanExR.removeActionListener(this);
        jbUpdateExR.removeActionListener(this);
    }

    @Override
    public void reloadCatalogues() {
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        if (registry == null) {
            registry = new SDbBankLayoutDeposits();
        }
        moRegistry = (SDbBankLayoutDeposits) registry;
        SDataAccountCash accountCash;
        
        if (moRegistry.getPkBankLayoutDepositsId() == SLibConstants.UNDEFINED) {
            moTextLayoutPath.setValue("");
            moFileName.setValue("");
            moDepositsDate.setValue(miClient.getSession().getCurrentDate());
            moRegistryNumber.setValue("" + moRegistry.getPkBankLayoutDepositsId());
            moBankAccount.setValue("");
            moCurrency.setValue("");
            moPaymentsFile.setValue(0);
            moAmountFile.setValue(0.0);
            moCurPayFile.setValue("");
            moAnalystPayments.setValue(0);
            moAmountAnalyst.setValue(0.0);
            moCurPayAna.setValue("");
            moImportedPayments.setValue(0);
            moAmountImported.setValue(0.0);
            moCurImported.setValue("");
            moAmountImportedLoc.setValue(0.0);
            moCurImportedLoc.setValue(miClient.getSession().getSessionCustom().getLocalCurrencyCode());
            moDeleted.setValue(false);
            
            moChildRegistry = new SDbBankLayoutDepositsAnalyst();
            
            renderOption = ST_REGISTRY_NEW;
            
            enableGeneralFields();
        }
        else {
            if (moRegistry.getAnalystImportations().containsKey(miClient.getSession().getUser().getPkUserId())) {
                moChildRegistry = moRegistry.getAnalystImportations().get(miClient.getSession().getUser().getPkUserId());
            }
            else {
                moChildRegistry = new SDbBankLayoutDepositsAnalyst();
            }
            
            moTextLayoutPath.setValue(moRegistry.getSourceName());
            moFileName.setValue(moRegistry.getSourceName());
            moDepositsDate.setValue(moRegistry.getDepositsDate());
            moRegistryNumber.setValue("" + moRegistry.getPkBankLayoutDepositsId());
            maAccountKey = new int[] { moRegistry.getFkBankCompanyBranchId(), moRegistry.getFkBankAccountCashId() };
            accountCash = (SDataAccountCash) SDataUtilities.readRegistry((SClientInterface) miClient, SDataConstants.FIN_ACC_CASH, maAccountKey, SLibConstants.EXEC_MODE_SILENT);
            moBankAccount.setValue(accountCash.getDbmsBizPartnerBranchBankAccount().getBankAccountNumber());
            moCurrency.setValue(accountCash.getDbmsBizPartnerBranchBankAccount().getDbmsCurrencyKey());
            moPaymentsFile.setValue(moRegistry.getSourceMovements());
            moAmountFile.setValue(moRegistry.getSourceAmount());
            moCurPayFile.setValue(accountCash.getDbmsBizPartnerBranchBankAccount().getDbmsCurrencyKey());
            moAnalystPayments.setValue(moChildRegistry.getSourceMovements());
            moAmountAnalyst.setValue(moChildRegistry.getSourceAmount());
            moCurPayAna.setValue(accountCash.getDbmsBizPartnerBranchBankAccount().getDbmsCurrencyKey());
            moImportedPayments.setValue(moChildRegistry.getImportedMovements());
            moAmountImported.setValue(moChildRegistry.getImportedAmount());
            moCurImported.setValue(accountCash.getDbmsBizPartnerBranchBankAccount().getDbmsCurrencyKey());
            moAmountImportedLoc.setValue(0.0);
            moCurImportedLoc.setValue(miClient.getSession().getSessionCustom().getLocalCurrencyCode());
            moDeleted.setValue(moChildRegistry.isDeleted());
            
            maAllDeposits = moImportation.populateGridRows(moRegistry, accountCash.getFkCurrencyId(), moDepositsDate.getValue());
            
            jckCurrentAnalyst.setSelected(true);
            renderOption = ST_OPEN_REGISTRY;
            
            loadDeposits();
        }
        
        moRecordDate.setText("");
        moRecordBranch.setText("");
        moRecordBkc.setText("");
        moRecordNumber.setText("");
        moAnalyst.setValue(miClient.getSession().getUser().getName());
        
        addAllListeners();
    }

    @Override
    public SDbBankLayoutDeposits getRegistry() throws Exception {
        SDbBankLayoutDeposits registry = moRegistry.clone();
        SDbBankLayoutDepositsAnalyst childRegistry = moChildRegistry.clone();
        
        if (registry.isRegistryNew()) {
            registry.setBytes(moImportation.getBytes());
        }
        
        registry.setSourceName(moFileName.getValue());
        registry.setDepositsDate(moDepositsDate.getValue());
        registry.setSourceMovements(moPaymentsFile.getValue());
        registry.setSourceAmount(moAmountFile.getValue());
        registry.setDeleted(false);
        
        if (maAccountKey != null) {
            registry.setFkBankCompanyBranchId(maAccountKey[0]);
            registry.setFkBankAccountCashId(maAccountKey[1]);
        }
        
        registry.setFkCurrencyId(mnCurrencyId);
        /*
        registry.setFkUserInsertId();
        registry.setFkUserUpdateId();
        registry.setTsUserInsert();
        registry.setTsUserUpdate();
        */
        registry.setFkBankLayoutDepositsTypeId(SFinConsts.LAY_TP_BANK_DEP_CIE);
        
        getRecordLocks();
        
        moImportation.populateAccounts(maAllDeposits);
        registry.getDepositsRows().clear();
        registry.getDepositsRows().addAll(maAllDeposits);
        
        childRegistry.setPkBankLayoutDepositsId(registry.getPkBankLayoutDepositsId());
        childRegistry.setPkUserAnalystId(miClient.getSession().getUser().getPkUserId());
        childRegistry.setSourceMovements(moAnalystPayments.getValue());
        childRegistry.setSourceAmount(moAmountAnalyst.getValue());
        childRegistry.setImportedMovements(moImportedPayments.getValue());
        childRegistry.setImportedAmount(moAmountImported.getValue());
        childRegistry.setDeleted(moDeleted.getValue());
        childRegistry.getDepositsRows().clear();
        childRegistry.getDepositsRows().addAll(maAllDeposits);
        
        registry.getAnalystImportations().put(miClient.getSession().getUser().getPkUserId(), childRegistry);

        if (!maLocks.isEmpty()) {
            registry.getLocks().addAll(maLocks);
        }
        if (!maRedisLocks.isEmpty()) {
            registry.getRedisLocks().addAll(maRedisLocks);
        }
        
        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SAnalystDepositRow anaRow = null;
        SGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            for (SGridRow row : moGridPayments.getModel().getGridRows()) {
                anaRow = (SAnalystDepositRow) row;
                
                if (anaRow.getExchangeRate() <= 0 && anaRow.getImported() && anaRow.getPkAnalystId() == miClient.getSession().getUser().getPkUserId()) {
                    validation.setMessage("Debe especificar un tipo de cambio en el pago: " + anaRow.getPkDepositId() + ".");
                    moGridPayments.getTable().setRowSelectionInterval(anaRow.getPkDepositId(), anaRow.getPkDepositId());
                    moGridPayments.renderGridRows();
                }
                else if (anaRow.getCurrencyId() == miClient.getSession().getSessionCustom().getLocalCurrencyKey()[0] && anaRow.getExchangeRate() != 1 && anaRow.getImported() && anaRow.getPkAnalystId() == miClient.getSession().getUser().getPkUserId()) {
                    validation.setMessage("Tipo de cambio inv√°lido en el pago: " + anaRow.getPkDepositId() + ".");
                    moGridPayments.getTable().setRowSelectionInterval(anaRow.getPkDepositId(), anaRow.getPkDepositId());
                    moGridPayments.renderGridRows();
                }
            }
            
            if (validation.isValid()) {
                try {
                    for (SSrvLock lock : maLocks) {
                        SSrvUtils.verifyLockStatus(miClient.getSession(), lock);
                    }
                    for (SRedisLock rlock : maRedisLocks) {
                        SRedisLockUtils.verifyLockStatus((SClientInterface) miClient, rlock);
                    }
                }
                catch (Exception e) {
                    validation.setMessage("No fue posible validar el acceso exclusivo al registro de una de las p√≥lizas seleccionadas." + e);
                    validation.setComponent(jbCancel);
                }
            }
        }

        return validation;
    }
    
    @Override
    public void actionSave() {
        SGuiValidation validation;
        
        try  {
            validation = validateForm();
            
            if (validation.isValid()) {
                super.actionSave();
            }
            else {
                if (validation.getComponent() != null) {
                    validation.getComponent().requestFocus();
                }
                if (validation.getMessage().length() > 0) {
                    miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }
    
    @Override
    public void actionCancel() {
        if (jbCancel.isEnabled()) {
            try {
                for (SSrvLock lock : maLocks) {
                    SSrvUtils.releaseLock(miClient.getSession(), lock);
                }
                for (SRedisLock rlock : maRedisLocks) {
                    SRedisLockUtils.releaseLock(((SClientInterface) miClient), rlock);
                }
            }
            catch (Exception e) {
                SLibUtils.showException(this, e);
            }
            mnFormResult = SGuiConsts.FORM_RESULT_CANCEL;
            dispose();
        }
    }
    
    @Override
    public void actionEdit() {
        renderOption = ST_MOD_REGISTRY;
        loadDeposits();
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            
            if (button == jbLayoutPath) {
                actionLoadLayoutPath();
            }
            else if (button == jbSelectAll) {
                actionSelectAll();
            }
            else if (button == jbCleanAll) {
                actionCleanAll();
            }
            else if (button == jbCleanExR) {
                actionCleanExchangeRate();
            }
            else if (button == jbUpdateExR) {
                actionUpdateExchangeRate();
            }
            else if (button == jbPickRecord) {
                actionPickRecord();
            }
        }
    }
    
    @Override
    public void editingStopped(ChangeEvent e) {
        switch (moGridPayments.getTable().getSelectedColumn()) {
            case COL_APPLICATION:
                mnOptionEdit = COL_APPLICATION;
                processEditing();
                break;
            case COL_REFERENCE:
                mnOptionEdit = COL_REFERENCE;
                break;
            case COL_EXCH_RATE:
                mnOptionEdit = COL_EXCH_RATE;
                processEditing();
                break;
            default:
                break;
        }
    }

    @Override
    public void editingCanceled(ChangeEvent e) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
    if (e.getSource() instanceof javax.swing.JCheckBox) {
            JCheckBox checkBox = (JCheckBox) e.getSource();
            
            if (checkBox == jckCurrentAnalyst) {
                actionFilterAnalystPayments();
            }
        }
    }
}
