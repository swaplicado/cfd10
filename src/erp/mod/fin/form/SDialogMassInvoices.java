/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.fin.form;

import erp.SClientUtils;
import erp.client.SClientInterface;
import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.lib.SLibConstants;
import erp.lib.form.SFormField;
import erp.lib.table.STableRow;
import erp.mod.SModConsts;
import erp.mtrn.data.SCfdUtils;
import erp.mtrn.data.SDataCfd;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiItem;
import sa.lib.gui.SGuiParams;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFormDialog;

/**
 *
 * @author Claudio Peña, Sergio Flores
 */
public class SDialogMassInvoices extends SBeanFormDialog implements java.awt.event.ActionListener, java.awt.event.ItemListener, erp.lib.form.SFormOptionPickerInterface {
      
   private int mnInvoices = SDataConstantsSys.TRNS_CL_DPS_PUR_DOC[1];
   private int mnCreditNotes = SDataConstantsSys.TRNS_CL_DPS_PUR_ADJ[1];
   private int mnCfdPaymentReceipts = SDataConstantsSys.TRNS_TP_CFD_PAYROLL;
   
   private int mnEmitedCfdi = SDataConstantsSys.TRNS_ST_DPS_EMITED;
   private int mnAnnuledCfdi = SDataConstantsSys.TRNS_ST_DPS_ANNULED;
   private int mnBizPartnerCategory;
   private int mnTypesCdfi;
   
   private erp.lib.form.SFormField moFieldSearchBizPartnerId;
    /**
     * Creates new form SDialogMassInvoices
     */
//    public SDialogMassInvoices(SGuiClient client, final int bizPartnerCategory) {
    public SDialogMassInvoices(SClientInterface client, final int bizPartnerCategory ) {
        miClient = (SGuiClient) client;
        initComponents();
        initComponentsCustom();
        mnBizPartnerCategory = bizPartnerCategory;

    }

    /** 
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        moTypesCFDI = new javax.swing.ButtonGroup();
        moTypesStatus = new javax.swing.ButtonGroup();
        moTypesOrigin = new javax.swing.ButtonGroup();
        sBeanCompoundFieldCurrency1 = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        moTypesDownload = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        moInvoices = new sa.lib.gui.bean.SBeanFieldRadio();
        jPanel14 = new javax.swing.JPanel();
        moCreditNotes = new sa.lib.gui.bean.SBeanFieldRadio();
        jPanel15 = new javax.swing.JPanel();
        moPaymentSupplements = new sa.lib.gui.bean.SBeanFieldRadio();
        jPanel7 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jlBizPartner = new javax.swing.JLabel();
        jcbBizPartner = new javax.swing.JComboBox();
        jbBizPartner = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jPanel25 = new javax.swing.JPanel();
        jlDateStart = new javax.swing.JLabel();
        moDateStart = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel11 = new javax.swing.JPanel();
        jlDateEnd = new javax.swing.JLabel();
        moDateEnd = new sa.lib.gui.bean.SBeanFieldDate();

        setTitle("Envío masivo de facturas");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Parámetros de envío:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(6, 1, 0, 5));

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Tipo de factura:"));
        jPanel4.setLayout(new java.awt.GridLayout(1, 1, 0, 3));

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moTypesCFDI.add(moInvoices);
        moInvoices.setText("Facturas");
        moInvoices.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel12.add(moInvoices);

        jPanel4.add(jPanel12);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moTypesCFDI.add(moCreditNotes);
        moCreditNotes.setText("Notas crédito");
        moCreditNotes.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel14.add(moCreditNotes);

        jPanel4.add(jPanel14);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moTypesCFDI.add(moPaymentSupplements);
        moPaymentSupplements.setText("Recepción pagos");
        moPaymentSupplements.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel15.add(moPaymentSupplements);

        jPanel4.add(jPanel15);

        jPanel2.add(jPanel4);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel7.setLayout(new java.awt.GridLayout(1, 1, 0, 1));

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlBizPartner.setText("Asociado de negocios: ");
        jlBizPartner.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel3.add(jlBizPartner);

        jcbBizPartner.setMaximumRowCount(12);
        jcbBizPartner.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbBizPartner.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel3.add(jcbBizPartner);

        jbBizPartner.setText("...");
        jbBizPartner.setToolTipText("Seleccionar asociado de negocios");
        jbBizPartner.setFocusable(false);
        jbBizPartner.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel3.add(jbBizPartner);

        jPanel7.add(jPanel3);

        jPanel2.add(jPanel7);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Rango de fechas:"));
        jPanel8.setLayout(new java.awt.GridLayout(1, 1, 0, 3));

        jPanel25.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateStart.setText("Fecha inicial:");
        jlDateStart.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel25.add(jlDateStart);
        jPanel25.add(moDateStart);

        jPanel8.add(jPanel25);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateEnd.setText("Fecha final:");
        jlDateEnd.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlDateEnd);
        jPanel11.add(moDateEnd);

        jPanel8.add(jPanel11);

        jPanel2.add(jPanel8);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JButton jbBizPartner;
    private javax.swing.JComboBox jcbBizPartner;
    private javax.swing.JLabel jlBizPartner;
    private javax.swing.JLabel jlDateEnd;
    private javax.swing.JLabel jlDateStart;
    private sa.lib.gui.bean.SBeanFieldRadio moCreditNotes;
    private sa.lib.gui.bean.SBeanFieldDate moDateEnd;
    private sa.lib.gui.bean.SBeanFieldDate moDateStart;
    private sa.lib.gui.bean.SBeanFieldRadio moInvoices;
    private sa.lib.gui.bean.SBeanFieldRadio moPaymentSupplements;
    private javax.swing.ButtonGroup moTypesCFDI;
    private javax.swing.ButtonGroup moTypesDownload;
    private javax.swing.ButtonGroup moTypesOrigin;
    private javax.swing.ButtonGroup moTypesStatus;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency sBeanCompoundFieldCurrency1;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 480, 350);
        
        SGuiParams params = new SGuiParams(mnBizPartnerCategory);
        miClient.getSession().populateCatalogue(jcbBizPartner, SModConsts.BPSU_BP, mnBizPartnerCategory, null);
        
        
        moFieldSearchBizPartnerId = new SFormField((SClientInterface) miClient, SLibConstants.DATA_TYPE_KEY, true, jcbBizPartner, jlBizPartner);
        moFieldSearchBizPartnerId.setPickerButton(jbBizPartner);
        
        
        jcbBizPartner.addItemListener(this);
        jbBizPartner.addActionListener(this);

        moDateEnd.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateEnd.getText()), true);
        jbSave.setEnabled(true);
        
        moInvoices.setBooleanSettings(SGuiUtils.getLabelName(moInvoices.getText()), true);
        moCreditNotes.setBooleanSettings(SGuiUtils.getLabelName(moInvoices.getText()), false);
        moPaymentSupplements.setBooleanSettings(SGuiUtils.getLabelName(moInvoices.getText()), false);
        
        moDateStart.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateStart.getText()), true);
        moDateEnd.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateEnd.getText()), true);

        moFields.addField(moInvoices);
        moFields.addField(moCreditNotes);
        moFields.addField(moPaymentSupplements);
        
        moFields.addField(moDateStart);
        moFields.addField(moDateEnd);
                
        moFields.setFormButton(jbSave);
        
        moInvoices.setSelected(true);
                
        reloadCatalogues();
        addAllListeners();
 
    }

    @Override
    public SGuiValidation validateForm() {
      SGuiValidation validation = moFields.validateFields();
      validation.setValid(true);
        if (!moInvoices.isSelected() && !moCreditNotes.isSelected() && !moPaymentSupplements.isSelected()) {
            miClient.showMsgBoxWarning("Debe seleccionar un tipo de CFDI");
            validation.setValid(false);
        }
    
       return validation;
    }
    
    
    private void actionBizPartner() {
        erp.client.SClientInterface clientInterface = (erp.client.SClientInterface) miClient;
        clientInterface.pickOption(SDataConstants.BPSU_BP, null);
        /*
        erp.client.SClientInterface clientInterface = (erp.client.SClientInterface) miClient;
        SFormOptionPickerInterface picker = clientInterface.getOptionPicker(SDataConstants.BPSU_BP);
        picker.formReset();
        picker.formRefreshOptionPane();        
        picker.setSelectedPrimaryKey(((SFormComponentItem) jcbBizPartner.getSelectedItem()).getPrimaryKey());
        picker.setFormVisible(true);
        if (picker.getFormResult() == SLibConstants.FORM_RESULT_OK) {
            SFormUtilities.locateComboBoxItem(jcbBizPartner, picker.getSelectedPrimaryKey());
            jcbBizPartner.requestFocus();
        }
        */
    }
    
    @SuppressWarnings("empty-statement")
    private void createParamsInvoices() throws SQLException {
        String mySql = "";
        int countInvoinces = 0;
        ResultSet resultSet = null;
        SimpleDateFormat dateFileYear = new SimpleDateFormat("yyyy");
        
        try {
            
            String complementaryDbName = "";
            try {
                complementaryDbName = SClientUtils.getComplementaryDdName((SClientInterface) miClient);
            }
            catch (Exception e) {
                SLibUtils.printException(this, e);
            }
            int[] pk = ((SGuiItem) jcbBizPartner.getSelectedItem()).getPrimaryKey();
            if (typeCfdi() == mnInvoices) {
                mySql = "SELECT d.id_year, d.id_doc, d.dt, cfd.id_cfd, cfd.ts, com.doc_xml_name, com.doc_xml "
                        + "FROM trn_dps AS d " 
                        + "INNER JOIN erp.bpsu_bp AS bp ON d.fid_bp_r = bp.id_bp "
                        + "INNER JOIN TRN_CFD AS cfd ON cfd.fid_dps_year_n = d.id_year AND cfd.fid_dps_doc_n = d.id_doc "
                        + "INNER JOIN " + complementaryDbName + ".trn_cfd AS com ON com.id_cfd = cfd.id_cfd "
                        + "INNER JOIN erp.trnu_tp_dps AS dt ON d.fid_ct_dps = dt.id_ct_dps "
                        + " AND d.fid_cl_dps = dt.id_cl_dps "
                        + " AND d.fid_tp_dps = dt.id_tp_dps "
                        + " AND d.fid_ct_dps = 2 "
                        + " AND d.fid_cl_dps = 3 "
                        + "WHERE d.b_del = 0 ";
                if (moDateStart.getValue() != null) {
                    mySql += " AND cfd.ts >= "+ "'" +  SLibUtils.DbmsDateFormatDate.format(moDateStart.getValue()) + " 00:00:00'";
                }
                if (moDateEnd.getValue() != null ) {
                    mySql += " AND cfd.ts <= "+ "'" +  SLibUtils.DbmsDateFormatDate.format(moDateEnd.getValue()) + " 23:59:59'";
                }
                if (jcbBizPartner.getSelectedItem() != null ) {
                    mySql += " AND d.fid_bp_r = " +  pk[0] + " ";
                }
            }
            else if (typeCfdi() == mnCreditNotes) {
                mySql = "SELECT d.id_year, d.id_doc, d.dt, cfd.id_cfd, cfd.ts, com.doc_xml_name, com.doc_xml "
                        + "FROM trn_dps AS d " 
                        + "INNER JOIN erp.bpsu_bp AS bp ON d.fid_bp_r = bp.id_bp "
                        + "INNER JOIN TRN_CFD AS cfd ON cfd.fid_dps_year_n = d.id_year AND cfd.fid_dps_doc_n = d.id_doc "
                        + "INNER JOIN " + complementaryDbName + ".trn_cfd AS com ON com.id_cfd = cfd.id_cfd "
                        + "INNER JOIN erp.trnu_tp_dps AS dt ON d.fid_ct_dps = dt.id_ct_dps "
                        + "AND d.fid_cl_dps = dt.id_cl_dps "
                        + "AND d.fid_tp_dps = dt.id_tp_dps "
                        + "AND d.fid_ct_dps = 2 "
                        + "AND d.fid_cl_dps = 5 "
                        + "WHERE d.b_del = 0 ";
                if (moDateStart.getValue() != null) {
                    mySql += " AND cfd.ts >= "+ "'" +  SLibUtils.DbmsDateFormatDate.format(moDateStart.getValue()) + " 00:00:00'";
                }
                if (moDateEnd.getValue() != null ) {
                    mySql += " AND cfd.ts <= "+ "'" +  SLibUtils.DbmsDateFormatDate.format(moDateEnd.getValue()) + " 23:59:59'";
                }
                if (jcbBizPartner.getSelectedItem() != null ) {
                    mySql += " AND d.fid_bp_r = " + pk[0] + " ";
                }
            }
            else if (typeCfdi() == mnCfdPaymentReceipts) {
                mySql = "SELECT c.id_cfd, c.ts, b.bp, b.fiscal_id, com.doc_xml_name, com.doc_xml "
                        + "FROM trn_cfd AS c "
                        + "INNER JOIN " + complementaryDbName + ".trn_cfd AS com ON c.id_cfd = com.id_cfd "
                        + "INNER JOIN erp.bpsu_bpb AS cob ON c.fid_cob_n = cob.id_bpb "
                        + "LEFT OUTER JOIN "
                        + "(SELECT DISTINCT re.fid_cfd_n, re.fid_bp_nr "
                        + "FROM fin_rec AS r "
                            + "INNER JOIN fin_rec_ety AS re ON r.id_year = re.id_year "
                        + "AND r.id_per = re.id_per "
                        + "AND r.id_bkc = re.id_bkc "
                        + "AND r.id_tp_rec = re.id_tp_rec "
                        + "AND r.id_num = re.id_num "
                        + "WHERE YEAR(r.dt) = "+ dateFileYear.format(moDateStart.getValue()) + " AND NOT r.b_del "
                        + "AND NOT re.b_del "
                        + "AND re.fid_cfd_n IS NOT NULL "
                        + "AND re.fid_bp_nr IS NOT NULL) AS re ON re.fid_cfd_n = c.id_cfd "
                        + "LEFT OUTER JOIN erp.bpsu_bp AS b ON b.id_bp = re.fid_bp_nr "
                        + "WHERE NOT b.b_del ";
                if (moDateStart.getValue() != null) {
                    mySql += " AND c.ts >= "+ "'" +  SLibUtils.DbmsDateFormatDate.format(moDateStart.getValue()) + " 00:00:00'";
                }
                if (moDateEnd.getValue() != null ) {
                    mySql += " AND c.ts <= "+ "'" +  SLibUtils.DbmsDateFormatDate.format(moDateEnd.getValue()) + " 23:59:59'";
                }
                if (jcbBizPartner.getSelectedItem() != null ) {
                    mySql += " AND b.fid_bp_r = " + pk[0] + " ";
                }
            }
            
            Statement statement = miClient.getSession().getStatement().getConnection().createStatement();
            resultSet = statement.executeQuery(mySql);
            while (resultSet.next()) {
                countInvoinces = countInvoinces + 1;
                int[] primaryKey = new int[2];
                primaryKey[0] = resultSet.getInt("d.id_year");
                primaryKey[1] = resultSet.getInt("d.id_doc");

                SDataCfd cfd = SCfdUtils.getCfd((SClientInterface) miClient, SDataConstantsSys.TRNS_TP_CFD_INV, primaryKey);
                SCfdUtils.sendCfd((SClientInterface) miClient, cfd, 0, false);
            }
            
            if(countInvoinces == 1) {
                JOptionPane.showMessageDialog(null, "Proceso finalizado. Se han enviado: " + countInvoinces + " comprobante.");
            }
            else {
                JOptionPane.showMessageDialog(null, "Proceso finalizado. Se han enviado: " + countInvoinces + " comprobantes.");
            }
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }
    
    private int typeCfdi() {
        if (moInvoices.isSelected()) {
            mnTypesCdfi = mnInvoices; //factura
        }
        else if (moCreditNotes.isSelected()) {
            mnTypesCdfi = mnCreditNotes; //notas de crédito
        }
        else if (moPaymentSupplements.isSelected()) {
            mnTypesCdfi = mnCfdPaymentReceipts; //complementos de pago
        }
        
        return mnTypesCdfi;
    }
    
   @Override
    public void addAllListeners() {
    }

    @Override
    public void removeAllListeners() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setRegistry(SDbRegistry sdr) throws Exception {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void itemStateChanged(ItemEvent ie) {
        if (moInvoices.isSelected()) {
            
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
       if (e.getSource() instanceof javax.swing.JButton) {
            JButton button = (JButton) e.getSource();
            if (button == jbBizPartner) {
                actionBizPartner();
            }
        }
    }
    
    @Override
    public void actionSave() {
        boolean canClose = true;
        if (jcbBizPartner.getSelectedIndex() == 0 ) {
            miClient.showMsgBoxError("Se debe de elegir un asociado de negocios");
        }
        else if(moDateStart.getValue() == null && moDateEnd.getValue() == null) {
            if (JOptionPane.showConfirmDialog(this, "Al no elegir fechas, la cantidad de facturas, puede ser masiva. ¿Desea continuar?", "Confirmar", JOptionPane.YES_NO_OPTION) != JOptionPane.YES_OPTION) {
                 canClose = true;
            }
            else {
                if (jbSave.isEnabled()) {
                    try {
                        createParamsInvoices();
                    } catch (SQLException ex) {
                        Logger.getLogger(SDialogMassDownloadCfdi.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    dispose();
                }            
            }
        }
        else if (jbSave.isEnabled()) {
            try {
                createParamsInvoices();
            } catch (SQLException ex) {
                Logger.getLogger(SDialogMassDownloadCfdi.class.getName()).log(Level.SEVERE, null, ex);
            }
            dispose();
        }
    }

    @Override
    public void reloadCatalogues() {
    }

    @Override
    public void formReset() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void formRefreshOptionPane() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public int getOptionType() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setFilterKey(Object filterKey) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setSelectedPrimaryKey(Object pk) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public Object getSelectedPrimaryKey() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public STableRow getSelectedOption() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}