/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.fin.form;

import erp.SErpConsts;
import erp.data.SDataConstantsSys;
import erp.gui.account.SAccountConsts;
import erp.gui.session.SSessionCustom;
import erp.mfin.data.SDataAccountCash;
import erp.mfin.data.SDataCheck;
import erp.mfin.data.SDataRecordEntry;
import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import erp.mod.bps.db.SDbBizPartner;
import erp.mod.bps.db.SDbBizPartnerBranchBankAccount;
import erp.mod.fin.db.SDbAbpEntity;
import erp.mod.fin.db.SDbCheckWallet;
import erp.mod.fin.db.SFinConceptEvaluation;
import erp.mod.fin.db.SFinConsts;
import erp.mod.fin.db.SFinUtils;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import sa.gui.util.SUtilConsts;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiOptionPicker;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFieldBoolean;
import sa.lib.gui.bean.SBeanFieldDecimal;
import sa.lib.gui.bean.SBeanFieldInteger;
import sa.lib.gui.bean.SBeanFieldKey;
import sa.lib.gui.bean.SBeanFieldText;
import sa.lib.gui.bean.SBeanFormDialog;

/**
 *
 * @author Sergio Flores
 */
public class SDialogCashMove extends SBeanFormDialog implements SDialogCash, ActionListener, FocusListener, ItemListener {

    public static final int MOVE_MODE_SIMPLE = 11;
    public static final int MOVE_MODE_SIMPLE_EXC_RATE_DIFF = 12;
    public static final int MOVE_MODE_SINGLE = 21;
    public static final int MOVE_MODE_TRANSFER = 31;

    private SSessionCustom moSessionCustom;
    private SDataAccountCash moCashXXX;
    private SDbAbpEntity moAbpCash;
    private SDbBizPartnerBranchBankAccount moCashBankAccount;   // applies only if this cash is a bank account
    private int[] manCashCurrencyKey;
    private int[] manTransferCashKey;
    private int[] manTransferCashCurrencyKey;
    private boolean mbCashLocalCurrency;
    private boolean mbTransferCashLocalCurrency;
    private int[] manSysMoveTypeKey;
    private int mnMoveMode;
    private boolean mbMoveIncome;
    private boolean mbMoveTransfer;
    private Date mtMoveDate;
    private String msMoveTypeAbbr;
    private HashSet<Integer> moCurrentChecksSet;
    private Object[] maoRecordKey;
    private boolean mbTransferExchangeDiff;
    private boolean mbTransferExchangeDiffOnSource;
    private int[] manAccMoveSubclassKeyXXX;
    private SDbCheckWallet moCheckWallet;
    private SDbBizPartner moCheckBizPartner;
    private SDbBizPartnerBranchBankAccount moCheckBizPartnerBranchBankAccount;
    private int mnCheckCurrentNumber;
    private boolean mbUpdateConcept;
    private int mnAuxCheckNumber;
    private String msAuxCheckBeneficiary;

    /**
     * Creates new form SDialogCashMove
     */
    public SDialogCashMove(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SLibConsts.UNDEFINED, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpMove = new javax.swing.JPanel();
        jpMoveSimple = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jlCash = new javax.swing.JLabel();
        jtfCashCode = new javax.swing.JTextField();
        jtfCash = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jlMoveType = new javax.swing.JLabel();
        jtfMoveType = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jlMoveCy = new javax.swing.JLabel();
        moCurMoveCy = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jbComputeMoveCy = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jlExchangeRate = new javax.swing.JLabel();
        moDecExchangeRate = new sa.lib.gui.bean.SBeanFieldDecimal();
        jbPickExchangeRate = new javax.swing.JButton();
        jlDummy1 = new javax.swing.JLabel();
        jbComputeExchangeRate = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jlMove = new javax.swing.JLabel();
        moCurMove = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jbComputeMove = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        moBoolCheck = new sa.lib.gui.bean.SBeanFieldBoolean();
        jPanel8 = new javax.swing.JPanel();
        jlCheckNumber = new javax.swing.JLabel();
        moIntCheckNumber = new sa.lib.gui.bean.SBeanFieldInteger();
        jtfCheckWallet = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        jlCheckBeneficiary = new javax.swing.JLabel();
        moTextCheckBeneficiary = new sa.lib.gui.bean.SBeanFieldText();
        jbPickCheckBeneficiary = new javax.swing.JButton();
        jbCheckBeneficiaryClear = new javax.swing.JButton();
        jPanel19 = new javax.swing.JPanel();
        jlCheckBeneficiaryAccount = new javax.swing.JLabel();
        moTextCheckBeneficiaryAccount = new sa.lib.gui.bean.SBeanFieldText();
        jlDummy3 = new javax.swing.JLabel();
        jbCheckBeneficiaryAccountClear = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        moBoolCheckForBeneficiaryAccount = new sa.lib.gui.bean.SBeanFieldBoolean();
        jPanel6 = new javax.swing.JPanel();
        jlConcept = new javax.swing.JLabel();
        moTextConcept = new sa.lib.gui.bean.SBeanFieldText();
        jbComputeConcept = new javax.swing.JButton();
        jbApproveConcept = new javax.swing.JButton();
        jlUpdateConcept = new javax.swing.JLabel();
        jpMoveTransfer = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jlTransferCash = new javax.swing.JLabel();
        moKeyTransferCash = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel15 = new javax.swing.JPanel();
        jlTransferMoveCy = new javax.swing.JLabel();
        moCurTransferMoveCy = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jbComputeTransferMoveCy = new javax.swing.JButton();
        jPanel16 = new javax.swing.JPanel();
        jlTransferExchangeRate = new javax.swing.JLabel();
        moDecTransferExchangeRate = new sa.lib.gui.bean.SBeanFieldDecimal();
        jbPickTransferExchangeRate = new javax.swing.JButton();
        jlDummy2 = new javax.swing.JLabel();
        jbComputeTransferExchangeRate = new javax.swing.JButton();
        jPanel17 = new javax.swing.JPanel();
        jlTransferMove = new javax.swing.JLabel();
        moCurTransferMove = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jbComputeTransferMove = new javax.swing.JButton();
        jPanel18 = new javax.swing.JPanel();
        jlTransferExchangeDiff = new javax.swing.JLabel();
        moCurTransferExchangeDiff = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jlTransferExchangeDiffInfo = new javax.swing.JLabel();

        jpMove.setLayout(new java.awt.BorderLayout());

        jpMoveSimple.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del movimiento:"));
        jpMoveSimple.setLayout(new java.awt.GridLayout(11, 1, 0, 5));

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCash.setText("Cuenta de dinero:");
        jlCash.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jlCash);

        jtfCashCode.setEditable(false);
        jtfCashCode.setFocusable(false);
        jtfCashCode.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel12.add(jtfCashCode);

        jtfCash.setEditable(false);
        jtfCash.setFocusable(false);
        jtfCash.setPreferredSize(new java.awt.Dimension(345, 23));
        jPanel12.add(jtfCash);

        jpMoveSimple.add(jPanel12);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlMoveType.setText("Movimiento:");
        jlMoveType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlMoveType);

        jtfMoveType.setEditable(false);
        jtfMoveType.setFocusable(false);
        jtfMoveType.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel7.add(jtfMoveType);

        jpMoveSimple.add(jPanel7);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlMoveCy.setText("Monto:*");
        jlMoveCy.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlMoveCy);
        jPanel3.add(moCurMoveCy);

        jbComputeMoveCy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/gui/img/icon_cal.gif"))); // NOI18N
        jbComputeMoveCy.setToolTipText("Calcular");
        jbComputeMoveCy.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel3.add(jbComputeMoveCy);

        jpMoveSimple.add(jPanel3);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlExchangeRate.setText("Tipo de cambio:*");
        jlExchangeRate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlExchangeRate);
        jPanel4.add(moDecExchangeRate);

        jbPickExchangeRate.setText("...");
        jbPickExchangeRate.setToolTipText("Buscar tipo de cambio");
        jbPickExchangeRate.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel4.add(jbPickExchangeRate);

        jlDummy1.setPreferredSize(new java.awt.Dimension(7, 23));
        jPanel4.add(jlDummy1);

        jbComputeExchangeRate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/gui/img/icon_cal.gif"))); // NOI18N
        jbComputeExchangeRate.setToolTipText("Calcular");
        jbComputeExchangeRate.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel4.add(jbComputeExchangeRate);

        jpMoveSimple.add(jPanel4);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlMove.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jlMove.setText("Monto:*");
        jlMove.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlMove);
        jPanel5.add(moCurMove);

        jbComputeMove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/gui/img/icon_cal.gif"))); // NOI18N
        jbComputeMove.setToolTipText("Calcular");
        jbComputeMove.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel5.add(jbComputeMove);

        jpMoveSimple.add(jPanel5);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moBoolCheck.setText("Movimiento con cheque");
        moBoolCheck.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel11.add(moBoolCheck);

        jpMoveSimple.add(jPanel11);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCheckNumber.setText("Cheque:*");
        jlCheckNumber.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlCheckNumber);
        jPanel8.add(moIntCheckNumber);

        jtfCheckWallet.setEditable(false);
        jtfCheckWallet.setToolTipText("Chequera");
        jtfCheckWallet.setFocusable(false);
        jtfCheckWallet.setPreferredSize(new java.awt.Dimension(295, 23));
        jPanel8.add(jtfCheckWallet);

        jpMoveSimple.add(jPanel8);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCheckBeneficiary.setText("Beneficiario:*");
        jlCheckBeneficiary.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlCheckBeneficiary);

        moTextCheckBeneficiary.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel9.add(moTextCheckBeneficiary);

        jbPickCheckBeneficiary.setText("...");
        jbPickCheckBeneficiary.setToolTipText("Buscar beneficiario");
        jbPickCheckBeneficiary.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel9.add(jbPickCheckBeneficiary);

        jbCheckBeneficiaryClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/gui/img/icon_del.gif"))); // NOI18N
        jbCheckBeneficiaryClear.setToolTipText("Quitar beneficiario");
        jbCheckBeneficiaryClear.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel9.add(jbCheckBeneficiaryClear);

        jpMoveSimple.add(jPanel9);

        jPanel19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCheckBeneficiaryAccount.setText("Cuenta bancaria:");
        jlCheckBeneficiaryAccount.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel19.add(jlCheckBeneficiaryAccount);

        moTextCheckBeneficiaryAccount.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel19.add(moTextCheckBeneficiaryAccount);

        jlDummy3.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel19.add(jlDummy3);

        jbCheckBeneficiaryAccountClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/gui/img/icon_del.gif"))); // NOI18N
        jbCheckBeneficiaryAccountClear.setToolTipText("Quitar cuenta bancaria");
        jbCheckBeneficiaryAccountClear.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel19.add(jbCheckBeneficiaryAccountClear);

        jpMoveSimple.add(jPanel19);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moBoolCheckForBeneficiaryAccount.setText("Para abono en cuenta bancaria del beneficiario");
        moBoolCheckForBeneficiaryAccount.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel10.add(moBoolCheckForBeneficiaryAccount);

        jpMoveSimple.add(jPanel10);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlConcept.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jlConcept.setText("Concepto:*");
        jlConcept.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlConcept);

        moTextConcept.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel6.add(moTextConcept);

        jbComputeConcept.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/gui/img/icon_upd.gif"))); // NOI18N
        jbComputeConcept.setToolTipText("Actualizar concepto");
        jbComputeConcept.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel6.add(jbComputeConcept);

        jbApproveConcept.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/gui/img/icon_ok.gif"))); // NOI18N
        jbApproveConcept.setToolTipText("Aprobar concepto");
        jbApproveConcept.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel6.add(jbApproveConcept);

        jlUpdateConcept.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/gui/img/icon_view_warn.png"))); // NOI18N
        jlUpdateConcept.setText("¡Actualizar concepto!");
        jlUpdateConcept.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel6.add(jlUpdateConcept);

        jpMoveSimple.add(jPanel6);

        jpMove.add(jpMoveSimple, java.awt.BorderLayout.PAGE_START);

        jpMoveTransfer.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos de la cuenta de dinero de destino:"));
        jpMoveTransfer.setLayout(new java.awt.BorderLayout());

        jPanel13.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTransferCash.setText("Cuenta de dinero:*");
        jlTransferCash.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jlTransferCash);

        moKeyTransferCash.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel14.add(moKeyTransferCash);

        jPanel13.add(jPanel14);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTransferMoveCy.setText("Monto:*");
        jlTransferMoveCy.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel15.add(jlTransferMoveCy);
        jPanel15.add(moCurTransferMoveCy);

        jbComputeTransferMoveCy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/gui/img/icon_cal.gif"))); // NOI18N
        jbComputeTransferMoveCy.setToolTipText("Calcular");
        jbComputeTransferMoveCy.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel15.add(jbComputeTransferMoveCy);

        jPanel13.add(jPanel15);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTransferExchangeRate.setText("Tipo de cambio:*");
        jlTransferExchangeRate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel16.add(jlTransferExchangeRate);
        jPanel16.add(moDecTransferExchangeRate);

        jbPickTransferExchangeRate.setText("...");
        jbPickTransferExchangeRate.setToolTipText("Buscar tipo de cambio");
        jbPickTransferExchangeRate.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel16.add(jbPickTransferExchangeRate);

        jlDummy2.setPreferredSize(new java.awt.Dimension(7, 23));
        jPanel16.add(jlDummy2);

        jbComputeTransferExchangeRate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/gui/img/icon_cal.gif"))); // NOI18N
        jbComputeTransferExchangeRate.setToolTipText("Calcular");
        jbComputeTransferExchangeRate.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel16.add(jbComputeTransferExchangeRate);

        jPanel13.add(jPanel16);

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTransferMove.setText("Monto:*");
        jlTransferMove.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel17.add(jlTransferMove);
        jPanel17.add(moCurTransferMove);

        jbComputeTransferMove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/gui/img/icon_cal.gif"))); // NOI18N
        jbComputeTransferMove.setToolTipText("Calcular");
        jbComputeTransferMove.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel17.add(jbComputeTransferMove);

        jPanel13.add(jPanel17);

        jPanel18.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTransferExchangeDiff.setText("Dif. cambiaria:");
        jlTransferExchangeDiff.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel18.add(jlTransferExchangeDiff);
        jPanel18.add(moCurTransferExchangeDiff);

        jlTransferExchangeDiffInfo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/gui/img/icon_view_info.png"))); // NOI18N
        jlTransferExchangeDiffInfo.setText("Información");
        jlTransferExchangeDiffInfo.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel18.add(jlTransferExchangeDiffInfo);

        jPanel13.add(jPanel18);

        jpMoveTransfer.add(jPanel13, java.awt.BorderLayout.NORTH);

        jpMove.add(jpMoveTransfer, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpMove, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbApproveConcept;
    private javax.swing.JButton jbCheckBeneficiaryAccountClear;
    private javax.swing.JButton jbCheckBeneficiaryClear;
    private javax.swing.JButton jbComputeConcept;
    private javax.swing.JButton jbComputeExchangeRate;
    private javax.swing.JButton jbComputeMove;
    private javax.swing.JButton jbComputeMoveCy;
    private javax.swing.JButton jbComputeTransferExchangeRate;
    private javax.swing.JButton jbComputeTransferMove;
    private javax.swing.JButton jbComputeTransferMoveCy;
    private javax.swing.JButton jbPickCheckBeneficiary;
    private javax.swing.JButton jbPickExchangeRate;
    private javax.swing.JButton jbPickTransferExchangeRate;
    private javax.swing.JLabel jlCash;
    private javax.swing.JLabel jlCheckBeneficiary;
    private javax.swing.JLabel jlCheckBeneficiaryAccount;
    private javax.swing.JLabel jlCheckNumber;
    private javax.swing.JLabel jlConcept;
    private javax.swing.JLabel jlDummy1;
    private javax.swing.JLabel jlDummy2;
    private javax.swing.JLabel jlDummy3;
    private javax.swing.JLabel jlExchangeRate;
    private javax.swing.JLabel jlMove;
    private javax.swing.JLabel jlMoveCy;
    private javax.swing.JLabel jlMoveType;
    private javax.swing.JLabel jlTransferCash;
    private javax.swing.JLabel jlTransferExchangeDiff;
    private javax.swing.JLabel jlTransferExchangeDiffInfo;
    private javax.swing.JLabel jlTransferExchangeRate;
    private javax.swing.JLabel jlTransferMove;
    private javax.swing.JLabel jlTransferMoveCy;
    private javax.swing.JLabel jlUpdateConcept;
    private javax.swing.JPanel jpMove;
    private javax.swing.JPanel jpMoveSimple;
    private javax.swing.JPanel jpMoveTransfer;
    private javax.swing.JTextField jtfCash;
    private javax.swing.JTextField jtfCashCode;
    private javax.swing.JTextField jtfCheckWallet;
    private javax.swing.JTextField jtfMoveType;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolCheck;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolCheckForBeneficiaryAccount;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurMove;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurMoveCy;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurTransferExchangeDiff;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurTransferMove;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurTransferMoveCy;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecExchangeRate;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecTransferExchangeRate;
    private sa.lib.gui.bean.SBeanFieldInteger moIntCheckNumber;
    private sa.lib.gui.bean.SBeanFieldKey moKeyTransferCash;
    private sa.lib.gui.bean.SBeanFieldText moTextCheckBeneficiary;
    private sa.lib.gui.bean.SBeanFieldText moTextCheckBeneficiaryAccount;
    private sa.lib.gui.bean.SBeanFieldText moTextConcept;
    // End of variables declaration//GEN-END:variables

    /*
     * Private methods
     */

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 880, 550);

        moSessionCustom = (SSessionCustom) miClient.getSession().getSessionCustom();

        moCurMoveCy.setCompoundFieldSettings(miClient);
        moCurMoveCy.getField().setDecimalSettings(SGuiUtils.getLabelName(jlMoveCy), SGuiConsts.GUI_TYPE_DEC_AMT, true);
        moDecExchangeRate.setDecimalSettings(SGuiUtils.getLabelName(jlExchangeRate), SGuiConsts.GUI_TYPE_DEC_EXC_RATE, true);
        moDecExchangeRate.setDecimalFormat(SLibUtils.DecimalFormatValue8D);
        moDecExchangeRate.setFieldButton(jbPickExchangeRate);
        moCurMove.setCompoundFieldSettings(miClient);
        moCurMove.getField().setDecimalSettings(SGuiUtils.getLabelName(jlMove), SGuiConsts.GUI_TYPE_DEC_AMT, true);
        moBoolCheck.setBooleanSettings(SGuiUtils.getLabelName(moBoolCheck.getText()), false);
        moIntCheckNumber.setIntegerSettings(SGuiUtils.getLabelName(jlCheckNumber), SGuiConsts.GUI_TYPE_INT_RAW, true);
        moTextCheckBeneficiary.setTextSettings(SGuiUtils.getLabelName(jlCheckBeneficiary), 202);
        moTextCheckBeneficiary.setFieldButton(jbPickCheckBeneficiary);
        moTextCheckBeneficiaryAccount.setTextSettings(SGuiUtils.getLabelName(jlCheckBeneficiaryAccount), 100, 0);
        moBoolCheckForBeneficiaryAccount.setBooleanSettings(SGuiUtils.getLabelName(moBoolCheckForBeneficiaryAccount.getText()), true);
        moTextConcept.setTextSettings(SGuiUtils.getLabelName(jlConcept), SDataRecordEntry.LEN_CONCEPT);
        moKeyTransferCash.setKeySettings(miClient, SGuiUtils.getLabelName(jlTransferCash), true);
        moCurTransferMoveCy.setCompoundFieldSettings(miClient);
        moCurTransferMoveCy.getField().setDecimalSettings(SGuiUtils.getLabelName(jlTransferMoveCy), SGuiConsts.GUI_TYPE_DEC_AMT, true);
        moDecTransferExchangeRate.setDecimalSettings(SGuiUtils.getLabelName(jlTransferExchangeRate), SGuiConsts.GUI_TYPE_DEC_EXC_RATE, true);
        moDecTransferExchangeRate.setDecimalFormat(SLibUtils.DecimalFormatValue8D);
        moDecTransferExchangeRate.setFieldButton(jbPickTransferExchangeRate);
        moCurTransferMove.setCompoundFieldSettings(miClient);
        moCurTransferMove.getField().setDecimalSettings(SGuiUtils.getLabelName(jlTransferMove), SGuiConsts.GUI_TYPE_DEC_AMT, true);
        moCurTransferExchangeDiff.setCompoundFieldSettings(miClient);
        moCurTransferExchangeDiff.getField().setDecimalSettings(SGuiUtils.getLabelName(jlTransferExchangeDiff), SGuiConsts.GUI_TYPE_DEC_AMT, true);

        moCurTransferExchangeDiff.setEditable(false);

        moFields.addField(moCurMoveCy.getField());
        moFields.addField(moDecExchangeRate);
        moFields.addField(moCurMove.getField());
        moFields.addField(moBoolCheck);
        moFields.addField(moIntCheckNumber);
        moFields.addField(moTextCheckBeneficiary);
        moFields.addField(moTextCheckBeneficiaryAccount);
        moFields.addField(moBoolCheckForBeneficiaryAccount);
        moFields.addField(moTextConcept);
        moFields.addField(moKeyTransferCash);
        moFields.addField(moCurTransferMoveCy.getField());
        moFields.addField(moDecTransferExchangeRate);
        moFields.addField(moCurTransferMove.getField());
        moFields.addField(moCurTransferExchangeDiff.getField());

        moFields.setFormButton(jbSave);

        moCurMove.setCurrencyKey(moSessionCustom.getLocalCurrencyKey());
        moCurTransferMove.setCurrencyKey(moSessionCustom.getLocalCurrencyKey());
        moCurTransferExchangeDiff.setCurrencyKey(moSessionCustom.getLocalCurrencyKey());

        moCurrentChecksSet = new HashSet<Integer>();
    }

    private int getCheckNumber() throws SQLException, Exception {
        int numCheck = 0;
        int numLast = 0;

        if (mnCheckCurrentNumber != 0) {
            numCheck = mnCheckCurrentNumber;
        }
        else {
            numCheck = SFinUtils.getCheckNextNumber(miClient.getSession(), moCheckWallet.getPkCheckWalletId());

            for (Integer number : moCurrentChecksSet) {
                if (number > numLast) {
                    numLast = number;
                }
            }

            if (numLast >= numCheck) {
                numCheck = numLast + 1;
            }
        }

        return numCheck;
    }

    private void renderCheckWallet(final SDbCheckWallet checkWallet) {
        String text = "";

        if (checkWallet != null) {
            text = "Chequera actual: folios desde " + checkWallet.getNumberStart();
            if (checkWallet.getNumberEnd_n() != 0) {
                text += " hasta " + checkWallet.getNumberEnd_n();
            }
        }

        jtfCheckWallet.setText(text);
        jtfCheckWallet.setCaretPosition(0);
    }

    private void renderCheckBizPartner(final SDbBizPartner beneficiary, final SDbBizPartnerBranchBankAccount beneficiaryAccount) {
        String textBank = "";
        String textBankBranch = "";
        String textBankAccount = "";
        String textBeneficiary = "";
        String textBeneficiaryAccount = "";
        SDbBizPartner bank = null;

        if (beneficiary == null) {
            moTextCheckBeneficiary.setEditable(true);
            jbPickCheckBeneficiary.setEnabled(true);
            jbCheckBeneficiaryClear.setEnabled(false);

            moTextCheckBeneficiaryAccount.setEditable(true);
            jbCheckBeneficiaryAccountClear.setEnabled(false);
        }
        else {
            moTextCheckBeneficiary.setEditable(false);
            jbPickCheckBeneficiary.setEnabled(false);
            jbCheckBeneficiaryClear.setEnabled(true);

            moTextCheckBeneficiaryAccount.setEditable(beneficiaryAccount == null);
            jbCheckBeneficiaryAccountClear.setEnabled(beneficiaryAccount != null);

            textBeneficiary = beneficiary.getBizPartner();

            if (beneficiaryAccount != null) {
                bank = (SDbBizPartner) miClient.getSession().readRegistry(SModConsts.BPSU_BP, new int[] { beneficiaryAccount.getFkBankId() });
                textBank = SFinConsts.TXT_BANK_BANK + ": " + bank.getBizPartnerCommercial();
                textBankBranch= SFinConsts.TXT_BANK_BRA + ": " + beneficiaryAccount.getBankAccountBranchNumber();
                textBankAccount= SFinConsts.TXT_BANK_ACC + ": " + beneficiaryAccount.getBankAccountNumber();

                // Text length of beneficiary account is limited:

                if ((textBank.length() + textBankBranch.length() + textBankAccount.length() + 4) <= moTextCheckBeneficiaryAccount.getMaxLength()) {
                    textBeneficiaryAccount = textBank + "; " + textBankBranch + "; " + textBankAccount; // 4 extra characters
                }
                else {
                    textBeneficiaryAccount = textBankBranch + "; " + textBankAccount;
                }
            }
        }

        moTextCheckBeneficiary.setText(textBeneficiary);
        moTextCheckBeneficiary.setCaretPosition(0);
        moTextCheckBeneficiaryAccount.setText(textBeneficiaryAccount);
        moTextCheckBeneficiaryAccount.setCaretPosition(0);
    }

    private void computeTransferExchangeDiff() {
        double exchangeDiff = 0;
        String exchangeDiffInfo = "";

        if (mbMoveTransfer) {
            if (mbTransferExchangeDiff) {
                if (mbMoveIncome) {
                    // When cash move is a transfer, only outoging money from source cash is allowed. This case is left only for consistence:

                    exchangeDiff = moCurMove.getField().getValue() - moCurTransferMove.getField().getValue();
                }
                else {
                    // When cash move is a transfer, only outoging money from source cash is allowed. This case is the very best to be used:

                    exchangeDiff = moCurTransferMove.getField().getValue() - moCurMove.getField().getValue();
                }

                exchangeDiffInfo = exchangeDiff == 0 ? "" : "Originada por la cuenta de dinero de " + (mbTransferExchangeDiffOnSource ? "origen" : "destino");
            }

            moCurTransferExchangeDiff.getField().setValue(exchangeDiff);
        }

        jlTransferExchangeDiffInfo.setText(exchangeDiffInfo);
        jlTransferExchangeDiffInfo.setVisible(!exchangeDiffInfo.isEmpty());
    }

    /**
     * @return Concept text. If text length exceds maximum allowed, then text is truncated and "..." concatenated at the end indicating it.
     */
    private String formatConcept(String concept) {
        return concept.length() < SDataRecordEntry.LEN_CONCEPT ? concept : concept.substring(0, SDataRecordEntry.LEN_CONCEPT - SErpConsts.ELLIPSIS.length()) + SErpConsts.ELLIPSIS;
    }

    private String composeConceptCash() {
        String concept = msMoveTypeAbbr;

        if (moBoolCheck.isSelected()) {
            concept += (concept.isEmpty() ? "" : "; ") + SFinConsts.TXT_CHECK + " " + moIntCheckNumber.getValue();

            if (!moTextCheckBeneficiary.getValue().isEmpty()) {
                concept += "; " + moTextCheckBeneficiary.getValue();
            }
        }

        return formatConcept(concept);
    }

    private String composeConceptCheck() {
        String concept = msMoveTypeAbbr;

        if (moBoolCheck.isSelected()) {
            concept += (concept.isEmpty() ? "" : "; ") + SFinConsts.TXT_CHECK + " " + moIntCheckNumber.getValue();

            if (moCashBankAccount != null) {
                concept += "; " + (String) miClient.getSession().readField(SModConsts.BPSU_BP, new int[] { moCashBankAccount.getFkBankId() }, SDbBizPartner.FIELD_NAME_COMM);

                if (moCheckBizPartnerBranchBankAccount != null) {
                    concept += "/" + (String) miClient.getSession().readField(SModConsts.BPSU_BP, new int[] { moCheckBizPartnerBranchBankAccount.getFkBankId() }, SDbBizPartner.FIELD_NAME_COMM);
                }
            }
        }

        return formatConcept(concept);
    }

    private String composeConceptCheckTransfer() {
        String concept = msMoveTypeAbbr;
        SDbBizPartnerBranchBankAccount bankAccount = null;

        if (moBoolCheck.isSelected()) {
            concept += (concept.isEmpty() ? "" : "; ") + SFinConsts.TXT_CHECK + " " + moIntCheckNumber.getValue();

            if (moCashBankAccount != null) {
                concept += "; " + (String) miClient.getSession().readField(SModConsts.BPSU_BP, new int[] { moCashBankAccount.getFkBankId() }, SDbBizPartner.FIELD_NAME_COMM);

                if (manTransferCashKey != null) {
                    bankAccount = (SDbBizPartnerBranchBankAccount) miClient.getSession().readRegistry(SModConsts.BPSU_BANK_ACC, manTransferCashKey);
                    if (bankAccount != null) {
                        concept += "/" + (String) miClient.getSession().readField(SModConsts.BPSU_BP, new int[] { bankAccount.getFkBankId() }, SDbBizPartner.FIELD_NAME_COMM);
                    }
                }
            }
        }

        return formatConcept(concept);
    }

    private void preserveCheckNumber() {
        mnAuxCheckNumber = moIntCheckNumber.getValue();
    }

    private void preserveCheckBeneficiary() {
        msAuxCheckBeneficiary = moTextCheckBeneficiary.getValue();
    }

    private void setUpdateConcept(boolean update) {
        mbUpdateConcept = update;

        mnAuxCheckNumber = 0;
        msAuxCheckBeneficiary = "";

        jbApproveConcept.setEnabled(update);
        jlUpdateConcept.setVisible(update);
    }

    private void computeConcept(final SFinConceptEvaluation evaluation) {
        if (moTextConcept.getValue().isEmpty() || moTextConcept.getValue().compareTo(msMoveTypeAbbr) == 0) {
            moTextConcept.setValue(composeConceptCash());
            setUpdateConcept(false);
        }
        else if (evaluation != null) {
            switch (evaluation) {
                case NUMBER_CHECK:
                    if (mnAuxCheckNumber != moIntCheckNumber.getValue()) {
                        setUpdateConcept(true);
                    }
                    break;
                case BIZ_PARTNER:
                    if(msAuxCheckBeneficiary.compareTo(moTextCheckBeneficiary.getValue()) != 0) {
                        setUpdateConcept(true);
                    }
                    break;
                default:
            }
        }
    }

    private void actionComputeConcept() {
        moTextConcept.setValue(composeConceptCash());
        setUpdateConcept(false);
        moTextConcept.requestFocus();
    }

    private void actionApproveConcept() {
        if (miClient.showMsgBoxConfirm("¿Está seguro que el valor del campo '" + SGuiUtils.getLabelName(jlConcept) + "' es correcto?") == JOptionPane.YES_OPTION) {
            setUpdateConcept(false);
        }
        moTextConcept.requestFocus();
    }

    private void actionComputeMoveCy(boolean requestFocus) {
        double excRate = moDecExchangeRate.getValue();
        double move = moCurMove.getField().getValue();

        moCurMoveCy.getField().setValue(SLibUtils.round(excRate == 0 ? 0 : move / excRate, SLibUtils.getDecimalFormatAmount().getMaximumFractionDigits()));
        if (requestFocus) {
            moCurMoveCy.getField().getComponent().requestFocus();
        }
    }

    private void actionComputeMove(boolean requestFocus) {
        double moveCy = moCurMoveCy.getField().getValue();
        double excRate = moDecExchangeRate.getValue();

        moCurMove.getField().setValue(SLibUtils.round(moveCy * excRate, SLibUtils.getDecimalFormatAmount().getMaximumFractionDigits()));
        if (requestFocus) {
            moCurMove.getField().getComponent().requestFocus();
        }
    }

    private void actionComputeExchangeRate(boolean requestFocus) {
        double moveCy = moCurMoveCy.getField().getValue();
        double move = moCurMove.getField().getValue();

        moDecExchangeRate.setValue(SLibUtils.round(moveCy == 0 ? 0 : move / moveCy, SLibUtils.getDecimalFormatExchangeRate().getMaximumFractionDigits()));
        if (requestFocus) {
            moDecExchangeRate.requestFocus();
        }
    }

    private void actionComputeTransferMoveCy(boolean requestFocus) {
        double excRate = moDecTransferExchangeRate.getValue();
        double move = moCurTransferMove.getField().getValue();

        moCurTransferMoveCy.getField().setValue(SLibUtils.round(excRate == 0 ? 0 : move / excRate, SLibUtils.getDecimalFormatAmount().getMaximumFractionDigits()));
        if (requestFocus) {
            moCurTransferMoveCy.getField().getComponent().requestFocus();
        }
    }

    private void actionComputeTransferMove(boolean requestFocus) {
        double moveCy = moCurTransferMoveCy.getField().getValue();
        double excRate = moDecTransferExchangeRate.getValue();

        moCurTransferMove.getField().setValue(SLibUtils.round(moveCy * excRate, SLibUtils.getDecimalFormatAmount().getMaximumFractionDigits()));
        if (requestFocus) {
            moCurTransferMove.getField().getComponent().requestFocus();
        }
    }

    private void actionComputeTransferExchangeRate(boolean requestFocus) {
        double moveCy = moCurTransferMoveCy.getField().getValue();
        double move = moCurTransferMove.getField().getValue();

        moDecTransferExchangeRate.setValue(SLibUtils.round(moveCy == 0 ? 0 : move / moveCy, SLibUtils.getDecimalFormatExchangeRate().getMaximumFractionDigits()));
        if (requestFocus) {
            moDecTransferExchangeRate.requestFocus();
        }
    }

    private void actionPickExchangeRate() {
        miClient.getSession().showOptionPicker(SModConsts.FIN_EXC_RATE, manCashCurrencyKey[0], null, moDecExchangeRate);
    }

    private void actionPickTransferExchangeRate() {
        miClient.getSession().showOptionPicker(SModConsts.FIN_EXC_RATE, manTransferCashCurrencyKey[0], null, moDecTransferExchangeRate);
    }

    private void actionPickCheckBeneficiary() {
        int[] key = null;
        SGuiOptionPicker picker = null;

        preserveCheckBeneficiary();

        picker = miClient.getSession().getModule(SModConsts.MOD_BPS_N).getOptionPicker(SModConsts.BPSU_BANK_ACC, SLibConsts.UNDEFINED, null);
        picker.resetPicker();
        picker.setPickerVisible(true);

        if (picker.getPickerResult() == SGuiConsts.FORM_RESULT_OK) {
            key = (int[]) picker.getOption();

            if (key != null) {
                if (key[0] != SLibConsts.UNDEFINED) {
                    moCheckBizPartner = (SDbBizPartner) miClient.getSession().readRegistry(SModConsts.BPSU_BP, new int[] { key[0] });
                }
                if (key[1] != SLibConsts.UNDEFINED && key[2] != SLibConsts.UNDEFINED) {
                    moCheckBizPartnerBranchBankAccount = (SDbBizPartnerBranchBankAccount) miClient.getSession().readRegistry(SModConsts.BPSU_BANK_ACC, new int[] { key[1], key[2] });
                }

                renderCheckBizPartner(moCheckBizPartner, moCheckBizPartnerBranchBankAccount);

                if (moTextCheckBeneficiaryAccount.isEditable()) {
                    moTextCheckBeneficiaryAccount.requestFocus();
                }
                else {
                    moBoolCheckForBeneficiaryAccount.requestFocus();
                }
            }
        }

        computeConcept(SFinConceptEvaluation.BIZ_PARTNER);
    }

    private void actionCheckBeneficiaryClear() {
        preserveCheckBeneficiary();

        renderCheckBizPartner(moCheckBizPartner = null, moCheckBizPartnerBranchBankAccount = null);
        moTextCheckBeneficiary.requestFocus();

        computeConcept(SFinConceptEvaluation.BIZ_PARTNER);
    }

    private void actionCheckBeneficiaryAccountClear() {
        renderCheckBizPartner(moCheckBizPartner, moCheckBizPartnerBranchBankAccount = null);
        moTextCheckBeneficiaryAccount.requestFocus();
    }

    private void focusLostMoveCy() {
        if ((moDecExchangeRate.getValue() != 0 && moCurMove.getField().getValue() == 0) || !moCurMove.getField().isEditable()) {
            actionComputeMove(false);
        }
        else if (moDecExchangeRate.getValue() == 0 && moCurMove.getField().getValue() != 0) {
            actionComputeExchangeRate(false);
        }

        computeTransferExchangeDiff();
    }

    private void focusLostMove() {
        if (moCurMoveCy.getField().getValue() != 0 && moDecExchangeRate.getValue() == 0) {
            actionComputeExchangeRate(false);
        }
        else if (moCurMoveCy.getField().getValue() == 0 && moDecExchangeRate.getValue() != 0) {
            actionComputeMoveCy(false);
        }

        computeTransferExchangeDiff();
    }

    private void focusLostExchangeRate() {
        if (moCurMoveCy.getField().getValue() != 0 && moCurMove.getField().getValue() == 0) {
            actionComputeMove(false);
        }
        else if (moCurMoveCy.getField().getValue() == 0 && moCurMove.getField().getValue() != 0) {
            actionComputeMoveCy(false);
        }

        computeTransferExchangeDiff();
    }

    private void focusLostTransferMoveCy() {
        if ((moDecTransferExchangeRate.getValue() != 0 && moCurTransferMove.getField().getValue() == 0) || !moCurTransferMove.getField().isEditable()) {
            actionComputeTransferMove(false);
        }
        else if (moDecTransferExchangeRate.getValue() == 0 && moCurTransferMove.getField().getValue() != 0) {
            actionComputeTransferExchangeRate(false);
        }

        computeTransferExchangeDiff();
    }

    private void focusLostTransferMove() {
        if (moCurTransferMoveCy.getField().getValue() != 0 && moDecTransferExchangeRate.getValue() == 0) {
            actionComputeTransferExchangeRate(false);
        }
        else if (moCurTransferMoveCy.getField().getValue() == 0 && moDecTransferExchangeRate.getValue() != 0) {
            actionComputeTransferMoveCy(false);
        }

        computeTransferExchangeDiff();
    }

    private void focusLostTransferExchangeRate() {
        if (moCurTransferMoveCy.getField().getValue() != 0 && moCurTransferMove.getField().getValue() == 0) {
            actionComputeTransferMove(false);
        }
        else if (moCurTransferMoveCy.getField().getValue() == 0 && moCurTransferMove.getField().getValue() != 0) {
            actionComputeTransferMoveCy(false);
        }

        computeTransferExchangeDiff();
    }

    private void itemStateCheck() {
        int numCheck = 0;
        boolean isForBeneficiaryAccount = false;
        boolean proceed = false;

        preserveCheckNumber();

        moCheckWallet = null;
        moCheckBizPartner = null;
        moCheckBizPartnerBranchBankAccount = null;

        if (moBoolCheck.isSelected()) {
            try {
                moCheckWallet = SFinUtils.readCheckWallet(miClient.getSession(), (int[]) moCashXXX.getPrimaryKey());
                numCheck = getCheckNumber();
                isForBeneficiaryAccount = true;
                proceed = true;
            }
            catch (Exception e) {
                moCheckWallet = null;
                numCheck = 0;
                isForBeneficiaryAccount = false;
                SLibUtils.showException(this, e);
            }
        }

        if (moBoolCheck.isSelected() && proceed) {
            moIntCheckNumber.setEditable(true);
            moTextCheckBeneficiary.setEditable(true);
            moTextCheckBeneficiaryAccount.setEditable(true);
            moBoolCheckForBeneficiaryAccount.setEnabled(true);
            jbPickCheckBeneficiary.setEnabled(true);
            jbCheckBeneficiaryClear.setEnabled(false);
            jbCheckBeneficiaryAccountClear.setEnabled(false);
        }
        else {
            moIntCheckNumber.setEditable(false);
            moTextCheckBeneficiary.setEditable(false);
            moTextCheckBeneficiaryAccount.setEditable(false);
            moBoolCheckForBeneficiaryAccount.setEnabled(false);
            jbPickCheckBeneficiary.setEnabled(false);
            jbCheckBeneficiaryClear.setEnabled(false);
            jbCheckBeneficiaryAccountClear.setEnabled(false);
        }

        renderCheckWallet(moCheckWallet);
        moIntCheckNumber.setValue(numCheck);
        moTextCheckBeneficiary.setValue("");
        moTextCheckBeneficiaryAccount.setValue("");
        moBoolCheckForBeneficiaryAccount.setValue(isForBeneficiaryAccount);

        computeConcept(SFinConceptEvaluation.NUMBER_CHECK);
    }

    private void itemStateTransferCash() {
        if (moKeyTransferCash.getSelectedIndex() <= 0) {
            manTransferCashKey = null;
            manTransferCashCurrencyKey = null;
            mbTransferCashLocalCurrency = false;

            moCurTransferMoveCy.setEditable(false);
            jbComputeTransferMoveCy.setEnabled(false);

            moDecTransferExchangeRate.setEditable(false);
            jbComputeTransferExchangeRate.setEnabled(false);
            jbPickTransferExchangeRate.setEnabled(false);

            moCurTransferMove.setEditable(false);
            jbComputeTransferMove.setEnabled(false);

            mbTransferExchangeDiff = false;
            mbTransferExchangeDiffOnSource = false;

            moDecTransferExchangeRate.setValue(0d);
            moCurTransferMoveCy.getField().setValue(0d);
            moCurTransferMove.getField().setValue(0d);
        }
        else {
            manTransferCashKey = moKeyTransferCash.getSelectedItem().getPrimaryKey();
            manTransferCashCurrencyKey = new int[] { SFinUtils.getCashCurrencyId(miClient.getSession(), manTransferCashKey) };
            mbTransferCashLocalCurrency = moSessionCustom.isLocalCurrency(manTransferCashCurrencyKey);

            if (mbTransferCashLocalCurrency) {
                moCurTransferMoveCy.setEditable(true);
                jbComputeTransferMoveCy.setEnabled(false);

                moDecTransferExchangeRate.setEditable(false);
                jbComputeTransferExchangeRate.setEnabled(false);
                jbPickTransferExchangeRate.setEnabled(false);

                moCurTransferMove.setEditable(false);
                jbComputeTransferMove.setEnabled(false);
            }
            else {
                moCurTransferMoveCy.setEditable(true);
                jbComputeTransferMoveCy.setEnabled(true);

                moDecTransferExchangeRate.setEditable(true);
                jbComputeTransferExchangeRate.setEnabled(true);
                jbPickTransferExchangeRate.setEnabled(true);

                moCurTransferMove.setEditable(true);
                jbComputeTransferMove.setEnabled(true);
            }

            mbTransferExchangeDiff = !mbCashLocalCurrency || !mbTransferCashLocalCurrency;
            mbTransferExchangeDiffOnSource = mbTransferExchangeDiff && !mbCashLocalCurrency;

            if (SLibUtils.compareKeys(manCashCurrencyKey, manTransferCashCurrencyKey)) {
                moDecTransferExchangeRate.setValue(moDecExchangeRate.getValue());
                moCurTransferMoveCy.getField().setValue(moCurMoveCy.getField().getValue());
                moCurTransferMove.getField().setValue(moCurMove.getField().getValue());
            }
            else if (moSessionCustom.isLocalCurrency(manTransferCashCurrencyKey)) {
                moDecTransferExchangeRate.setValue(1d);
                moCurTransferMoveCy.getField().setValue(moCurMove.getField().getValue());
                moCurTransferMove.getField().setValue(moCurMove.getField().getValue());
            }
            else {
                moDecTransferExchangeRate.setValue(0d);
                moCurTransferMoveCy.getField().setValue(0d);
                moCurTransferMove.getField().setValue(moCurMove.getField().getValue());
            }

        }

        moCurTransferMoveCy.setCurrencyKey(manTransferCashCurrencyKey);
        computeTransferExchangeDiff();
    }

    private SDataRecordEntry createRecordEntryCash() throws Exception {
        int idAccount = SLibConsts.UNDEFINED;
        int[] keySysAccType = null;
        int[] keySysMoveTypeXXX = null;
        SDataRecordEntry entry = null;
        SDataCheck check = null;

        if (moAbpCash == null) {
            throw new Exception(SFinConsts.MSG_ERR_ABP_ENT_NOT_FOUND + "'" + moCashXXX.getAuxEntity() + "'.");
        }
        else {
            entry = new SDataRecordEntry();

            if (mbMoveIncome) {
                entry.setDebit(moCurMove.getField().getValue());
                entry.setCredit(0);
                entry.setExchangeRate(moDecExchangeRate.getValue());
                entry.setExchangeRateSystem(entry.getExchangeRate());
                entry.setDebitCy(moCurMoveCy.getField().getValue());
                entry.setCreditCy(0);
            }
            else {
                entry.setDebit(0);
                entry.setCredit(moCurMove.getField().getValue());
                entry.setExchangeRate(moDecExchangeRate.getValue());
                entry.setExchangeRateSystem(entry.getExchangeRate());
                entry.setDebitCy(0);
                entry.setCreditCy(moCurMoveCy.getField().getValue());
            }

            entry.setConcept(moTextConcept.getValue());
            entry.setIsExchangeDifference(SFinUtils.isSysMoveTypeForExchangeRateDiff(manSysMoveTypeKey));
            entry.setIsSystem(false);

            idAccount = moAbpCash.getFkCashAccountId();
            entry.setFkAccountIdXXX(SFinUtils.getAccountFormerIdXXX(miClient.getSession(), idAccount));
            entry.setFkAccountId(idAccount);
            entry.setDbmsAccount((String) miClient.getSession().readField(SModConsts.FIN_ACC, new int[] { idAccount }, SDbRegistry.FIELD_NAME));

            entry.setFkCostCenterIdXXX_n("");
            entry.setFkCostCenterId_n(SLibConsts.UNDEFINED);
            entry.setDbmsCostCenter_n("");

            entry.setFkItemId_n(SLibConsts.UNDEFINED);
            entry.setXtaItemCode("");
            entry.setXtaItem("");

            entry.setFkCompanyBranchId_n(moCashXXX.getPkCompanyBranchId());
            entry.setFkEntityId_n(moCashXXX.getPkAccountCashId());
            entry.setXtaEntityCode(moCashXXX.getDbmsCompanyBranchEntity().getCode());
            entry.setXtaEntity(moCashXXX.getDbmsCompanyBranchEntity().getEntity());

            entry.setFkCurrencyId(manCashCurrencyKey[0]);
            entry.setDbmsCurrencyKey(moSessionCustom.getCurrencyCode(manCashCurrencyKey));

            entry.setFkAccountingMoveTypeId(manAccMoveSubclassKeyXXX[0]);
            entry.setFkAccountingMoveClassId(manAccMoveSubclassKeyXXX[1]);
            entry.setFkAccountingMoveSubclassId(manAccMoveSubclassKeyXXX[2]);
            entry.setFkSystemMoveClassId(manSysMoveTypeKey[0]);
            entry.setFkSystemMoveTypeId(manSysMoveTypeKey[1]);
            entry.setXtaSystemMoveClass((String) miClient.getSession().readField(SModConsts.FINS_CL_SYS_MOV, manSysMoveTypeKey, SDbRegistry.FIELD_NAME));
            entry.setXtaSystemMoveType((String) miClient.getSession().readField(SModConsts.FINS_TP_SYS_MOV, manSysMoveTypeKey, SDbRegistry.FIELD_NAME));

            switch (moCashXXX.getFkAccountCashCategoryId()) {
                case SModSysConsts.FINS_CT_ACC_CASH_CASH:
                    keySysAccType = SModSysConsts.FINS_TP_SYS_ACC_ENT_CSH_CSH;
                    keySysMoveTypeXXX = SDataConstantsSys.FINS_TP_SYS_MOV_CASH_CASH;
                    break;
                case SModSysConsts.FINS_CT_ACC_CASH_BANK:
                    keySysAccType = SModSysConsts.FINS_TP_SYS_ACC_ENT_CSH_BNK;
                    keySysMoveTypeXXX = SDataConstantsSys.FINS_TP_SYS_MOV_CASH_BANK;
                    break;
                default:
            }

            entry.setFkSystemAccountClassId(keySysAccType[0]);
            entry.setFkSystemAccountTypeId(keySysAccType[1]);
            entry.setFkSystemMoveCategoryIdXXX(keySysMoveTypeXXX[0]);
            entry.setFkSystemMoveTypeIdXXX(keySysMoveTypeXXX[1]);

            entry.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
            entry.setDbmsUserNew((String) miClient.getSession().readField(SModConsts.USRU_USR, new int[] { entry.getFkUserNewId() }, SDbRegistry.FIELD_NAME));
            entry.setFkUserEditId(SUtilConsts.USR_NA_ID);
            entry.setDbmsUserEdit((String) miClient.getSession().readField(SModConsts.USRU_USR, new int[] { entry.getFkUserEditId() }, SDbRegistry.FIELD_NAME));
            entry.setFkUserDeleteId(entry.getFkUserEditId());
            entry.setDbmsUserDelete(entry.getDbmsUserEdit());

            if (moBoolCheck.isSelected()) {
                check = new SDataCheck();

                check.setPkCheckWalletId(moCheckWallet.getPkCheckWalletId());
                check.setPkCheckId(SLibConsts.UNDEFINED);
                check.setDate(mtMoveDate);
                check.setNumber(moIntCheckNumber.getValue());
                check.setBeneficiary(moTextCheckBeneficiary.getValue());
                check.setBeneficiaryAccount(moTextCheckBeneficiaryAccount.getValue());
                check.setIsForBeneficiaryAccount(moBoolCheckForBeneficiaryAccount.getValue());
                check.setValue(moCurMove.getField().getValue());
                check.setFkCheckStatusId(SModSysConsts.TRNS_ST_DPS_EMITED);
                check.setFkBizPartnerId_nr(moCheckBizPartner == null ? SLibConsts.UNDEFINED : moCheckBizPartner.getPkBizPartnerId());
                check.setFkBizPartnerBranchId(moCheckBizPartnerBranchBankAccount == null ? SLibConsts.UNDEFINED : moCheckBizPartnerBranchBankAccount.getPkBizPartnerBranchId());
                check.setFkBankAccountId(moCheckBizPartnerBranchBankAccount == null ? SLibConsts.UNDEFINED : moCheckBizPartnerBranchBankAccount.getPkBankAccountId());
                check.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
                check.setFkUserEditId(SUtilConsts.USR_NA_ID);
                check.setFkUserDeleteId(entry.getFkUserEditId());

                entry.setDbmsCheck(check);
            }
        }

        return entry;
    }

    private SDataRecordEntry createRecordEntryCounterpart() throws Exception {
        int idAccount = SLibConsts.UNDEFINED;
        int idCostCenter = SLibConsts.UNDEFINED;
        int idItem = SLibConsts.UNDEFINED;
        boolean resultsAccount = false;
        int[] keySysAccType = null;
        int[] keySysMoveTypeXXX = null;
        SDbAbpEntity abpTransferCash = null;
        SDataRecordEntry entry = null;

        if (!mbMoveTransfer) {
            // Counterpart for standard move:

            if (moAbpCash == null) {
                throw new Exception(SFinConsts.MSG_ERR_ABP_ENT_NOT_FOUND + "'" + moCashXXX.getAuxEntity() + "'.");
            }
            else {
                entry = new SDataRecordEntry();

                if (mbMoveIncome) {
                    entry.setDebit(0);
                    entry.setCredit(moCurMove.getField().getValue());
                    entry.setExchangeRate(moDecExchangeRate.getValue());
                    entry.setExchangeRateSystem(entry.getExchangeRate());
                    entry.setDebitCy(0);
                    entry.setCreditCy(moCurMoveCy.getField().getValue());
                }
                else {
                    entry.setDebit(moCurMove.getField().getValue());
                    entry.setCredit(0);
                    entry.setExchangeRate(moDecExchangeRate.getValue());
                    entry.setExchangeRateSystem(entry.getExchangeRate());
                    entry.setDebitCy(moCurMoveCy.getField().getValue());
                    entry.setCreditCy(0);
                }

                if (moBoolCheck.isSelected()) {
                    entry.setConcept(composeConceptCheck());
                }
                else {
                    entry.setConcept(moTextConcept.getValue());
                }
                entry.setIsExchangeDifference(SFinUtils.isSysMoveTypeForExchangeRateDiff(manSysMoveTypeKey));
                entry.setIsSystem(true);

                if (SLibUtils.compareKeys(manSysMoveTypeKey, SModSysConsts.FINS_TP_SYS_MOV_MI_INV)) {
                    idAccount = moAbpCash.getFkCashAccountInvestmentId();
                }
                else if (SLibUtils.compareKeys(manSysMoveTypeKey, SModSysConsts.FINS_TP_SYS_MOV_MO_INV)) {
                    idAccount = moAbpCash.getFkCashAccountInvestmentId();
                }
                else if (SLibUtils.compareKeys(manSysMoveTypeKey, SModSysConsts.FINS_TP_SYS_MOV_MI_EQY)) {
                    idAccount = moAbpCash.getFkCashAccountInOwnersEquityId();
                }
                else if (SLibUtils.compareKeys(manSysMoveTypeKey, SModSysConsts.FINS_TP_SYS_MOV_MO_EQY)) {
                    idAccount = moAbpCash.getFkCashAccountOutOwnersEquityId();
                }
                else if (SLibUtils.compareKeys(manSysMoveTypeKey, SModSysConsts.FINS_TP_SYS_MOV_MI_EXR)) {
                    resultsAccount = true;
                    idAccount = moAbpCash.getFkCashAccountInExchangeRateId();
                    idCostCenter = moAbpCash.getFkCashCostCenterInExchangeRateId();
                    idItem = moAbpCash.getFkCashItemInExchangeRateId_n();
                }
                else if (SLibUtils.compareKeys(manSysMoveTypeKey, SModSysConsts.FINS_TP_SYS_MOV_MO_EXR)) {
                    resultsAccount = true;
                    idAccount = moAbpCash.getFkCashAccountOutExchangeRateId();
                    idCostCenter = moAbpCash.getFkCashCostCenterOutExchangeRateId();
                    idItem = moAbpCash.getFkCashItemOutExchangeRateId_n();
                }
                else if (SLibUtils.compareKeys(manSysMoveTypeKey, SModSysConsts.FINS_TP_SYS_MOV_MI_ADJ)) {
                    resultsAccount = true;
                    idAccount = moAbpCash.getFkCashAccountInAdjustmentId();
                    idCostCenter = moAbpCash.getFkCashCostCenterInAdjustmentId();
                    idItem = moAbpCash.getFkCashItemInAdjustmentId_n();
                }
                else if (SLibUtils.compareKeys(manSysMoveTypeKey, SModSysConsts.FINS_TP_SYS_MOV_MO_ADJ)) {
                    resultsAccount = true;
                    idAccount = moAbpCash.getFkCashAccountOutAdjustmentId();
                    idCostCenter = moAbpCash.getFkCashCostCenterOutAdjustmentId();
                    idItem = moAbpCash.getFkCashItemOutAdjustmentId_n();
                }
                else if (SLibUtils.compareKeys(manSysMoveTypeKey, SModSysConsts.FINS_TP_SYS_MOV_MI_FIN)) {
                    resultsAccount = true;
                    idAccount = moAbpCash.getFkCashAccountInFinanceId();
                    idCostCenter = moAbpCash.getFkCashCostCenterInFinanceId();
                    idItem = moAbpCash.getFkCashItemInFinanceId_n();
                }
                else if (SLibUtils.compareKeys(manSysMoveTypeKey, SModSysConsts.FINS_TP_SYS_MOV_MO_FIN)) {
                    resultsAccount = true;
                    idAccount = moAbpCash.getFkCashAccountOutFinanceId();
                    idCostCenter = moAbpCash.getFkCashCostCenterOutFinanceId();
                    idItem = moAbpCash.getFkCashItemOutFinanceId_n();
                }
                else {
                    miClient.showMsgBoxWarning(SLibConsts.ERR_MSG_OPTION_UNKNOWN);
                }

                entry.setFkAccountIdXXX(SFinUtils.getAccountFormerIdXXX(miClient.getSession(), idAccount));
                entry.setFkAccountId(idAccount);
                entry.setDbmsAccount((String) miClient.getSession().readField(SModConsts.FIN_ACC, new int[] { idAccount }, SDbRegistry.FIELD_NAME));

                if (idCostCenter == SLibConsts.UNDEFINED) {
                    if (resultsAccount) {
                        throw new Exception(SAccountConsts.NAME_COST_CENTER + " " + SLibConsts.ERR_MSG_UNKNOWN + " (" + jtfMoveType.getText() + ").");
                    }
                }
                else {
                    entry.setFkCostCenterIdXXX_n(SFinUtils.getCostCenterFormerIdXXX(miClient.getSession(), idCostCenter));
                    entry.setFkCostCenterId_n(idCostCenter);
                    entry.setDbmsCostCenter_n((String) miClient.getSession().readField(SModConsts.FIN_CC, new int[] { idCostCenter }, SDbRegistry.FIELD_NAME));
                }

                if (idItem == SLibConsts.UNDEFINED) {
                    if (resultsAccount) {
                        throw new Exception(SUtilConsts.TXT_ITEM_EXP + " " + SLibConsts.ERR_MSG_UNKNOWN + " (" + jtfMoveType.getText() + ").");
                    }
                }
                else {
                    entry.setFkItemId_n(idItem);
                    entry.setXtaItemCode((String) miClient.getSession().readField(SModConsts.ITMU_ITEM, new int[] { idItem }, SDbRegistry.FIELD_CODE));
                    entry.setXtaItem((String) miClient.getSession().readField(SModConsts.ITMU_ITEM, new int[] { idItem }, SDbRegistry.FIELD_NAME));
                }

                entry.setFkCompanyBranchId_n(SLibConsts.UNDEFINED);
                entry.setFkEntityId_n(SLibConsts.UNDEFINED);
                entry.setXtaEntityCode("");
                entry.setXtaEntity("");

                entry.setFkCurrencyId(manCashCurrencyKey[0]);
                entry.setDbmsCurrencyKey(moSessionCustom.getCurrencyCode(manCashCurrencyKey));

                entry.setFkAccountingMoveTypeId(manAccMoveSubclassKeyXXX[0]);
                entry.setFkAccountingMoveClassId(manAccMoveSubclassKeyXXX[1]);
                entry.setFkAccountingMoveSubclassId(manAccMoveSubclassKeyXXX[2]);
                entry.setFkSystemMoveClassId(manSysMoveTypeKey[0]);
                entry.setFkSystemMoveTypeId(manSysMoveTypeKey[1]);
                entry.setXtaSystemMoveClass((String) miClient.getSession().readField(SModConsts.FINS_CL_SYS_MOV, manSysMoveTypeKey, SDbRegistry.FIELD_NAME));
                entry.setXtaSystemMoveType((String) miClient.getSession().readField(SModConsts.FINS_TP_SYS_MOV, manSysMoveTypeKey, SDbRegistry.FIELD_NAME));

                entry.setFkSystemAccountClassId(SModSysConsts.FINS_TP_SYS_ACC_NA_NA[0]);
                entry.setFkSystemAccountTypeId(SModSysConsts.FINS_TP_SYS_ACC_NA_NA[1]);
                entry.setFkSystemMoveCategoryIdXXX(SDataConstantsSys.FINS_TP_SYS_MOV_NA[0]);
                entry.setFkSystemMoveTypeIdXXX(SDataConstantsSys.FINS_TP_SYS_MOV_NA[1]);

                entry.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
                entry.setDbmsUserNew((String) miClient.getSession().readField(SModConsts.USRU_USR, new int[] { entry.getFkUserNewId() }, SDbRegistry.FIELD_NAME));
                entry.setFkUserEditId(SUtilConsts.USR_NA_ID);
                entry.setDbmsUserEdit((String) miClient.getSession().readField(SModConsts.USRU_USR, new int[] { entry.getFkUserEditId() }, SDbRegistry.FIELD_NAME));
                entry.setFkUserDeleteId(entry.getFkUserEditId());
                entry.setDbmsUserDelete(entry.getDbmsUserEdit());
            }
        }
        else {
            // Counterpart for transfer move:

            abpTransferCash = moSessionCustom.getAbpEntity(manTransferCashKey);

            if (abpTransferCash == null) {
                throw new Exception(SFinConsts.MSG_ERR_ABP_ENT_NOT_FOUND + "'" + moCashXXX.getAuxEntity() + "'.");
            }
            else {
                entry = new SDataRecordEntry();

                if (mbMoveIncome) {
                    entry.setDebit(0);
                    entry.setCredit(moCurTransferMove.getField().getValue());
                    entry.setExchangeRate(moDecTransferExchangeRate.getValue());
                    entry.setExchangeRateSystem(entry.getExchangeRate());
                    entry.setDebitCy(0);
                    entry.setCreditCy(moCurTransferMoveCy.getField().getValue());
                }
                else {
                    entry.setDebit(moCurTransferMove.getField().getValue());
                    entry.setCredit(0);
                    entry.setExchangeRate(moDecTransferExchangeRate.getValue());
                    entry.setExchangeRateSystem(entry.getExchangeRate());
                    entry.setDebitCy(moCurTransferMoveCy.getField().getValue());
                    entry.setCreditCy(0);
                }

                if (moBoolCheck.isSelected()) {
                    entry.setConcept(composeConceptCheckTransfer());
                }
                else {
                    entry.setConcept(moTextConcept.getValue());
                }
                entry.setIsExchangeDifference(false);
                entry.setIsSystem(true);

                idAccount = abpTransferCash.getFkCashAccountId();
                entry.setFkAccountIdXXX(SFinUtils.getAccountFormerIdXXX(miClient.getSession(), idAccount));
                entry.setFkAccountId(idAccount);
                entry.setDbmsAccount((String) miClient.getSession().readField(SModConsts.FIN_ACC, new int[] { idAccount }, SDbRegistry.FIELD_NAME));

                entry.setFkCostCenterIdXXX_n("");
                entry.setFkCostCenterId_n(SLibConsts.UNDEFINED);
                entry.setDbmsCostCenter_n("");

                entry.setFkItemId_n(SLibConsts.UNDEFINED);
                entry.setXtaItemCode("");
                entry.setXtaItem("");

                entry.setFkCompanyBranchId_n(manTransferCashKey[0]);
                entry.setFkEntityId_n(manTransferCashKey[1]);
                entry.setXtaEntityCode((String) miClient.getSession().readField(SModConsts.CFGU_COB_ENT, manTransferCashKey, SDbRegistry.FIELD_CODE));
                entry.setXtaEntity((String) miClient.getSession().readField(SModConsts.CFGU_COB_ENT, manTransferCashKey, SDbRegistry.FIELD_NAME));

                entry.setFkCurrencyId(manTransferCashCurrencyKey[0]);
                entry.setDbmsCurrencyKey(moSessionCustom.getCurrencyCode(manTransferCashCurrencyKey));

                entry.setFkAccountingMoveTypeId(manAccMoveSubclassKeyXXX[0]);
                entry.setFkAccountingMoveClassId(manAccMoveSubclassKeyXXX[1]);
                entry.setFkAccountingMoveSubclassId(manAccMoveSubclassKeyXXX[2]);
                entry.setFkSystemMoveClassId(manSysMoveTypeKey[0]);
                entry.setFkSystemMoveTypeId(manSysMoveTypeKey[1]);
                entry.setXtaSystemMoveClass((String) miClient.getSession().readField(SModConsts.FINS_CL_SYS_MOV, manSysMoveTypeKey, SDbRegistry.FIELD_NAME));
                entry.setXtaSystemMoveType((String) miClient.getSession().readField(SModConsts.FINS_TP_SYS_MOV, manSysMoveTypeKey, SDbRegistry.FIELD_NAME));

                switch (SFinUtils.getCashCategoryId(miClient.getSession(), manTransferCashKey)) {
                    case SModSysConsts.FINS_CT_ACC_CASH_CASH:
                        keySysAccType = SModSysConsts.FINS_TP_SYS_ACC_ENT_CSH_CSH;
                        keySysMoveTypeXXX = SDataConstantsSys.FINS_TP_SYS_MOV_CASH_CASH;
                        break;
                    case SModSysConsts.FINS_CT_ACC_CASH_BANK:
                        keySysAccType = SModSysConsts.FINS_TP_SYS_ACC_ENT_CSH_BNK;
                        keySysMoveTypeXXX = SDataConstantsSys.FINS_TP_SYS_MOV_CASH_BANK;
                        break;
                    default:
                }

                entry.setFkSystemAccountClassId(keySysAccType[0]);
                entry.setFkSystemAccountTypeId(keySysAccType[1]);
                entry.setFkSystemMoveCategoryIdXXX(keySysMoveTypeXXX[0]);
                entry.setFkSystemMoveTypeIdXXX(keySysMoveTypeXXX[1]);

                entry.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
                entry.setDbmsUserNew((String) miClient.getSession().readField(SModConsts.USRU_USR, new int[] { entry.getFkUserNewId() }, SDbRegistry.FIELD_NAME));
                entry.setFkUserEditId(SUtilConsts.USR_NA_ID);
                entry.setDbmsUserEdit((String) miClient.getSession().readField(SModConsts.USRU_USR, new int[] { entry.getFkUserEditId() }, SDbRegistry.FIELD_NAME));
                entry.setFkUserDeleteId(entry.getFkUserEditId());
                entry.setDbmsUserDelete(entry.getDbmsUserEdit());
            }
        }

        return entry;
    }

    private SDataRecordEntry createRecordEntryExchangeDiff() throws Exception {
        int idAccount = SLibConsts.UNDEFINED;
        int idCostCenter = SLibConsts.UNDEFINED;
        int idItem = SLibConsts.UNDEFINED;
        boolean isIncome = moCurTransferExchangeDiff.getField().getValue() >= 0;
        int[] keyCurrency = mbTransferExchangeDiffOnSource ? manCashCurrencyKey : manTransferCashCurrencyKey;
        SDbAbpEntity abpCash = mbTransferExchangeDiffOnSource ? moAbpCash : moSessionCustom.getAbpEntity(manTransferCashKey);
        SDataRecordEntry entry = null;

        if (abpCash == null) {
            throw new Exception(SFinConsts.MSG_ERR_ABP_ENT_NOT_FOUND + "'" + moCashXXX.getAuxEntity() + "'.");
        }
        else {
            entry = new SDataRecordEntry();

            if (isIncome) {
                entry.setDebit(0);
                entry.setCredit(moCurTransferExchangeDiff.getField().getValue());
                entry.setExchangeRate(0);
                entry.setExchangeRateSystem(0);
                entry.setDebitCy(0);
                entry.setCreditCy(0);
            }
            else {
                entry.setDebit(-moCurTransferExchangeDiff.getField().getValue());
                entry.setCredit(0);
                entry.setExchangeRate(0);
                entry.setExchangeRateSystem(0);
                entry.setDebitCy(0);
                entry.setCreditCy(0);
            }

            entry.setConcept(moTextConcept.getValue());
            entry.setIsExchangeDifference(true);
            entry.setIsSystem(true);

            if (isIncome) {
                idAccount = abpCash.getFkCashAccountInExchangeRateId();
                idCostCenter = abpCash.getFkCashCostCenterInExchangeRateId();
                idItem = abpCash.getFkCashItemInExchangeRateId_n();
            }
            else {
                idAccount = abpCash.getFkCashAccountOutExchangeRateId();
                idCostCenter = abpCash.getFkCashCostCenterOutExchangeRateId();
                idItem = abpCash.getFkCashItemOutExchangeRateId_n();
            }

            entry.setFkAccountIdXXX(SFinUtils.getAccountFormerIdXXX(miClient.getSession(), idAccount));
            entry.setFkAccountId(idAccount);
            entry.setDbmsAccount((String) miClient.getSession().readField(SModConsts.FIN_ACC, new int[] { idAccount }, SDbRegistry.FIELD_NAME));

            if (idCostCenter == SLibConsts.UNDEFINED) {
                throw new Exception(SAccountConsts.NAME_COST_CENTER + " " + SLibConsts.ERR_MSG_UNKNOWN + " "
                        + "(" + (String) (miClient.getSession().readField(SModConsts.FINS_TP_SYS_MOV, manSysMoveTypeKey, SDbRegistry.FIELD_NAME)) + ").");
            }
            else {
                entry.setFkCostCenterIdXXX_n(SFinUtils.getCostCenterFormerIdXXX(miClient.getSession(), idCostCenter));
                entry.setFkCostCenterId_n(idCostCenter);
                entry.setDbmsCostCenter_n((String) miClient.getSession().readField(SModConsts.FIN_CC, new int[] { idCostCenter }, SDbRegistry.FIELD_NAME));
            }

            if (idItem == SLibConsts.UNDEFINED) {
                throw new Exception(SUtilConsts.TXT_ITEM_EXP + " " + SLibConsts.ERR_MSG_UNKNOWN + " "
                        + "(" + (String) (miClient.getSession().readField(SModConsts.FINS_TP_SYS_MOV, manSysMoveTypeKey, SDbRegistry.FIELD_NAME)) + ").");
            }
            else {
                entry.setFkItemId_n(idItem);
                entry.setXtaItemCode((String) miClient.getSession().readField(SModConsts.ITMU_ITEM, new int[] { idItem }, SDbRegistry.FIELD_CODE));
                entry.setXtaItem((String) miClient.getSession().readField(SModConsts.ITMU_ITEM, new int[] { idItem }, SDbRegistry.FIELD_NAME));
            }

            entry.setFkCompanyBranchId_n(SLibConsts.UNDEFINED);
            entry.setFkEntityId_n(SLibConsts.UNDEFINED);
            entry.setXtaEntityCode("");
            entry.setXtaEntity("");

            entry.setFkCurrencyId(keyCurrency[0]);
            entry.setDbmsCurrencyKey(moSessionCustom.getCurrencyCode(keyCurrency));

            entry.setFkAccountingMoveTypeId(manAccMoveSubclassKeyXXX[0]);
            entry.setFkAccountingMoveClassId(manAccMoveSubclassKeyXXX[1]);
            entry.setFkAccountingMoveSubclassId(manAccMoveSubclassKeyXXX[2]);
            entry.setFkSystemMoveClassId(manSysMoveTypeKey[0]);
            entry.setFkSystemMoveTypeId(manSysMoveTypeKey[1]);
            entry.setXtaSystemMoveClass((String) miClient.getSession().readField(SModConsts.FINS_CL_SYS_MOV, manSysMoveTypeKey, SDbRegistry.FIELD_NAME));
            entry.setXtaSystemMoveType((String) miClient.getSession().readField(SModConsts.FINS_TP_SYS_MOV, manSysMoveTypeKey, SDbRegistry.FIELD_NAME));

            entry.setFkSystemAccountClassId(SModSysConsts.FINS_TP_SYS_ACC_NA_NA[0]);
            entry.setFkSystemAccountTypeId(SModSysConsts.FINS_TP_SYS_ACC_NA_NA[1]);
            entry.setFkSystemMoveCategoryIdXXX(SDataConstantsSys.FINS_TP_SYS_MOV_NA[0]);
            entry.setFkSystemMoveTypeIdXXX(SDataConstantsSys.FINS_TP_SYS_MOV_NA[1]);

            entry.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
            entry.setDbmsUserNew((String) miClient.getSession().readField(SModConsts.USRU_USR, new int[] { entry.getFkUserNewId() }, SDbRegistry.FIELD_NAME));
            entry.setFkUserEditId(SUtilConsts.USR_NA_ID);
            entry.setDbmsUserEdit((String) miClient.getSession().readField(SModConsts.USRU_USR, new int[] { entry.getFkUserEditId() }, SDbRegistry.FIELD_NAME));
            entry.setFkUserDeleteId(entry.getFkUserEditId());
            entry.setDbmsUserDelete(entry.getDbmsUserEdit());
        }

        return entry;
    }

    /*
     * Public methods
     */

    /*
     * Overriden methods
     */

    /**
     * Sets cash account for this dialog.
     */
    @Override
    public void setMoveCash(final SDataAccountCash cash, final SDbAbpEntity abpCash) {
        moCashXXX = cash;
        moAbpCash = abpCash;
        moCashBankAccount = (SDbBizPartnerBranchBankAccount) miClient.getSession().readRegistry(SModConsts.BPSU_BANK_ACC, new int[] { moCashXXX.getFkBizPartnerBranchId_n(), moCashXXX.getFkBankAccountId_n() });
        manCashCurrencyKey = new int[] { moCashXXX.getFkCurrencyId() };
        mbCashLocalCurrency = moSessionCustom.isLocalCurrency(manCashCurrencyKey);

        moCurMoveCy.setCurrencyKey(manCashCurrencyKey);
        jtfCashCode.setText(moCashXXX.getAuxCode());
        jtfCashCode.setCaretPosition(0);
        jtfCash.setText(moCashXXX.getAuxEntity());
        jtfCash.setCaretPosition(0);
    }

    /**
     * Defines move settings for this dialog.
     * This method must be called just before <code>setMoveData()</code>.
     * @param sysMoveTypeKey Constants defined in <code>erp.mod.SModSysConsts</code> (FINS_TP_SYS_MOVE...).
     * @param moveMode Constants defined in this class.
     * @param date Move date.
     */
    @Override
    public void setMoveSettings(final int[] sysMoveTypeKey, final int moveMode, final Date date, final HashSet<Integer> currentChecks) {
        removeAllListeners();

        manSysMoveTypeKey = sysMoveTypeKey;
        mnMoveMode = moveMode;
        mbMoveIncome = manSysMoveTypeKey[0] == SModSysConsts.FINS_CL_SYS_MOV_MI;
        mbMoveTransfer = SFinUtils.isSysMoveTypeForTransfer(manSysMoveTypeKey);
        mtMoveDate = date;
        msMoveTypeAbbr = (String) miClient.getSession().readField(SModConsts.FINS_TP_SYS_MOV, manSysMoveTypeKey, SDbRegistry.FIELD_NAME_ABBR);
        moCurrentChecksSet.clear();
        moCurrentChecksSet.addAll(currentChecks);

        jtfMoveType.setText((String) miClient.getSession().readField(SModConsts.FINS_TP_SYS_MOV, manSysMoveTypeKey, SDbRegistry.FIELD_NAME));
        jtfMoveType.setCaretPosition(0);

        if (mbCashLocalCurrency) {
            jlExchangeRate.setEnabled(false);
            moDecExchangeRate.setEnabled(false);
            jlMove.setEnabled(false);
            moCurMove.setEnabled(false);

            moCurMoveCy.setEditable(true);
            jbComputeMoveCy.setEnabled(false);
            moDecExchangeRate.setEditable(false);
            jbComputeExchangeRate.setEnabled(false);
            jbPickExchangeRate.setEnabled(false);
            moCurMove.setEditable(false);
            jbComputeMove.setEnabled(false);
        }
        else {
            jlExchangeRate.setEnabled(true);
            moDecExchangeRate.setEnabled(true);
            jlMove.setEnabled(true);
            moCurMove.setEnabled(true);

            if (mnMoveMode == MOVE_MODE_SIMPLE_EXC_RATE_DIFF) {
                moCurMoveCy.setEditable(false);
                jbComputeMoveCy.setEnabled(false);
                moDecExchangeRate.setEditable(false);
                jbComputeExchangeRate.setEnabled(false);
                jbPickExchangeRate.setEnabled(false);
                moCurMove.setEditable(true);
                jbComputeMove.setEnabled(false);
            }
            else {
                moCurMoveCy.setEditable(true);
                jbComputeMoveCy.setEnabled(true);
                moDecExchangeRate.setEditable(mbMoveIncome);
                jbComputeExchangeRate.setEnabled(mbMoveIncome);
                jbPickExchangeRate.setEnabled(mbMoveIncome);
                moCurMove.setEditable(true);
                jbComputeMove.setEnabled(true);
            }
        }

        if (!mbMoveIncome && moCashXXX.getIsCheckWalletApplying()) {
            moBoolCheck.setEnabled(true);
            jlCheckNumber.setEnabled(true);
            moIntCheckNumber.setEnabled(true);
            jlCheckBeneficiary.setEnabled(true);
            moTextCheckBeneficiary.setEnabled(true);
            jlCheckBeneficiaryAccount.setEnabled(true);
            moTextCheckBeneficiaryAccount.setEnabled(true);
        }
        else {
            moBoolCheck.setEnabled(false);
            jlCheckNumber.setEnabled(false);
            moIntCheckNumber.setEnabled(false);
            jlCheckBeneficiary.setEnabled(false);
            moTextCheckBeneficiary.setEnabled(false);
            jlCheckBeneficiaryAccount.setEnabled(false);
            moTextCheckBeneficiaryAccount.setEnabled(false);
        }

        if (!mbMoveTransfer) {
            jlTransferCash.setEnabled(false);
            moKeyTransferCash.setEnabled(false);

            jlTransferMoveCy.setEnabled(false);
            moCurTransferMoveCy.setEnabled(false);

            jlTransferExchangeRate.setEnabled(false);
            moDecTransferExchangeRate.setEnabled(false);

            jlTransferMove.setEnabled(false);
            moCurTransferMove.setEnabled(false);

            jlTransferExchangeDiff.setEnabled(false);
            moCurTransferExchangeDiff.setEnabled(false);

            moKeyTransferCash.removeAllItems();
        }
        else {
            jlTransferCash.setEnabled(true);
            moKeyTransferCash.setEnabled(true);

            jlTransferMoveCy.setEnabled(true);
            moCurTransferMoveCy.setEnabled(true);

            jlTransferExchangeRate.setEnabled(true);
            moDecTransferExchangeRate.setEnabled(true);

            jlTransferMove.setEnabled(true);
            moCurTransferMove.setEnabled(true);

            jlTransferExchangeDiff.setEnabled(true);
            moCurTransferExchangeDiff.setEnabled(true);

            miClient.getSession().populateCatalogue(moKeyTransferCash, SModConsts.FIN_ACC_CASH, SLibConsts.UNDEFINED, null);
        }

        itemStateTransferCash();

        // XXX Map to obsolete account move subclasses (sflores, 2013-06-01):

        if (manSysMoveTypeKey[1] == SModSysConsts.FINS_TP_SYS_MOV_MI_INV[1]) {
            manAccMoveSubclassKeyXXX = mbMoveIncome ? SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_IN_ADJ : SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_OUT_ADJ;
        }
        else if (manSysMoveTypeKey[1] == SModSysConsts.FINS_TP_SYS_MOV_MI_EQY[1]) {
            manAccMoveSubclassKeyXXX = mbMoveIncome ? SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_IN_EXT_PAR : SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_OUT_EXT_PAR;
        }
        else if (manSysMoveTypeKey[1] == SModSysConsts.FINS_TP_SYS_MOV_MI_EXR[1]) {
            manAccMoveSubclassKeyXXX = mbMoveIncome ? SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_IN_EXT_OTH : SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_OUT_EXT_OTH;
        }
        else if (manSysMoveTypeKey[1] == SModSysConsts.FINS_TP_SYS_MOV_MI_ADJ[1]) {
            manAccMoveSubclassKeyXXX = mbMoveIncome ? SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_IN_ADJ : SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_OUT_ADJ;
        }
        else if (manSysMoveTypeKey[1] == SModSysConsts.FINS_TP_SYS_MOV_MI_TRA[1]) {
            manAccMoveSubclassKeyXXX = mbMoveIncome ? SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_IN_INT_TRA : SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_OUT_INT_TRA;
        }
        else if (manSysMoveTypeKey[1] == SModSysConsts.FINS_TP_SYS_MOV_MI_FIN[1]) {
            manAccMoveSubclassKeyXXX = mbMoveIncome ? SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_IN_EXT_OTH : SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_OUT_EXT_OTH;
        }
        else {
            miClient.showMsgBoxWarning(SLibConsts.ERR_MSG_OPTION_UNKNOWN);
        }

        addAllListeners();
    }

    /**
     * Defines move data for this dialog.
     * This method must be called just after <code>setMoveSettings()</code>.
     * @param recordEntries Only when cash move is a transfer, <code>recordEntries</code> is of length 2 (source and destiny record entries). Otherwise is of length 1 (single record entry).
     */
    @Override
    public void setMoveData(final Object[] keyRecord, final SDataRecordEntry[] recordEntries) throws Exception {
        SDataCheck checkXXX = null;

        removeAllListeners();

        maoRecordKey = keyRecord;
        moFields.resetFields();

        // Cash data:

        if (mbMoveIncome) {
            moCurMoveCy.getField().setValue(recordEntries[0].getDebitCy());
            moCurMove.getField().setValue(recordEntries[0].getDebit());
        }
        else {
            moCurMoveCy.getField().setValue(recordEntries[0].getCreditCy());
            moCurMove.getField().setValue(recordEntries[0].getCredit());
        }

        moDecExchangeRate.setValue(recordEntries[0].getExchangeRate());

        // Bank check data:

        checkXXX = recordEntries[0].getDbmsCheck();
        moBoolCheck.setSelected(checkXXX != null);
        itemStateCheck();

        if (!moBoolCheck.isSelected()) {
            moCheckWallet = null;
            moCheckBizPartner = null;
            moCheckBizPartnerBranchBankAccount = null;
            mnCheckCurrentNumber = 0;
        }
        else {
            if (recordEntries[0].getIsRegistryNew()) {
                // Bank check is not yet in database:
                moCheckWallet = SFinUtils.readCheckWallet(miClient.getSession(), (int[]) moCashXXX.getPrimaryKey());
            }
            else {
                // Bank check is already in database:
                moCheckWallet = SFinUtils.readCheckWallet(miClient.getSession(), (int[]) moCashXXX.getPrimaryKey(), checkXXX.getNumber());
            }

            if (checkXXX.getFkBizPartnerId_nr() == SLibConsts.UNDEFINED) {
                moCheckBizPartner =  null;
            }
            else {
                moCheckBizPartner =  (SDbBizPartner) miClient.getSession().readRegistry(SModConsts.BPSU_BP, new int[] { checkXXX.getFkBizPartnerId_nr() });
            }

            if (checkXXX.getFkBizPartnerBranchId() == SLibConsts.UNDEFINED) {
                moCheckBizPartnerBranchBankAccount = null;
            }
            else {
                moCheckBizPartnerBranchBankAccount = (SDbBizPartnerBranchBankAccount) miClient.getSession().readRegistry(SModConsts.BPSU_BANK_ACC, new int[] { checkXXX.getFkBizPartnerBranchId(), checkXXX.getFkBankAccountId() });
            }

            mnCheckCurrentNumber = checkXXX.getNumber();    // preserve current bank check number

            renderCheckWallet(moCheckWallet);
            renderCheckBizPartner(moCheckBizPartner, moCheckBizPartnerBranchBankAccount);

            moIntCheckNumber.setValue(mnCheckCurrentNumber);

            if (moCheckBizPartner == null) {
                moTextCheckBeneficiary.setValue(checkXXX.getBeneficiary());
            }

            if (moCheckBizPartnerBranchBankAccount == null) {
                moTextCheckBeneficiaryAccount.setValue(checkXXX.getBeneficiaryAccount());
            }

            moBoolCheckForBeneficiaryAccount.setValue(checkXXX.getIsForBeneficiaryAccount());
        }

        // Concept data:

        moTextConcept.setValue(recordEntries[0].getConcept());
        computeConcept(null);

        // Transfer data:

        if (!mbMoveTransfer) {
            moDecTransferExchangeRate.setText("");

            ((JTextField) moCurTransferMoveCy.getField()).setText("");
            ((JTextField) moCurTransferMove.getField()).setText("");
            ((JTextField) moCurTransferExchangeDiff.getField()).setText("");
        }
        else {
            moKeyTransferCash.setValue(new int[] { recordEntries[1].getFkCompanyBranchId_n(), recordEntries[1].getFkEntityId_n() });
            itemStateTransferCash();

            moDecTransferExchangeRate.setValue(recordEntries[1].getExchangeRate());

            if (mbMoveIncome) {
                // When cash move is a transfer, only outoging money from source cash is allowed. This case is left only for consistence:

                moCurTransferMoveCy.getField().setValue(recordEntries[1].getCreditCy());
                moCurTransferMove.getField().setValue(recordEntries[1].getCredit());
            }
            else {
                // When cash move is a transfer, only outoging money from source cash is allowed. This case is the very best to be used:

                moCurTransferMoveCy.getField().setValue(recordEntries[1].getDebitCy());
                moCurTransferMove.getField().setValue(recordEntries[1].getDebit());
            }

            computeTransferExchangeDiff();
        }

        // Reset user input warnings:

        setUpdateConcept(false);

        addAllListeners();
    }

    @Override
    public ArrayList<SDataRecordEntry> getMoveData() throws Exception {
        ArrayList<SDataRecordEntry> entries = new ArrayList<SDataRecordEntry>();

        switch (mnMoveMode) {
            case MOVE_MODE_SINGLE:
                entries.add(createRecordEntryCash());
                break;
            case MOVE_MODE_SIMPLE:
            case MOVE_MODE_SIMPLE_EXC_RATE_DIFF:
                entries.add(createRecordEntryCash());
                entries.add(createRecordEntryCounterpart());
                break;
            case MOVE_MODE_TRANSFER:
                entries.add(createRecordEntryCash());
                entries.add(createRecordEntryCounterpart());
                if (moCurTransferExchangeDiff.getField().getValue() != 0) {
                    entries.add(createRecordEntryExchangeDiff());
                }
                break;
            default:
        }

        return entries;
    }

    /*
     * Overriden methods
     */

    @Override
    public void addAllListeners() {
        jbComputeConcept.addActionListener(this);
        jbApproveConcept.addActionListener(this);
        jbComputeMove.addActionListener(this);
        jbComputeMoveCy.addActionListener(this);
        jbComputeExchangeRate.addActionListener(this);
        jbPickExchangeRate.addActionListener(this);
        jbComputeTransferMove.addActionListener(this);
        jbComputeTransferMoveCy.addActionListener(this);
        jbComputeTransferExchangeRate.addActionListener(this);
        jbPickTransferExchangeRate.addActionListener(this);
        jbPickCheckBeneficiary.addActionListener(this);
        jbCheckBeneficiaryClear.addActionListener(this);
        jbCheckBeneficiaryAccountClear.addActionListener(this);

        moCurMoveCy.getField().getComponent().addFocusListener(this);
        moDecExchangeRate.addFocusListener(this);
        moCurMove.getField().getComponent().addFocusListener(this);
        moCurTransferMoveCy.getField().getComponent().addFocusListener(this);
        moDecTransferExchangeRate.addFocusListener(this);
        moCurTransferMove.getField().getComponent().addFocusListener(this);
        moIntCheckNumber.addFocusListener(this);
        moTextCheckBeneficiary.addFocusListener(this);
        moTextConcept.addFocusListener(this);

        moBoolCheck.addItemListener(this);
        moKeyTransferCash.addItemListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbComputeConcept.removeActionListener(this);
        jbApproveConcept.removeActionListener(this);
        jbComputeMove.removeActionListener(this);
        jbComputeMoveCy.removeActionListener(this);
        jbComputeExchangeRate.removeActionListener(this);
        jbPickExchangeRate.removeActionListener(this);
        jbComputeTransferMove.removeActionListener(this);
        jbComputeTransferMoveCy.removeActionListener(this);
        jbComputeTransferExchangeRate.removeActionListener(this);
        jbPickTransferExchangeRate.removeActionListener(this);
        jbPickCheckBeneficiary.removeActionListener(this);
        jbCheckBeneficiaryClear.removeActionListener(this);
        jbCheckBeneficiaryAccountClear.removeActionListener(this);

        moCurMoveCy.getField().getComponent().removeFocusListener(this);
        moDecExchangeRate.removeFocusListener(this);
        moCurMove.getField().getComponent().removeFocusListener(this);
        moCurTransferMoveCy.getField().getComponent().removeFocusListener(this);
        moDecTransferExchangeRate.removeFocusListener(this);
        moCurTransferMove.getField().getComponent().removeFocusListener(this);
        moIntCheckNumber.removeFocusListener(this);
        moTextCheckBeneficiary.removeFocusListener(this);
        moTextConcept.removeFocusListener(this);

        moBoolCheck.removeItemListener(this);
        moKeyTransferCash.removeItemListener(this);
    }

    @Override
    public void reloadCatalogues() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public SGuiValidation validateForm() {
        double move = 0;
        double diff = 0;
        SGuiValidation validation = null;

        validation = moFields.validateFields();

        if (validation.isValid()) {
            if (mbUpdateConcept) {
                // Validate that current concept is the desired one, because it needs to be updated:

                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DIF + " '" + SGuiUtils.getLabelName(jlConcept) + "'.");
                validation.setComponent(moTextConcept);
            }
            else if (mbMoveTransfer) {
                // Validate that source cash and destiny cash are not the same:

                if (SLibUtils.compareKeys(moCashXXX.getPrimaryKey(), manTransferCashKey)) {
                    validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DIF + " '" + SGuiUtils.getLabelName(jlTransferCash) + "'.");
                    validation.setComponent(moKeyTransferCash);
                }
            }

            if (validation.isValid() && mnMoveMode != MOVE_MODE_SIMPLE_EXC_RATE_DIFF) {
                // Validate that move equivalence on local currency is correct:

                move = SLibUtils.round(moCurMoveCy.getField().getValue() * moDecExchangeRate.getValue(), SLibUtils.getDecimalFormatAmount().getMaximumFractionDigits());
                diff = SLibUtils.round(moCurMove.getField().getValue() - move, SLibUtils.getDecimalFormatAmount().getMaximumFractionDigits());

                if (diff != 0) {
                    validation.setMessage(SGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + SGuiUtils.getLabelName(jlMove) + "' tiene una diferencia de " + SLibUtils.getDecimalFormatAmount().format(diff) + " " + moSessionCustom.getLocalCurrencyCode() + ".");
                    validation.setComponent(moCurMove.getField().getComponent());
                }
            }

            if (validation.isValid() && mbMoveTransfer) {
                // Validate that transfer move equivalence on local currency is correct:

                move = SLibUtils.round(moCurTransferMoveCy.getField().getValue() * moDecTransferExchangeRate.getValue(), SLibUtils.getDecimalFormatAmount().getMaximumFractionDigits());
                diff = SLibUtils.round(moCurTransferMove.getField().getValue() - move, SLibUtils.getDecimalFormatAmount().getMaximumFractionDigits());

                if (diff != 0) {
                    validation.setMessage(SGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + SGuiUtils.getLabelName(jlTransferMove) + "' tiene una diferencia de " + SLibUtils.getDecimalFormatAmount().format(diff) + " " + moSessionCustom.getLocalCurrencyCode() + ".");
                    validation.setComponent(moCurTransferMove.getField().getComponent());
                }
                else {
                    // Validate congruence of exchange rate difference if any:

                    if (moCurTransferExchangeDiff.getField().getValue() != 0 && Math.abs(moCurTransferExchangeDiff.getField().getValue()) >= moCurTransferMove.getField().getValue()) {
                        validation.setMessage(SGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + SGuiUtils.getLabelName(jlTransferExchangeDiff) + "' " + SGuiConsts.ERR_MSG_FIELD_VAL_LESS + SGuiConsts.ERR_MSG_FIELD_VAL_.toLowerCase() + "'" + SGuiUtils.getLabelName(jlTransferMove) + "'.");
                        validation.setComponent(mbTransferCashLocalCurrency ? moCurTransferMoveCy.getField().getComponent() : moCurTransferMove.getField().getComponent());
                    }
                }
            }

            if (validation.isValid() && moBoolCheck.isSelected()) {
                // Validate bank check:

                if (moCheckWallet == null) {
                    validation.setMessage(SGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + SGuiUtils.getLabelName(jlCheckNumber) + "' requiere de una chequera.");
                    validation.setComponent(moBoolCheck);
                }
                else if (moIntCheckNumber.getValue() < moCheckWallet.getNumberStart() || (moCheckWallet.getNumberEnd_n() != 0 && (moIntCheckNumber.getValue() > moCheckWallet.getNumberEnd_n()))) {
                    validation.setMessage(SGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + SGuiUtils.getLabelName(jlCheckNumber) + "' debe pertenecer a los folios de la chequera actual.");
                    validation.setComponent(moIntCheckNumber);
                }
                else if (moCurrentChecksSet.contains(moIntCheckNumber.getValue())) {
                    validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DIF + "'" + SGuiUtils.getLabelName(jlCheckNumber) + "' porque ya existe.");
                    validation.setComponent(moIntCheckNumber);
                }
                else if (moTextCheckBeneficiary.getValue().isEmpty() && !moTextCheckBeneficiaryAccount.getValue().isEmpty()) {
                    validation.setMessage(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlCheckNumber) + "'.");
                    validation.setComponent(moTextCheckBeneficiary);
                }
            }
        }

        return validation;
    }

    @Override
    public void actionSave() {
        if (jbSave.isEnabled()) {
            if (SGuiUtils.computeValidation(miClient, validateForm())) {
                mnFormResult = SGuiConsts.FORM_RESULT_OK;
                dispose();
            }
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbComputeConcept) {
                actionComputeConcept();
            }
            if (button == jbApproveConcept) {
                actionApproveConcept();
            }
            else if (button == jbComputeMoveCy) {
                actionComputeMoveCy(true);
            }
            else if (button == jbComputeMove) {
                actionComputeMove(true);
            }
            else if (button == jbComputeExchangeRate) {
                actionComputeExchangeRate(true);
            }
            else if (button == jbPickExchangeRate) {
                actionPickExchangeRate();
            }
            else if (button == jbComputeTransferMoveCy) {
                actionComputeTransferMoveCy(true);
            }
            else if (button == jbComputeTransferMove) {
                actionComputeTransferMove(true);
            }
            else if (button == jbComputeTransferExchangeRate) {
                actionComputeTransferExchangeRate(true);
            }
            else if (button == jbPickTransferExchangeRate) {
                actionPickTransferExchangeRate();
            }
            else if (button == jbPickCheckBeneficiary) {
                actionPickCheckBeneficiary();
            }
            else if (button == jbCheckBeneficiaryClear) {
                actionCheckBeneficiaryClear();
            }
            else if (button == jbCheckBeneficiaryAccountClear) {
                actionCheckBeneficiaryAccountClear();
            }
        }
    }

    @Override
    public void focusGained(FocusEvent e) {
        if (e.getSource() instanceof SBeanFieldInteger) {
            SBeanFieldInteger field = (SBeanFieldInteger) e.getSource();

            if (field == moIntCheckNumber) {
                preserveCheckNumber();
            }
        }
        else if (e.getSource() instanceof SBeanFieldText) {
            SBeanFieldText field = (SBeanFieldText) e.getSource();

            if (field == moTextCheckBeneficiary) {
                preserveCheckBeneficiary();
            }
            else if (field == moTextConcept) {
                computeConcept(null);
                moTextConcept.selectAll();
            }
        }
    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof SBeanFieldInteger) {
            SBeanFieldInteger field = (SBeanFieldInteger) e.getSource();

            if (field == moIntCheckNumber) {
                computeConcept(SFinConceptEvaluation.NUMBER_CHECK);
            }
        }
        else if (e.getSource() instanceof SBeanFieldDecimal) {
            SBeanFieldDecimal field = (SBeanFieldDecimal) e.getSource();

            if (field == moCurMoveCy.getField()) {
                focusLostMoveCy();
            }
            else if (field == moCurMove.getField()) {
                focusLostMove();
            }
            else if (field == moDecExchangeRate) {
                focusLostExchangeRate();
            }
            else if (field == moCurTransferMoveCy.getField()) {
                focusLostTransferMoveCy();
            }
            else if (field == moCurTransferMove.getField()) {
                focusLostTransferMove();
            }
            else if (field == moDecTransferExchangeRate) {
                focusLostTransferExchangeRate();
            }
        }
        else if (e.getSource() instanceof SBeanFieldText) {
            SBeanFieldText field = (SBeanFieldText) e.getSource();

            if (field == moTextCheckBeneficiary) {
                computeConcept(SFinConceptEvaluation.BIZ_PARTNER);
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof SBeanFieldBoolean) {
            SBeanFieldBoolean field = (SBeanFieldBoolean) e.getSource();
            if (field == moBoolCheck) {
                itemStateCheck();
            }
        }
        else if (e.getSource() instanceof SBeanFieldKey && e.getStateChange() == ItemEvent.SELECTED) {
            SBeanFieldKey field = (SBeanFieldKey) e.getSource();
            if (field == moKeyTransferCash) {
                itemStateTransferCash();
            }
        }
    }
}
