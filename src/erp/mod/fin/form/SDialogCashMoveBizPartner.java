/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.fin.form;

import erp.SErpConsts;
import erp.data.SDataConstantsSys;
import erp.gui.session.SSessionCustom;
import erp.mfin.data.SDataAccountCash;
import erp.mfin.data.SDataCheck;
import erp.mfin.data.SDataRecordEntry;
import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import erp.mod.bps.db.SBpsUtils;
import erp.mod.bps.db.SDbBizPartner;
import erp.mod.bps.db.SDbBizPartnerBranchBankAccount;
import erp.mod.fin.db.SDbAbpBizPartner;
import erp.mod.fin.db.SDbAbpEntity;
import erp.mod.fin.db.SDbCheckWallet;
import erp.mod.fin.db.SFinConceptEvaluation;
import erp.mod.fin.db.SFinConsts;
import erp.mod.fin.db.SFinUtils;
import erp.mod.trn.db.SDbDps;
import erp.mod.trn.db.STrnUtils;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import sa.gui.util.SUtilConsts;
import sa.lib.SLibConsts;
import sa.lib.SLibTimeUtils;
import sa.lib.SLibUtils;
import sa.lib.db.SDbConsts;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiParams;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFieldBoolean;
import sa.lib.gui.bean.SBeanFieldDecimal;
import sa.lib.gui.bean.SBeanFieldInteger;
import sa.lib.gui.bean.SBeanFieldKey;
import sa.lib.gui.bean.SBeanFieldText;
import sa.lib.gui.bean.SBeanFormDialog;

/**
 *
 * @author Sergio Flores
 */
public class SDialogCashMoveBizPartner extends SBeanFormDialog implements SDialogCash, ActionListener, FocusListener, ItemListener {

    private SSessionCustom moSessionCustom;
    private SDataAccountCash moCashXXX;
    private SDbAbpEntity moAbpCash;
    private SDbBizPartnerBranchBankAccount moCashBankAccount;   // applies only if this cash is a bank account
    private int[] manCashCurrencyKey;
    private boolean mbCashLocalCurrency;
    private int[] manSysMoveTypeKey;
    private int[] manSysAccTypeKey;
    private int mnBizPartnerCategoryId;
    private int mnDpsCategoryId;
    private boolean mbMoveIncome;
    private boolean mbMovePayment;
    private Date mtMoveDate;
    private String msMoveTypeAbbr;
    private HashSet<Integer> moCurrentChecksSet;
    private Object[] maoRecordKey;
    private int[] manAccMoveSubclassKeyXXX;
    private int[] manSysMoveTypeKeyXXX;
    private SDbCheckWallet moCheckWallet;
    private int mnCheckCurrentNumber;
    private SDbDps moDps;
    private boolean mbUpdateConcept;
    private int mnAuxCheckNumber;
    private int[] manAuxBizPartnerKey;
    private SDbDps moAuxDps;

    /**
     * Creates new form SDialogCashMove
     */
    public SDialogCashMoveBizPartner(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SLibConsts.UNDEFINED, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpMove = new javax.swing.JPanel();
        jpMoveSimple = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jlCash = new javax.swing.JLabel();
        jtfCashCode = new javax.swing.JTextField();
        jtfCash = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jlMoveType = new javax.swing.JLabel();
        jtfMoveType = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jlMoveCy = new javax.swing.JLabel();
        moCurMoveCy = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jbComputeMoveCy = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jlExchangeRate = new javax.swing.JLabel();
        moDecExchangeRate = new sa.lib.gui.bean.SBeanFieldDecimal();
        jbPickExchangeRate = new javax.swing.JButton();
        jlDummy1 = new javax.swing.JLabel();
        jbComputeExchangeRate = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jlMove = new javax.swing.JLabel();
        moCurMove = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jbComputeMove = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jlBizPartner = new javax.swing.JLabel();
        moKeyBizPartner = new sa.lib.gui.bean.SBeanFieldKey();
        jbPickBizPartner = new javax.swing.JButton();
        jPanel20 = new javax.swing.JPanel();
        jlReferenceDps = new javax.swing.JLabel();
        moTextReferenceDps = new sa.lib.gui.bean.SBeanFieldText();
        jbPickDps = new javax.swing.JButton();
        jbPickDpsAll = new javax.swing.JButton();
        jlUpdateDps = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        moBoolCheck = new sa.lib.gui.bean.SBeanFieldBoolean();
        jPanel8 = new javax.swing.JPanel();
        jlCheckNumber = new javax.swing.JLabel();
        moIntCheckNumber = new sa.lib.gui.bean.SBeanFieldInteger();
        jtfCheckWallet = new javax.swing.JTextField();
        jPanel19 = new javax.swing.JPanel();
        jlBizPartnerAccount = new javax.swing.JLabel();
        moKeyBizPartnerAccount = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel10 = new javax.swing.JPanel();
        moBoolCheckForBeneficiaryAccount = new sa.lib.gui.bean.SBeanFieldBoolean();
        jPanel6 = new javax.swing.JPanel();
        jlConcept = new javax.swing.JLabel();
        moTextConcept = new sa.lib.gui.bean.SBeanFieldText();
        jbComputeConcept = new javax.swing.JButton();
        jbApproveConcept = new javax.swing.JButton();
        jlUpdateConcept = new javax.swing.JLabel();
        jpMoveDps = new javax.swing.JPanel();
        moPanelDps = new erp.mod.trn.form.SBeanPanelDps();

        jpMove.setLayout(new java.awt.BorderLayout(0, 5));

        jpMoveSimple.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del movimiento:"));
        jpMoveSimple.setLayout(new java.awt.GridLayout(12, 1, 0, 5));

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCash.setText("Cuenta de dinero:");
        jlCash.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jlCash);

        jtfCashCode.setEditable(false);
        jtfCashCode.setFocusable(false);
        jtfCashCode.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel12.add(jtfCashCode);

        jtfCash.setEditable(false);
        jtfCash.setFocusable(false);
        jtfCash.setPreferredSize(new java.awt.Dimension(345, 23));
        jPanel12.add(jtfCash);

        jpMoveSimple.add(jPanel12);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlMoveType.setText("Movimiento:");
        jlMoveType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlMoveType);

        jtfMoveType.setEditable(false);
        jtfMoveType.setFocusable(false);
        jtfMoveType.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel7.add(jtfMoveType);

        jpMoveSimple.add(jPanel7);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlMoveCy.setText("Monto:*");
        jlMoveCy.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlMoveCy);
        jPanel3.add(moCurMoveCy);

        jbComputeMoveCy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/gui/img/icon_cal.gif"))); // NOI18N
        jbComputeMoveCy.setToolTipText("Calcular");
        jbComputeMoveCy.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel3.add(jbComputeMoveCy);

        jpMoveSimple.add(jPanel3);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlExchangeRate.setText("Tipo de cambio:*");
        jlExchangeRate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlExchangeRate);
        jPanel4.add(moDecExchangeRate);

        jbPickExchangeRate.setText("...");
        jbPickExchangeRate.setToolTipText("Buscar tipo de cambio");
        jbPickExchangeRate.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel4.add(jbPickExchangeRate);

        jlDummy1.setPreferredSize(new java.awt.Dimension(7, 23));
        jPanel4.add(jlDummy1);

        jbComputeExchangeRate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/gui/img/icon_cal.gif"))); // NOI18N
        jbComputeExchangeRate.setToolTipText("Calcular");
        jbComputeExchangeRate.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel4.add(jbComputeExchangeRate);

        jpMoveSimple.add(jPanel4);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlMove.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jlMove.setText("Monto:*");
        jlMove.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlMove);
        jPanel5.add(moCurMove);

        jbComputeMove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/gui/img/icon_cal.gif"))); // NOI18N
        jbComputeMove.setToolTipText("Calcular");
        jbComputeMove.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel5.add(jbComputeMove);

        jpMoveSimple.add(jPanel5);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBizPartner.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jlBizPartner.setText("Asociado negocios:*");
        jlBizPartner.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlBizPartner);

        moKeyBizPartner.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel9.add(moKeyBizPartner);

        jbPickBizPartner.setText("...");
        jbPickBizPartner.setToolTipText("Buscar asociado negocios");
        jbPickBizPartner.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel9.add(jbPickBizPartner);

        jpMoveSimple.add(jPanel9);

        jPanel20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlReferenceDps.setText("Referencia:");
        jlReferenceDps.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel20.add(jlReferenceDps);
        jPanel20.add(moTextReferenceDps);

        jbPickDps.setText("...");
        jbPickDps.setToolTipText("Buscar documento con saldo");
        jbPickDps.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel20.add(jbPickDps);

        jbPickDpsAll.setText("...");
        jbPickDpsAll.setToolTipText("Buscar documento");
        jbPickDpsAll.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel20.add(jbPickDpsAll);

        jlUpdateDps.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/gui/img/icon_view_warn.png"))); // NOI18N
        jlUpdateDps.setText("¡El documento no existe!");
        jlUpdateDps.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel20.add(jlUpdateDps);

        jpMoveSimple.add(jPanel20);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moBoolCheck.setText("Movimiento con cheque");
        moBoolCheck.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel11.add(moBoolCheck);

        jpMoveSimple.add(jPanel11);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCheckNumber.setText("Cheque:*");
        jlCheckNumber.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlCheckNumber);
        jPanel8.add(moIntCheckNumber);

        jtfCheckWallet.setEditable(false);
        jtfCheckWallet.setToolTipText("Chequera");
        jtfCheckWallet.setFocusable(false);
        jtfCheckWallet.setPreferredSize(new java.awt.Dimension(295, 23));
        jPanel8.add(jtfCheckWallet);

        jpMoveSimple.add(jPanel8);

        jPanel19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBizPartnerAccount.setText("Cuenta bancaria:");
        jlBizPartnerAccount.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel19.add(jlBizPartnerAccount);

        moKeyBizPartnerAccount.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel19.add(moKeyBizPartnerAccount);

        jpMoveSimple.add(jPanel19);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moBoolCheckForBeneficiaryAccount.setText("Para abono en cuenta bancaria del beneficiario");
        moBoolCheckForBeneficiaryAccount.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel10.add(moBoolCheckForBeneficiaryAccount);

        jpMoveSimple.add(jPanel10);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlConcept.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jlConcept.setText("Concepto:*");
        jlConcept.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlConcept);

        moTextConcept.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel6.add(moTextConcept);

        jbComputeConcept.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/gui/img/icon_upd.gif"))); // NOI18N
        jbComputeConcept.setToolTipText("Actualizar concepto");
        jbComputeConcept.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel6.add(jbComputeConcept);

        jbApproveConcept.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/gui/img/icon_ok.gif"))); // NOI18N
        jbApproveConcept.setToolTipText("Aprobar concepto");
        jbApproveConcept.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel6.add(jbApproveConcept);

        jlUpdateConcept.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/gui/img/icon_view_warn.png"))); // NOI18N
        jlUpdateConcept.setText("¡Actualizar concepto!");
        jlUpdateConcept.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel6.add(jlUpdateConcept);

        jpMoveSimple.add(jPanel6);

        jpMove.add(jpMoveSimple, java.awt.BorderLayout.PAGE_START);

        jpMoveDps.setBorder(javax.swing.BorderFactory.createTitledBorder("Documento del pago:"));
        jpMoveDps.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jpMoveDps.add(moPanelDps);

        jpMove.add(jpMoveDps, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jpMove, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbApproveConcept;
    private javax.swing.JButton jbComputeConcept;
    private javax.swing.JButton jbComputeExchangeRate;
    private javax.swing.JButton jbComputeMove;
    private javax.swing.JButton jbComputeMoveCy;
    private javax.swing.JButton jbPickBizPartner;
    private javax.swing.JButton jbPickDps;
    private javax.swing.JButton jbPickDpsAll;
    private javax.swing.JButton jbPickExchangeRate;
    private javax.swing.JLabel jlBizPartner;
    private javax.swing.JLabel jlBizPartnerAccount;
    private javax.swing.JLabel jlCash;
    private javax.swing.JLabel jlCheckNumber;
    private javax.swing.JLabel jlConcept;
    private javax.swing.JLabel jlDummy1;
    private javax.swing.JLabel jlExchangeRate;
    private javax.swing.JLabel jlMove;
    private javax.swing.JLabel jlMoveCy;
    private javax.swing.JLabel jlMoveType;
    private javax.swing.JLabel jlReferenceDps;
    private javax.swing.JLabel jlUpdateConcept;
    private javax.swing.JLabel jlUpdateDps;
    private javax.swing.JPanel jpMove;
    private javax.swing.JPanel jpMoveDps;
    private javax.swing.JPanel jpMoveSimple;
    private javax.swing.JTextField jtfCash;
    private javax.swing.JTextField jtfCashCode;
    private javax.swing.JTextField jtfCheckWallet;
    private javax.swing.JTextField jtfMoveType;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolCheck;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolCheckForBeneficiaryAccount;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurMove;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurMoveCy;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecExchangeRate;
    private sa.lib.gui.bean.SBeanFieldInteger moIntCheckNumber;
    private sa.lib.gui.bean.SBeanFieldKey moKeyBizPartner;
    private sa.lib.gui.bean.SBeanFieldKey moKeyBizPartnerAccount;
    private erp.mod.trn.form.SBeanPanelDps moPanelDps;
    private sa.lib.gui.bean.SBeanFieldText moTextConcept;
    private sa.lib.gui.bean.SBeanFieldText moTextReferenceDps;
    // End of variables declaration//GEN-END:variables

    /*
     * Private methods
     */

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 880, 550);

        moSessionCustom = (SSessionCustom) miClient.getSession().getSessionCustom();

        moCurMoveCy.setCompoundFieldSettings(miClient);
        moCurMoveCy.getField().setDecimalSettings(SGuiUtils.getLabelName(jlMoveCy), SGuiConsts.GUI_TYPE_DEC_AMT, true);
        moDecExchangeRate.setDecimalSettings(SGuiUtils.getLabelName(jlExchangeRate), SGuiConsts.GUI_TYPE_DEC_EXC_RATE, true);
        moDecExchangeRate.setDecimalFormat(SLibUtils.DecimalFormatValue8D);
        moDecExchangeRate.setFieldButton(jbPickExchangeRate);
        moCurMove.setCompoundFieldSettings(miClient);
        moCurMove.getField().setDecimalSettings(SGuiUtils.getLabelName(jlMove), SGuiConsts.GUI_TYPE_DEC_AMT, true);
        moKeyBizPartner.setKeySettings(miClient, SGuiUtils.getLabelName(jlBizPartner), true);
        moKeyBizPartner.setFieldButton(jbPickBizPartner);
        moTextReferenceDps.setTextSettings(SGuiUtils.getLabelName(jlReferenceDps), 15, 0);
        moBoolCheck.setBooleanSettings(SGuiUtils.getLabelName(moBoolCheck.getText()), false);
        moIntCheckNumber.setIntegerSettings(SGuiUtils.getLabelName(jlCheckNumber), SGuiConsts.GUI_TYPE_INT_RAW, true);
        moKeyBizPartnerAccount.setKeySettings(miClient, SGuiUtils.getLabelName(jlBizPartnerAccount), false);
        moBoolCheckForBeneficiaryAccount.setBooleanSettings(SGuiUtils.getLabelName(moBoolCheckForBeneficiaryAccount.getText()), true);
        moTextConcept.setTextSettings(SGuiUtils.getLabelName(jlConcept), SDataRecordEntry.LEN_CONCEPT);

        moFields.addField(moCurMoveCy.getField());
        moFields.addField(moDecExchangeRate);
        moFields.addField(moCurMove.getField());
        moFields.addField(moKeyBizPartner);
        moFields.addField(moTextReferenceDps);
        moFields.addField(moBoolCheck);
        moFields.addField(moIntCheckNumber);
        moFields.addField(moKeyBizPartnerAccount);
        moFields.addField(moBoolCheckForBeneficiaryAccount);
        moFields.addField(moTextConcept);

        moFields.setFormButton(jbSave);

        moCurMove.setCurrencyKey(moSessionCustom.getLocalCurrencyKey());

        moCurrentChecksSet = new HashSet<Integer>();
        moPanelDps.setPanelSettings(miClient);
    }

    private int getCheckNumber() throws SQLException, Exception {
        int numCheck = 0;
        int numLast = 0;

        if (mnCheckCurrentNumber != 0) {
            numCheck = mnCheckCurrentNumber;
        }
        else {
            numCheck = SFinUtils.getCheckNextNumber(miClient.getSession(), moCheckWallet.getPkCheckWalletId());

            for (Integer number : moCurrentChecksSet) {
                if (number > numLast) {
                    numLast = number;
                }
            }

            if (numLast >= numCheck) {
                numCheck = numLast + 1;
            }
        }

        return numCheck;
    }

    private void renderCheckWallet(final SDbCheckWallet checkWallet) {
        String text = "";

        if (checkWallet != null) {
            text = "Chequera actual: folios desde " + checkWallet.getNumberStart();
            if (checkWallet.getNumberEnd_n() != 0) {
                text += " hasta " + checkWallet.getNumberEnd_n();
            }
        }

        jtfCheckWallet.setText(text);
        jtfCheckWallet.setCaretPosition(0);
    }

    private void renderDps() {
        setUpdateDps(moDps == null);
        moPanelDps.setDps(moDps, moDps == null ? null : SLibTimeUtils.getEndOfYear(mtMoveDate), maoRecordKey);
    }

    private void searchDps() {
        String series = "";
        String number = "";
        String[] numberDps = null;
        int[] keyDps = null;

        moDps = null;

        if (moKeyBizPartner.getSelectedIndex() > 0 && !moTextReferenceDps.getValue().isEmpty()) {
            numberDps = SLibUtils.textExplode(moTextReferenceDps.getValue(), "-");
            series = numberDps.length == 2 ? numberDps[0] : "";
            number = numberDps.length == 2 ? numberDps[1] : numberDps[0];
            keyDps = STrnUtils.getDpsKey(miClient.getSession(), mnDpsCategoryId, moKeyBizPartner.getValue(), series, number);
            if (keyDps != null) {
                moDps = (SDbDps) miClient.getSession().readRegistry(SModConsts.TRN_DPS, keyDps);
            }
        }

        renderDps();
    }

    /**
     * @return Concept text. If text length exceds maximum allowed, then text is truncated and "..." concatenated at the end indicating it.
     */
    private String formatConcept(String concept) {
        return concept.length() < SDataRecordEntry.LEN_CONCEPT ? concept : concept.substring(0, SDataRecordEntry.LEN_CONCEPT - SErpConsts.ELLIPSIS.length()) + SErpConsts.ELLIPSIS;
    }

    private String composeConceptCash() {
        String concept = msMoveTypeAbbr;

        if (moDps != null) {
            concept += (concept.isEmpty() ? "" : "; ") + SFinConsts.TXT_INVOICE + " " + moDps.getDpsNumber();
        }

        if (moKeyBizPartner.getSelectedIndex() > 0) {
            concept += "; " + miClient.getSession().readField(SModConsts.BPSU_BP, moKeyBizPartner.getValue(), SDbBizPartner.FIELD_NAME_COMM);
        }

        if (moBoolCheck.isSelected()) {
            concept += (concept.isEmpty() ? "" : "; ") + SFinConsts.TXT_CHECK + " " + moIntCheckNumber.getValue();
        }

        return formatConcept(concept);
    }

    private String composeConceptCheck() {
        String concept = msMoveTypeAbbr;

        if (moBoolCheck.isSelected()) {
            concept += (concept.isEmpty() ? "" : "; ") + SFinConsts.TXT_CHECK + " " + moIntCheckNumber.getValue();

            if (moCashBankAccount != null) {
                concept += "; " + (String) miClient.getSession().readField(SModConsts.BPSU_BP, new int[] { moCashBankAccount.getFkBankId() }, SDbBizPartner.FIELD_NAME_COMM);

                if (moKeyBizPartnerAccount.getSelectedIndex() > 0) {
                    SDbBizPartnerBranchBankAccount bankAccount = (SDbBizPartnerBranchBankAccount) miClient.getSession().readRegistry(SModConsts.BPSU_BANK_ACC, moKeyBizPartnerAccount.getValue());
                    concept += "/" + (String) miClient.getSession().readField(SModConsts.BPSU_BP, new int[] { bankAccount.getFkBankId() }, SDbBizPartner.FIELD_NAME_COMM);
                }
            }
        }

        return formatConcept(concept);
    }

    private void preserveCheckNumber() {
        mnAuxCheckNumber = moIntCheckNumber.getValue();
    }

    private void preserveBizPartnerKey() {
        manAuxBizPartnerKey = moKeyBizPartner.getValue();
    }

    private void preserveDps() {
        if (mbMovePayment) {
            moAuxDps = moDps;
        }
    }

    private void setUpdateDps(boolean update) {
        jlUpdateDps.setVisible(update);
    }

    private void setUpdateConcept(boolean update) {
        mbUpdateConcept = update;

        mnAuxCheckNumber = 0;
        manAuxBizPartnerKey = null;
        moAuxDps = null;

        jbApproveConcept.setEnabled(update);
        jlUpdateConcept.setVisible(update);
    }

    private void computeConcept(final SFinConceptEvaluation evaluation) {
        if (moTextConcept.getValue().isEmpty() || moTextConcept.getValue().compareTo(msMoveTypeAbbr) == 0) {
            moTextConcept.setValue(composeConceptCash());
            setUpdateConcept(false);
        }
        else if (evaluation != null) {
            switch (evaluation) {
                case NUMBER_CHECK:
                    if (mnAuxCheckNumber != moIntCheckNumber.getValue()) {
                        setUpdateConcept(true);
                    }
                    break;
                case NUMBER_DPS:
                    if ((moAuxDps == null && moDps != null) || (moAuxDps != null && moDps == null) || (moAuxDps != null && moDps != null && moAuxDps.getDpsNumber().compareTo(moDps.getDpsNumber()) != 0)) {
                        setUpdateConcept(true);
                    }
                    break;
                case BIZ_PARTNER:
                    if (!SLibUtils.compareKeys(manAuxBizPartnerKey, moKeyBizPartner.getValue())) {
                        setUpdateConcept(true);
                    }
                    break;
                default:
            }
        }
    }

    private void actionComputeConcept() {
        moTextConcept.setValue(composeConceptCash());
        setUpdateConcept(false);
        moTextConcept.requestFocus();
    }

    private void actionApproveConcept() {
        if (miClient.showMsgBoxConfirm("¿Está seguro que el valor del campo '" + SGuiUtils.getLabelName(jlConcept) + "' es correcto?") == JOptionPane.YES_OPTION) {
            setUpdateConcept(false);
        }
        moTextConcept.requestFocus();
    }

    private void actionComputeMoveCy(boolean requestFocus) {
        double excRate = moDecExchangeRate.getValue();
        double move = moCurMove.getField().getValue();

        moCurMoveCy.getField().setValue(SLibUtils.round(excRate == 0 ? 0 : move / excRate, SLibUtils.getDecimalFormatAmount().getMaximumFractionDigits()));
        if (requestFocus) {
            moCurMoveCy.getField().getComponent().requestFocus();
        }
    }

    private void actionComputeMove(boolean requestFocus) {
        double moveCy = moCurMoveCy.getField().getValue();
        double excRate = moDecExchangeRate.getValue();

        moCurMove.getField().setValue(SLibUtils.round(moveCy * excRate, SLibUtils.getDecimalFormatAmount().getMaximumFractionDigits()));
        if (requestFocus) {
            moCurMove.getField().getComponent().requestFocus();
        }
    }

    private void actionComputeExchangeRate(boolean requestFocus) {
        double moveCy = moCurMoveCy.getField().getValue();
        double move = moCurMove.getField().getValue();

        moDecExchangeRate.setValue(SLibUtils.round(moveCy == 0 ? 0 : move / moveCy, SLibUtils.getDecimalFormatExchangeRate().getMaximumFractionDigits()));
        if (requestFocus) {
            moDecExchangeRate.requestFocus();
        }
    }

    private void actionPickExchangeRate() {
        miClient.getSession().showOptionPicker(SModConsts.FIN_EXC_RATE, manCashCurrencyKey[0], null, moDecExchangeRate);
    }

    private void actionPickBizPartner() {
        preserveBizPartnerKey();

        miClient.getSession().showOptionPicker(SModConsts.BPSU_BP, mnBizPartnerCategoryId, null, moKeyBizPartner);

        computeConcept(SFinConceptEvaluation.BIZ_PARTNER);
    }

    private void actionPickDps() {
        //XXX
    }

    private void actionPickDpsAll() {
        //XXX
    }

    private void focusLostMoveCy() {
        if ((moDecExchangeRate.getValue() != 0 && moCurMove.getField().getValue() == 0) || !moCurMove.getField().isEditable()) {
            actionComputeMove(false);
        }
        else if (moDecExchangeRate.getValue() == 0 && moCurMove.getField().getValue() != 0) {
            actionComputeExchangeRate(false);
        }
    }

    private void focusLostMove() {
        if (moCurMoveCy.getField().getValue() != 0 && moDecExchangeRate.getValue() == 0) {
            actionComputeExchangeRate(false);
        }
        else if (moCurMoveCy.getField().getValue() == 0 && moDecExchangeRate.getValue() != 0) {
            actionComputeMoveCy(false);
        }
    }

    private void focusLostExchangeRate() {
        if (moCurMoveCy.getField().getValue() != 0 && moCurMove.getField().getValue() == 0) {
            actionComputeMove(false);
        }
        else if (moCurMoveCy.getField().getValue() == 0 && moCurMove.getField().getValue() != 0) {
            actionComputeMoveCy(false);
        }
    }

    private void itemStateCheck() {
        int numCheck = 0;
        boolean isForBeneficiaryAccount = false;
        boolean proceed = false;

        preserveCheckNumber();

        moCheckWallet = null;

        if (moBoolCheck.isSelected()) {
            try {
                moCheckWallet = SFinUtils.readCheckWallet(miClient.getSession(), (int[]) moCashXXX.getPrimaryKey());
                numCheck = getCheckNumber();
                isForBeneficiaryAccount = true;
                proceed = true;
            }
            catch (Exception e) {
                moCheckWallet = null;
                numCheck = 0;
                isForBeneficiaryAccount = false;
                SLibUtils.showException(this, e);
            }
        }

        if (moBoolCheck.isSelected() && proceed) {
            moIntCheckNumber.setEditable(true);
            moKeyBizPartnerAccount.setEnabled(true);
            moBoolCheckForBeneficiaryAccount.setEnabled(true);
        }
        else {
            moIntCheckNumber.setEditable(false);
            moKeyBizPartnerAccount.setEnabled(false);
            moBoolCheckForBeneficiaryAccount.setEnabled(false);
        }

        renderCheckWallet(moCheckWallet);
        moIntCheckNumber.setValue(numCheck);
        moBoolCheckForBeneficiaryAccount.setValue(isForBeneficiaryAccount);
        itemStateBizPartner();

        computeConcept(SFinConceptEvaluation.NUMBER_CHECK);
    }

    private void itemStateBizPartner() {
        SGuiParams params = null;

        if (!moBoolCheck.isSelected()) {
            moKeyBizPartnerAccount.removeAllItems();
        }
        else {
            if (moKeyBizPartner.getSelectedIndex() <= 0) {
                params = new SGuiParams(new int[] { SLibConsts.UNDEFINED });
            }
            else {
                params = new SGuiParams(moKeyBizPartner.getValue());
            }
            miClient.getSession().populateCatalogue(moKeyBizPartnerAccount, SModConsts.BPSU_BANK_ACC, SLibConsts.UNDEFINED, params);
        }
    }

    private SDataRecordEntry createRecordEntryCash() throws Exception {
        int idAccount = SLibConsts.UNDEFINED;
        int[] keySysAccType = null;
        int[] keySysMoveTypeXXX = null;
        SDataRecordEntry entry = null;
        SDataCheck check = null;

        if (moAbpCash == null) {
            throw new Exception(SFinConsts.MSG_ERR_ABP_ENT_NOT_FOUND + "'" + moCashXXX.getAuxEntity() + "'.");
        }
        else {
            entry = new SDataRecordEntry();

            if (mbMoveIncome) {
                entry.setDebit(moCurMove.getField().getValue());
                entry.setCredit(0);
                entry.setExchangeRate(moDecExchangeRate.getValue());
                entry.setExchangeRateSystem(entry.getExchangeRate());
                entry.setDebitCy(moCurMoveCy.getField().getValue());
                entry.setCreditCy(0);
            }
            else {
                entry.setDebit(0);
                entry.setCredit(moCurMove.getField().getValue());
                entry.setExchangeRate(moDecExchangeRate.getValue());
                entry.setExchangeRateSystem(entry.getExchangeRate());
                entry.setDebitCy(0);
                entry.setCreditCy(moCurMoveCy.getField().getValue());
            }

            entry.setConcept(moTextConcept.getValue());
            entry.setReference(mbMovePayment ? "" : moTextReferenceDps.getValue());
            entry.setIsExchangeDifference(false);
            entry.setIsSystem(false);

            idAccount = moAbpCash.getFkCashAccountId();
            entry.setFkAccountIdXXX(SFinUtils.getAccountFormerIdXXX(miClient.getSession(), idAccount));
            entry.setFkAccountId(idAccount);
            entry.setDbmsAccount((String) miClient.getSession().readField(SModConsts.FIN_ACC, new int[] { idAccount }, SDbRegistry.FIELD_NAME));

            entry.setFkCostCenterIdXXX_n("");
            entry.setFkCostCenterId_n(SLibConsts.UNDEFINED);
            entry.setDbmsCostCenter_n("");

            entry.setFkItemId_n(SLibConsts.UNDEFINED);
            entry.setXtaItemCode("");
            entry.setXtaItem("");

            entry.setFkCompanyBranchId_n(moCashXXX.getPkCompanyBranchId());
            entry.setFkEntityId_n(moCashXXX.getPkAccountCashId());
            entry.setXtaEntityCode(moCashXXX.getDbmsCompanyBranchEntity().getCode());
            entry.setXtaEntity(moCashXXX.getDbmsCompanyBranchEntity().getEntity());

            entry.setFkBizPartnerId_nr(moKeyBizPartner.getValue()[0]);
            entry.setFkBizPartnerBranchId_n(SBpsUtils.getHeadquartersId(miClient.getSession(), entry.getFkBizPartnerId_nr()));
            entry.setXtaBizPartnerCode(moKeyBizPartner.getSelectedItem().getCode());
            entry.setXtaBizPartner(moKeyBizPartner.getSelectedItem().getItem());

            entry.setFkCurrencyId(manCashCurrencyKey[0]);
            entry.setDbmsCurrencyKey(moSessionCustom.getCurrencyCode(manCashCurrencyKey));

            entry.setFkAccountingMoveTypeId(manAccMoveSubclassKeyXXX[0]);
            entry.setFkAccountingMoveClassId(manAccMoveSubclassKeyXXX[1]);
            entry.setFkAccountingMoveSubclassId(manAccMoveSubclassKeyXXX[2]);
            entry.setFkSystemMoveClassId(manSysMoveTypeKey[0]);
            entry.setFkSystemMoveTypeId(manSysMoveTypeKey[1]);
            entry.setXtaSystemMoveClass((String) miClient.getSession().readField(SModConsts.FINS_CL_SYS_MOV, manSysMoveTypeKey, SDbRegistry.FIELD_NAME));
            entry.setXtaSystemMoveType((String) miClient.getSession().readField(SModConsts.FINS_TP_SYS_MOV, manSysMoveTypeKey, SDbRegistry.FIELD_NAME));

            switch (moCashXXX.getFkAccountCashCategoryId()) {
                case SModSysConsts.FINS_CT_ACC_CASH_CASH:
                    keySysAccType = SModSysConsts.FINS_TP_SYS_ACC_ENT_CSH_CSH;
                    keySysMoveTypeXXX = SDataConstantsSys.FINS_TP_SYS_MOV_CASH_CASH;
                    break;
                case SModSysConsts.FINS_CT_ACC_CASH_BANK:
                    keySysAccType = SModSysConsts.FINS_TP_SYS_ACC_ENT_CSH_BNK;
                    keySysMoveTypeXXX = SDataConstantsSys.FINS_TP_SYS_MOV_CASH_BANK;
                    break;
                default:
            }

            entry.setFkSystemAccountClassId(keySysAccType[0]);
            entry.setFkSystemAccountTypeId(keySysAccType[1]);
            entry.setFkSystemMoveCategoryIdXXX(keySysMoveTypeXXX[0]);
            entry.setFkSystemMoveTypeIdXXX(keySysMoveTypeXXX[1]);

            if (!mbMovePayment) {
                entry.setFkDpsYearId_n(SLibConsts.UNDEFINED);
                entry.setFkDpsDocId_n(SLibConsts.UNDEFINED);
            }
            else {
                entry.setFkDpsYearId_n(moDps.getPkYearId());
                entry.setFkDpsDocId_n(moDps.getPkDocId());
            }

            entry.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
            entry.setDbmsUserNew((String) miClient.getSession().readField(SModConsts.USRU_USR, new int[] { entry.getFkUserNewId() }, SDbRegistry.FIELD_NAME));
            entry.setFkUserEditId(SUtilConsts.USR_NA_ID);
            entry.setDbmsUserEdit((String) miClient.getSession().readField(SModConsts.USRU_USR, new int[] { entry.getFkUserEditId() }, SDbRegistry.FIELD_NAME));
            entry.setFkUserDeleteId(entry.getFkUserEditId());
            entry.setDbmsUserDelete(entry.getDbmsUserEdit());

            if (moBoolCheck.isSelected()) {
                check = new SDataCheck();

                check.setPkCheckWalletId(moCheckWallet.getPkCheckWalletId());
                check.setPkCheckId(SLibConsts.UNDEFINED);
                check.setDate(mtMoveDate);
                check.setNumber(moIntCheckNumber.getValue());
                check.setBeneficiary(moKeyBizPartner.getSelectedItem().getItem());
                check.setBeneficiaryAccount(moKeyBizPartnerAccount.getSelectedIndex() <= 0 ? "" : moKeyBizPartnerAccount.getSelectedItem().getItem());
                check.setIsForBeneficiaryAccount(moBoolCheckForBeneficiaryAccount.getValue());
                check.setValue(moCurMove.getField().getValue());
                check.setFkCheckStatusId(SModSysConsts.TRNS_ST_DPS_EMITED);
                check.setFkBizPartnerId_nr(moKeyBizPartner.getValue()[0]);
                check.setFkBizPartnerBranchId(moKeyBizPartnerAccount.getSelectedIndex() <= 0 ? SLibConsts.UNDEFINED : moKeyBizPartnerAccount.getValue()[0]);
                check.setFkBankAccountId(moKeyBizPartnerAccount.getSelectedIndex() <= 0 ? SLibConsts.UNDEFINED : moKeyBizPartnerAccount.getValue()[1]);
                check.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
                check.setFkUserEditId(SUtilConsts.USR_NA_ID);
                check.setFkUserDeleteId(entry.getFkUserEditId());

                entry.setDbmsCheck(check);
            }
        }

        return entry;
    }

    private SDataRecordEntry createRecordEntryCounterpart() throws Exception {
        int idAccount = SLibConsts.UNDEFINED;
        SDataRecordEntry entry = null;
        SDbAbpBizPartner abpBizPartner = moSessionCustom.getAbpBizPartner(moKeyBizPartner.getValue()[0], mnBizPartnerCategoryId);

        if (moAbpCash == null) {
            throw new Exception(SFinConsts.MSG_ERR_ABP_ENT_NOT_FOUND + "'" + moCashXXX.getAuxEntity() + "'.");
        }
        if (abpBizPartner == null) {
            throw new Exception(SFinConsts.MSG_ERR_ABP_BPS_NOT_FOUND + "'" + moKeyBizPartner.getSelectedItem().getItem() + "'.");
        }
        else {
            entry = new SDataRecordEntry();

            if (mbMoveIncome) {
                entry.setDebit(0);
                entry.setCredit(moCurMove.getField().getValue());
                entry.setExchangeRate(moDecExchangeRate.getValue());
                entry.setExchangeRateSystem(entry.getExchangeRate());
                entry.setDebitCy(0);
                entry.setCreditCy(moCurMoveCy.getField().getValue());
            }
            else {
                entry.setDebit(moCurMove.getField().getValue());
                entry.setCredit(0);
                entry.setExchangeRate(moDecExchangeRate.getValue());
                entry.setExchangeRateSystem(entry.getExchangeRate());
                entry.setDebitCy(moCurMoveCy.getField().getValue());
                entry.setCreditCy(0);
            }

            if (moBoolCheck.isSelected()) {
                entry.setConcept(composeConceptCheck());
            }
            else {
                entry.setConcept(moTextConcept.getValue());
            }
            entry.setReference(mbMovePayment ? "" : moTextReferenceDps.getValue());
            entry.setIsExchangeDifference(false);
            entry.setIsSystem(true);

            if (SFinUtils.isSysMoveTypeForBizPartnerBalance(manSysMoveTypeKey)) {
                idAccount = abpBizPartner.getFkAccountBalanceId();
            }
            else if (SFinUtils.isSysMoveTypeForBizPartnerPaymentAdvance(manSysMoveTypeKey)) {
                idAccount = abpBizPartner.getFkAccountPaymentAdvanceId();
            }
            else {
                miClient.showMsgBoxWarning(SLibConsts.ERR_MSG_OPTION_UNKNOWN);
            }

            entry.setFkAccountIdXXX(SFinUtils.getAccountFormerIdXXX(miClient.getSession(), idAccount));
            entry.setFkAccountId(idAccount);
            entry.setDbmsAccount((String) miClient.getSession().readField(SModConsts.FIN_ACC, new int[] { idAccount }, SDbRegistry.FIELD_NAME));

            entry.setFkCostCenterIdXXX_n("");
            entry.setFkCostCenterId_n(SLibConsts.UNDEFINED);
            entry.setDbmsCostCenter_n("");

            entry.setFkItemId_n(SLibConsts.UNDEFINED);
            entry.setXtaItemCode("");
            entry.setXtaItem("");

            entry.setFkCompanyBranchId_n(SLibConsts.UNDEFINED);
            entry.setFkEntityId_n(SLibConsts.UNDEFINED);
            entry.setXtaEntityCode("");
            entry.setXtaEntity("");

            entry.setFkBizPartnerId_nr(moKeyBizPartner.getValue()[0]);
            entry.setFkBizPartnerBranchId_n(SBpsUtils.getHeadquartersId(miClient.getSession(), entry.getFkBizPartnerId_nr()));
            entry.setXtaBizPartnerCode(moKeyBizPartner.getSelectedItem().getCode());
            entry.setXtaBizPartner(moKeyBizPartner.getSelectedItem().getItem());

            entry.setFkCurrencyId(manCashCurrencyKey[0]);
            entry.setDbmsCurrencyKey(moSessionCustom.getCurrencyCode(manCashCurrencyKey));

            entry.setFkAccountingMoveTypeId(manAccMoveSubclassKeyXXX[0]);
            entry.setFkAccountingMoveClassId(manAccMoveSubclassKeyXXX[1]);
            entry.setFkAccountingMoveSubclassId(manAccMoveSubclassKeyXXX[2]);
            entry.setFkSystemMoveClassId(manSysMoveTypeKey[0]);
            entry.setFkSystemMoveTypeId(manSysMoveTypeKey[1]);
            entry.setXtaSystemMoveClass((String) miClient.getSession().readField(SModConsts.FINS_CL_SYS_MOV, manSysMoveTypeKey, SDbRegistry.FIELD_NAME));
            entry.setXtaSystemMoveType((String) miClient.getSession().readField(SModConsts.FINS_TP_SYS_MOV, manSysMoveTypeKey, SDbRegistry.FIELD_NAME));

            entry.setFkSystemAccountClassId(manSysAccTypeKey[0]);
            entry.setFkSystemAccountTypeId(manSysAccTypeKey[1]);
            entry.setFkSystemMoveCategoryIdXXX(manSysMoveTypeKeyXXX[0]);
            entry.setFkSystemMoveTypeIdXXX(manSysMoveTypeKeyXXX[1]);

            if (!mbMovePayment) {
                entry.setFkDpsYearId_n(SLibConsts.UNDEFINED);
                entry.setFkDpsDocId_n(SLibConsts.UNDEFINED);
            }
            else {
                entry.setFkDpsYearId_n(moDps.getPkYearId());
                entry.setFkDpsDocId_n(moDps.getPkDocId());
            }

            entry.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
            entry.setDbmsUserNew((String) miClient.getSession().readField(SModConsts.USRU_USR, new int[] { entry.getFkUserNewId() }, SDbRegistry.FIELD_NAME));
            entry.setFkUserEditId(SUtilConsts.USR_NA_ID);
            entry.setDbmsUserEdit((String) miClient.getSession().readField(SModConsts.USRU_USR, new int[] { entry.getFkUserEditId() }, SDbRegistry.FIELD_NAME));
            entry.setFkUserDeleteId(entry.getFkUserEditId());
            entry.setDbmsUserDelete(entry.getDbmsUserEdit());
        }

        return entry;
    }

    /*
     * Public methods
     */

    /*
     * Implemented methods
     */

    /**
     * Sets cash account for this dialog.
     */
    @Override
    public void setMoveCash(final SDataAccountCash cash, final SDbAbpEntity abpCash) {
        moCashXXX = cash;
        moAbpCash = abpCash;
        moCashBankAccount = (SDbBizPartnerBranchBankAccount) miClient.getSession().readRegistry(SModConsts.BPSU_BANK_ACC, new int[] { moCashXXX.getFkBizPartnerBranchId_n(), moCashXXX.getFkBankAccountId_n() });
        manCashCurrencyKey = new int[] { moCashXXX.getFkCurrencyId() };
        mbCashLocalCurrency = moSessionCustom.isLocalCurrency(manCashCurrencyKey);

        moCurMoveCy.setCurrencyKey(manCashCurrencyKey);
        jtfCashCode.setText(moCashXXX.getAuxCode());
        jtfCashCode.setCaretPosition(0);
        jtfCash.setText(moCashXXX.getAuxEntity());
        jtfCash.setCaretPosition(0);
    }

    /**
     * Defines move settings for this dialog.
     * This method must be called just before <code>setMoveData()</code>.
     * @param sysMoveTypeKey Constants defined in <code>erp.mod.SModSysConsts</code> (FINS_TP_SYS_MOVE...).
     * @param moveMode Constants defined in this class.
     * @param date Move date.
     */
    @Override
    public void setMoveSettings(final int[] sysMoveTypeKey, final int moveMode, final Date date, final HashSet<Integer> currentChecks) {
        removeAllListeners();

        manSysMoveTypeKey = sysMoveTypeKey;
        mbMoveIncome = manSysMoveTypeKey[0] == SModSysConsts.FINS_CL_SYS_MOV_MI;
        mbMovePayment = SFinUtils.isSysMoveTypeForBizPartnerPayment(manSysMoveTypeKey);
        mtMoveDate = date;
        msMoveTypeAbbr = (String) miClient.getSession().readField(SModConsts.FINS_TP_SYS_MOV, manSysMoveTypeKey, SDbRegistry.FIELD_NAME_ABBR);
        moCurrentChecksSet.clear();
        moCurrentChecksSet.addAll(currentChecks);

        jtfMoveType.setText((String) miClient.getSession().readField(SModConsts.FINS_TP_SYS_MOV, manSysMoveTypeKey, SDbRegistry.FIELD_NAME));
        jtfMoveType.setCaretPosition(0);

        mnBizPartnerCategoryId = SFinUtils.getBizPartnerCategoryId(manSysMoveTypeKey);
        mnDpsCategoryId = !mbMovePayment ? SLibConsts.UNDEFINED : SFinUtils.getDpsCategoryId(manSysMoveTypeKey);
        jlBizPartner.setText(SBpsUtils.getBizPartnerCategoryName(mnBizPartnerCategoryId, SUtilConsts.NUM_SNG) + ":*");
        miClient.getSession().populateCatalogue(moKeyBizPartner, SModConsts.BPSU_BP, mnBizPartnerCategoryId, null);

        if (mbCashLocalCurrency) {
            jlExchangeRate.setEnabled(false);
            moDecExchangeRate.setEnabled(false);
            jlMove.setEnabled(false);
            moCurMove.setEnabled(false);

            moCurMoveCy.setEditable(true);
            jbComputeMoveCy.setEnabled(false);
            moDecExchangeRate.setEditable(false);
            jbComputeExchangeRate.setEnabled(false);
            jbPickExchangeRate.setEnabled(false);
            moCurMove.setEditable(false);
            jbComputeMove.setEnabled(false);
        }
        else {
            jlExchangeRate.setEnabled(true);
            moDecExchangeRate.setEnabled(true);
            jlMove.setEnabled(true);
            moCurMove.setEnabled(true);

            moCurMoveCy.setEditable(true);
            jbComputeMoveCy.setEnabled(true);
            moDecExchangeRate.setEditable(mbMoveIncome);
            jbComputeExchangeRate.setEnabled(mbMoveIncome);
            jbPickExchangeRate.setEnabled(mbMoveIncome);
            moCurMove.setEditable(true);
            jbComputeMove.setEnabled(true);
        }

        if (!mbMoveIncome && moCashXXX.getIsCheckWalletApplying()) {
            moBoolCheck.setEnabled(true);
            jlCheckNumber.setEnabled(true);
            moIntCheckNumber.setEnabled(true);
            jlBizPartnerAccount.setEnabled(true);
        }
        else {
            moBoolCheck.setEnabled(false);
            jlCheckNumber.setEnabled(false);
            moIntCheckNumber.setEnabled(false);
            jlBizPartnerAccount.setEnabled(false);
        }

        moDps = null;
        moPanelDps.resetPanel();

        if (mbMovePayment) {
            jlReferenceDps.setText("Folio doc.:*");
            jbPickDps.setEnabled(true);
            jbPickDpsAll.setEnabled(true);
            moPanelDps.setEnabled(true);
            moTextReferenceDps.setTextSettings(SGuiUtils.getLabelName(jlReferenceDps), 50);
            moTextReferenceDps.setFieldButton(jbPickDps);
        }
        else {
            jlReferenceDps.setText("Referencia:");
            jbPickDps.setEnabled(false);
            jbPickDpsAll.setEnabled(false);
            moPanelDps.setEnabled(false);
            moTextReferenceDps.setTextSettings(SGuiUtils.getLabelName(jlReferenceDps), 15, 0);
            moTextReferenceDps.setFieldButton(null);
        }

        // XXX Map to obsolete account move subclasses (sflores, 2013-07-19):

        if (manSysMoveTypeKey[1] == SModSysConsts.FINS_TP_SYS_MOV_MI_SUP_PAY[1]) {
            manSysAccTypeKey = SModSysConsts.FINS_TP_SYS_ACC_BPR_SUP_BAL;
            manSysMoveTypeKeyXXX = SDataConstantsSys.FINS_TP_SYS_MOV_BPS_SUP;
            manAccMoveSubclassKeyXXX = mbMoveIncome ? SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_IN_SUP_PAY_REF : SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_OUT_SUP_PAY;
        }
        else if (manSysMoveTypeKey[1] == SModSysConsts.FINS_TP_SYS_MOV_MI_SUP_ADV[1]) {
            manSysAccTypeKey = SModSysConsts.FINS_TP_SYS_ACC_BPR_SUP_ADV;
            manSysMoveTypeKeyXXX = SDataConstantsSys.FINS_TP_SYS_MOV_BPS_SUP;
            manAccMoveSubclassKeyXXX = mbMoveIncome ? SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_IN_SUP_ADV_REF : SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_OUT_SUP_ADV;
        }
        else if (manSysMoveTypeKey[1] == SModSysConsts.FINS_TP_SYS_MOV_MI_CUS_PAY[1]) {
            manSysAccTypeKey = SModSysConsts.FINS_TP_SYS_ACC_BPR_CUS_BAL;
            manSysMoveTypeKeyXXX = SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CUS;
            manAccMoveSubclassKeyXXX = mbMoveIncome ? SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_IN_CUS_PAY : SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_OUT_CUS_PAY_REF;
        }
        else if (manSysMoveTypeKey[1] == SModSysConsts.FINS_TP_SYS_MOV_MI_CUS_ADV[1]) {
            manSysAccTypeKey = SModSysConsts.FINS_TP_SYS_ACC_BPR_CUS_ADV;
            manSysMoveTypeKeyXXX = SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CUS;
            manAccMoveSubclassKeyXXX = mbMoveIncome ? SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_IN_CUS_ADV : SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_OUT_CUS_ADV_REF;
        }
        else if (manSysMoveTypeKey[1] == SModSysConsts.FINS_TP_SYS_MOV_MI_CDR_PAY[1]) {
            manSysAccTypeKey = SModSysConsts.FINS_TP_SYS_ACC_BPR_CDR_BAL;
            manSysMoveTypeKeyXXX = SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CDR;
            manAccMoveSubclassKeyXXX = mbMoveIncome ? SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_IN_EXT_CDR : SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_OUT_EXT_CDR;
        }
        else if (manSysMoveTypeKey[1] == SModSysConsts.FINS_TP_SYS_MOV_MI_DBR_PAY[1]) {
            manSysAccTypeKey = SModSysConsts.FINS_TP_SYS_ACC_BPR_DBR_BAL;
            manSysMoveTypeKeyXXX = SDataConstantsSys.FINS_TP_SYS_MOV_BPS_DBR;
            manAccMoveSubclassKeyXXX = mbMoveIncome ? SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_IN_EXT_DBR : SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_OUT_EXT_DBR;
        }
        else {
            miClient.showMsgBoxWarning(SLibConsts.ERR_MSG_OPTION_UNKNOWN);
        }

        addAllListeners();
    }

    /**
     * Defines move data for this dialog.
     * This method must be called just after <code>setMoveSettings()</code>.
     * @param recordEntries Only when cash move is a transfer, <code>recordEntries</code> is of length 2 (source and destiny record entries). Otherwise is of length 1 (single record entry).
     */
    @Override
    public void setMoveData(final Object[] keyRecord, final SDataRecordEntry[] recordEntries) throws Exception {
        SDataCheck checkXXX = null;

        removeAllListeners();

        maoRecordKey = keyRecord;
        moFields.resetFields();

        // Cash data:

        if (mbMoveIncome) {
            moCurMoveCy.getField().setValue(recordEntries[0].getDebitCy());
            moCurMove.getField().setValue(recordEntries[0].getDebit());
        }
        else {
            moCurMoveCy.getField().setValue(recordEntries[0].getCreditCy());
            moCurMove.getField().setValue(recordEntries[0].getCredit());
        }

        moDecExchangeRate.setValue(recordEntries[0].getExchangeRate());

        // Business partner data:

        moKeyBizPartner.setValue(new int[] { recordEntries[1].getFkBizPartnerId_nr() });
        itemStateBizPartner();

        if (!mbMovePayment) {
            moDps = null;
            moTextReferenceDps.setValue(recordEntries[0].getReference());
        }
        else {
            if (recordEntries[1].getFkDpsYearId_n() != SLibConsts.UNDEFINED && recordEntries[1].getFkDpsDocId_n() != SLibConsts.UNDEFINED) {
                moDps = (SDbDps) miClient.getSession().readRegistry(SModConsts.TRN_DPS, new int[] { recordEntries[1].getFkDpsYearId_n(), recordEntries[1].getFkDpsDocId_n() });
                moTextReferenceDps.setValue(moDps.getDpsNumber());
            }
        }

        renderDps();

        // Bank check data:

        checkXXX = recordEntries[0].getDbmsCheck();
        moBoolCheck.setSelected(checkXXX != null);
        itemStateCheck();

        if (!moBoolCheck.isSelected()) {
            moCheckWallet = null;
            mnCheckCurrentNumber = 0;
        }
        else {
            if (recordEntries[0].getIsRegistryNew()) {
                // Bank check is not yet in database:
                moCheckWallet = SFinUtils.readCheckWallet(miClient.getSession(), (int[]) moCashXXX.getPrimaryKey());
            }
            else {
                // Bank check is already in database:
                moCheckWallet = SFinUtils.readCheckWallet(miClient.getSession(), (int[]) moCashXXX.getPrimaryKey(), checkXXX.getNumber());
            }

            mnCheckCurrentNumber = checkXXX.getNumber();    // preserve current bank check number

            renderCheckWallet(moCheckWallet);
            moIntCheckNumber.setValue(mnCheckCurrentNumber);
            moBoolCheckForBeneficiaryAccount.setValue(checkXXX.getIsForBeneficiaryAccount());

            moKeyBizPartnerAccount.setValue(new int[] { checkXXX.getFkBizPartnerBranchId(), checkXXX.getFkBankAccountId() });
        }

        // Concept data:

        moTextConcept.setValue(recordEntries[0].getConcept());
        computeConcept(null);

        // Reset user input warnings:

        setUpdateDps(false);
        setUpdateConcept(false);

        addAllListeners();
    }

    @Override
    public ArrayList<SDataRecordEntry> getMoveData() throws Exception {
        ArrayList<SDataRecordEntry> entries = new ArrayList<SDataRecordEntry>();

        entries.add(createRecordEntryCash());
        entries.add(createRecordEntryCounterpart());

        return entries;
    }

    /*
     * Overriden methods
     */

    @Override
    public void addAllListeners() {
        jbComputeConcept.addActionListener(this);
        jbApproveConcept.addActionListener(this);
        jbComputeMove.addActionListener(this);
        jbComputeMoveCy.addActionListener(this);
        jbComputeExchangeRate.addActionListener(this);
        jbPickExchangeRate.addActionListener(this);
        jbPickBizPartner.addActionListener(this);

        moCurMoveCy.getField().getComponent().addFocusListener(this);
        moDecExchangeRate.addFocusListener(this);
        moCurMove.getField().getComponent().addFocusListener(this);
        moKeyBizPartner.addFocusListener(this);
        moTextReferenceDps.addFocusListener(this);
        moIntCheckNumber.addFocusListener(this);
        moTextConcept.addFocusListener(this);

        moKeyBizPartner.addItemListener(this);
        moBoolCheck.addItemListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbComputeConcept.removeActionListener(this);
        jbApproveConcept.removeActionListener(this);
        jbComputeMove.removeActionListener(this);
        jbComputeMoveCy.removeActionListener(this);
        jbComputeExchangeRate.removeActionListener(this);
        jbPickExchangeRate.removeActionListener(this);
        jbPickBizPartner.removeActionListener(this);

        moCurMoveCy.getField().getComponent().removeFocusListener(this);
        moDecExchangeRate.removeFocusListener(this);
        moCurMove.getField().getComponent().removeFocusListener(this);
        moKeyBizPartner.removeFocusListener(this);
        moTextReferenceDps.removeFocusListener(this);
        moIntCheckNumber.removeFocusListener(this);
        moTextConcept.removeFocusListener(this);

        moKeyBizPartner.removeItemListener(this);
        moBoolCheck.removeItemListener(this);
    }

    @Override
    public void reloadCatalogues() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public SGuiValidation validateForm() {
        double move = 0;
        double diff = 0;
        SGuiValidation validation = null;

        validation = moFields.validateFields();

        if (validation.isValid()) {
            if (mbMovePayment && moDps == null) {
                // Validate that a document to pay has been chosen:

                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DIF + "'" + SGuiUtils.getLabelName(jlReferenceDps) + "':\n" + SDbConsts.ERR_MSG_REG_NOT_FOUND);
                validation.setComponent(moTextReferenceDps);
            }
            else if (mbUpdateConcept) {
                // Validate that current concept is the desired one, because it needs to be updated:

                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DIF + " '" + SGuiUtils.getLabelName(jlConcept) + "'.");
                validation.setComponent(moTextConcept);
            }
            else {
                // Validate that move equivalence on local currency is correct:

                move = SLibUtils.round(moCurMoveCy.getField().getValue() * moDecExchangeRate.getValue(), SLibUtils.getDecimalFormatAmount().getMaximumFractionDigits());
                diff = SLibUtils.round(moCurMove.getField().getValue() - move, SLibUtils.getDecimalFormatAmount().getMaximumFractionDigits());

                if (diff != 0) {
                    validation.setMessage(SGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + SGuiUtils.getLabelName(jlMove) + "' tiene una diferencia de " + SLibUtils.getDecimalFormatAmount().format(diff) + " " + moSessionCustom.getLocalCurrencyCode() + ".");
                    validation.setComponent(moCurMove.getField().getComponent());
                }

                if (validation.isValid() && moBoolCheck.isSelected()) {
                    // Validate bank check:

                    if (moCheckWallet == null) {
                        validation.setMessage(SGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + SGuiUtils.getLabelName(jlCheckNumber) + "' requiere de una chequera.");
                        validation.setComponent(moBoolCheck);
                    }
                    else if (moIntCheckNumber.getValue() < moCheckWallet.getNumberStart() || (moCheckWallet.getNumberEnd_n() != 0 && (moIntCheckNumber.getValue() > moCheckWallet.getNumberEnd_n()))) {
                        validation.setMessage(SGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + SGuiUtils.getLabelName(jlCheckNumber) + "' debe pertenecer a los folios de la chequera actual.");
                        validation.setComponent(moIntCheckNumber);
                    }
                    else if (moCurrentChecksSet.contains(moIntCheckNumber.getValue())) {
                        validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DIF + "'" + SGuiUtils.getLabelName(jlCheckNumber) + "' porque ya existe.");
                        validation.setComponent(moIntCheckNumber);
                    }
                }
            }
        }

        return validation;
    }

    @Override
    public void actionSave() {
        if (jbSave.isEnabled()) {
            if (SGuiUtils.computeValidation(miClient, validateForm())) {
                mnFormResult = SGuiConsts.FORM_RESULT_OK;
                dispose();
            }
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbComputeConcept) {
                actionComputeConcept();
            }
            else if (button == jbApproveConcept) {
                actionApproveConcept();
            }
            else if (button == jbComputeMoveCy) {
                actionComputeMoveCy(true);
            }
            else if (button == jbComputeMove) {
                actionComputeMove(true);
            }
            else if (button == jbComputeExchangeRate) {
                actionComputeExchangeRate(true);
            }
            else if (button == jbPickExchangeRate) {
                actionPickExchangeRate();
            }
            else if (button == jbPickBizPartner) {
                actionPickBizPartner();
            }
            else if (button == jbPickDps) {
                actionPickDps();
            }
            else if (button == jbPickDpsAll) {
                actionPickDpsAll();
            }
        }
    }

    @Override
    public void focusGained(FocusEvent e) {
        if (e.getSource() instanceof SBeanFieldInteger) {
            SBeanFieldInteger field = (SBeanFieldInteger) e.getSource();

            if (field == moIntCheckNumber) {
                preserveCheckNumber();
            }
        }
        else if (e.getSource() instanceof SBeanFieldText) {
            SBeanFieldText field = (SBeanFieldText) e.getSource();

            if (field == moTextReferenceDps) {
                setUpdateDps(false);
                if (mbMovePayment) {
                    preserveDps();
                }
            }
            if (field == moTextConcept) {
                computeConcept(null);
                moTextConcept.selectAll();
            }
        }
        else if (e.getSource() instanceof SBeanFieldKey) {
            SBeanFieldKey field = (SBeanFieldKey) e.getSource();

            if (field == moKeyBizPartner) {
                preserveBizPartnerKey();
            }
        }
    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof SBeanFieldInteger) {
            SBeanFieldInteger field = (SBeanFieldInteger) e.getSource();

            if (field == moIntCheckNumber) {
                computeConcept(SFinConceptEvaluation.NUMBER_CHECK);
            }
        }
        else if (e.getSource() instanceof SBeanFieldDecimal) {
            SBeanFieldDecimal field = (SBeanFieldDecimal) e.getSource();

            if (field == moCurMoveCy.getField()) {
                focusLostMoveCy();
            }
            else if (field == moCurMove.getField()) {
                focusLostMove();
            }
            else if (field == moDecExchangeRate) {
                focusLostExchangeRate();
            }
        }
        else if (e.getSource() instanceof SBeanFieldText) {
            SBeanFieldText field = (SBeanFieldText) e.getSource();

            if (field == moTextReferenceDps) {
                if (mbMovePayment) {
                    searchDps();
                    computeConcept(SFinConceptEvaluation.NUMBER_DPS);
                }
            }
        }
        else if (e.getSource() instanceof SBeanFieldKey) {
            SBeanFieldKey field = (SBeanFieldKey) e.getSource();

            if (field == moKeyBizPartner) {
                computeConcept(SFinConceptEvaluation.BIZ_PARTNER);
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof SBeanFieldBoolean) {
            SBeanFieldBoolean field = (SBeanFieldBoolean) e.getSource();
            if (field == moBoolCheck) {
                itemStateCheck();
            }
        }
        else if (e.getSource() instanceof SBeanFieldKey && e.getStateChange() == ItemEvent.SELECTED) {
            SBeanFieldKey field = (SBeanFieldKey) e.getSource();

            if (field == moKeyBizPartner) {
                itemStateBizPartner();
            }
        }
    }
}
