/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.trn.form;

import erp.mod.SModConsts;
import erp.mod.cfg.db.SDbFunctionalArea;
import erp.mod.trn.db.SDbFunctionalAreaBudgets;
import erp.mod.trn.db.SRowFunctionalAreaBudgets;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import sa.gui.util.SUtilConsts;
import sa.lib.SLibConsts;
import sa.lib.SLibTimeConsts;
import sa.lib.SLibTimeUtils;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanForm;

/**
 *
 * @author Sergio Flores
 */
public class SFormFunctionalAreaBudgets extends SBeanForm implements ActionListener, ListSelectionListener {
    
    private SDbFunctionalAreaBudgets moBudgets;
    private SGridPaneForm moGridBudgets;
    private String[] masMonths;
    private int mnCurrentEditableColumn;

    /**
     * Creates new form SFormFunctionalAreaBudgets.
     * @param client
     * @param title
     */
    public SFormFunctionalAreaBudgets(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.TRNX_FUNC_BUDGETS, 0, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jpBudgets = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlPeriodYear = new javax.swing.JLabel();
        moCalPeriodYear = new sa.lib.gui.bean.SBeanFieldCalendarYear();
        jPanel5 = new javax.swing.JPanel();
        jlPeriodMonth = new javax.swing.JLabel();
        jtfPeriodMonth = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jlFunctionalAreaName = new javax.swing.JLabel();
        jtfFunctionalAreaName = new javax.swing.JTextField();
        jtfFunctionalAreaCode = new javax.swing.JTextField();
        jPanel10 = new javax.swing.JPanel();
        jlFunctionalAreaExpensesMonthly = new javax.swing.JLabel();
        jtfFunctionalAreaExpensesMonthly = new javax.swing.JTextField();
        jtfFunctionalAreaExpensesMonthlyCur = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jbClearBudget = new javax.swing.JButton();
        jbClearMonth = new javax.swing.JButton();
        jbClearYear = new javax.swing.JButton();
        jbCopyMonth = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        jpBudgets.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpBudgets.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel1.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel8.setLayout(new java.awt.GridLayout(1, 2));

        jPanel2.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPeriodYear.setText("Año actual:");
        jlPeriodYear.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlPeriodYear);
        jPanel4.add(moCalPeriodYear);

        jPanel2.add(jPanel4);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPeriodMonth.setText("Mes actual:");
        jlPeriodMonth.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlPeriodMonth);

        jtfPeriodMonth.setEditable(false);
        jtfPeriodMonth.setFocusable(false);
        jtfPeriodMonth.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel5.add(jtfPeriodMonth);

        jPanel2.add(jPanel5);

        jPanel8.add(jPanel2);

        jPanel7.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFunctionalAreaName.setText("Área funcional:");
        jlFunctionalAreaName.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlFunctionalAreaName);

        jtfFunctionalAreaName.setEditable(false);
        jtfFunctionalAreaName.setFocusable(false);
        jtfFunctionalAreaName.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel9.add(jtfFunctionalAreaName);

        jtfFunctionalAreaCode.setEditable(false);
        jtfFunctionalAreaCode.setFocusable(false);
        jtfFunctionalAreaCode.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jtfFunctionalAreaCode);

        jPanel7.add(jPanel9);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFunctionalAreaExpensesMonthly.setText("Límite mensual:");
        jlFunctionalAreaExpensesMonthly.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jlFunctionalAreaExpensesMonthly);

        jtfFunctionalAreaExpensesMonthly.setEditable(false);
        jtfFunctionalAreaExpensesMonthly.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfFunctionalAreaExpensesMonthly.setText("0.00");
        jtfFunctionalAreaExpensesMonthly.setFocusable(false);
        jtfFunctionalAreaExpensesMonthly.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jtfFunctionalAreaExpensesMonthly);

        jtfFunctionalAreaExpensesMonthlyCur.setEditable(false);
        jtfFunctionalAreaExpensesMonthlyCur.setText("CUR");
        jtfFunctionalAreaExpensesMonthlyCur.setFocusable(false);
        jtfFunctionalAreaExpensesMonthlyCur.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel10.add(jtfFunctionalAreaExpensesMonthlyCur);

        jPanel7.add(jPanel10);

        jPanel8.add(jPanel7);

        jPanel1.add(jPanel8, java.awt.BorderLayout.NORTH);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jbClearBudget.setText("Limpiar presupuesto");
        jbClearBudget.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbClearBudget.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel6.add(jbClearBudget);

        jbClearMonth.setText("Limpiar mes actual");
        jbClearMonth.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbClearMonth.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel6.add(jbClearMonth);

        jbClearYear.setText("Limpiar año actual");
        jbClearYear.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbClearYear.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel6.add(jbClearYear);

        jbCopyMonth.setText("Copiar mes anterior");
        jbCopyMonth.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbCopyMonth.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel6.add(jbCopyMonth);

        jLabel1.setForeground(java.awt.SystemColor.textInactiveText);
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("(presupuesto: 0 (vacío) = sin límite mensual; 0.00 (cero) = sin presupuesto)");
        jLabel1.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel6.add(jLabel1);

        jPanel1.add(jPanel6, java.awt.BorderLayout.PAGE_END);

        jpBudgets.add(jPanel1, java.awt.BorderLayout.NORTH);

        getContentPane().add(jpBudgets, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbClearBudget;
    private javax.swing.JButton jbClearMonth;
    private javax.swing.JButton jbClearYear;
    private javax.swing.JButton jbCopyMonth;
    private javax.swing.JLabel jlFunctionalAreaExpensesMonthly;
    private javax.swing.JLabel jlFunctionalAreaName;
    private javax.swing.JLabel jlPeriodMonth;
    private javax.swing.JLabel jlPeriodYear;
    private javax.swing.JPanel jpBudgets;
    private javax.swing.JTextField jtfFunctionalAreaCode;
    private javax.swing.JTextField jtfFunctionalAreaExpensesMonthly;
    private javax.swing.JTextField jtfFunctionalAreaExpensesMonthlyCur;
    private javax.swing.JTextField jtfFunctionalAreaName;
    private javax.swing.JTextField jtfPeriodMonth;
    private sa.lib.gui.bean.SBeanFieldCalendarYear moCalPeriodYear;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 960, 600);
        
        moCalPeriodYear.setCalendarSettings(SGuiUtils.getLabelName(jlPeriodYear));
        
        moFields.addField(moCalPeriodYear);

        moFields.setFormButton(jbSave);
        
        moGridBudgets = new SGridPaneForm(miClient, mnFormType, mnFormSubtype, msTitle) {
            
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }
            
            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> columns = new ArrayList<>();
                String[] months = SLibTimeUtils.createMonthsOfYearStd(Calendar.LONG);

                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_M, "Área funcional"));
                
                for (int month = 0; month < months.length; month++) {
                    SGridColumnForm column = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, SLibUtils.textProperCase(months[month]) + " $");
                    column.setEditable(true);
                    columns.add(column);
                }

                return columns;
            }
        };

        jpBudgets.add(moGridBudgets, BorderLayout.CENTER);
        mvFormGrids.add(moGridBudgets);
        
        masMonths = SLibTimeUtils.createMonthsOfYearStd(Calendar.LONG);
    }
    
    private int getCurrentEditableColumn() {
        return moGridBudgets.getTable().getSelectedColumn() - SRowFunctionalAreaBudgets.COL_JAN;
    }
    
    private void renderGridRows() {
        int row = moGridBudgets.getTable().getSelectedRow();
        int col = moGridBudgets.getTable().getSelectedColumn();

        moGridBudgets.renderGridRows();

        moGridBudgets.setSelectedGridRow(row);
        moGridBudgets.setSelectedGridColumn(col);
    }

    private void actionPerformedClearBudget() {
        if (mnCurrentEditableColumn >= 0) {
            int row = moGridBudgets.getTable().getSelectedRow();
            
            if (row >= 0) {
                SRowFunctionalAreaBudgets baf = (SRowFunctionalAreaBudgets) moGridBudgets.getModel().getGridRows().get(row);
                
                if (miClient.showMsgBoxConfirm("¿Está seguro que desea borrar el presupuesto de " + masMonths[mnCurrentEditableColumn] + " '" + baf.getFunctionalArea().getName() + "'?") == JOptionPane.YES_OPTION) {
                    baf.getBudgets()[mnCurrentEditableColumn] = null;
                    renderGridRows();
                }
            }
        }
    }
    
    private void actionPerformedClearMonth() {
        if (mnCurrentEditableColumn >= 0) {
            if (miClient.showMsgBoxConfirm("¿Está seguro que desea borrar todos los presupuestos de " + masMonths[mnCurrentEditableColumn] + "?") == JOptionPane.YES_OPTION) {
                for (SGridRow row : moGridBudgets.getModel().getGridRows()) {
                    SRowFunctionalAreaBudgets baf = (SRowFunctionalAreaBudgets) row;
                    baf.getBudgets()[mnCurrentEditableColumn] = null;
                }

                renderGridRows();
            }
        }
    }
    
    private void actionPerformedClearYear() {
        if (miClient.showMsgBoxConfirm("¿Está seguro que desea borrar todos los presupuestos de " + moCalPeriodYear.getValue() + "?") == JOptionPane.YES_OPTION) {
            for (SGridRow row : moGridBudgets.getModel().getGridRows()) {
                SRowFunctionalAreaBudgets baf = (SRowFunctionalAreaBudgets) row;
                for (int month = 1; month <= SLibTimeConsts.MONTHS; month++) {
                    baf.getBudgets()[month - 1] = null;
                }
            }
            
            renderGridRows();
        }
    }
    
    private void actionPerformedCopyMonth() {
        if (mnCurrentEditableColumn >= 1) {
            for (SGridRow row : moGridBudgets.getModel().getGridRows()) {
                SRowFunctionalAreaBudgets baf = (SRowFunctionalAreaBudgets) row;
                baf.getBudgets()[mnCurrentEditableColumn] = baf.getBudgets()[mnCurrentEditableColumn - 1];
            }
            
            renderGridRows();
        }
    }
    
    private void valueChangedBudgets() {
        int column = getCurrentEditableColumn();
        
        if (column < 0) {
            mnCurrentEditableColumn = -1;
            jtfPeriodMonth.setText(SUtilConsts.NON_APPLYING);
        }
        else {
            mnCurrentEditableColumn = column;
            jtfPeriodMonth.setText(SLibUtils.textProperCase(masMonths[mnCurrentEditableColumn]));
        }
        
        int row = moGridBudgets.getTable().getSelectedRow();
        
        if (row < 0) {
            jtfFunctionalAreaName.setText("");
            jtfFunctionalAreaCode.setText("");
            jtfFunctionalAreaExpensesMonthly.setText("");
            jtfFunctionalAreaExpensesMonthlyCur.setText("");
        }
        else {
            SDbFunctionalArea fa = ((SRowFunctionalAreaBudgets) moGridBudgets.getSelectedGridRow()).getFunctionalArea();
            jtfFunctionalAreaName.setText(fa.getName());
            jtfFunctionalAreaCode.setText(fa.getCode());
            jtfFunctionalAreaExpensesMonthly.setText(SLibUtils.getDecimalFormatAmount().format(fa.getExpensesMonthly()));
            jtfFunctionalAreaExpensesMonthlyCur.setText(miClient.getSession().getSessionCustom().getLocalCurrencyCode());
        }
    }
    
    @Override
    public void addAllListeners() {
        jbClearBudget.addActionListener(this);
        jbClearMonth.addActionListener(this);
        jbClearYear.addActionListener(this);
        jbCopyMonth.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbClearBudget.removeActionListener(this);
        jbClearMonth.removeActionListener(this);
        jbClearYear.removeActionListener(this);
        jbCopyMonth.removeActionListener(this);
    }

    @Override
    public void reloadCatalogues() {

    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moBudgets = (SDbFunctionalAreaBudgets) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moBudgets.isRegistryNew()) {
            moBudgets.setPeriodYear(miClient.getSession().getCurrentYear());
            moBudgets.readFunctionalAreas(miClient.getSession());
            
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText("");
        }
        
        moCalPeriodYear.setValue(moBudgets.getPeriodYear());

        ArrayList<SRowFunctionalAreaBudgets> rowFunctionalAreaBudgetses = moBudgets.createRowFunctionalAreaBudgetses();
        moGridBudgets.populateGrid(new Vector<>(rowFunctionalAreaBudgetses));
        moGridBudgets.getTable().setRowSorter(null);
        moGridBudgets.setSelectedGridRow(0);
        moGridBudgets.getTable().getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        moGridBudgets.getTable().getSelectionModel().addListSelectionListener(this);
        moGridBudgets.getTable().getColumnModel().getSelectionModel().addListSelectionListener(this);
        
        valueChangedBudgets();
        
        setFormEditable(true);
        
        if (moBudgets.isRegistryNew()) {
            
        }
        else {
            moCalPeriodYear.setEditable(false);
        }

        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbFunctionalAreaBudgets registry = moBudgets.clone();

        if (registry.isRegistryNew()) { }
        
        registry.setPeriodYear(moCalPeriodYear.getValue());
        
        ArrayList<SRowFunctionalAreaBudgets> rowFunctionalAreaBudgetses = new ArrayList<>();
        
        for (SGridRow row : moGridBudgets.getModel().getGridRows()) {
            rowFunctionalAreaBudgetses.add((SRowFunctionalAreaBudgets) row);
        }
        
        registry.processRowFunctionalAreaBudgetses(rowFunctionalAreaBudgetses);

        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        
        if (validation.isValid()) {
            boolean budgetsSet = false;
            
            for (SGridRow row : moGridBudgets.getModel().getGridRows()) {
                SRowFunctionalAreaBudgets fab = (SRowFunctionalAreaBudgets) row;
                for (int month = 1; month <= SLibTimeConsts.MONTHS; month++) {
                    if (fab.getBudgets()[month - 1] != null) {
                        budgetsSet = true;
                    }
                }
            }
            
            if (!budgetsSet) {
                validation.setMessage("Se debe especificar al menos un presupuesto.");
                validation.setComponent(moGridBudgets.getTable());
            }
            else {
                if (moBudgets.isRegistryNew()) {
                    try {
                        if (SDbFunctionalAreaBudgets.existBudgets(miClient.getSession(), moCalPeriodYear.getValue())) {
                            validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DIF + "'" + SGuiUtils.getLabelName(jlPeriodYear) + "'.\n"
                                    + "Ya existen presupuestos para el año " + moCalPeriodYear.getValue() + ".");
                            validation.setComponent(moCalPeriodYear.getEditor());
                        }
                    }
                    catch (Exception e) {
                        SLibUtils.showException(this, e);
                    }
                }
            }
        }

        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            
            if (button == jbClearBudget) {
                actionPerformedClearBudget();
            }
            else if (button == jbClearMonth) {
                actionPerformedClearMonth();
            }
            else if (button == jbClearYear) {
                actionPerformedClearYear();
            }
            else if (button == jbCopyMonth) {
                actionPerformedCopyMonth();
            }
        }
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        if (e.getSource() == moGridBudgets.getTable().getSelectionModel() || e.getSource() == moGridBudgets.getTable().getColumnModel().getSelectionModel() ) {
            valueChangedBudgets();
        }
    }
}
