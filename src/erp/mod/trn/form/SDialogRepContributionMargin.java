/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.trn.form;

import erp.lib.SLibConstants;
import erp.mod.SModConsts;
import sa.lib.SLibTimeUtils;
import sa.lib.SLibUtils;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanDialogReport;

/**
 *
 * @author Isabel Servín
 */
public class SDialogRepContributionMargin extends SBeanDialogReport {
    
    /**
     * Creates new form SDialogRepContributionMargin
     * @param client
     * @param title
     */
    public SDialogRepContributionMargin(SGuiClient client, String title) {
        setFormSettings(client, SModConsts.TRN_ITEM_COST, SLibConstants.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jlDateStart = new javax.swing.JLabel();
        moDateStart = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel9 = new javax.swing.JPanel();
        jlDateEnd = new javax.swing.JLabel();
        moDateEnd = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel2 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        moRadioItem = new sa.lib.gui.bean.SBeanFieldRadio();
        jPanel5 = new javax.swing.JPanel();
        moRadioClient = new sa.lib.gui.bean.SBeanFieldRadio();
        jPanel11 = new javax.swing.JPanel();
        moRadioAgent = new sa.lib.gui.bean.SBeanFieldRadio();

        setTitle("Reporte de margen de contribución");
        setPreferredSize(new java.awt.Dimension(150, 100));

        jPanel1.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel17.setBorder(javax.swing.BorderFactory.createTitledBorder("Parámetros del reporte:"));
        jPanel17.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel6.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel7.setLayout(new java.awt.GridLayout(2, 0, 0, 5));

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateStart.setText("Fecha inicial:");
        jlDateStart.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlDateStart);
        jPanel8.add(moDateStart);

        jPanel7.add(jPanel8);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateEnd.setText("Fecha final:");
        jlDateEnd.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlDateEnd);
        jPanel9.add(moDateEnd);

        jPanel7.add(jPanel9);

        jPanel6.add(jPanel7, java.awt.BorderLayout.NORTH);

        jPanel17.add(jPanel6, java.awt.BorderLayout.NORTH);

        jPanel2.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel10.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        buttonGroup1.add(moRadioItem);
        moRadioItem.setText("Por ítem");
        jPanel13.add(moRadioItem);

        jPanel10.add(jPanel13);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        buttonGroup1.add(moRadioClient);
        moRadioClient.setText("Por cliente ");
        moRadioClient.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel5.add(moRadioClient);

        jPanel10.add(jPanel5);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        buttonGroup1.add(moRadioAgent);
        moRadioAgent.setText("Por agente de ventas");
        moRadioAgent.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel11.add(moRadioAgent);

        jPanel10.add(jPanel11);

        jPanel2.add(jPanel10, java.awt.BorderLayout.NORTH);

        jPanel17.add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel17, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JLabel jlDateEnd;
    private javax.swing.JLabel jlDateStart;
    private sa.lib.gui.bean.SBeanFieldDate moDateEnd;
    private sa.lib.gui.bean.SBeanFieldDate moDateStart;
    private sa.lib.gui.bean.SBeanFieldRadio moRadioAgent;
    private sa.lib.gui.bean.SBeanFieldRadio moRadioClient;
    private sa.lib.gui.bean.SBeanFieldRadio moRadioItem;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 480, 300);
        
        moDateStart.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateStart.getText()), true);
        moDateEnd.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateEnd.getText()), true);
        
        moRadioItem.setBooleanSettings(SGuiUtils.getLabelName(moRadioItem.getText()), true);
        moRadioClient.setBooleanSettings(SGuiUtils.getLabelName(moRadioClient.getText()), false);
        moRadioAgent.setBooleanSettings(SGuiUtils.getLabelName(moRadioAgent.getText()), false);
        
        moFields.addField(moDateStart);
        moFields.addField(moDateEnd);
        
        moFields.addField(moRadioItem);
        moFields.addField(moRadioClient);
        moFields.addField(moRadioAgent);
        
        moFields.setFormButton(jbPrint);
        
        moDateStart.setValue(SLibTimeUtils.getBeginOfMonth(miClient.getSession().getCurrentDate()));
        moDateEnd.setValue(SLibTimeUtils.getEndOfMonth(miClient.getSession().getCurrentDate()));
        
        reloadCatalogues();
    }
    
    private void dropTemporaryTable() {
        try {
            String sql = "DROP TABLE IF EXISTS temp_cost_intervals;";
            miClient.getSession().getStatement().execute(sql);
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }
    
    private void createTemporaryTable() {
        try {
            String dateStart = SLibUtils.DbmsDateFormatDate.format(moDateStart.getValue()); 
            String dateEnd = SLibUtils.DbmsDateFormatDate.format(moDateEnd.getValue());
            String sql = "CREATE TEMPORARY TABLE IF NOT EXISTS temp_cost_intervals " 
                    + "SELECT _date_start, "
                    + "IF(_date_end IS NULL, '" + dateEnd + "', _date_end) AS _date_end, "
                    + "id_item, id_unit, cost " 
                    + "FROM( " 
                    + "(SELECT DISTINCT '" + dateStart + "' AS _date_start, " // Fecha inicial del periodo  
                    + "(ADDDATE((SELECT tic.dt_sta FROM trn_item_cost AS tic " 
                    + "WHERE '" + dateStart + "' < tic.dt_sta AND tic1.fk_item = tic.fk_item " // Fecha inicial del periodo  
                    + "AND tic1.fk_unit = tic.fk_unit "
                    + "ORDER BY tic.dt_sta LIMIT 1), INTERVAL -1 DAY)) AS _date_end, " 
                    + "tic1.fk_item AS id_item, tic1.fk_unit AS id_unit, 0 AS cost " 
                    + "FROM trn_item_cost AS tic1 " 
                    + "WHERE '" + dateStart + "' < " // Fecha inicial de periodo  
                    + "(SELECT tic2.dt_sta FROM trn_item_cost AS tic2 WHERE tic1.fk_item = tic2.fk_item ORDER BY tic2.dt_sta LIMIT 1) " 
                    + "AND NOT tic1.b_del) " 
                    + "UNION ALL " 
                    + "(SELECT tic1.dt_sta AS _date_start, " 
                    + "(ADDDATE((SELECT tic.dt_sta FROM trn_item_cost AS tic " 
                    + "WHERE tic1.dt_sta < tic.dt_sta AND tic1.fk_item = tic.fk_item " 
                    + "AND tic1.fk_unit = tic.fk_unit " 
                    + "ORDER BY tic.dt_sta LIMIT 1), INTERVAL -1 DAY)) AS _date_end, " 
                    + "tic1.fk_item AS id_item, tic1.fk_unit AS id_unit, tic1.cost " 
                    + "FROM trn_item_cost AS tic1 WHERE NOT tic1.b_del) " 
                    + "UNION ALL " 
                    + "(SELECT DISTINCT '" + dateStart + "' AS _date_start, " // Fecha inicial del periodo  
                    + "NULL AS _date_end, dps_e.fid_item AS id_item, dps_e.fid_unit AS id_unit, 0 AS cost " 
                    + "FROM trn_dps AS dps " 
                    + "INNER JOIN trn_dps_ety AS dps_e ON dps.id_year = dps_e.id_year AND dps.id_doc = dps_e.id_doc " 
                    + "WHERE dps.fid_ct_dps = 2 AND dps.fid_cl_dps IN (3, 5) AND dps.fid_st_dps=2 AND NOT dps.b_del "
                    + "AND dps.fid_tp_dps = 1 AND NOT dps_e.b_del " 
                    + "AND dps.dt BETWEEN '" + dateStart + "' AND '" + dateEnd + "' " 
                    + "AND dps_e.fid_item " 
                    + "NOT IN ( " 
                    + "SELECT DISTINCT tic.fk_item FROM trn_item_cost AS tic " 
                    + "WHERE tic.dt_sta BETWEEN '" + dateStart + "' AND '" + dateEnd + "' " // Fecha inicial del periodo 
                    + "OR (ADDDATE( " 
                    + "(SELECT tic2.dt_sta FROM trn_item_cost AS tic2 " 
                    + "WHERE tic.dt_sta < tic2.dt_sta AND tic.fk_item = tic2.fk_item " 
                    + "AND tic.fk_unit = tic2.fk_unit " 
                    + "ORDER BY tic2.dt_sta LIMIT 1), INTERVAL -1 DAY)) " 
                    + "BETWEEN '" + dateStart + "' AND '" + dateEnd + "'))" // Fecha final en el periodo 
                    + ") AS a "
                    + "WHERE (_date_start BETWEEN '" + dateStart + "' AND '" + dateEnd + "' " 
                    + "OR _date_end BETWEEN '" + dateStart + "' AND '" + dateEnd + "') " 
                    + "ORDER BY id_item, _date_start;";
            miClient.getSession().getStatement().execute(sql);
        }
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }
    
    public void reloadCatalogues() {
        moRadioItem.setSelected(true);
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        
        if (validation.isValid()) {
            try {
                SLibTimeUtils.validatePeriod(moDateStart.getValue(), moDateEnd.getValue());
            }
            catch (Exception e) {
                validation.setMessage(e.getMessage());
                validation.setComponent(moDateStart);
            }
        }

        return validation;
    }

    @Override
    public void createParamsMap() {
         if (jbPrint.isEnabled()) {
            if (SGuiUtils.computeValidation(miClient, validateForm())) {
                dropTemporaryTable();
                createTemporaryTable();
                moParamsMap = miClient.createReportParams();
                
                String sTitle = "";
                String sCode = "";
                String sName = "";
                String sOrderBy = "name, code, unit";
                
                if (moRadioItem.isSelected()) {
                    sTitle = " " + moRadioItem.getText().toUpperCase();
                    sCode = "i.item_key";
                    sName = "i.item";
                    sOrderBy = "code, name, unit";
                }
                else if (moRadioClient.isSelected()) {
                    sTitle = " " + moRadioClient.getText().toUpperCase();
                    sCode = "bpc.bp_key";
                    sName = "bp.bp";
                } 
                else if (moRadioAgent.isSelected()) {
                    sTitle = " " + moRadioAgent.getText().toUpperCase();
                    sCode = "COALESCE(sac.bp_key, 'NA')";
                    sName = "COALESCE(sa.bp, 'NA')";
                }
                
                moParamsMap.put("tDateStart", moDateStart.getValue());
                moParamsMap.put("tDateEnd", moDateEnd.getValue());
                moParamsMap.put("sTitle", sTitle);
                moParamsMap.put("sCode", sCode);
                moParamsMap.put("sName", sName);
                moParamsMap.put("sOrderBy", sOrderBy);
            }
        }
    }
}
