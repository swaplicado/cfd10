/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.trn.form;

import erp.client.SClientInterface;
import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import erp.mod.trn.db.SDbMaintUser;
import erp.mtrn.data.STrnMaintConstants;
import erp.mtrn.data.STrnMaintUtilities;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanForm;

/**
 *
 * @author Gil De Jesús, Sergio Flores, Claudio Peña
 */
public class SFormMaintUser extends SBeanForm implements ActionListener {

    private SDbMaintUser moRegistry;
    private byte[] mabFingerprintBytes;
    private int mnFingerPassword;

    /**
     * Creates new form SFormMaintUser.
     * @param client GUI client.
     * @param subtype Constants defined in SModSysConsts (TRNX_TP_MAINT_USER_...).
     * @param title Form's title.
     */
    public SFormMaintUser(SGuiClient client, int subtype, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.TRN_MAINT_USER, subtype, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        moTextName = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jlMaintUser = new javax.swing.JLabel();
        moKeyMaintUser = new sa.lib.gui.bean.SBeanFieldKey();
        moBoolEmployee = new sa.lib.gui.bean.SBeanFieldBoolean();
        moBoolContractor = new sa.lib.gui.bean.SBeanFieldBoolean();
        moBoolToolsMaintProv = new sa.lib.gui.bean.SBeanFieldBoolean();
        jPanel1 = new javax.swing.JPanel();
        jbFingerprintEnroll = new javax.swing.JButton();
        jtfFingerprintStatus = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jbFingerprintVerify = new javax.swing.JButton();
        jbFingerprintDelete = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jbFingerPasswordEnroll = new javax.swing.JButton();
        jtfFingerPasswordStatus = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        jbFingerPasswordDelete = new javax.swing.JButton();

        moTextName.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        moTextName.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(8, 1, 0, 5));

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlMaintUser.setForeground(java.awt.Color.blue);
        jlMaintUser.setText("Asoc. negocios:*");
        jlMaintUser.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlMaintUser);

        moKeyMaintUser.setPreferredSize(new java.awt.Dimension(350, 23));
        jPanel5.add(moKeyMaintUser);

        jPanel2.add(jPanel5);

        moBoolEmployee.setText("Es empleado");
        jPanel2.add(moBoolEmployee);

        moBoolContractor.setText("Es contratista");
        jPanel2.add(moBoolContractor);

        moBoolToolsMaintProv.setText("Es proveedor de mantenimiento de herramientas");
        jPanel2.add(moBoolToolsMaintProv);

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jbFingerprintEnroll.setText("Capturar huella digital");
        jbFingerprintEnroll.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel1.add(jbFingerprintEnroll);

        jtfFingerprintStatus.setEditable(false);
        jtfFingerprintStatus.setFocusable(false);
        jtfFingerprintStatus.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel1.add(jtfFingerprintStatus);

        jPanel2.add(jPanel1);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jbFingerprintVerify.setText("Verificar huella digital");
        jbFingerprintVerify.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel4.add(jbFingerprintVerify);

        jbFingerprintDelete.setText("Borrar huella digital");
        jbFingerprintDelete.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel4.add(jbFingerprintDelete);

        jPanel2.add(jPanel4);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jbFingerPasswordEnroll.setText("Capturar contraseña");
        jbFingerPasswordEnroll.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel7.add(jbFingerPasswordEnroll);

        jtfFingerPasswordStatus.setEditable(false);
        jtfFingerPasswordStatus.setFocusable(false);
        jtfFingerPasswordStatus.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel7.add(jtfFingerPasswordStatus);

        jPanel2.add(jPanel7);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jbFingerPasswordDelete.setText("Borrar contraseña");
        jbFingerPasswordDelete.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel8.add(jbFingerPasswordDelete);

        jPanel2.add(jPanel8);

        moTextName.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(moTextName, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JButton jbFingerPasswordDelete;
    private javax.swing.JButton jbFingerPasswordEnroll;
    private javax.swing.JButton jbFingerprintDelete;
    private javax.swing.JButton jbFingerprintEnroll;
    private javax.swing.JButton jbFingerprintVerify;
    private javax.swing.JLabel jlMaintUser;
    private javax.swing.JTextField jtfFingerPasswordStatus;
    private javax.swing.JTextField jtfFingerprintStatus;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolContractor;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolEmployee;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolToolsMaintProv;
    private sa.lib.gui.bean.SBeanFieldKey moKeyMaintUser;
    private javax.swing.JPanel moTextName;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 480, 300);
        
        moKeyMaintUser.setKeySettings(miClient, SGuiUtils.getLabelName(jlMaintUser), true);
        moBoolEmployee.setBooleanSettings(moBoolEmployee.getText(), false);
        moBoolContractor.setBooleanSettings(moBoolContractor.getText(), false);
        moBoolToolsMaintProv.setBooleanSettings(moBoolToolsMaintProv.getText(), false);

        moFields.addField(moKeyMaintUser);
        moFields.addField(moBoolEmployee);
        moFields.addField(moBoolContractor);
        moFields.addField(moBoolToolsMaintProv);

        moFields.setFormButton(jbSave);
    }
    
    private void showFingerprintStatus() {
        jtfFingerprintStatus.setText(mabFingerprintBytes != null ? STrnMaintConstants.FINGERPRINT_WITH : STrnMaintConstants.FINGERPRINT_WITHOUT);
        jtfFingerprintStatus.setCaretPosition(0);
        
        jbFingerprintEnroll.setEnabled(mabFingerprintBytes == null);
        jbFingerprintVerify.setEnabled(mabFingerprintBytes != null);
        jbFingerprintDelete.setEnabled(mabFingerprintBytes != null);
    }
    
    private void showFingerPasswordStatus() {
        jtfFingerPasswordStatus.setText(mnFingerPassword != 0 ? STrnMaintConstants.FINGERPASSWORD_WITH : STrnMaintConstants.FINGERPASSWORD_WITHOUT);
        jtfFingerPasswordStatus.setCaretPosition(0);
        
        jbFingerPasswordEnroll.setEnabled(mnFingerPassword == 0);        
        jbFingerPasswordDelete.setEnabled(mnFingerPassword != 0);
    }
    
    private void actionFingerprintEnroll() {
        mabFingerprintBytes = STrnMaintUtilities.enrollFingerprint((SClientInterface) miClient);
        showFingerprintStatus();
        jbFingerprintVerify.requestFocus();
    }
    
    private void actionFingerPasswordEnroll() {
        mnFingerPassword = STrnMaintUtilities.enrollFingerPassword((SClientInterface) miClient);
        showFingerPasswordStatus();
    }

    private void actionFingerprintVerify() {
        if (STrnMaintUtilities.verifyFingerprint((SClientInterface) miClient, mabFingerprintBytes)) {
            miClient.showMsgBoxInformation(STrnMaintConstants.VERIFIED);
        }
        else {
            miClient.showMsgBoxError(STrnMaintConstants.NONVERIFIED);
        }
    }

    private void actionFingerprintDelete() {
        if (miClient.showMsgBoxConfirm("¿Borrar huella digital?") == JOptionPane.YES_OPTION) {
            mabFingerprintBytes = null;
            showFingerprintStatus();
            jbFingerprintEnroll.requestFocus();
        }
    }
    
    private void actionFingerPasswordDelete() {
        if (miClient.showMsgBoxConfirm("¿Borrar la contraseña?") == JOptionPane.YES_OPTION) {
            mnFingerPassword = 0;
            showFingerPasswordStatus();
            jbFingerPasswordEnroll.requestFocus();
        }
    }

    @Override
    public void addAllListeners() {
        jbFingerprintEnroll.addActionListener(this);
        jbFingerPasswordEnroll.addActionListener(this);
        jbFingerprintVerify.addActionListener(this);
        jbFingerprintDelete.addActionListener(this);
        jbFingerPasswordDelete.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbFingerprintEnroll.removeActionListener(this);
        jbFingerPasswordEnroll.removeActionListener(this);
        jbFingerprintVerify.removeActionListener(this);
        jbFingerprintDelete.removeActionListener(this);
        jbFingerPasswordDelete.removeActionListener(this);
    }

    @Override
    public void reloadCatalogues() {
        switch (mnFormSubtype) {
            case SModSysConsts.TRNX_TP_MAINT_USER_EMPLOYEE:
                miClient.getSession().populateCatalogue(moKeyMaintUser, SModConsts.HRSU_EMP, SModConsts.TRN_MAINT_USER, null);
                break;
            case SModSysConsts.TRNX_TP_MAINT_USER_CONTRACTOR:
            case SModSysConsts.TRNX_TP_MAINT_USER_TOOLS_MAINT_PROV:
                miClient.getSession().populateCatalogue(moKeyMaintUser, SModConsts.BPSU_BP, SModSysConsts.BPSS_CT_BP_SUP, null);
                break;
            default:
        }
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbMaintUser) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            
            switch (mnFormSubtype) {
                case SModSysConsts.TRNX_TP_MAINT_USER_EMPLOYEE:
                    moRegistry.setEmployee(true);
                    break;
                case SModSysConsts.TRNX_TP_MAINT_USER_CONTRACTOR:
                    moRegistry.setContractor(true);
                    break;
                case SModSysConsts.TRNX_TP_MAINT_USER_TOOLS_MAINT_PROV:
                    moRegistry.setToolsMaintProvider(true);
                    break;
                default:
            }
            
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        moKeyMaintUser.setValue(new int[] { moRegistry.getPkMaintUserId() });
        moBoolEmployee.setValue(moRegistry.isEmployee());
        moBoolContractor.setValue(moRegistry.isContractor());
        moBoolToolsMaintProv.setValue(moRegistry.isToolsMaintProvider());
        mabFingerprintBytes = moRegistry.getFingerprint_n() == null ? null : moRegistry.getFingerprint_n().getBytes(1, (int) moRegistry.getFingerprint_n().length());
        showFingerprintStatus();

        setFormEditable(true);

        switch (mnFormSubtype) {
            case SModSysConsts.TRNX_TP_MAINT_USER_EMPLOYEE:
                moBoolEmployee.setEnabled(false);
                break;
            case SModSysConsts.TRNX_TP_MAINT_USER_CONTRACTOR:
                moBoolContractor.setEnabled(false);
                break;
            case SModSysConsts.TRNX_TP_MAINT_USER_TOOLS_MAINT_PROV:
                moBoolToolsMaintProv.setEnabled(false);
                break;
            default:
        }
        
        if (registry.isRegistryNew()) {
            
        }
        else {
            moKeyMaintUser.setEnabled(false);
        }
        
        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbMaintUser registry = moRegistry.clone();

        if (registry.isRegistryNew()) {
            registry.setPkMaintUserId(moKeyMaintUser.getValue()[0]);
        }

        //registry.setFingerprint_n(...);
        registry.setEmployee(moBoolEmployee.getValue());
        registry.setContractor(moBoolContractor.getValue());
        registry.setToolsMaintProvider(moBoolToolsMaintProv.getValue());
        registry.setAuxFingerprintBytes(mabFingerprintBytes);
        registry.setPinNumber(mnFingerPassword);

        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            
            if (button == jbFingerprintEnroll) {
                actionFingerprintEnroll();
            }
            else if (button == jbFingerprintVerify) {
                actionFingerprintVerify();
            }
            else if (button == jbFingerprintDelete) {
                actionFingerprintDelete();
            }
            else if (button == jbFingerPasswordEnroll) {
                actionFingerPasswordEnroll();
            }
            else if (button == jbFingerPasswordDelete) {
                actionFingerPasswordDelete();
            }
        }
    }
}
