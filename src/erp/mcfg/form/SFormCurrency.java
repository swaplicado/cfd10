/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SFormCurrency.java
 *
 * Created on 14/10/2009, 04:26:11 PM
 */

package erp.mcfg.form;

import erp.data.SDataConstants;
import erp.data.SDataUtilities;
import erp.data.SProcConstants;
import erp.lib.SLibConstants;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.mcfg.data.SDataCurrency;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;

/**
 *
 * @author Alfonso Flores
 */
public class SFormCurrency extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mcfg.data.SDataCurrency moCurrency;
    private erp.lib.form.SFormField moFieldKey;
    private erp.lib.form.SFormField moFieldCurrency;
    private erp.lib.form.SFormField moFieldTextSymbol;
    private erp.lib.form.SFormField moFieldTextSingular;
    private erp.lib.form.SFormField moFieldTextPlural;
    private erp.lib.form.SFormField moFieldTextPrefix;
    private erp.lib.form.SFormField moFieldTextSuffix;
    private erp.lib.form.SFormField moFieldFiscalCurrency;
    private erp.lib.form.SFormField moFieldIsDeleted;

    /** Creates new form SFormCurrency */
    public SFormCurrency(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        mnFormType = SDataConstants.CFGU_CUR;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jlKey = new javax.swing.JLabel();
        jtfKey = new javax.swing.JTextField();
        jlCurrency = new javax.swing.JLabel();
        jtfCurrency = new javax.swing.JTextField();
        jlTxtSymbol = new javax.swing.JLabel();
        jtfTxtSymbol = new javax.swing.JTextField();
        jlTxtSingular = new javax.swing.JLabel();
        jtfTxtSingular = new javax.swing.JTextField();
        jlTxtPlural = new javax.swing.JLabel();
        jtfTxtPlural = new javax.swing.JTextField();
        jlTxtPrefix = new javax.swing.JLabel();
        jtfTxtPrefix = new javax.swing.JTextField();
        jlTxtSuffix = new javax.swing.JLabel();
        jtfTxtSuffix = new javax.swing.JTextField();
        jlFkFiscalCurrencyId = new javax.swing.JLabel();
        jcbFkFiscalCurrencyId = new javax.swing.JComboBox();
        jckIsDeleted = new javax.swing.JCheckBox();
        jPanel5 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Moneda");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setPreferredSize(new java.awt.Dimension(392, 33));
        jPanel1.setLayout(new java.awt.FlowLayout(2));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jPanel1.add(jbCancel);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.GridLayout(9, 2, 5, 5));

        jlKey.setText("Clave: *");
        jPanel3.add(jlKey);

        jtfKey.setText("TEXT");
        jPanel3.add(jtfKey);

        jlCurrency.setText("Moneda: *");
        jPanel3.add(jlCurrency);

        jtfCurrency.setText("TEXT");
        jPanel3.add(jtfCurrency);

        jlTxtSymbol.setText("SÃ­mbolo: *");
        jPanel3.add(jlTxtSymbol);

        jtfTxtSymbol.setText("TEXT");
        jPanel3.add(jtfTxtSymbol);

        jlTxtSingular.setText("Moneda en singular: *");
        jPanel3.add(jlTxtSingular);

        jtfTxtSingular.setText("TEXT");
        jPanel3.add(jtfTxtSingular);

        jlTxtPlural.setText("Moneda en plural: *");
        jPanel3.add(jlTxtPlural);

        jtfTxtPlural.setText("TEXT");
        jPanel3.add(jtfTxtPlural);

        jlTxtPrefix.setText("Prefijo de la moneda:");
        jlTxtPrefix.setPreferredSize(new java.awt.Dimension(100, 14));
        jPanel3.add(jlTxtPrefix);

        jtfTxtPrefix.setText("TEXT");
        jPanel3.add(jtfTxtPrefix);

        jlTxtSuffix.setText("Sufijo de la moneda:");
        jlTxtSuffix.setPreferredSize(new java.awt.Dimension(100, 14));
        jPanel3.add(jlTxtSuffix);

        jtfTxtSuffix.setText("TEXT");
        jPanel3.add(jtfTxtSuffix);

        jlFkFiscalCurrencyId.setText("Moneda SAT:*");
        jlFkFiscalCurrencyId.setPreferredSize(new java.awt.Dimension(100, 14));
        jPanel3.add(jlFkFiscalCurrencyId);

        jcbFkFiscalCurrencyId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel3.add(jcbFkFiscalCurrencyId);

        jckIsDeleted.setText("Registro eliminado");
        jPanel3.add(jckIsDeleted);

        jPanel5.setLayout(new java.awt.BorderLayout());
        jPanel3.add(jPanel5);

        jPanel2.add(jPanel3, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-528)/2, (screenSize.height-358)/2, 528, 358);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivate();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        mvFields = new Vector<SFormField>();

        moFieldKey = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtfKey, jlKey);
        moFieldKey.setLengthMax(10);
        moFieldCurrency = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtfCurrency, jlCurrency);
        moFieldCurrency.setLengthMax(50);
        moFieldCurrency.setAutoCaseType(SLibConstants.CASE_UPPER);
        moFieldTextSymbol = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtfTxtSymbol, jlTxtSymbol);
        moFieldTextSymbol.setLengthMax(5);
        moFieldTextSingular = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtfTxtSingular, jlTxtSingular);
        moFieldTextSingular.setLengthMax(50);
        moFieldTextSingular.setAutoCaseType(SLibConstants.CASE_UPPER);
        moFieldTextPlural = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtfTxtPlural, jlTxtPlural);
        moFieldTextPlural.setLengthMax(50);
        moFieldTextPlural.setAutoCaseType(SLibConstants.CASE_UPPER);
        moFieldTextPrefix = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, false, jtfTxtPrefix, jlTxtPrefix);
        moFieldTextPrefix.setLengthMax(25);
        moFieldTextPrefix.setAutoCaseType(SLibConstants.CASE_UPPER);
        moFieldTextSuffix = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, false, jtfTxtSuffix, jlTxtSuffix);
        moFieldTextSuffix.setLengthMax(25);
        moFieldTextSuffix.setAutoCaseType(SLibConstants.CASE_UPPER);
        moFieldFiscalCurrency = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkFiscalCurrencyId, jlFkFiscalCurrencyId);
        moFieldIsDeleted = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsDeleted);

        mvFields.add(moFieldKey);
        mvFields.add(moFieldCurrency);
        mvFields.add(moFieldTextSymbol);
        mvFields.add(moFieldTextSingular);
        mvFields.add(moFieldTextPlural);
        mvFields.add(moFieldTextPrefix);
        mvFields.add(moFieldTextSuffix);
        mvFields.add(moFieldFiscalCurrency);
        mvFields.add(moFieldIsDeleted);

        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction action = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), action, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivate() {
        if (mbFirstTime) {
            mbFirstTime = false;
            jtfKey.requestFocus();
        }
    }

    private void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbOk;
    private javax.swing.JComboBox jcbFkFiscalCurrencyId;
    private javax.swing.JCheckBox jckIsDeleted;
    private javax.swing.JLabel jlCurrency;
    private javax.swing.JLabel jlFkFiscalCurrencyId;
    private javax.swing.JLabel jlKey;
    private javax.swing.JLabel jlTxtPlural;
    private javax.swing.JLabel jlTxtPrefix;
    private javax.swing.JLabel jlTxtSingular;
    private javax.swing.JLabel jlTxtSuffix;
    private javax.swing.JLabel jlTxtSymbol;
    private javax.swing.JTextField jtfCurrency;
    private javax.swing.JTextField jtfKey;
    private javax.swing.JTextField jtfTxtPlural;
    private javax.swing.JTextField jtfTxtPrefix;
    private javax.swing.JTextField jtfTxtSingular;
    private javax.swing.JTextField jtfTxtSuffix;
    private javax.swing.JTextField jtfTxtSymbol;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moCurrency = null;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        jckIsDeleted.setEnabled(false);
    }

    @Override
    @SuppressWarnings("unchecked")
    public void formRefreshCatalogues() {
        mbResetingForm = true;
        SFormUtilities.populateComboBox(miClient, jcbFkFiscalCurrencyId, SDataConstants.FINS_FISCAL_CUR);
        mbResetingForm = false;
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        if (!validation.getIsError()) {
            Object[] oParamsIn = new Object[] { moCurrency == null ? 0 : moCurrency.getPkCurrencyId(), moFieldKey.getString() };

            if ( SDataUtilities.callProcedureVal(miClient, SProcConstants.CFGU_CUR_VAL, oParamsIn, SLibConstants.EXEC_MODE_VERBOSE) > 0 ) {
                validation.setMessage("El valor del campo '" + jlKey.getText() + "' ya existe");
                validation.setComponent(jtfKey);
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        moCurrency = (SDataCurrency) registry;

        moFieldKey.setFieldValue(moCurrency.getKey());
        moFieldCurrency.setFieldValue(moCurrency.getCurrency());
        moFieldTextSymbol.setFieldValue(moCurrency.getTextSymbol());
        moFieldTextSingular.setFieldValue(moCurrency.getTextSingular());
        moFieldTextPlural.setFieldValue(moCurrency.getTextPlural());
        moFieldTextPrefix.setFieldValue(moCurrency.getTextPrefix());
        moFieldTextSuffix.setFieldValue(moCurrency.getTextSuffix());
        moFieldFiscalCurrency.setFieldValue(new int[] { moCurrency.getFkFiscalCurrencyId() });
        moFieldIsDeleted.setFieldValue(moCurrency.getIsDeleted());

        jckIsDeleted.setEnabled(true);
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        if (moCurrency == null) {
            moCurrency = new SDataCurrency();
            moCurrency.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
        }
        else {
            moCurrency.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
        }

        moCurrency.setKey(moFieldKey.getString());
        moCurrency.setCurrency(moFieldCurrency.getString());
        moCurrency.setTextSymbol(moFieldTextSymbol.getString());
        moCurrency.setTextSingular(moFieldTextSingular.getString());
        moCurrency.setTextPlural(moFieldTextPlural.getString());
        moCurrency.setTextPrefix(moFieldTextPrefix.getString());
        moCurrency.setTextSuffix(moFieldTextSuffix.getString());
        moCurrency.setIsDeleted(moFieldIsDeleted.getBoolean());
        moCurrency.setFkFiscalCurrencyId(moFieldFiscalCurrency.getKeyAsIntArray()[0]);

        return moCurrency;
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
        }
    }
}
