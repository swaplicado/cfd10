/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SFormCompanyBranchEntity.java
 *
 * Created on 26/08/2010, 10:21:50 AM
 */

package erp.mcfg.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataUtilities;
import erp.data.SProcConstants;
import erp.lib.SLibConstants;
import erp.lib.form.SFormComboBoxGroup;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.mcfg.data.SDataCompanyBranchEntity;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;

/**
 *
 * @author Alfonso Flores
 */
public class SFormCompanyBranchEntity extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mcfg.data.SDataCompanyBranchEntity moCompanyBranchEntity;
    private erp.lib.form.SFormComboBoxGroup moComboBoxCompanyBranch;
    private erp.lib.form.SFormComboBoxGroup moComboBoxCatTypeEntity;
    private erp.lib.form.SFormField moFieldFkCompanyId;
    private erp.lib.form.SFormField moFieldPkCompanyBranchId;
    private erp.lib.form.SFormField moFieldFkEntityCategoryId;
    private erp.lib.form.SFormField moFieldFkEntityTypeId;
    private erp.lib.form.SFormField moFieldEntity;
    private erp.lib.form.SFormField moFieldCode;
    private erp.lib.form.SFormField moFieldIsDefault;
    private erp.lib.form.SFormField moFieldIsActive;
    private erp.lib.form.SFormField moFieldIsActiveIn;
    private erp.lib.form.SFormField moFieldIsActiveOut;
    private erp.lib.form.SFormField moFieldIsDeleted;

    /** Creates new form SFormCompanyBranchEntity */
    public SFormCompanyBranchEntity(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        mnFormType = SDataConstants.CFGU_COB_ENT;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jlFkCompanyId = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jbFkCompanyId = new javax.swing.JButton();
        jcbFkCompanyId = new javax.swing.JComboBox<SFormComponentItem>();
        jlPkCompanyBranchId = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jbPkCompanyBranchId = new javax.swing.JButton();
        jcbPkCompanyBranchId = new javax.swing.JComboBox<SFormComponentItem>();
        jlFkEntityCategoryId = new javax.swing.JLabel();
        jcbFkEntityCategoryId = new javax.swing.JComboBox<SFormComponentItem>();
        jlFkEntityTypeId = new javax.swing.JLabel();
        jcbFkEntityTypeId = new javax.swing.JComboBox<SFormComponentItem>();
        jlEntity = new javax.swing.JLabel();
        jtfEntity = new javax.swing.JTextField();
        jlCode = new javax.swing.JLabel();
        jtfCode = new javax.swing.JTextField();
        jckIsDefault = new javax.swing.JCheckBox();
        jckIsActive = new javax.swing.JCheckBox();
        jckIsDeleted = new javax.swing.JCheckBox();
        jckIsActiveIn = new javax.swing.JCheckBox();
        Dummy04 = new javax.swing.JLabel();
        jckIsActiveOut = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Entidad de sucursal");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setPreferredSize(new java.awt.Dimension(392, 33));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jPanel1.add(jbCancel);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.GridLayout(9, 2, 0, 2));

        jlFkCompanyId.setForeground(java.awt.Color.blue);
        jlFkCompanyId.setText("Empresa: *");
        jPanel3.add(jlFkCompanyId);

        jPanel4.setLayout(new java.awt.BorderLayout(2, 0));

        jbFkCompanyId.setText("jButton3");
        jbFkCompanyId.setToolTipText("Seleccionar empresa");
        jbFkCompanyId.setFocusable(false);
        jbFkCompanyId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel4.add(jbFkCompanyId, java.awt.BorderLayout.EAST);

        jcbFkCompanyId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel4.add(jcbFkCompanyId, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel4);

        jlPkCompanyBranchId.setForeground(java.awt.Color.blue);
        jlPkCompanyBranchId.setText("Sucursal empresa: *");
        jPanel3.add(jlPkCompanyBranchId);

        jPanel5.setLayout(new java.awt.BorderLayout(2, 0));

        jbPkCompanyBranchId.setText("jButton4");
        jbPkCompanyBranchId.setToolTipText("Seleccionar sucursal empresa");
        jbPkCompanyBranchId.setFocusable(false);
        jbPkCompanyBranchId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel5.add(jbPkCompanyBranchId, java.awt.BorderLayout.EAST);

        jcbPkCompanyBranchId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel5.add(jcbPkCompanyBranchId, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel5);

        jlFkEntityCategoryId.setForeground(java.awt.Color.blue);
        jlFkEntityCategoryId.setText("Categoría entidad: *");
        jPanel3.add(jlFkEntityCategoryId);

        jcbFkEntityCategoryId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbFkEntityCategoryId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbFkEntityCategoryIdItemStateChanged(evt);
            }
        });
        jPanel3.add(jcbFkEntityCategoryId);

        jlFkEntityTypeId.setText("Tipo entidad: *");
        jPanel3.add(jlFkEntityTypeId);

        jcbFkEntityTypeId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel3.add(jcbFkEntityTypeId);

        jlEntity.setText("Entidad: *");
        jPanel3.add(jlEntity);

        jtfEntity.setText("ENTITY");
        jPanel3.add(jtfEntity);

        jlCode.setText("Código: *");
        jPanel3.add(jlCode);

        jtfCode.setText("CODE");
        jPanel3.add(jtfCode);

        jckIsDefault.setText("Es la entidad predeterminada");
        jPanel3.add(jckIsDefault);

        jckIsActive.setText("Está activo");
        jPanel3.add(jckIsActive);

        jckIsDeleted.setText("Registro eliminado");
        jPanel3.add(jckIsDeleted);

        jckIsActiveIn.setText("Está activo para movimientos de entrada");
        jPanel3.add(jckIsActiveIn);
        jPanel3.add(Dummy04);

        jckIsActiveOut.setText("Está activo para movimientos de salida");
        jPanel3.add(jckIsActiveOut);

        jPanel2.add(jPanel3, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        setSize(new java.awt.Dimension(576, 389));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivate();
    }//GEN-LAST:event_formWindowActivated

    private void jcbFkEntityCategoryIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbFkEntityCategoryIdItemStateChanged
        if (!mbResetingForm) {
            if (evt.getStateChange() == ItemEvent.SELECTED) {
                itemStateChangedFkEntityCategoryId();
            }
        }
    }//GEN-LAST:event_jcbFkEntityCategoryIdItemStateChanged

    private void initComponentsExtra() {
        mvFields = new Vector<SFormField>();

        moComboBoxCompanyBranch = new SFormComboBoxGroup(miClient);
        moComboBoxCatTypeEntity = new SFormComboBoxGroup(miClient);

        moFieldFkCompanyId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkCompanyId, jlFkCompanyId);
        moFieldFkCompanyId.setPickerButton(jbFkCompanyId);
        moFieldPkCompanyBranchId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbPkCompanyBranchId, jlPkCompanyBranchId);
        moFieldPkCompanyBranchId.setPickerButton(jbPkCompanyBranchId);
        moFieldFkEntityCategoryId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkEntityCategoryId, jlFkEntityCategoryId);
        moFieldFkEntityTypeId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkEntityTypeId, jlFkEntityTypeId);
        moFieldEntity = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtfEntity, jlEntity);
        moFieldEntity.setLengthMax(50);
        moFieldEntity.setAutoCaseType(SLibConstants.CASE_UPPER);
        moFieldCode = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtfCode, jlCode);
        moFieldCode.setLengthMax(10);
        moFieldCode.setAutoCaseType(SLibConstants.CASE_UPPER);
        moFieldIsDefault = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsDefault);
        moFieldIsActive = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsActive);
        moFieldIsActiveIn = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsActiveIn);
        moFieldIsActiveOut = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsActiveOut);
        moFieldIsDeleted = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsDeleted);

        mvFields.add(moFieldFkCompanyId);
        mvFields.add(moFieldPkCompanyBranchId);
        mvFields.add(moFieldFkEntityCategoryId);
        mvFields.add(moFieldFkEntityTypeId);
        mvFields.add(moFieldEntity);
        mvFields.add(moFieldCode);
        mvFields.add(moFieldIsDefault);
        mvFields.add(moFieldIsActive);
        mvFields.add(moFieldIsActiveIn);
        mvFields.add(moFieldIsActiveOut);
        mvFields.add(moFieldIsDeleted);

        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);
        jbFkCompanyId.addActionListener(this);
        jbPkCompanyBranchId.addActionListener(this);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction action = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), action, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivate() {
        if (mbFirstTime) {
            mbFirstTime = false;
            if (moCompanyBranchEntity == null) {
                jcbFkCompanyId.requestFocus();
            }
            else {
                jcbFkEntityTypeId.requestFocus();
            }
        }
    }

    private void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    private void actionFkCompanyId() {
        miClient.pickOption(SDataConstants.CFGU_CO, moFieldFkCompanyId, null);
    }

    private void actionPkCompanyBranchId() {
        miClient.pickOption(SDataConstants.BPSU_BPB, moFieldPkCompanyBranchId, new int[] { moFieldFkCompanyId.getKeyAsIntArray()[0] });
    }

    private void renderEnableFields(boolean b) {
        jcbFkCompanyId.setEnabled(b);
        jbFkCompanyId.setEnabled(b);
        jcbPkCompanyBranchId.setEnabled(b);
        jbPkCompanyBranchId.setEnabled(b);
        jcbFkEntityCategoryId.setEnabled(b);
    }

    private void renderCheckBoxInOut(boolean b) {
        jckIsDefault.setEnabled(b);
        jckIsActiveIn.setEnabled(b);
        jckIsActiveOut.setEnabled(b);
    }

    private void itemStateChangedFkEntityCategoryId() {
        if (moFieldFkEntityCategoryId.getKeyAsIntArray()[0] > 0) {
            jcbFkEntityTypeId.setEnabled(true);
            SFormUtilities.populateComboBox(miClient, jcbFkEntityTypeId, SDataConstants.CFGS_TP_ENT, moFieldFkEntityCategoryId.getKeyAsIntArray());
            if (moFieldFkEntityCategoryId.getKeyAsIntArray()[0] == SDataConstantsSys.CFGS_CT_ENT_WH) {
                renderCheckBoxInOut(true);
                jckIsDefault.setSelected(moCompanyBranchEntity == null ? true : false);
                jckIsActiveIn.setSelected(moCompanyBranchEntity == null ? true : false);
                jckIsActiveOut.setSelected(moCompanyBranchEntity == null ? true : false);
            }
            else {
                renderCheckBoxInOut(false);
                jckIsDefault.setSelected(false);
                jckIsActiveIn.setSelected(false);
                jckIsActiveOut.setSelected(false);
            }
        }
        else {
            jcbFkEntityTypeId.setEnabled(false);
            jcbFkEntityTypeId.removeAllItems();
            renderCheckBoxInOut(false);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Dummy04;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbFkCompanyId;
    private javax.swing.JButton jbOk;
    private javax.swing.JButton jbPkCompanyBranchId;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkCompanyId;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkEntityCategoryId;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkEntityTypeId;
    private javax.swing.JComboBox<SFormComponentItem> jcbPkCompanyBranchId;
    private javax.swing.JCheckBox jckIsActive;
    private javax.swing.JCheckBox jckIsActiveIn;
    private javax.swing.JCheckBox jckIsActiveOut;
    private javax.swing.JCheckBox jckIsDefault;
    private javax.swing.JCheckBox jckIsDeleted;
    private javax.swing.JLabel jlCode;
    private javax.swing.JLabel jlEntity;
    private javax.swing.JLabel jlFkCompanyId;
    private javax.swing.JLabel jlFkEntityCategoryId;
    private javax.swing.JLabel jlFkEntityTypeId;
    private javax.swing.JLabel jlPkCompanyBranchId;
    private javax.swing.JTextField jtfCode;
    private javax.swing.JTextField jtfEntity;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moCompanyBranchEntity = null;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        renderEnableFields(true);
        renderCheckBoxInOut(false);

        jcbFkEntityTypeId.setEnabled(false);
        jcbFkEntityTypeId.removeAllItems();
        jckIsActive.setSelected(true);
        jckIsDeleted.setEnabled(false);
        moComboBoxCompanyBranch.reset();

        mbResetingForm = false;
    }

    @Override
    public void formRefreshCatalogues() {
        mbResetingForm = true;
        moComboBoxCompanyBranch.clear();
        moComboBoxCompanyBranch.addComboBox(SDataConstants.CFGU_CO, jcbFkCompanyId, jbFkCompanyId);
        moComboBoxCompanyBranch.addComboBox(SDataConstants.BPSU_BPB, jcbPkCompanyBranchId, jbPkCompanyBranchId);

        SFormUtilities.populateComboBox(miClient, jcbFkEntityCategoryId, SDataConstants.CFGX_CT_ENT_CFG);
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        if (!validation.getIsError()) {
            Object[] oParamsEntity = new Object[] { moFieldFkCompanyId.getKeyAsIntArray()[0], moCompanyBranchEntity == null ? 0 :
                moCompanyBranchEntity.getPkEntityId(), moFieldEntity.getString() };
            Object[] oParamsCode = new Object[] { moFieldFkCompanyId.getKeyAsIntArray()[0], moCompanyBranchEntity == null ? 0 :
                moCompanyBranchEntity.getPkEntityId(), moFieldCode.getString() };

            if ( SDataUtilities.callProcedureVal(miClient, SProcConstants.CFGU_COB_ENT_VAL, oParamsEntity, SLibConstants.EXEC_MODE_VERBOSE) > 0 ) {
                validation.setMessage("El valor del campo '" + jlEntity.getText() + "' ya existe");
                validation.setComponent(jtfEntity);
            }
            else if ( SDataUtilities.callProcedureVal(miClient, SProcConstants.CFGU_COB_ENT_CODE_VAL, oParamsCode, SLibConstants.EXEC_MODE_VERBOSE) > 0 ) {
                validation.setMessage("El valor del campo '" + jlCode.getText() + "' ya existe");
                validation.setComponent(jtfCode);
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        moCompanyBranchEntity = (SDataCompanyBranchEntity) registry;

        SFormUtilities.populateComboBox(miClient, jcbFkEntityCategoryId, SDataConstants.CFGS_CT_ENT);
        
        moFieldFkCompanyId.setFieldValue(new int[] { moCompanyBranchEntity.getFkCompanyId() });
        moFieldPkCompanyBranchId.setFieldValue(new int[] { moCompanyBranchEntity.getPkCompanyBranchId() });
        moFieldFkEntityCategoryId.setFieldValue(new int[] { moCompanyBranchEntity.getFkEntityCategoryId() });
        moFieldFkEntityTypeId.setFieldValue(new int[] { moCompanyBranchEntity.getFkEntityCategoryId(), moCompanyBranchEntity.getFkEntityTypeId() });
        moFieldEntity.setFieldValue(moCompanyBranchEntity.getEntity());
        moFieldCode.setFieldValue(moCompanyBranchEntity.getCode());
        moFieldIsDefault.setFieldValue(moCompanyBranchEntity.getIsDefault());
        moFieldIsActive.setFieldValue(moCompanyBranchEntity.getIsActive());
        moFieldIsActiveIn.setFieldValue(moCompanyBranchEntity.getIsActiveIn());
        moFieldIsActiveOut.setFieldValue(moCompanyBranchEntity.getIsActiveOut());
        moFieldIsDeleted.setFieldValue(moCompanyBranchEntity.getIsDeleted());

        renderEnableFields(false);

        jckIsDeleted.setEnabled(moCompanyBranchEntity.getFkEntityCategoryId() != SDataConstantsSys.CFGS_CT_ENT_CASH ? true : false);
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        if (moCompanyBranchEntity == null) {
            moCompanyBranchEntity = new SDataCompanyBranchEntity();
            moCompanyBranchEntity.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
        }
        else {
            moCompanyBranchEntity.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
        }

        moCompanyBranchEntity.setFkCompanyId(moFieldFkCompanyId.getKeyAsIntArray()[0]);
        moCompanyBranchEntity.setPkCompanyBranchId(moFieldPkCompanyBranchId.getKeyAsIntArray()[0]);
        moCompanyBranchEntity.setFkEntityCategoryId(moFieldFkEntityCategoryId.getKeyAsIntArray()[0]);
        moCompanyBranchEntity.setFkEntityTypeId(moFieldFkEntityTypeId.getKeyAsIntArray()[1]);
        moCompanyBranchEntity.setEntity(moFieldEntity.getString());
        moCompanyBranchEntity.setCode(moFieldCode.getString());
        moCompanyBranchEntity.setIsDefault(moFieldIsDefault.getBoolean());
        moCompanyBranchEntity.setIsActive(moFieldIsActive.getBoolean());
        moCompanyBranchEntity.setIsActiveIn(moFieldFkEntityCategoryId.getKeyAsIntArray()[0] == SDataConstantsSys.CFGS_CT_ENT_WH ?
            moFieldIsActiveIn.getBoolean() : false);
        moCompanyBranchEntity.setIsActiveOut(moFieldFkEntityCategoryId.getKeyAsIntArray()[0] == SDataConstantsSys.CFGS_CT_ENT_WH ?
            moFieldIsActiveOut.getBoolean() : false);
        moCompanyBranchEntity.setIsDeleted(moFieldIsDeleted.getBoolean());

        return moCompanyBranchEntity;
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbFkCompanyId) {
                actionFkCompanyId();
            }
            else if (button == jbPkCompanyBranchId) {
                actionPkCompanyBranchId();
            }
        }
    }
}
