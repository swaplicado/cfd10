/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 *
 * Created on 10/11/2009
 */

package erp.mmkt.form;

import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.lib.SLibConstants;
import erp.mmkt.data.SDataPriceListLink;

/**
 *
 * @author Néstor Ávalos
 */
public class SFormPriceListLink extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mmkt.data.SDataPriceListLink moPListItem;
    private erp.lib.form.SFormField moFieldPkLinkTypeId;
    private erp.lib.form.SFormField moFieldPkReferenceId;

    private int mnParamDpsCategory;

    /** Creates new form SFormElement */
    public SFormPriceListLink(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        mnFormType = SDataConstants.MKT_PLIST_ITEM;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jbOK = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jlPkLinkTypeId = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jcbPkLinkTypeId = new javax.swing.JComboBox();
        jPanel7 = new javax.swing.JPanel();
        jlPkReferenceId = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jcbPkReferenceId = new javax.swing.JComboBox<SFormComponentItem>();
        jbPkReferenceId = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Filtro de ítem");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setPreferredSize(new java.awt.Dimension(400, 33));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOK.setText("Aceptar");
        jbOK.setToolTipText("[Ctrl + Enter]");
        jbOK.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jbOK);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jPanel1.add(jbCancel);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel4.setLayout(new java.awt.GridLayout(2, 1, 5, 5));

        jPanel6.setLayout(new java.awt.BorderLayout());

        jlPkLinkTypeId.setForeground(java.awt.Color.blue);
        jlPkLinkTypeId.setText("Tipo de referencia: *");
        jlPkLinkTypeId.setPreferredSize(new java.awt.Dimension(120, 14));
        jPanel6.add(jlPkLinkTypeId, java.awt.BorderLayout.WEST);

        jPanel8.setLayout(new java.awt.BorderLayout());

        jcbPkLinkTypeId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbPkLinkTypeId.setPreferredSize(new java.awt.Dimension(200, 20));
        jcbPkLinkTypeId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbPkLinkTypeIdItemStateChanged(evt);
            }
        });
        jPanel8.add(jcbPkLinkTypeId, java.awt.BorderLayout.WEST);

        jPanel6.add(jPanel8, java.awt.BorderLayout.CENTER);

        jPanel4.add(jPanel6);

        jPanel7.setLayout(new java.awt.BorderLayout());

        jlPkReferenceId.setForeground(java.awt.Color.blue);
        jlPkReferenceId.setText("Referencia: *");
        jlPkReferenceId.setPreferredSize(new java.awt.Dimension(120, 14));
        jPanel7.add(jlPkReferenceId, java.awt.BorderLayout.WEST);

        jPanel5.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel5.setLayout(new java.awt.BorderLayout(5, 5));

        jcbPkReferenceId.setPreferredSize(new java.awt.Dimension(250, 20));
        jPanel5.add(jcbPkReferenceId, java.awt.BorderLayout.CENTER);

        jbPkReferenceId.setText("jButton1");
        jbPkReferenceId.setToolTipText("Seleccionar referencia");
        jbPkReferenceId.setFocusable(false);
        jbPkReferenceId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel5.add(jbPkReferenceId, java.awt.BorderLayout.EAST);

        jPanel7.add(jPanel5, java.awt.BorderLayout.CENTER);

        jPanel4.add(jPanel7);

        jPanel3.add(jPanel4, java.awt.BorderLayout.NORTH);

        jPanel2.add(jPanel3, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-559)/2, (screenSize.height-206)/2, 559, 206);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void jcbPkLinkTypeIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbPkLinkTypeIdItemStateChanged
        itemStateChangedPkLinkTypeIdItem();
    }//GEN-LAST:event_jcbPkLinkTypeIdItemStateChanged

    private void initComponentsExtra() {
        mvFields = new Vector<SFormField>();

        moFieldPkLinkTypeId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbPkLinkTypeId, jlPkLinkTypeId);
        moFieldPkReferenceId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbPkReferenceId, jlPkReferenceId);

        mvFields.add(moFieldPkLinkTypeId);
        mvFields.add(moFieldPkReferenceId);

        jbOK.addActionListener(this);
        jbCancel.addActionListener(this);
        jbPkReferenceId.addActionListener(this);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            jcbPkLinkTypeId.requestFocus();
        }
    }

    private void actionPkReferenceId() {
        int nTypeLink = 0;

        switch (moFieldPkLinkTypeId.getKeyAsIntArray()[0]) {
            case SDataConstantsSys.TRNS_TP_LINK_ALL:
                nTypeLink = SDataConstants.UNDEFINED;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_CT_ITEM:
                nTypeLink = SDataConstants.ITMS_CT_ITEM;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_CL_ITEM:
                nTypeLink = SDataConstants.ITMS_CL_ITEM;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_TP_ITEM:
                nTypeLink = SDataConstants.ITMS_TP_ITEM;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_IFAM:
                nTypeLink = SDataConstants.ITMU_IFAM;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_IGRP:
                nTypeLink = SDataConstants.ITMU_IGRP;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_IGEN:
                nTypeLink = SDataConstants.ITMU_IGEN;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_LINE:
                nTypeLink = SDataConstants.ITMU_LINE;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_BRD:
                nTypeLink = SDataConstants.ITMU_BRD;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_MFR:
                nTypeLink = SDataConstants.ITMU_MFR;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_ITEM:
                nTypeLink = SDataConstants.ITMU_ITEM;
                break;
        }
        miClient.pickOption(nTypeLink, moFieldPkReferenceId,
                (moFieldPkLinkTypeId.getKeyAsIntArray()[0] == SDataConstantsSys.TRNS_TP_LINK_IGEN || moFieldPkLinkTypeId.getKeyAsIntArray()[0] == SDataConstantsSys.TRNS_TP_LINK_ITEM ?
                new int[] { mnParamDpsCategory == SDataConstantsSys.TRNS_CT_DPS_SAL ? SDataConstantsSys.ITMS_CT_ITEM_SAL : SDataConstantsSys.ITMS_CT_ITEM_PUR } :
                null));
    }

    private void itemStateChangedPkLinkTypeIdItem() {
        jcbPkReferenceId.setEnabled(true);
        jbPkReferenceId.setEnabled(true);

        if (jcbPkLinkTypeId.getSelectedIndex() > 0) {
            switch (moFieldPkLinkTypeId.getKeyAsIntArray()[0]) {
                case SDataConstantsSys.TRNS_TP_LINK_CT_ITEM:
                    SFormUtilities.populateComboBox(miClient, jcbPkReferenceId, SDataConstants.ITMS_CT_ITEM);
                    break;
                case SDataConstantsSys.TRNS_TP_LINK_CL_ITEM:
                    SFormUtilities.populateComboBox(miClient, jcbPkReferenceId, SDataConstants.ITMS_CL_ITEM);
                    break;
                case SDataConstantsSys.TRNS_TP_LINK_TP_ITEM:
                    SFormUtilities.populateComboBox(miClient, jcbPkReferenceId, SDataConstants.ITMS_TP_ITEM);
                    break;
                case SDataConstantsSys.TRNS_TP_LINK_IFAM:
                    SFormUtilities.populateComboBox(miClient, jcbPkReferenceId, SDataConstants.ITMU_IFAM);
                    break;
                case SDataConstantsSys.TRNS_TP_LINK_IGRP:
                    SFormUtilities.populateComboBox(miClient, jcbPkReferenceId, SDataConstants.ITMU_IGRP);
                    break;
                case SDataConstantsSys.TRNS_TP_LINK_IGEN:
                    SFormUtilities.populateComboBox(miClient, jcbPkReferenceId, SDataConstants.ITMU_IGEN, new int[] {
                        mnParamDpsCategory == SDataConstantsSys.TRNS_CT_DPS_SAL ? SDataConstantsSys.ITMS_CT_ITEM_SAL : SDataConstantsSys.ITMS_CT_ITEM_PUR });
                    break;
                case SDataConstantsSys.TRNS_TP_LINK_LINE:
                    SFormUtilities.populateComboBox(miClient, jcbPkReferenceId, SDataConstants.ITMU_LINE);
                    break;
                case SDataConstantsSys.TRNS_TP_LINK_BRD:
                    SFormUtilities.populateComboBox(miClient, jcbPkReferenceId, SDataConstants.ITMU_BRD);
                    break;
                case SDataConstantsSys.TRNS_TP_LINK_MFR:
                    SFormUtilities.populateComboBox(miClient, jcbPkReferenceId, SDataConstants.ITMU_MFR);
                    break;
                case SDataConstantsSys.TRNS_TP_LINK_ITEM:
                    SFormUtilities.populateComboBox(miClient, jcbPkReferenceId, SDataConstants.ITMU_ITEM, new int[] {
                        mnParamDpsCategory == SDataConstantsSys.TRNS_CT_DPS_SAL ? SDataConstantsSys.ITMS_CT_ITEM_SAL : SDataConstantsSys.ITMS_CT_ITEM_PUR });
                    break;
                default:
                    jcbPkReferenceId.setEnabled(false);
                    jbPkReferenceId.setEnabled(false);
                    break;
            }
        }
    }

    private void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbOK;
    private javax.swing.JButton jbPkReferenceId;
    private javax.swing.JComboBox jcbPkLinkTypeId;
    private javax.swing.JComboBox<SFormComponentItem> jcbPkReferenceId;
    private javax.swing.JLabel jlPkLinkTypeId;
    private javax.swing.JLabel jlPkReferenceId;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moPListItem = null;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        jcbPkReferenceId.setEnabled(false);
        jbPkReferenceId.setEnabled(false);
    }

    @Override
    public void formRefreshCatalogues() {
        SFormUtilities.populateComboBox(miClient, jcbPkLinkTypeId, SDataConstants.TRNS_TP_LINK);
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        int i = 0;
        moPListItem = (SDataPriceListLink) registry;

        moFieldPkLinkTypeId.setKey(new int[] { moPListItem.getPkLinkTypeId() });
        itemStateChangedPkLinkTypeIdItem();
        moFieldPkReferenceId.setKey(new int[] { moPListItem.getPkReferenceId() });

        jcbPkLinkTypeId.setEnabled(false);
        jcbPkReferenceId.setEnabled(false);
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        if (moPListItem == null)
            moPListItem = new SDataPriceListLink();

        moPListItem.setPkLinkTypeId(moFieldPkLinkTypeId.getKeyAsIntArray()[0]);
        moPListItem.setPkReferenceId(moFieldPkLinkTypeId.getKeyAsIntArray()[0] != SDataConstantsSys.TRNS_TP_LINK_ALL ? moFieldPkReferenceId.getKeyAsIntArray()[0] : SDataConstantsSys.UNDEFINED);
        moPListItem.setDbmsLinkType(jcbPkLinkTypeId.getSelectedItem().toString());
        moPListItem.setDbmsReference(moFieldPkLinkTypeId.getKeyAsIntArray()[0] != SDataConstantsSys.TRNS_TP_LINK_ALL ? jcbPkReferenceId.getSelectedItem().toString() : SDataConstantsSys.TXT_TRNS_TP_LINK_ALL);

        return moPListItem;
    }

    @Override
    public void setValue(int type, Object value) {
        switch(type) {
            case SDataConstantsSys.TRNS_CT_DPS_SAL:
            case SDataConstantsSys.TRNS_CT_DPS_PUR:
                mnParamDpsCategory = (Integer) value;
                break;
        }
    }

    @Override
    public Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOK) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbPkReferenceId) {
                actionPkReferenceId();
            }
        }
    }
}
