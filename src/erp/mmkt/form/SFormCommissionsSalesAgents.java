/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 *
 * Created on 10/11/2009
 */

package erp.mmkt.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STableConstants;
import erp.lib.table.STablePane;
import erp.mmkt.data.SDataCommissionsSalesAgent;
import erp.mmkt.data.SDataCommissionsSalesAgentType;
import erp.mmkt.data.SDataCommissionsSalesAgentTypes;
import erp.mmkt.data.SDataCommissionsSalesAgentTypesRow;
import erp.mmkt.data.SDataCommissionsSalesAgents;
import erp.mmkt.data.SDataCommissionsSalesAgentsRow;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;

/**
 *
 * @author Néstor Ávalos, Juan Barajas
 */
public class SFormCommissionsSalesAgents extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mmkt.data.SDataCommissionsSalesAgents moCommissionsSalesAgents;
    private erp.mmkt.data.SDataCommissionsSalesAgentTypes moCommissionsSalesAgentTypes;
    private erp.lib.form.SFormField moFieldPkLinkTypeId;
    private erp.lib.form.SFormField moFieldPkReferenceId;
    private erp.lib.form.SFormField moFieldPkDateStartId;
    private erp.lib.form.SFormField moFieldIsDeleted;

    private erp.lib.table.STablePane moPaneEntries;

    /** Creates new form SFormElement */
    public SFormCommissionsSalesAgents(erp.client.SClientInterface client, int formType, String title) {
        super(client.getFrame(), true);
        miClient = client;
        mnFormType = formType;

        initComponents();
        initComponentsExtra();
        
        setTitle(title);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jlPkLinkTypeId = new javax.swing.JLabel();
        jcbPkLinkTypeId = new javax.swing.JComboBox<SFormComponentItem>();
        jPanel4 = new javax.swing.JPanel();
        jlPkReferenceId = new javax.swing.JLabel();
        jcbPkReferenceId = new javax.swing.JComboBox<SFormComponentItem>();
        jlDummy1 = new javax.swing.JLabel();
        jbPkReferenceId = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jlPkDateStartId = new javax.swing.JLabel();
        jtfPkDateStartId = new javax.swing.JFormattedTextField();
        jlDummy2 = new javax.swing.JLabel();
        jbPkDateStartId = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jlFkCommisionsTypeId = new javax.swing.JLabel();
        jcbFkCommisionsTypeId = new javax.swing.JComboBox();
        jPanel15 = new javax.swing.JPanel();
        jckIsDeleted = new javax.swing.JCheckBox();
        jpPanel5 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jbOK = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Configuración agentes de ventas por referencia");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel2.setLayout(new java.awt.GridLayout(5, 1));

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 1));

        jlPkLinkTypeId.setForeground(java.awt.Color.blue);
        jlPkLinkTypeId.setText("Tipo de referencia: *");
        jlPkLinkTypeId.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel3.add(jlPkLinkTypeId);

        jcbPkLinkTypeId.setPreferredSize(new java.awt.Dimension(200, 23));
        jcbPkLinkTypeId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbPkLinkTypeIdItemStateChanged(evt);
            }
        });
        jPanel3.add(jcbPkLinkTypeId);

        jPanel2.add(jPanel3);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 1));

        jlPkReferenceId.setForeground(java.awt.Color.blue);
        jlPkReferenceId.setText("Referencia: *");
        jlPkReferenceId.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel4.add(jlPkReferenceId);

        jcbPkReferenceId.setPreferredSize(new java.awt.Dimension(350, 23));
        jPanel4.add(jcbPkReferenceId);

        jlDummy1.setForeground(java.awt.Color.blue);
        jlDummy1.setPreferredSize(new java.awt.Dimension(1, 23));
        jPanel4.add(jlDummy1);

        jbPkReferenceId.setText("jButton1");
        jbPkReferenceId.setToolTipText("Seleccionar referencia");
        jbPkReferenceId.setFocusable(false);
        jbPkReferenceId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel4.add(jbPkReferenceId);

        jPanel2.add(jPanel4);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 1));

        jlPkDateStartId.setForeground(java.awt.Color.blue);
        jlPkDateStartId.setText("Fecha inicial vigencia: *");
        jlPkDateStartId.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel10.add(jlPkDateStartId);

        jtfPkDateStartId.setText("dd/mm/yyyy");
        jtfPkDateStartId.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel10.add(jtfPkDateStartId);

        jlDummy2.setForeground(java.awt.Color.blue);
        jlDummy2.setPreferredSize(new java.awt.Dimension(1, 23));
        jPanel10.add(jlDummy2);

        jbPkDateStartId.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbPkDateStartId.setToolTipText("Seleccionar fecha inicial vigencia");
        jbPkDateStartId.setFocusable(false);
        jbPkDateStartId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel10.add(jbPkDateStartId);

        jPanel2.add(jPanel10);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 1));

        jlFkCommisionsTypeId.setText("Tipo de comisión: *");
        jlFkCommisionsTypeId.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel11.add(jlFkCommisionsTypeId);

        jcbFkCommisionsTypeId.setEditable(true);
        jcbFkCommisionsTypeId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PORCENTAJE" }));
        jcbFkCommisionsTypeId.setEnabled(false);
        jcbFkCommisionsTypeId.setFocusable(false);
        jcbFkCommisionsTypeId.setPreferredSize(new java.awt.Dimension(200, 23));
        jcbFkCommisionsTypeId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbFkCommisionsTypeIdItemStateChanged(evt);
            }
        });
        jPanel11.add(jcbFkCommisionsTypeId);

        jPanel2.add(jPanel11);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 1));

        jckIsDeleted.setText("Registro eliminado");
        jPanel15.add(jckIsDeleted);

        jPanel2.add(jPanel15);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_START);

        jpPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Agente de ventas:"));
        jpPanel5.setLayout(new java.awt.BorderLayout());
        getContentPane().add(jpPanel5, java.awt.BorderLayout.CENTER);

        jPanel1.setPreferredSize(new java.awt.Dimension(400, 33));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOK.setText("Aceptar");
        jbOK.setToolTipText("[Ctrl + Enter]");
        jbOK.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jbOK);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jPanel1.add(jbCancel);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-559)/2, (screenSize.height-440)/2, 559, 440);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void jcbPkLinkTypeIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbPkLinkTypeIdItemStateChanged
        itemStateChangedPkLinkTypeIdItem();
    }//GEN-LAST:event_jcbPkLinkTypeIdItemStateChanged

    private void jcbFkCommisionsTypeIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbFkCommisionsTypeIdItemStateChanged
        // TODO add your handling code here:
}//GEN-LAST:event_jcbFkCommisionsTypeIdItemStateChanged

    private void initComponentsExtra() {
        int i=0;
        STableColumnForm oTableColumns[];

        mvFields = new Vector<SFormField>();
        moPaneEntries = new STablePane(miClient);
        jpPanel5.add(moPaneEntries, BorderLayout.CENTER);

        moFieldPkLinkTypeId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbPkLinkTypeId, jlPkLinkTypeId);
        moFieldPkReferenceId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbPkReferenceId, jlPkReferenceId);
        moFieldPkDateStartId = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jtfPkDateStartId, jlPkDateStartId);
        moFieldIsDeleted = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsDeleted);

        mvFields.add(moFieldPkLinkTypeId);
        mvFields.add(moFieldPkReferenceId);
        mvFields.add(moFieldPkDateStartId);
        mvFields.add(moFieldIsDeleted);

        jbOK.addActionListener(this);
        jbCancel.addActionListener(this);
        jbPkReferenceId.addActionListener(this);
        jbPkDateStartId.addActionListener(this);

        i = 0;
        oTableColumns = new STableColumnForm[3];
        oTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, isSalesType() ? "Tipo agente ventas" : "Agente ventas", 300);
        oTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "% agente", STableConstants.WIDTH_PERCENTAGE);
        oTableColumns[i].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererValueUnitaryFixed4());
        oTableColumns[i++].setEditable(true);
        oTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "% supervisor", STableConstants.WIDTH_PERCENTAGE);
        oTableColumns[i].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererValueUnitaryFixed4());
        oTableColumns[i++].setEditable(true);
        
        for (i=0; i<oTableColumns.length; i++) {
            moPaneEntries.addTableColumn(oTableColumns[i]);
        }

        jpPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(isSalesType() ? "Tipos de agente de ventas:" : "Agente de ventas:"));
        
        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            if (moCommissionsSalesAgents == null) jcbPkLinkTypeId.requestFocus();
        }
    }

    private void actionSetPkDateStartId() {
        miClient.getGuiDatePickerXXX().formReset();
        miClient.getGuiDatePickerXXX().setDate(moFieldPkDateStartId.getDate());
        miClient.getGuiDatePickerXXX().setVisible(true);

        if (miClient.getGuiDatePickerXXX().getFormResult() == SLibConstants.FORM_RESULT_OK) {
            moFieldPkDateStartId.setDate(miClient.getGuiDatePickerXXX().getGuiDate());
            jtfPkDateStartId.requestFocus();
        }
    }

    private void actionPkReferenceId() {
        int nTypeLink = 0;
        int[] anFilterItem = null;

        switch (moFieldPkLinkTypeId.getKeyAsIntArray()[0]) {
            case SDataConstantsSys.TRNS_TP_LINK_ALL:
                nTypeLink = SDataConstants.UNDEFINED;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_CT_ITEM:
                nTypeLink = SDataConstants.ITMS_CT_ITEM;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_CL_ITEM:
                nTypeLink = SDataConstants.ITMS_CL_ITEM;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_TP_ITEM:
                nTypeLink = SDataConstants.ITMS_TP_ITEM;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_IFAM:
                nTypeLink = SDataConstants.ITMU_IFAM;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_IGRP:
                nTypeLink = SDataConstants.ITMU_IGRP;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_IGEN:
                nTypeLink = SDataConstants.ITMU_IGEN;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_LINE:
                nTypeLink = SDataConstants.ITMU_LINE;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_BRD:
                nTypeLink = SDataConstants.ITMU_BRD;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_MFR:
                nTypeLink = SDataConstants.ITMU_MFR;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_ITEM:
                nTypeLink = SDataConstants.ITMX_ITEM_IOG;
                anFilterItem = SDataConstantsSys.ITMS_CL_ITEM_SAL_PRO;
                break;
        }
        miClient.pickOption(nTypeLink, moFieldPkReferenceId, anFilterItem);
    }

    private void itemStateChangedPkLinkTypeIdItem() {
        jcbPkReferenceId.setEnabled(true);
        jbPkReferenceId.setEnabled(true);

        if (jcbPkLinkTypeId.getSelectedIndex() > 0) {
            switch (moFieldPkLinkTypeId.getKeyAsIntArray()[0]) {
                case SDataConstantsSys.TRNS_TP_LINK_CT_ITEM:
                    SFormUtilities.populateComboBox(miClient, jcbPkReferenceId, SDataConstants.ITMS_CT_ITEM);
                    break;
                case SDataConstantsSys.TRNS_TP_LINK_CL_ITEM:
                    SFormUtilities.populateComboBox(miClient, jcbPkReferenceId, SDataConstants.ITMS_CL_ITEM);
                    break;
                case SDataConstantsSys.TRNS_TP_LINK_TP_ITEM:
                    SFormUtilities.populateComboBox(miClient, jcbPkReferenceId, SDataConstants.ITMS_TP_ITEM);
                    break;
                case SDataConstantsSys.TRNS_TP_LINK_IFAM:
                    SFormUtilities.populateComboBox(miClient, jcbPkReferenceId, SDataConstants.ITMU_IFAM);
                    break;
                case SDataConstantsSys.TRNS_TP_LINK_IGRP:
                    SFormUtilities.populateComboBox(miClient, jcbPkReferenceId, SDataConstants.ITMU_IGRP);
                    break;
                case SDataConstantsSys.TRNS_TP_LINK_IGEN:
                    SFormUtilities.populateComboBox(miClient, jcbPkReferenceId, SDataConstants.ITMU_IGEN);
                    break;
                case SDataConstantsSys.TRNS_TP_LINK_LINE:
                    SFormUtilities.populateComboBox(miClient, jcbPkReferenceId, SDataConstants.ITMU_LINE);
                    break;
                case SDataConstantsSys.TRNS_TP_LINK_BRD:
                    SFormUtilities.populateComboBox(miClient, jcbPkReferenceId, SDataConstants.ITMU_BRD);
                    break;
                case SDataConstantsSys.TRNS_TP_LINK_MFR:
                    SFormUtilities.populateComboBox(miClient, jcbPkReferenceId, SDataConstants.ITMU_MFR);
                    break;
                case SDataConstantsSys.TRNS_TP_LINK_ITEM:
                    SFormUtilities.populateComboBox(miClient, jcbPkReferenceId, SDataConstants.ITMU_ITEM);
                    break;
                default:
                    jcbPkReferenceId.setEnabled(false);
                    jbPkReferenceId.setEnabled(false);
                    break;
            }
        }
    }

    private void fillPaneEntries() {
        Vector<SDataCommissionsSalesAgent> vCommissionsSalesAgent = new Vector<SDataCommissionsSalesAgent>();
        Vector<SDataCommissionsSalesAgentType> vCommissionsSalesAgentType = new Vector<SDataCommissionsSalesAgentType>();
        SDataCommissionsSalesAgentsRow oCommisionsSalesAgentsRow = null;
        SDataCommissionsSalesAgentTypesRow oCommisionsSalesAgentTypesRow = null;

        try {
            if (isSalesType()) {
                vCommissionsSalesAgentType = SDataUtilities.obtainSalesAgentType(miClient);

                for (int i=0; i<vCommissionsSalesAgentType.size(); i++) {
                    oCommisionsSalesAgentTypesRow = new SDataCommissionsSalesAgentTypesRow(vCommissionsSalesAgentType.get(i));
                    moPaneEntries.addTableRow(oCommisionsSalesAgentTypesRow);
                }
            }
            else {
                vCommissionsSalesAgent = SDataUtilities.obtainSalesAgent(miClient);

                for (int i=0; i<vCommissionsSalesAgent.size(); i++) {
                    oCommisionsSalesAgentsRow = new SDataCommissionsSalesAgentsRow(vCommissionsSalesAgent.get(i));
                    moPaneEntries.addTableRow(oCommisionsSalesAgentsRow);
                }
            }
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }
    }
    
    private boolean isSalesType() {
        return mnFormType == SDataConstants.MKT_COMMS_SAL_AGT_TP;
    }

    private void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbOK;
    private javax.swing.JButton jbPkDateStartId;
    private javax.swing.JButton jbPkReferenceId;
    private javax.swing.JComboBox jcbFkCommisionsTypeId;
    private javax.swing.JComboBox<SFormComponentItem> jcbPkLinkTypeId;
    private javax.swing.JComboBox<SFormComponentItem> jcbPkReferenceId;
    private javax.swing.JCheckBox jckIsDeleted;
    private javax.swing.JLabel jlDummy1;
    private javax.swing.JLabel jlDummy2;
    private javax.swing.JLabel jlFkCommisionsTypeId;
    private javax.swing.JLabel jlPkDateStartId;
    private javax.swing.JLabel jlPkLinkTypeId;
    private javax.swing.JLabel jlPkReferenceId;
    private javax.swing.JPanel jpPanel5;
    private javax.swing.JFormattedTextField jtfPkDateStartId;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moCommissionsSalesAgents = null;
        moCommissionsSalesAgentTypes = null;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        moPaneEntries.createTable();
        moPaneEntries.clearTableRows();

        // Fill pane entries:

        fillPaneEntries();

        moFieldPkDateStartId.setDate(miClient.getSessionXXX().getWorkingDate());

        jcbPkLinkTypeId.setEnabled(true);
        jcbPkReferenceId.setEnabled(false);
        jbPkReferenceId.setEnabled(false);
        jtfPkDateStartId.setEnabled(true);
        jbPkDateStartId.setEnabled(true);
        jckIsDeleted.setEnabled(false);
    }

    @Override
    public void formRefreshCatalogues() {
        SFormUtilities.populateComboBox(miClient, jcbPkLinkTypeId, SDataConstants.TRNS_TP_LINK);
        // SFormUtilities.populateComboBox(miClient, jcbFkCommisionsTypeId, SDataConstants.MKTS_TP_COMMS); // XXX
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        int i = 0;
        int j = 0;
        
        if (isSalesType()) {
            moCommissionsSalesAgentTypes = (SDataCommissionsSalesAgentTypes) registry;
            SDataCommissionsSalesAgentType oCommissionsSalesAgentType = null;
            SDataCommissionsSalesAgentTypesRow oCommisionsSalesAgentTypesRow = null;

            moFieldPkLinkTypeId.setFieldValue(new int[] { moCommissionsSalesAgentTypes.getPkLinkTypeId() });
            itemStateChangedPkLinkTypeIdItem();

            switch (moFieldPkLinkTypeId.getKeyAsIntArray()[0]) {
                case SDataConstantsSys.TRNS_TP_LINK_ALL:
                    break;
                case SDataConstantsSys.TRNS_TP_LINK_CT_ITEM:
                case SDataConstantsSys.TRNS_TP_LINK_CL_ITEM:
                case SDataConstantsSys.TRNS_TP_LINK_TP_ITEM:
                    SFormUtilities.locateComboBoxItemByComplement(jcbPkReferenceId, moCommissionsSalesAgentTypes.getPkReferenceId());
                    break;
                default:
                    moFieldPkReferenceId.setFieldValue(new int[] { moCommissionsSalesAgentTypes.getPkReferenceId() });
            }

            moFieldPkDateStartId.setFieldValue(moCommissionsSalesAgentTypes.getPkDateStartId());
            moFieldIsDeleted.setFieldValue(moCommissionsSalesAgentTypes.getIsDeleted());

            // Update pane entries:

            for (i = 0; i < moPaneEntries.getTableGuiRowCount(); i++) {
                oCommissionsSalesAgentType = (SDataCommissionsSalesAgentType) moPaneEntries.getTableRow(i).getData();

                for (j = 0; j < moCommissionsSalesAgentTypes.getDbmsCommisionsSalesAgentType().size(); j++) {
                    if (oCommissionsSalesAgentType.getPkSalesAgentTypeId() == moCommissionsSalesAgentTypes.getDbmsCommisionsSalesAgentType().get(j).getPkSalesAgentTypeId()) {
                        oCommisionsSalesAgentTypesRow = new SDataCommissionsSalesAgentTypesRow(moCommissionsSalesAgentTypes.getDbmsCommisionsSalesAgentType().get(j));
                        moPaneEntries.setTableRow(oCommisionsSalesAgentTypesRow, i);
                        break;
                    }
                }
            }
        }
        else {
            moCommissionsSalesAgents = (SDataCommissionsSalesAgents) registry;
            SDataCommissionsSalesAgent oCommissionsSalesAgent = null;
            SDataCommissionsSalesAgentsRow oCommisionsSalesAgentsRow = null;

            moFieldPkLinkTypeId.setFieldValue(new int[] { moCommissionsSalesAgents.getPkLinkTypeId() });
            itemStateChangedPkLinkTypeIdItem();

            switch (moFieldPkLinkTypeId.getKeyAsIntArray()[0]) {
                case SDataConstantsSys.TRNS_TP_LINK_ALL:
                    break;
                case SDataConstantsSys.TRNS_TP_LINK_CT_ITEM:
                case SDataConstantsSys.TRNS_TP_LINK_CL_ITEM:
                case SDataConstantsSys.TRNS_TP_LINK_TP_ITEM:
                    SFormUtilities.locateComboBoxItemByComplement(jcbPkReferenceId, moCommissionsSalesAgents.getPkReferenceId());
                    break;
                default:
                    moFieldPkReferenceId.setFieldValue(new int[] { moCommissionsSalesAgents.getPkReferenceId() });
            }

            moFieldPkDateStartId.setFieldValue(moCommissionsSalesAgents.getPkDateStartId());
            moFieldIsDeleted.setFieldValue(moCommissionsSalesAgents.getIsDeleted());
            // moFieldFkCommissionsTypeId.setKey(new int[] { moCommisionsSalesAgent.getFkCommissionsTypeId() }); // XXX

            // Update pane entries:

            for (i = 0; i < moPaneEntries.getTableGuiRowCount(); i++) {
                oCommissionsSalesAgent = (SDataCommissionsSalesAgent) moPaneEntries.getTableRow(i).getData();

                for (j = 0; j < moCommissionsSalesAgents.getDbmsCommisionsSalesAgent().size(); j++) {
                    if (oCommissionsSalesAgent.getPkSalesAgentId() == moCommissionsSalesAgents.getDbmsCommisionsSalesAgent().get(j).getPkSalesAgentId()) {
                        oCommisionsSalesAgentsRow = new SDataCommissionsSalesAgentsRow(moCommissionsSalesAgents.getDbmsCommisionsSalesAgent().get(j));
                        //moPaneEntries.addTableRow(oCommisionsSalesAgentTypesRow);
                        moPaneEntries.setTableRow(oCommisionsSalesAgentsRow, i);
                        break;
                    }
                }
            }
        }

        jcbPkLinkTypeId.setEnabled(false);
        jcbPkReferenceId.setEnabled(false);
        jbPkReferenceId.setEnabled(false);
        jtfPkDateStartId.setEnabled(false);
        jbPkDateStartId.setEnabled(false);
        jckIsDeleted.setEnabled(true);
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        erp.lib.data.SDataRegistry registry;
        SDataCommissionsSalesAgent oCommissionsSalesAgent = null;
        SDataCommissionsSalesAgentType oCommissionsSalesAgentType = null;
        Vector<java.lang.Object> oValues = new Vector<java.lang.Object>();

        if (isSalesType()) {
            if (moCommissionsSalesAgentTypes == null) {
                moCommissionsSalesAgentTypes = new SDataCommissionsSalesAgentTypes();
                moCommissionsSalesAgentTypes.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
            }
            else {
                moCommissionsSalesAgentTypes.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
            }

            moCommissionsSalesAgentTypes.getDbmsCommisionsSalesAgentType().removeAllElements();
            for (int i=0; i<moPaneEntries.getTableGuiRowCount(); i++) {
                oValues = moPaneEntries.getTableRow(i).getValues();

                oCommissionsSalesAgentType = (SDataCommissionsSalesAgentType) moPaneEntries.getTableRow(i).getData();

                oCommissionsSalesAgentType.setAgentPercentage((Double) oValues.get(1) != 0 ? ((Double) oValues.get(1))/100 : 0d);
                oCommissionsSalesAgentType.setAgentValueUnitary(0d);
                oCommissionsSalesAgentType.setAgentValue(0d);
                oCommissionsSalesAgentType.setSupervisorPercentage((Double) oValues.get(2) != 0 ? ((Double) oValues.get(2))/100 : 0d);
                oCommissionsSalesAgentType.setSupervisorValueUnitary(0d);
                oCommissionsSalesAgentType.setSupervisorValue(0d);
                oCommissionsSalesAgentType.setPkLinkTypeId(moFieldPkLinkTypeId.getKeyAsIntArray()[0]);

                switch (moFieldPkLinkTypeId.getKeyAsIntArray()[0]) {
                    case SDataConstantsSys.TRNS_TP_LINK_ALL:
                        oCommissionsSalesAgentType.setPkReferenceId(SLibConstants.UNDEFINED);
                        break;
                    case SDataConstantsSys.TRNS_TP_LINK_CT_ITEM:
                    case SDataConstantsSys.TRNS_TP_LINK_CL_ITEM:
                    case SDataConstantsSys.TRNS_TP_LINK_TP_ITEM:
                        oCommissionsSalesAgentType.setPkReferenceId((Integer) ((SFormComponentItem) jcbPkReferenceId.getSelectedItem()).getComplement());
                        break;
                    default:
                        oCommissionsSalesAgentType.setPkReferenceId(moFieldPkReferenceId.getKeyAsIntArray() == null ? SLibConstants.UNDEFINED : moFieldPkReferenceId.getKeyAsIntArray()[0]);
                }

                oCommissionsSalesAgentType.setPkDateStartId(moFieldPkDateStartId.getDate());
                oCommissionsSalesAgentType.setIsDeleted(moFieldIsDeleted.getBoolean());
                oCommissionsSalesAgentType.setFkCommissionsTypeId(SDataConstantsSys.MKTS_TP_COMMS_PER); // XXX

                if (oCommissionsSalesAgentType.getFkUserNewId() == 0) {
                    oCommissionsSalesAgentType.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
                }

                if (oCommissionsSalesAgentType.getFkUserEditId() == 0) {
                    oCommissionsSalesAgentType.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
                }

                moCommissionsSalesAgentTypes.getDbmsCommisionsSalesAgentType().add(oCommissionsSalesAgentType);
            }
            registry = moCommissionsSalesAgentTypes;
        }
        else {
            if (moCommissionsSalesAgents == null) {
                moCommissionsSalesAgents = new SDataCommissionsSalesAgents();
                moCommissionsSalesAgents.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
            }
            else {
                moCommissionsSalesAgents.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
            }

            moCommissionsSalesAgents.setPkLinkTypeId(moFieldPkLinkTypeId.getKeyAsIntArray()[0]);

            switch (moFieldPkLinkTypeId.getKeyAsIntArray()[0]) {
                case SDataConstantsSys.TRNS_TP_LINK_ALL:
                    moCommissionsSalesAgents.setPkReferenceId(SLibConstants.UNDEFINED);
                    break;
                case SDataConstantsSys.TRNS_TP_LINK_CT_ITEM:
                case SDataConstantsSys.TRNS_TP_LINK_CL_ITEM:
                case SDataConstantsSys.TRNS_TP_LINK_TP_ITEM:
                    moCommissionsSalesAgents.setPkReferenceId((Integer) ((SFormComponentItem) jcbPkReferenceId.getSelectedItem()).getComplement());
                    break;
                default:
                    moCommissionsSalesAgents.setPkReferenceId(moFieldPkReferenceId.getKeyAsIntArray() == null ? SLibConstants.UNDEFINED : moFieldPkReferenceId.getKeyAsIntArray()[0]);
            }

            moCommissionsSalesAgents.setPkDateStartId(moFieldPkDateStartId.getDate());
            moCommissionsSalesAgents.setIsDeleted(moFieldIsDeleted.getBoolean());
            moCommissionsSalesAgents.setFkCommissionsTypeId(SDataConstantsSys.MKTS_TP_COMMS_PER); // XXX

            moCommissionsSalesAgents.setDbmsLinkType(jcbPkLinkTypeId.getSelectedItem().toString());
            moCommissionsSalesAgents.setDbmsReference(moFieldPkLinkTypeId.getKeyAsIntArray()[0] != SDataConstantsSys.TRNS_TP_LINK_ALL ? jcbPkReferenceId.getSelectedItem().toString() : SDataConstantsSys.TXT_TRNS_TP_LINK_ALL);

            moCommissionsSalesAgents.getDbmsCommisionsSalesAgent().removeAllElements();
            
            for (int i = 0; i < moPaneEntries.getTableGuiRowCount(); i++) {
                oValues = moPaneEntries.getTableRow(i).getValues();

                oCommissionsSalesAgent = (SDataCommissionsSalesAgent) moPaneEntries.getTableRow(i).getData();

                oCommissionsSalesAgent.setAgentPercentage((Double) oValues.get(1) != 0 ? ((Double) oValues.get(1))/100 : 0d);
                oCommissionsSalesAgent.setAgentValueUnitary(0d);
                oCommissionsSalesAgent.setAgentValue(0d);
                oCommissionsSalesAgent.setSupervisorPercentage((Double) oValues.get(2) != 0 ? ((Double) oValues.get(2))/100 : 0d);
                oCommissionsSalesAgent.setSupervisorValueUnitary(0d);
                oCommissionsSalesAgent.setSupervisorValue(0d);
                oCommissionsSalesAgent.setPkLinkTypeId(moFieldPkLinkTypeId.getKeyAsIntArray()[0]);
                oCommissionsSalesAgent.setPkReferenceId(moFieldPkReferenceId.getKeyAsIntArray() == null ? SLibConstants.UNDEFINED : moFieldPkReferenceId.getKeyAsIntArray()[0]);
                oCommissionsSalesAgent.setPkDateStartId(moFieldPkDateStartId.getDate());
                oCommissionsSalesAgent.setIsDeleted(moFieldIsDeleted.getBoolean());
                oCommissionsSalesAgent.setFkCommissionsTypeId(SDataConstantsSys.MKTS_TP_COMMS_PER); // XXX

                if (oCommissionsSalesAgent.getFkUserNewId() == 0) {
                    oCommissionsSalesAgent.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
                }

                if (oCommissionsSalesAgent.getFkUserEditId() == 0) {
                    oCommissionsSalesAgent.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
                }

                moCommissionsSalesAgents.getDbmsCommisionsSalesAgent().add(oCommissionsSalesAgent);
            }
            registry = moCommissionsSalesAgents;
        }

        return registry;
    }

    @Override
    public void setValue(int type, Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOK) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbPkReferenceId) {
                actionPkReferenceId();
            }
            else if (button == jbPkDateStartId) {
                actionSetPkDateStartId();
            }
        }
    }
}
