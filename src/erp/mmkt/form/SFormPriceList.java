/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Created on 11/11/2009
 */

package erp.mmkt.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataUtilities;
import erp.data.SProcConstants;
import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STableConstants;
import erp.lib.table.STablePane;
import erp.lib.table.STableRow;
import erp.lib.table.STableUtilities;
import erp.mmkt.data.SDataPriceList;
import erp.mmkt.data.SDataPriceListItemPrice;
import erp.mmkt.data.SDataPriceListItemPriceRow;
import erp.mmkt.data.SDataPriceListLink;
import erp.mmkt.data.SDataPriceListLinkRow;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author Néstor Ávalos
 */
public class SFormPriceList extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mmkt.data.SDataPriceList moPriceList;
    private erp.lib.form.SFormField moFieldPriceList;
    private erp.lib.form.SFormField moFieldFkCurrencyId;
    private erp.lib.form.SFormField moFieldIsDeleted;

    private erp.lib.table.STablePane moPriceListLinkPane;
    private erp.lib.table.STablePane moPriceListItemPricePane;

    private java.util.Vector<erp.mmkt.data.SDataPriceListItemPrice> mvItemsPrice;
    private java.util.Vector<erp.mmkt.data.SDataPriceListLink> mvPriceListLink;

    private int mnParamDpsCategory;

    /** Creates new form SFormElement */
    public SFormPriceList(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        mnFormType = SDataConstants.MKT_PLIST;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jbOK = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jlPriceList = new javax.swing.JLabel();
        jtfPriceList = new javax.swing.JTextField();
        jPanel20 = new javax.swing.JPanel();
        jlFkCurrencyId = new javax.swing.JLabel();
        jcbFkCurrencyId = new javax.swing.JComboBox<SFormComponentItem>();
        jbFkCurrencyId = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jckIsDeleted = new javax.swing.JCheckBox();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel6 = new javax.swing.JPanel();
        jpFilter = new javax.swing.JPanel();
        jbLinkNew = new javax.swing.JButton();
        jbLinkEdit = new javax.swing.JButton();
        jbLinkDel = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jpItemPrice = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jbItemNew = new javax.swing.JButton();
        jbItemEdit = new javax.swing.JButton();
        jbItemDel = new javax.swing.JButton();
        jbUpdate = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jtfSeek = new javax.swing.JTextField();
        jbSeek = new javax.swing.JButton();
        jbExportCsv = new javax.swing.JButton();
        jbRefresh = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Lista de precios");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setPreferredSize(new java.awt.Dimension(400, 33));
        jPanel1.setLayout(new java.awt.FlowLayout(2));

        jbOK.setText("Aceptar");
        jbOK.setToolTipText("[Ctrl + Enter]");
        jbOK.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jbOK);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jPanel1.add(jbCancel);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel2.setLayout(new java.awt.GridLayout(3, 1, 5, 5));

        jPanel3.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlPriceList.setText("Lista de precios: *");
        jlPriceList.setPreferredSize(new java.awt.Dimension(135, 14));
        jPanel3.add(jlPriceList);

        jtfPriceList.setText("PRICE LIST");
        jtfPriceList.setPreferredSize(new java.awt.Dimension(300, 20));
        jPanel3.add(jtfPriceList);

        jPanel2.add(jPanel3);

        jPanel20.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel20.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlFkCurrencyId.setForeground(java.awt.Color.blue);
        jlFkCurrencyId.setText("Moneda: *");
        jlFkCurrencyId.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel20.add(jlFkCurrencyId);

        jcbFkCurrencyId.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel20.add(jcbFkCurrencyId);

        jbFkCurrencyId.setText("...");
        jbFkCurrencyId.setToolTipText("Seleccionar moneda");
        jbFkCurrencyId.setFocusable(false);
        jbFkCurrencyId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel20.add(jbFkCurrencyId);

        jPanel2.add(jPanel20);

        jPanel4.setLayout(new java.awt.FlowLayout(0, 2, 0));

        jckIsDeleted.setText("Registro eliminado");
        jPanel4.add(jckIsDeleted);

        jPanel2.add(jPanel4);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_START);

        jTabbedPane1.setFocusable(false);

        jPanel6.setLayout(new java.awt.BorderLayout(0, 5));

        jpFilter.setPreferredSize(new java.awt.Dimension(779, 23));
        jpFilter.setLayout(new java.awt.FlowLayout(0, 3, 0));

        jbLinkNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_new.gif"))); // NOI18N
        jbLinkNew.setToolTipText("Agregar");
        jbLinkNew.setFocusable(false);
        jbLinkNew.setPreferredSize(new java.awt.Dimension(23, 23));
        jpFilter.add(jbLinkNew);

        jbLinkEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_edit.gif"))); // NOI18N
        jbLinkEdit.setToolTipText("Modificar");
        jbLinkEdit.setEnabled(false);
        jbLinkEdit.setFocusable(false);
        jbLinkEdit.setPreferredSize(new java.awt.Dimension(23, 23));
        jpFilter.add(jbLinkEdit);

        jbLinkDel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_delete.gif"))); // NOI18N
        jbLinkDel.setToolTipText("Eliminar");
        jbLinkDel.setFocusable(false);
        jbLinkDel.setPreferredSize(new java.awt.Dimension(23, 23));
        jpFilter.add(jbLinkDel);

        jPanel6.add(jpFilter, java.awt.BorderLayout.PAGE_START);

        jTabbedPane1.addTab("Filtros de ítems", jPanel6);

        jPanel7.setLayout(new java.awt.BorderLayout(0, 5));

        jpItemPrice.setPreferredSize(new java.awt.Dimension(779, 23));
        jpItemPrice.setLayout(new java.awt.BorderLayout());

        jPanel8.setPreferredSize(new java.awt.Dimension(117, 23));
        jPanel8.setLayout(new java.awt.FlowLayout(0, 3, 0));

        jbItemNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_new.gif"))); // NOI18N
        jbItemNew.setToolTipText("Agregar");
        jbItemNew.setEnabled(false);
        jbItemNew.setFocusable(false);
        jbItemNew.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel8.add(jbItemNew);

        jbItemEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_edit.gif"))); // NOI18N
        jbItemEdit.setToolTipText("Modificar");
        jbItemEdit.setEnabled(false);
        jbItemEdit.setFocusable(false);
        jbItemEdit.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel8.add(jbItemEdit);

        jbItemDel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_delete.gif"))); // NOI18N
        jbItemDel.setToolTipText("Eliminar");
        jbItemDel.setEnabled(false);
        jbItemDel.setFocusable(false);
        jbItemDel.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel8.add(jbItemDel);

        jbUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_action.gif"))); // NOI18N
        jbUpdate.setToolTipText("Actualizar lista de precios");
        jbUpdate.setFocusable(false);
        jbUpdate.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel8.add(jbUpdate);

        jpItemPrice.add(jPanel8, java.awt.BorderLayout.WEST);

        jPanel5.setLayout(new java.awt.FlowLayout(2, 3, 0));

        jtfSeek.setText("Seek");
        jtfSeek.setToolTipText("Texto a buscar [Ctrl+B]");
        jtfSeek.setEnabled(false);
        jtfSeek.setPreferredSize(new java.awt.Dimension(100, 20));
        jPanel5.add(jtfSeek);

        jbSeek.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_seek.gif"))); // NOI18N
        jbSeek.setToolTipText("Buscar");
        jbSeek.setEnabled(false);
        jbSeek.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel5.add(jbSeek);

        jbExportCsv.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_file_csv.gif"))); // NOI18N
        jbExportCsv.setToolTipText("Exportar CSV [Ctrl+E]");
        jbExportCsv.setEnabled(false);
        jbExportCsv.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel5.add(jbExportCsv);

        jbRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_reload.gif"))); // NOI18N
        jbRefresh.setToolTipText("Refrescar [Ctrl+R]");
        jbRefresh.setEnabled(false);
        jbRefresh.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel5.add(jbRefresh);

        jpItemPrice.add(jPanel5, java.awt.BorderLayout.EAST);

        jPanel7.add(jpItemPrice, java.awt.BorderLayout.PAGE_START);

        jTabbedPane1.addTab("Precios de ítems", jPanel7);

        getContentPane().add(jTabbedPane1, java.awt.BorderLayout.CENTER);
        jTabbedPane1.getAccessibleContext().setAccessibleName("Filtros de ítems");

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-841)/2, (screenSize.height-535)/2, 841, 535);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        int i;
        erp.lib.table.STableColumnForm tableColumnsLink[];
        erp.lib.table.STableColumnForm tableColumnsItemPrice[];

        mvFields = new Vector<SFormField>();
        mvItemsPrice = new Vector<SDataPriceListItemPrice>();
        mvPriceListLink = new Vector<SDataPriceListLink>();

        moPriceListLinkPane = new STablePane(miClient);
        jPanel6.add(moPriceListLinkPane, BorderLayout.CENTER);

        moPriceListItemPricePane = new STablePane(miClient);
        jPanel7.add(moPriceListItemPricePane, BorderLayout.CENTER);

        moFieldPriceList = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtfPriceList, jlPriceList);
        moFieldPriceList.setLengthMax(50);
        moFieldFkCurrencyId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkCurrencyId, jlFkCurrencyId);
        moFieldFkCurrencyId.setPickerButton(jbFkCurrencyId);
        moFieldIsDeleted = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsDeleted);

        mvFields.add(moFieldPriceList);
        mvFields.add(moFieldFkCurrencyId);
        mvFields.add(moFieldIsDeleted);

        jbOK.addActionListener(this);
        jbCancel.addActionListener(this);
        jbFkCurrencyId.addActionListener(this);
        jbLinkNew.addActionListener(this);
        jbLinkDel.addActionListener(this);
        jbUpdate.addActionListener(this);
        jbExportCsv.addActionListener(this);
        jbRefresh.addActionListener(this);
        jbSeek.addActionListener(this);
        jtfSeek.addActionListener(this);

        i = 0;
        tableColumnsLink = new STableColumnForm[2];
        tableColumnsLink[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo", 120);
        tableColumnsLink[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Referencia", 700);
        for (i = 0; i < tableColumnsLink.length; i++) {
            moPriceListLinkPane.addTableColumn(tableColumnsLink[i]);
        }
        moPriceListLinkPane.createTable(null);

        i = 0;
        tableColumnsItemPrice = new STableColumnForm[3];
        if (SDataConstantsSys.CFGS_TP_SORT_KEY_NAME == miClient.getSessionXXX().getParamsErp().getFkSortingItemTypeId()) {
            tableColumnsItemPrice[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Clave", STableConstants.WIDTH_ITEM_KEY);
            tableColumnsItemPrice[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Ítem", 400);
        }
        else {
            tableColumnsItemPrice[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Ítem", 400);
            tableColumnsItemPrice[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Clave", STableConstants.WIDTH_ITEM_KEY);
        }
        tableColumnsItemPrice[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Precio unitario", 150);
        tableColumnsItemPrice[i].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererValueUnitary());
        tableColumnsItemPrice[i++].setEditable(true);

        for (i = 0; i < tableColumnsItemPrice.length; i++) {
            moPriceListItemPricePane.addTableColumn(tableColumnsItemPrice[i]);
        }
        moPriceListItemPricePane.createTable(null);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            jtfPriceList.requestFocus();
        }
    }

    private void actionFkCurrencyId() {
        miClient.pickOption(SDataConstants.CFGU_CUR, moFieldFkCurrencyId, null);
    }

    private void actionLinkNew() {
        boolean b = false;
        boolean bPriceListLink = false;
        int index = 0;
        int i = 0;
        int j = 0;
        SDataPriceListLink oPriceListLink = null;
        SDataPriceListLink oPriceListLinkAux = null;
        SDataPriceListLinkRow oPListLinkRow = null;
        SFormPriceListLink formPriceListLink = new SFormPriceListLink(miClient);
        STableRow oRow = null;
        Vector<int[]> vPriceListLinkEntries = new Vector<int[]>();
        Vector<Object> vAux = new Vector<Object>();

        formPriceListLink.formRefreshCatalogues();
        formPriceListLink.formReset();
        formPriceListLink.setValue(mnParamDpsCategory, mnParamDpsCategory);
        formPriceListLink.setVisible(true);
        if (formPriceListLink.getFormResult() == erp.lib.SLibConstants.FORM_RESULT_OK) {
            oPriceListLink = (SDataPriceListLink) formPriceListLink.getRegistry();

            // Check if there is a link in the grid:

            b = false;
            for (j=0; j<moPriceListLinkPane.getTableGuiRowCount(); j++) {
                oRow = moPriceListLinkPane.getTableRow(j);
                vAux = oRow.getValues();
                if (vAux.get(0).toString().compareTo(oPriceListLink.getDbmsLinkType()) == 0 &&
                    vAux.get(1).toString().compareTo(oPriceListLink.getDbmsReference()) == 0 ) {
                    b = true;
                    break;
                }
            }

            if (!b) {
                moPriceListLinkPane.addTableRow(oPListLinkRow = new SDataPriceListLinkRow(oPriceListLink));
                moPriceListLinkPane.renderTableRows();
                index = moPriceListLinkPane.getTableGuiRowCount() - 1;
                moPriceListLinkPane.getTable().setRowSelectionInterval(index, index);
                moPriceListLinkPane.getVerticalScrollBar().setValue((index + 1) * moPriceListLinkPane.getTable().getRowHeight());

                // Check if there is a link in the vector mvPListLink:

                bPriceListLink = false;
                for (j=0; j < mvPriceListLink.size(); j++) {
                    oPriceListLinkAux = (SDataPriceListLink) mvPriceListLink.get(j);
                    if (oPriceListLinkAux.getPkLinkTypeId() == oPriceListLink.getPkLinkTypeId() &&
                            oPriceListLinkAux.getPkReferenceId() == oPriceListLink.getPkReferenceId()) {
                        bPriceListLink = true;
                        break;
                    }
                }

                if (!bPriceListLink) {
                    mvPriceListLink.add(oPriceListLink);
                }

                // Update item price grid:

                vPriceListLinkEntries.removeAllElements();
                vPriceListLinkEntries.add(new int[] { oPriceListLink.getPkLinkTypeId(), oPriceListLink.getPkReferenceId() });
                updatePriceList(vPriceListLinkEntries);
            }
            else {
                miClient.showMsgBoxWarning("Ya existe el filtro");
            }
        }
    }

    private void actionUpdatePriceList() {
        SDataPriceListLink oPriceListLink = null;
        Vector<int[]> vPriceListLinkEntries = new Vector<int[]>();

        if (miClient.showMsgBoxConfirm("Se actualizarán las referencias de los ítems.¿Está seguro(a) de hacerlo?") == JOptionPane.YES_OPTION) {

            vPriceListLinkEntries.removeAllElements();
            for (int i=0; i<mvPriceListLink.size(); i++) {
                oPriceListLink = (SDataPriceListLink) mvPriceListLink.get(i);
                vPriceListLinkEntries.add(new int[] { oPriceListLink.getPkLinkTypeId(), oPriceListLink.getPkReferenceId() });
            }

            if (vPriceListLinkEntries.size() > 0) {
                // deleteItemPriceList(vPriceListLinkEntries); // XXX: Slowly
                updatePriceList(vPriceListLinkEntries);
            }
        }
    }

    private void deleteItemPriceList(Vector<int[]> vPriceListEntries) {
        boolean b = false;
        int i = 0;
        int j = 0;
        int k=0;
        int[] oPriceListLink = null;

        Object[] oItem = null;
        STableRow oRow = null;
        Vector<Object> vAux = new Vector<Object>();
        Vector<Object> vParams = new Vector<Object>();

        for (j=0; j < moPriceListItemPricePane.getTableGuiRowCount(); j++) {
            oRow = moPriceListItemPricePane.getTableRow(j);
            vAux = oRow.getValues();

            /*if (vAux.get(0).toString().compareTo(oItem[1].toString()) == 0 &&
                vAux.get(1).toString().compareTo(oItem[2].toString()) == 0 ) {
                b = true;
                break;
            }*/

            b = false;
            for (k=0; k < vPriceListEntries.size(); k++) {

                // Parameters: 1. Type link id, 2. Reference id, 3. Item order

                oPriceListLink = vPriceListEntries.get(k);
                vParams.removeAllElements();
                vParams.add(oPriceListLink[0]);
                vParams.add(oPriceListLink[1]);
                vParams.add((miClient.getSessionXXX().getParamsErp().getFkSortingItemTypeId() == SDataConstantsSys.CFGS_TP_SORT_KEY_NAME ? SDataConstantsSys.CFGS_TP_SORT_KEY_NAME : SDataConstantsSys.CFGS_TP_SORT_NAME_KEY));

                // Check item order (key, item or item, key):

                if (SDataConstantsSys.CFGS_TP_SORT_KEY_NAME == miClient.getSessionXXX().getParamsErp().getFkSortingItemTypeId()) {
                    vParams.add(vAux.get(0).toString());
                    vParams.add(vAux.get(1).toString());
                }
                else {
                    vParams.add(vAux.get(1).toString());
                    vParams.add(vAux.get(0).toString());
                }

                vParams = SDataUtilities.callProcedure(miClient, SProcConstants.MKT_PLIST_PRICE_FILTER,  vParams, SLibConstants.EXEC_MODE_SILENT);
                if (vParams.size() > 0) {

                    // Exist item in a reference:

                    b = true;
                    break;
                }
            }

            // Check if item exist in a reference:

            if (!b) {

                // Delete ítem from list panel:

                moPriceListItemPricePane.removeTableRow(j);
                moPriceListItemPricePane.renderTableRows();
            }
        }
    }

    private void updatePriceList(Vector<int[]> vPriceListEntries) {
        boolean b = false;
        boolean bPriceListLink = false;
        int i=0;
        int j=0;
        int k=0;
        int index=0;
        int[] oPriceListLink = null;
        Object[] oItem = null;

        SDataPriceListItemPrice oPriceListItemPrice = null;
        SDataPriceListItemPrice oPriceListItemPriceAux = null;
        SDataPriceListItemPriceRow oPriceListItemPriceRow = null;
        STableRow oRow = null;

        Vector<Object> vAux = new Vector<Object>();
        Vector<Object> vParams = new Vector<Object>();

        for (k=0; k < vPriceListEntries.size(); k++) {

            // Parameters: 1. Type link id, 2. Reference id, 3. Item order

            oPriceListLink = vPriceListEntries.get(k);
            vParams.removeAllElements();
            vParams.add(oPriceListLink[0]);
            vParams.add(oPriceListLink[1]);
            vParams.add((miClient.getSessionXXX().getParamsErp().getFkSortingItemTypeId() == SDataConstantsSys.CFGS_TP_SORT_KEY_NAME ? SDataConstantsSys.CFGS_TP_SORT_KEY_NAME : SDataConstantsSys.CFGS_TP_SORT_NAME_KEY));
            vParams = SDataUtilities.callProcedure(miClient, SProcConstants.MKT_PLIST_PRICE_FILTER,  vParams, SLibConstants.EXEC_MODE_SILENT);
            for (i=0; i < vParams.size(); i++) {

                // Check if there is a item:

                b = false;
                oItem = (java.lang.Object[]) vParams.get(i);
                for (j=0; j < moPriceListItemPricePane.getTableGuiRowCount(); j++) {
                    oRow = moPriceListItemPricePane.getTableRow(j);
                    vAux = oRow.getValues();
                    if (vAux.get(0).toString().compareTo(oItem[1].toString()) == 0 &&
                        vAux.get(1).toString().compareTo(oItem[2].toString()) == 0 ) {
                        b = true;
                        break;
                    }
                }

                if (!b) {
                    oPriceListItemPrice = new SDataPriceListItemPrice();

                    oPriceListItemPrice.setPkItemId(SLibUtilities.parseInt(oItem[0].toString()));
                    oPriceListItemPrice.setDbmsItemKey(oItem[1].toString());
                    oPriceListItemPrice.setDbmsItem(oItem[2].toString());

                    if (!bPriceListLink) {
                        oPriceListItemPrice.setPrice(SLibUtilities.parseDouble(oItem[3].toString()));
                        mvItemsPrice.add(oPriceListItemPrice);
                    }
                    else {
                        // Lookup item price:

                        for (j=0; j < mvItemsPrice.size(); j++) {
                            oPriceListItemPriceAux = (SDataPriceListItemPrice) mvItemsPrice.get(j);
                            if (oPriceListItemPrice.getPkItemId() == oPriceListItemPriceAux.getPkItemId()) {
                                oPriceListItemPrice.setPrice(oPriceListItemPriceAux.getPrice());
                                break;
                            }
                        }
                    }

                    moPriceListItemPricePane.addTableRow(oPriceListItemPriceRow = new SDataPriceListItemPriceRow(oPriceListItemPrice, miClient.getSessionXXX().getParamsErp().getFkSortingItemTypeId()));
                    moPriceListItemPricePane.renderTableRows();
                    index = moPriceListItemPricePane.getTableGuiRowCount() - 1;
                    moPriceListItemPricePane.getTable().setRowSelectionInterval(index, index);
                    moPriceListItemPricePane.getVerticalScrollBar().setValue((index + 1) * moPriceListItemPricePane.getTable().getRowHeight());
                }
            }
        }
    }

    private void actionLinkDel() {
        int i = 0;
        int j = 0;
        int index = moPriceListLinkPane.getTable().getSelectedRow();
        boolean b = false;
        Object[] oItem = null;
        Object[] oItemDel = null;
        Vector<Object> mvAux = new Vector<Object>();
        Vector<Object> mvParams = new Vector<Object>();
        Vector<Object> mvLinks = new Vector<Object>();
        STableRow moRow = null;
        SDataPriceListLink dataPListLink = null;
        SDataPriceListLink dataPListLinkDel = null;

        if (index != -1) {
            // Update item price list:

            renderItemPriceListSettings();

            dataPListLinkDel = (SDataPriceListLink) moPriceListLinkPane.getTableRow(index).getData();

            // Get all items that has a higher category:

            for (i=0; i < moPriceListLinkPane.getTableGuiRowCount(); i++) {
                dataPListLink = (SDataPriceListLink) moPriceListLinkPane.getTableRow(i).getData();

                if (dataPListLink.getPkLinkTypeId() > dataPListLinkDel.getPkLinkTypeId()) {

                    mvParams.removeAllElements();
                    mvParams.add(dataPListLink.getPkLinkTypeId());
                    mvParams.add(dataPListLink.getPkReferenceId());
                    mvParams.add((miClient.getSessionXXX().getParamsErp().getFkSortingItemTypeId() == SDataConstantsSys.CFGS_TP_SORT_KEY_NAME ? SDataConstantsSys.CFGS_TP_SORT_KEY_NAME : SDataConstantsSys.CFGS_TP_SORT_NAME_KEY));
                    mvParams = SDataUtilities.callProcedure(miClient, SProcConstants.MKT_PLIST_PRICE_FILTER,  mvParams, SLibConstants.EXEC_MODE_SILENT);
                    for (j=0; j < mvParams.size(); j++) {
                        mvLinks.add(mvParams.get(j));
                    }
                }
            }

            // Check if there is an item in the price list:

            mvParams.removeAllElements();
            mvParams.add(dataPListLinkDel.getPkLinkTypeId());
            mvParams.add(dataPListLinkDel.getPkReferenceId());
            mvParams.add((miClient.getSessionXXX().getParamsErp().getFkSortingItemTypeId() == SDataConstantsSys.CFGS_TP_SORT_KEY_NAME ? SDataConstantsSys.CFGS_TP_SORT_KEY_NAME : SDataConstantsSys.CFGS_TP_SORT_NAME_KEY));
            mvParams = SDataUtilities.callProcedure(miClient, SProcConstants.MKT_PLIST_PRICE_FILTER,  mvParams, SLibConstants.EXEC_MODE_SILENT);
            for (i=0; i < mvParams.size(); i++) {
                b = false;
                oItemDel = (java.lang.Object[]) mvParams.get(i);

                for (j=0; j < mvLinks.size(); j++) {
                    oItem = (java.lang.Object[]) mvLinks.get(j);

                    if (SLibUtilities.parseInt(oItemDel[0].toString()) == SLibUtilities.parseInt(oItem[0].toString())) {
                        b = true;
                        break;
                    }
                }

                if (!b) {
                    for (j=0; j < moPriceListItemPricePane.getTableGuiRowCount(); j++) {
                        moRow = moPriceListItemPricePane.getTableRow(j);
                        mvAux = moRow.getValues();
                        if (mvAux.get(0).toString().compareTo(oItemDel[1].toString()) == 0) {
                            moPriceListItemPricePane.removeTableRow(j);
                            moPriceListItemPricePane.renderTableRows();
                            break;
                        }
                    }
                }
            }

            moPriceListLinkPane.removeTableRow(index);
            moPriceListLinkPane.renderTableRows();
        }
    }

    private void renderItemPriceListSettings() {
        int i = 0;
        int j = 0;
        Vector<Object> mvAux = new Vector<Object>();
        SDataPriceListItemPrice dataPListItemPrice = null;
        STableRow moRow = null;

        for (i=0; i < moPriceListItemPricePane.getTableGuiRowCount(); i++) {
            moRow = moPriceListItemPricePane.getTableRow(i);
            mvAux = moRow.getValues();

            for (j=0; j < mvItemsPrice.size(); j++) {
                dataPListItemPrice = (SDataPriceListItemPrice) mvItemsPrice.get(j);

                if (dataPListItemPrice.getDbmsItemKey().toString().compareTo(mvAux.get(0).toString()) == 0) {
                    dataPListItemPrice.setPrice(SLibUtilities.parseDouble(mvAux.get(2).toString()));
                    mvItemsPrice.set(j, dataPListItemPrice);
                    break;
                }
            }
        }
    }

    public void actionSeek() {
        if (jbSeek.isEnabled() && moPriceListItemPricePane.getTableGuiRowCount()>0) {
            STableUtilities.actionSeek(miClient, moPriceListItemPricePane, jtfSeek.getText().trim());
        }
    }

    public void actionExportCsv() {
        if (jbExportCsv.isEnabled() && moPriceListItemPricePane.getTableGuiRowCount()>0) {
            STableUtilities.actionExportCsv(miClient, moPriceListItemPricePane, getTitle());
        }
    }

    private void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    public void publicActionRefEdit() {
        actionLinkDel();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbExportCsv;
    private javax.swing.JButton jbFkCurrencyId;
    private javax.swing.JButton jbItemDel;
    private javax.swing.JButton jbItemEdit;
    private javax.swing.JButton jbItemNew;
    private javax.swing.JButton jbLinkDel;
    private javax.swing.JButton jbLinkEdit;
    private javax.swing.JButton jbLinkNew;
    private javax.swing.JButton jbOK;
    private javax.swing.JButton jbRefresh;
    private javax.swing.JButton jbSeek;
    private javax.swing.JButton jbUpdate;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkCurrencyId;
    private javax.swing.JCheckBox jckIsDeleted;
    private javax.swing.JLabel jlFkCurrencyId;
    private javax.swing.JLabel jlPriceList;
    private javax.swing.JPanel jpFilter;
    private javax.swing.JPanel jpItemPrice;
    private javax.swing.JTextField jtfPriceList;
    private javax.swing.JTextField jtfSeek;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moPriceList = null;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        moPriceListLinkPane.createTable(null);
        moPriceListLinkPane.clearTableRows();
        moPriceListItemPricePane.createTable(null);
        moPriceListItemPricePane.clearTableRows();
        jTabbedPane1.setSelectedIndex(0);

        mvItemsPrice.clear();
        mvPriceListLink.clear();

        moPriceListItemPricePane.setTableRowSelection(0);

        jcbFkCurrencyId.setEnabled(true);
        jbFkCurrencyId.setEnabled(true);
        jckIsDeleted.setEnabled(false);

        moFieldFkCurrencyId.setFieldValue(new int[] { miClient.getSessionXXX().getParamsErp().getFkCurrencyId() });

        jtfSeek.setText("");
        jtfSeek.setEnabled(true);
        jbSeek.setEnabled(true);
        jbExportCsv.setEnabled(true);
    }

    @Override
    public void formRefreshCatalogues() {
        SFormUtilities.populateComboBox(miClient, jcbFkCurrencyId, SDataConstants.CFGU_CUR);
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        int i = 0;
        SDataPriceListLinkRow dataPListLinkRow = null;
        SDataPriceListItemPriceRow dataPListItemPriceRow = null;
        moPriceList = (SDataPriceList) registry;

        moFieldPriceList.setFieldValue(moPriceList.getPriceList());
        moFieldFkCurrencyId.setFieldValue(new int[] { moPriceList.getIsRegistryNew() ? miClient.getSessionXXX().getParamsErp().getFkCurrencyId() : moPriceList.getFkCurrencyId() });
        moFieldIsDeleted.setFieldValue(moPriceList.getIsDeleted());

        for (i = 0; i < moPriceList.getDbmsPListLink().size(); i++) {
            dataPListLinkRow = new SDataPriceListLinkRow(moPriceList.getDbmsPListLink().get(i));
            moPriceListLinkPane.addTableRow(dataPListLinkRow);
        }
        mvPriceListLink = moPriceList.getDbmsPListLink();

        for (i = 0; i < moPriceList.getDbmsPListItemPrice().size(); i++) {
            dataPListItemPriceRow = new SDataPriceListItemPriceRow(moPriceList.getDbmsPListItemPrice().get(i), miClient.getSessionXXX().getParamsErp().getFkSortingItemTypeId());
            moPriceListItemPricePane.addTableRow(dataPListItemPriceRow);
        }
        mvItemsPrice = moPriceList.getDbmsPListItemPrice();

        jcbFkCurrencyId.setEnabled(false);
        jbFkCurrencyId.setEnabled(false);
        jckIsDeleted.setEnabled(true);
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        STableRow sPriceListItemPriceRow = null;
        Vector mvRow = new Vector();
        SDataPriceListItemPrice sDataPListItemPrice = new SDataPriceListItemPrice();

        if (moPriceList == null) {
            moPriceList = new SDataPriceList();
            moPriceList.setFkDpsCategoryId(mnParamDpsCategory);
            moPriceList.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
        }
        else {
            moPriceList.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
        }

        moPriceList.setPriceList(moFieldPriceList.getString());
        moPriceList.setFkCurrencyId(moFieldFkCurrencyId.getKeyAsIntArray()[0]);
        moPriceList.setIsDeleted(moFieldIsDeleted.getBoolean());

        moPriceList.getDbmsPListLink().removeAllElements();
        for (int i = 0; i < moPriceListLinkPane.getTableGuiRowCount(); i++) {
            moPriceList.getDbmsPListLink().add((SDataPriceListLink) moPriceListLinkPane.getTableRow(i).getData());
        }

        moPriceList.getDbmsPListItemPrice().removeAllElements();
        for (int i = 0; i < moPriceListItemPricePane.getTableGuiRowCount(); i++) {
            sPriceListItemPriceRow = moPriceListItemPricePane.getTableRow(i);
            mvRow = sPriceListItemPriceRow.getValues();
            sDataPListItemPrice = (SDataPriceListItemPrice) moPriceListItemPricePane.getTableRow(i).getData();
            sDataPListItemPrice.setPrice(SLibUtilities.parseDouble(mvRow.get(2).toString()));
            moPriceListItemPricePane.getTableRow(i).setData((Object) sDataPListItemPrice);
            moPriceList.getDbmsPListItemPrice().add((SDataPriceListItemPrice) moPriceListItemPricePane.getTableRow(i).getData());
        }

        return moPriceList;
    }

    @Override
    public void setValue(int type, Object value) {
        switch (type) {
            case SDataConstantsSys.TRNS_CT_DPS_SAL:
            case SDataConstantsSys.TRNS_CT_DPS_PUR:
                mnParamDpsCategory = (Integer)  value;
                break;
        }
    }

    @Override
    public Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOK) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbFkCurrencyId) {
                actionFkCurrencyId();
            }
            else if (button == jbLinkNew) {
                actionLinkNew();
            }
            else if (button == jbLinkDel) {
                actionLinkDel();
            }
            else if (button == jbUpdate) {
                actionUpdatePriceList();
            }
            else if (button == jbSeek) {
                actionSeek();
            }
            else if (button == jbExportCsv) {
                actionExportCsv();
            }
        }
        else if (e.getSource() instanceof javax.swing.JTextField) {
            JTextField textField = (JTextField) e.getSource();

            if (textField == jtfSeek) {
                actionSeek();
            }
        }
    }
}
