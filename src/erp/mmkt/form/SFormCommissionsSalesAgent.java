/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 *
 * Created on 10/11/2009
 */

package erp.mmkt.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.lib.SLibConstants;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.mmkt.data.SDataCommissionsSalesAgent;
import erp.mmkt.data.SDataCommissionsSalesAgentType;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;

/**
 *
 * @author Néstor Ávalos, Juan Barajas
 */
public class SFormCommissionsSalesAgent extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mmkt.data.SDataCommissionsSalesAgent moCommissionsSalesAgent;
    private erp.mmkt.data.SDataCommissionsSalesAgentType moCommissionsSalesAgentType;
    private erp.lib.form.SFormField moFieldPkSalesAgentId;
    private erp.lib.form.SFormField moFieldPkLinkTypeId;
    private erp.lib.form.SFormField moFieldPkReferenceId;
    private erp.lib.form.SFormField moFieldPkDateStartId;
    private erp.lib.form.SFormField moFieldPercentage;
    private erp.lib.form.SFormField moFieldValueUnitary;
    private erp.lib.form.SFormField moFieldValue;
    private erp.lib.form.SFormField moFieldSupervisorPercentage;
    private erp.lib.form.SFormField moFieldSupervisorValueUnitary;
    private erp.lib.form.SFormField moFieldSupervisorValue;
    private erp.lib.form.SFormField moFieldIsDeleted;
    private erp.lib.form.SFormField moFieldFkCommissionsTypeId;

    /** Creates new form SFormElement */
    public SFormCommissionsSalesAgent(erp.client.SClientInterface client, int formType, String title) {
        super(client.getFrame(), true);
        miClient = client;
        //mnFormType = SDataConstants.MKT_COMMS_SAL_AGT;
        mnFormType = formType;

        initComponents();
        initComponentsExtra();

        setTitle(title);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jlPkSalesAgentId = new javax.swing.JLabel();
        jcbPkSalesAgentId = new javax.swing.JComboBox<SFormComponentItem>();
        jlDummy = new javax.swing.JLabel();
        jbPkSalesAgentId = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jlPkLinkTypeId = new javax.swing.JLabel();
        jcbPkLinkTypeId = new javax.swing.JComboBox<SFormComponentItem>();
        jPanel4 = new javax.swing.JPanel();
        jlPkReferenceId = new javax.swing.JLabel();
        jcbPkReferenceId = new javax.swing.JComboBox<SFormComponentItem>();
        jlDummy1 = new javax.swing.JLabel();
        jbPkReferenceId = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jlPkDateStartId = new javax.swing.JLabel();
        jtfPkDateStartId = new javax.swing.JFormattedTextField();
        jlDummy2 = new javax.swing.JLabel();
        jbPkDateStartId = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jlFkCommisionsTypeId = new javax.swing.JLabel();
        jcbFkCommisionsTypeId = new javax.swing.JComboBox();
        jPanel12 = new javax.swing.JPanel();
        jlPercentage = new javax.swing.JLabel();
        jtfPercentage = new javax.swing.JTextField();
        jPanel13 = new javax.swing.JPanel();
        jlValueUnitary = new javax.swing.JLabel();
        jtfValueUnitary = new javax.swing.JTextField();
        jPanel14 = new javax.swing.JPanel();
        jlValue = new javax.swing.JLabel();
        jtfValue = new javax.swing.JTextField();
        jPanel16 = new javax.swing.JPanel();
        jlSupervisorPercentage = new javax.swing.JLabel();
        jtfSupervisorPercentage = new javax.swing.JTextField();
        jPanel17 = new javax.swing.JPanel();
        jlSupervisorValueUnitary = new javax.swing.JLabel();
        jtfSupervisorValueUnitary = new javax.swing.JTextField();
        jPanel18 = new javax.swing.JPanel();
        jlSupervisorValue = new javax.swing.JLabel();
        jtfSupervisorValue = new javax.swing.JTextField();
        jPanel15 = new javax.swing.JPanel();
        jckIsDeleted = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        jbOK = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Comisión por agente de ventas");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel2.setLayout(new java.awt.GridLayout(12, 1));

        jPanel9.setLayout(new java.awt.FlowLayout(0, 0, 1));

        jlPkSalesAgentId.setForeground(java.awt.Color.blue);
        jlPkSalesAgentId.setText("Agente de ventas: *");
        jlPkSalesAgentId.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel9.add(jlPkSalesAgentId);

        jcbPkSalesAgentId.setPreferredSize(new java.awt.Dimension(350, 23));
        jPanel9.add(jcbPkSalesAgentId);

        jlDummy.setForeground(java.awt.Color.blue);
        jlDummy.setPreferredSize(new java.awt.Dimension(1, 23));
        jPanel9.add(jlDummy);

        jbPkSalesAgentId.setText("jButton1");
        jbPkSalesAgentId.setToolTipText("Seleccionar agente de ventas");
        jbPkSalesAgentId.setFocusable(false);
        jbPkSalesAgentId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel9.add(jbPkSalesAgentId);

        jPanel2.add(jPanel9);

        jPanel3.setLayout(new java.awt.FlowLayout(0, 0, 1));

        jlPkLinkTypeId.setForeground(java.awt.Color.blue);
        jlPkLinkTypeId.setText("Tipo de referencia: *");
        jlPkLinkTypeId.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel3.add(jlPkLinkTypeId);

        jcbPkLinkTypeId.setPreferredSize(new java.awt.Dimension(200, 23));
        jcbPkLinkTypeId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbPkLinkTypeIdItemStateChanged(evt);
            }
        });
        jPanel3.add(jcbPkLinkTypeId);

        jPanel2.add(jPanel3);

        jPanel4.setLayout(new java.awt.FlowLayout(0, 0, 1));

        jlPkReferenceId.setForeground(java.awt.Color.blue);
        jlPkReferenceId.setText("Referencia: *");
        jlPkReferenceId.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel4.add(jlPkReferenceId);

        jcbPkReferenceId.setPreferredSize(new java.awt.Dimension(350, 23));
        jPanel4.add(jcbPkReferenceId);

        jlDummy1.setForeground(java.awt.Color.blue);
        jlDummy1.setPreferredSize(new java.awt.Dimension(1, 23));
        jPanel4.add(jlDummy1);

        jbPkReferenceId.setText("jButton1");
        jbPkReferenceId.setToolTipText("Seleccionar referencia");
        jbPkReferenceId.setFocusable(false);
        jbPkReferenceId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel4.add(jbPkReferenceId);

        jPanel2.add(jPanel4);

        jPanel10.setLayout(new java.awt.FlowLayout(0, 0, 1));

        jlPkDateStartId.setForeground(java.awt.Color.blue);
        jlPkDateStartId.setText("Fecha inicial vigencia: *");
        jlPkDateStartId.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel10.add(jlPkDateStartId);

        jtfPkDateStartId.setText("dd/mm/yyyy");
        jtfPkDateStartId.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel10.add(jtfPkDateStartId);

        jlDummy2.setForeground(java.awt.Color.blue);
        jlDummy2.setPreferredSize(new java.awt.Dimension(1, 23));
        jPanel10.add(jlDummy2);

        jbPkDateStartId.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbPkDateStartId.setToolTipText("Seleccionar fecha inicial vigencia");
        jbPkDateStartId.setFocusable(false);
        jbPkDateStartId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel10.add(jbPkDateStartId);

        jPanel2.add(jPanel10);

        jPanel11.setLayout(new java.awt.FlowLayout(0, 0, 1));

        jlFkCommisionsTypeId.setText("Tipo de comisión: *");
        jlFkCommisionsTypeId.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel11.add(jlFkCommisionsTypeId);

        jcbFkCommisionsTypeId.setEditable(true);
        jcbFkCommisionsTypeId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PORCENTAJE" }));
        jcbFkCommisionsTypeId.setEnabled(false);
        jcbFkCommisionsTypeId.setFocusable(false);
        jcbFkCommisionsTypeId.setPreferredSize(new java.awt.Dimension(200, 23));
        jcbFkCommisionsTypeId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbFkCommisionsTypeIdItemStateChanged(evt);
            }
        });
        jPanel11.add(jcbFkCommisionsTypeId);

        jPanel2.add(jPanel11);

        jPanel12.setLayout(new java.awt.FlowLayout(0, 0, 1));

        jlPercentage.setText("Porcentaje agente: *");
        jlPercentage.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel12.add(jlPercentage);

        jtfPercentage.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfPercentage.setText("PERCENTAGE");
        jtfPercentage.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel12.add(jtfPercentage);

        jPanel2.add(jPanel12);

        jPanel13.setLayout(new java.awt.FlowLayout(0, 0, 1));

        jlValueUnitary.setText("Valor unitario agente:");
        jlValueUnitary.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel13.add(jlValueUnitary);

        jtfValueUnitary.setEditable(false);
        jtfValueUnitary.setText("VALUE UNITARY");
        jtfValueUnitary.setFocusable(false);
        jtfValueUnitary.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel13.add(jtfValueUnitary);

        jPanel2.add(jPanel13);

        jPanel14.setLayout(new java.awt.FlowLayout(0, 0, 1));

        jlValue.setText("Valor agente:");
        jlValue.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel14.add(jlValue);

        jtfValue.setEditable(false);
        jtfValue.setText("VALUE");
        jtfValue.setFocusable(false);
        jtfValue.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel14.add(jtfValue);

        jPanel2.add(jPanel14);

        jPanel16.setLayout(new java.awt.FlowLayout(0, 0, 1));

        jlSupervisorPercentage.setText("Porcentaje supervisor: *");
        jlSupervisorPercentage.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel16.add(jlSupervisorPercentage);

        jtfSupervisorPercentage.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfSupervisorPercentage.setText("PERCENTAGE");
        jtfSupervisorPercentage.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel16.add(jtfSupervisorPercentage);

        jPanel2.add(jPanel16);

        jPanel17.setLayout(new java.awt.FlowLayout(0, 0, 1));

        jlSupervisorValueUnitary.setText("Valor unitario supervisor:");
        jlSupervisorValueUnitary.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel17.add(jlSupervisorValueUnitary);

        jtfSupervisorValueUnitary.setEditable(false);
        jtfSupervisorValueUnitary.setText("VALUE UNITARY");
        jtfSupervisorValueUnitary.setFocusable(false);
        jtfSupervisorValueUnitary.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel17.add(jtfSupervisorValueUnitary);

        jPanel2.add(jPanel17);

        jPanel18.setLayout(new java.awt.FlowLayout(0, 0, 1));

        jlSupervisorValue.setText("Valor supervisor:");
        jlSupervisorValue.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel18.add(jlSupervisorValue);

        jtfSupervisorValue.setEditable(false);
        jtfSupervisorValue.setText("VALUE");
        jtfSupervisorValue.setFocusable(false);
        jtfSupervisorValue.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel18.add(jtfSupervisorValue);

        jPanel2.add(jPanel18);

        jPanel15.setLayout(new java.awt.FlowLayout(0, 0, 1));

        jckIsDeleted.setText("Registro eliminado");
        jPanel15.add(jckIsDeleted);

        jPanel2.add(jPanel15);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_START);

        jPanel1.setPreferredSize(new java.awt.Dimension(400, 33));
        jPanel1.setLayout(new java.awt.FlowLayout(2));

        jbOK.setText("Aceptar");
        jbOK.setToolTipText("[Ctrl + Enter]");
        jbOK.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jbOK);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jPanel1.add(jbCancel);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-656)/2, (screenSize.height-388)/2, 656, 388);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void jcbPkLinkTypeIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbPkLinkTypeIdItemStateChanged
        itemStateChangedPkLinkTypeIdItem();
    }//GEN-LAST:event_jcbPkLinkTypeIdItemStateChanged

    private void jcbFkCommisionsTypeIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbFkCommisionsTypeIdItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbFkCommisionsTypeIdItemStateChanged

    private void initComponentsExtra() {
        mvFields = new Vector<SFormField>();

        moFieldPkSalesAgentId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbPkSalesAgentId, jlPkSalesAgentId);
        moFieldPkLinkTypeId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbPkLinkTypeId, jlPkLinkTypeId);
        moFieldPkReferenceId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbPkReferenceId, jlPkReferenceId);
        moFieldPkDateStartId = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jtfPkDateStartId, jlPkDateStartId);
        moFieldPercentage = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfPercentage, jlPercentage);
        moFieldPercentage.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsPercentageFormat());
        moFieldPercentage.setIsPercent(true);
        moFieldPercentage.setFloatMin(0);
        moFieldPercentage.setMinInclusive(true);
        moFieldPercentage.setFloatMax(1);
        moFieldPercentage.setMaxInclusive(true);
        moFieldValueUnitary = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfValueUnitary, jlValueUnitary);
        moFieldValue = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfValue, jlValue);
        moFieldSupervisorPercentage = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfSupervisorPercentage, jlSupervisorPercentage);
        moFieldSupervisorPercentage.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsPercentageFormat());
        moFieldSupervisorPercentage.setIsPercent(true);
        moFieldSupervisorPercentage.setFloatMin(0);
        moFieldSupervisorPercentage.setMinInclusive(true);
        moFieldSupervisorPercentage.setFloatMax(1);
        moFieldSupervisorPercentage.setMaxInclusive(true);
        moFieldSupervisorValueUnitary = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfSupervisorValueUnitary, jlSupervisorValueUnitary);
        moFieldSupervisorValue = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfSupervisorValue, jlSupervisorValue);
        moFieldIsDeleted = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsDeleted);
        moFieldFkCommissionsTypeId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, false, jcbFkCommisionsTypeId, jlFkCommisionsTypeId);

        mvFields.add(moFieldPkSalesAgentId);
        mvFields.add(moFieldPkLinkTypeId);
        mvFields.add(moFieldPkReferenceId);
        mvFields.add(moFieldPkDateStartId);
        mvFields.add(moFieldPercentage);
        mvFields.add(moFieldValueUnitary);
        mvFields.add(moFieldValue);
        mvFields.add(moFieldSupervisorPercentage);
        mvFields.add(moFieldSupervisorValueUnitary);
        mvFields.add(moFieldSupervisorValue);
        mvFields.add(moFieldIsDeleted);
        mvFields.add(moFieldFkCommissionsTypeId);

        jbOK.addActionListener(this);
        jbCancel.addActionListener(this);
        jbPkReferenceId.addActionListener(this);
        jbPkSalesAgentId.addActionListener(this);
        jbPkDateStartId.addActionListener(this);

        if (isSalesType()) {
            jlPkSalesAgentId.setText("Tipo agente ventas: *");
        }
        else {
            jlPkSalesAgentId.setText("Agente de ventas: *");
        }

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            if (moCommissionsSalesAgent != null || moCommissionsSalesAgentType != null) {
                jtfPercentage.requestFocus();
            }
            else {
                jcbPkSalesAgentId.requestFocus();
            }
        }
    }

    private boolean isSalesType() {
        return mnFormType == SDataConstants.MKT_COMMS_SAL_AGT_TP;
    }

    private void actionPkSalesAgentId() {
        miClient.pickOption(SDataConstants.BPSX_BP_ATT_SAL_AGT, moFieldPkSalesAgentId, new int[] { moFieldPkSalesAgentId.getKeyAsIntArray()[0] });
    }

    private void actionSetPkDateStartId() {
        miClient.getGuiDatePickerXXX().formReset();
        miClient.getGuiDatePickerXXX().setDate(moFieldPkDateStartId.getDate());
        miClient.getGuiDatePickerXXX().setVisible(true);

        if (miClient.getGuiDatePickerXXX().getFormResult() == SLibConstants.FORM_RESULT_OK) {
            moFieldPkDateStartId.setDate(miClient.getGuiDatePickerXXX().getGuiDate());
            jtfPkDateStartId.requestFocus();
        }
    }

    private void actionPkReferenceId() {
        int nTypeLink = 0;
        int[] anFilterItem = null;

        switch (moFieldPkLinkTypeId.getKeyAsIntArray()[0]) {
            case SDataConstantsSys.TRNS_TP_LINK_ALL:
                nTypeLink = SDataConstants.UNDEFINED;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_CT_ITEM:
                nTypeLink = SDataConstants.ITMS_CT_ITEM;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_CL_ITEM:
                nTypeLink = SDataConstants.ITMS_CL_ITEM;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_TP_ITEM:
                nTypeLink = SDataConstants.ITMS_TP_ITEM;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_IFAM:
                nTypeLink = SDataConstants.ITMU_IFAM;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_IGRP:
                nTypeLink = SDataConstants.ITMU_IGRP;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_IGEN:
                nTypeLink = SDataConstants.ITMU_IGEN;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_LINE:
                nTypeLink = SDataConstants.ITMU_LINE;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_BRD:
                nTypeLink = SDataConstants.ITMU_BRD;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_MFR:
                nTypeLink = SDataConstants.ITMU_MFR;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_ITEM:
                nTypeLink = SDataConstants.ITMX_ITEM_IOG;
                anFilterItem = SDataConstantsSys.ITMS_CL_ITEM_SAL_PRO;
                break;
        }
        miClient.pickOption(nTypeLink, moFieldPkReferenceId, anFilterItem);
    }

    private void itemStateChangedPkLinkTypeIdItem() {
        jcbPkReferenceId.setEnabled(true);
        jbPkReferenceId.setEnabled(true);

        if (jcbPkLinkTypeId.getSelectedIndex() > 0) {
            switch (moFieldPkLinkTypeId.getKeyAsIntArray()[0]) {
                case SDataConstantsSys.TRNS_TP_LINK_CT_ITEM:
                    SFormUtilities.populateComboBox(miClient, jcbPkReferenceId, SDataConstants.ITMS_CT_ITEM);
                    break;
                case SDataConstantsSys.TRNS_TP_LINK_CL_ITEM:
                    SFormUtilities.populateComboBox(miClient, jcbPkReferenceId, SDataConstants.ITMS_CL_ITEM);
                    break;
                case SDataConstantsSys.TRNS_TP_LINK_TP_ITEM:
                    SFormUtilities.populateComboBox(miClient, jcbPkReferenceId, SDataConstants.ITMS_TP_ITEM);
                    break;
                case SDataConstantsSys.TRNS_TP_LINK_IFAM:
                    SFormUtilities.populateComboBox(miClient, jcbPkReferenceId, SDataConstants.ITMU_IFAM);
                    break;
                case SDataConstantsSys.TRNS_TP_LINK_IGRP:
                    SFormUtilities.populateComboBox(miClient, jcbPkReferenceId, SDataConstants.ITMU_IGRP);
                    break;
                case SDataConstantsSys.TRNS_TP_LINK_IGEN:
                    SFormUtilities.populateComboBox(miClient, jcbPkReferenceId, SDataConstants.ITMU_IGEN);
                    break;
                case SDataConstantsSys.TRNS_TP_LINK_LINE:
                    SFormUtilities.populateComboBox(miClient, jcbPkReferenceId, SDataConstants.ITMU_LINE);
                    break;
                case SDataConstantsSys.TRNS_TP_LINK_BRD:
                    SFormUtilities.populateComboBox(miClient, jcbPkReferenceId, SDataConstants.ITMU_BRD);
                    break;
                case SDataConstantsSys.TRNS_TP_LINK_MFR:
                    SFormUtilities.populateComboBox(miClient, jcbPkReferenceId, SDataConstants.ITMU_MFR);
                    break;
                case SDataConstantsSys.TRNS_TP_LINK_ITEM:
                    SFormUtilities.populateComboBox(miClient, jcbPkReferenceId, SDataConstants.ITMU_ITEM);
                    break;
                default:
                    jcbPkReferenceId.setEnabled(false);
                    jbPkReferenceId.setEnabled(false);
                    break;
            }
        }
    }

    private void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbOK;
    private javax.swing.JButton jbPkDateStartId;
    private javax.swing.JButton jbPkReferenceId;
    private javax.swing.JButton jbPkSalesAgentId;
    private javax.swing.JComboBox jcbFkCommisionsTypeId;
    private javax.swing.JComboBox<SFormComponentItem> jcbPkLinkTypeId;
    private javax.swing.JComboBox<SFormComponentItem> jcbPkReferenceId;
    private javax.swing.JComboBox<SFormComponentItem> jcbPkSalesAgentId;
    private javax.swing.JCheckBox jckIsDeleted;
    private javax.swing.JLabel jlDummy;
    private javax.swing.JLabel jlDummy1;
    private javax.swing.JLabel jlDummy2;
    private javax.swing.JLabel jlFkCommisionsTypeId;
    private javax.swing.JLabel jlPercentage;
    private javax.swing.JLabel jlPkDateStartId;
    private javax.swing.JLabel jlPkLinkTypeId;
    private javax.swing.JLabel jlPkReferenceId;
    private javax.swing.JLabel jlPkSalesAgentId;
    private javax.swing.JLabel jlSupervisorPercentage;
    private javax.swing.JLabel jlSupervisorValue;
    private javax.swing.JLabel jlSupervisorValueUnitary;
    private javax.swing.JLabel jlValue;
    private javax.swing.JLabel jlValueUnitary;
    private javax.swing.JTextField jtfPercentage;
    private javax.swing.JFormattedTextField jtfPkDateStartId;
    private javax.swing.JTextField jtfSupervisorPercentage;
    private javax.swing.JTextField jtfSupervisorValue;
    private javax.swing.JTextField jtfSupervisorValueUnitary;
    private javax.swing.JTextField jtfValue;
    private javax.swing.JTextField jtfValueUnitary;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moCommissionsSalesAgent = null;
        moCommissionsSalesAgentType = null;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        moFieldPkDateStartId.setDate(miClient.getSessionXXX().getWorkingDate());

        jcbPkSalesAgentId.setEnabled(true);
        jbPkSalesAgentId.setEnabled(true);
        jcbPkLinkTypeId.setEnabled(true);
        jcbPkReferenceId.setEnabled(false);
        jbPkReferenceId.setEnabled(false);
        jtfPkDateStartId.setEnabled(true);
        jbPkDateStartId.setEnabled(true);
        jckIsDeleted.setEnabled(false);
    }

    @Override
    public void formRefreshCatalogues() {
        if (isSalesType()) {
            SFormUtilities.populateComboBox(miClient, jcbPkSalesAgentId, SDataConstants.MKTU_TP_SAL_AGT);
        }
        else {
            SFormUtilities.populateComboBox(miClient, jcbPkSalesAgentId, SDataConstants.BPSX_BP_ATT_SAL_AGT);
        }
        SFormUtilities.populateComboBox(miClient, jcbPkLinkTypeId, SDataConstants.TRNS_TP_LINK);
        // SFormUtilities.populateComboBox(miClient, jcbFkCommisionsTypeId, SDataConstants.MKTS_TP_COMMS); // XXX
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        int i = 0;
        if (isSalesType()) {
            moCommissionsSalesAgentType = (SDataCommissionsSalesAgentType) registry;
        }
        else {
            moCommissionsSalesAgent = (SDataCommissionsSalesAgent) registry;
        }

        moFieldPkSalesAgentId.setFieldValue(new int[] { isSalesType() ? moCommissionsSalesAgentType.getPkSalesAgentTypeId() : moCommissionsSalesAgent.getPkSalesAgentId() });
        moFieldPkLinkTypeId.setFieldValue(new int[] { isSalesType() ? moCommissionsSalesAgentType.getPkLinkTypeId() : moCommissionsSalesAgent.getPkLinkTypeId() });
        itemStateChangedPkLinkTypeIdItem();

        switch (moFieldPkLinkTypeId.getKeyAsIntArray()[0]) {
            case SDataConstantsSys.TRNS_TP_LINK_ALL:
                break;
            case SDataConstantsSys.TRNS_TP_LINK_CT_ITEM:
            case SDataConstantsSys.TRNS_TP_LINK_CL_ITEM:
            case SDataConstantsSys.TRNS_TP_LINK_TP_ITEM:
                SFormUtilities.locateComboBoxItemByComplement(jcbPkReferenceId, isSalesType() ? moCommissionsSalesAgentType.getPkReferenceId() : moCommissionsSalesAgent.getPkReferenceId());
                break;
            default:
                moFieldPkReferenceId.setFieldValue(new int[] { isSalesType() ? moCommissionsSalesAgentType.getPkReferenceId() : moCommissionsSalesAgent.getPkReferenceId() });
        }

        moFieldPkDateStartId.setFieldValue(isSalesType() ? moCommissionsSalesAgentType.getPkDateStartId() : moCommissionsSalesAgent.getPkDateStartId());
        moFieldPercentage.setFieldValue(isSalesType() ? moCommissionsSalesAgentType.getAgentPercentage() : moCommissionsSalesAgent.getAgentPercentage());
        moFieldValueUnitary.setFieldValue(isSalesType() ? moCommissionsSalesAgentType.getAgentValueUnitary() : moCommissionsSalesAgent.getAgentValueUnitary());
        moFieldValue.setFieldValue(isSalesType() ? moCommissionsSalesAgentType.getAgentValue() : moCommissionsSalesAgent.getAgentValue());
        moFieldSupervisorPercentage.setFieldValue(isSalesType() ? moCommissionsSalesAgentType.getSupervisorPercentage() : moCommissionsSalesAgent.getSupervisorPercentage());
        moFieldSupervisorValueUnitary.setFieldValue(isSalesType() ? moCommissionsSalesAgentType.getSupervisorValueUnitary() : moCommissionsSalesAgent.getSupervisorValueUnitary());
        moFieldSupervisorValue.setFieldValue(isSalesType() ? moCommissionsSalesAgentType.getSupervisorValue() : moCommissionsSalesAgent.getSupervisorValue());
        moFieldIsDeleted.setFieldValue(isSalesType() ? moCommissionsSalesAgentType.getIsDeleted() : moCommissionsSalesAgent.getIsDeleted());
        // moFieldFkCommissionsTypeId.setKey(new int[] { moCommisionsSalesAgent.getFkCommissionsTypeId() }); // XXX

        jcbPkSalesAgentId.setEnabled(false);
        jbPkSalesAgentId.setEnabled(false);
        jcbPkLinkTypeId.setEnabled(false);
        jcbPkReferenceId.setEnabled(false);
        jbPkReferenceId.setEnabled(false);
        jtfPkDateStartId.setEnabled(false);
        jbPkDateStartId.setEnabled(false);
        jckIsDeleted.setEnabled(true);
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        erp.lib.data.SDataRegistry registry = null;

        if (isSalesType()) {
            if (moCommissionsSalesAgentType == null) {
                moCommissionsSalesAgentType = new SDataCommissionsSalesAgentType();
                moCommissionsSalesAgentType.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
            }
            else {
                moCommissionsSalesAgentType.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
            }

            moCommissionsSalesAgentType.setPkSalesAgentTypeId(moFieldPkSalesAgentId.getKeyAsIntArray()[0]);
            moCommissionsSalesAgentType.setPkLinkTypeId(moFieldPkLinkTypeId.getKeyAsIntArray()[0]);

            switch (moFieldPkLinkTypeId.getKeyAsIntArray()[0]) {
                case SDataConstantsSys.TRNS_TP_LINK_ALL:
                    moCommissionsSalesAgentType.setPkReferenceId(SLibConstants.UNDEFINED);
                    break;
                case SDataConstantsSys.TRNS_TP_LINK_CT_ITEM:
                case SDataConstantsSys.TRNS_TP_LINK_CL_ITEM:
                case SDataConstantsSys.TRNS_TP_LINK_TP_ITEM:
                    moCommissionsSalesAgentType.setPkReferenceId((Integer) ((SFormComponentItem) jcbPkReferenceId.getSelectedItem()).getComplement());
                    break;
                default:
                    moCommissionsSalesAgentType.setPkReferenceId(moFieldPkReferenceId.getKeyAsIntArray() == null ? SLibConstants.UNDEFINED : moFieldPkReferenceId.getKeyAsIntArray()[0]);
            }

            moCommissionsSalesAgentType.setPkDateStartId(moFieldPkDateStartId.getDate());

            moCommissionsSalesAgentType.setAgentPercentage(moFieldPercentage.getDouble());
            moCommissionsSalesAgentType.setAgentValueUnitary(moFieldValueUnitary.getDouble());
            moCommissionsSalesAgentType.setAgentValue(moFieldValue.getDouble());
            moCommissionsSalesAgentType.setSupervisorPercentage(moFieldSupervisorPercentage.getDouble());
            moCommissionsSalesAgentType.setSupervisorValueUnitary(moFieldSupervisorValueUnitary.getDouble());
            moCommissionsSalesAgentType.setSupervisorValue(moFieldSupervisorValue.getDouble());

            moCommissionsSalesAgentType.setIsDeleted(moFieldIsDeleted.getBoolean());
            moCommissionsSalesAgentType.setFkCommissionsTypeId(SDataConstantsSys.MKTS_TP_COMMS_PER); // XXX

            moCommissionsSalesAgentType.setDbmsLinkType(jcbPkLinkTypeId.getSelectedItem().toString());
            moCommissionsSalesAgentType.setDbmsReference(moFieldPkLinkTypeId.getKeyAsIntArray()[0] != SDataConstantsSys.TRNS_TP_LINK_ALL ? jcbPkReferenceId.getSelectedItem().toString() : SDataConstantsSys.TXT_TRNS_TP_LINK_ALL);

            registry = moCommissionsSalesAgentType;
        }
        else {
            if (moCommissionsSalesAgent == null) {
                moCommissionsSalesAgent = new SDataCommissionsSalesAgent();
                moCommissionsSalesAgent.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
            }
            else {
                moCommissionsSalesAgent.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
            }

            moCommissionsSalesAgent.setPkSalesAgentId(moFieldPkSalesAgentId.getKeyAsIntArray()[0]);
            moCommissionsSalesAgent.setPkLinkTypeId(moFieldPkLinkTypeId.getKeyAsIntArray()[0]);

            switch (moFieldPkLinkTypeId.getKeyAsIntArray()[0]) {
                case SDataConstantsSys.TRNS_TP_LINK_ALL:
                    moCommissionsSalesAgent.setPkReferenceId(SLibConstants.UNDEFINED);
                    break;
                case SDataConstantsSys.TRNS_TP_LINK_CT_ITEM:
                case SDataConstantsSys.TRNS_TP_LINK_CL_ITEM:
                case SDataConstantsSys.TRNS_TP_LINK_TP_ITEM:
                    moCommissionsSalesAgent.setPkReferenceId((Integer) ((SFormComponentItem) jcbPkReferenceId.getSelectedItem()).getComplement());
                    break;
                default:
                    moCommissionsSalesAgent.setPkReferenceId(moFieldPkReferenceId.getKeyAsIntArray() == null ? SLibConstants.UNDEFINED : moFieldPkReferenceId.getKeyAsIntArray()[0]);
            }

            moCommissionsSalesAgent.setPkDateStartId(moFieldPkDateStartId.getDate());

            moCommissionsSalesAgent.setAgentPercentage(moFieldPercentage.getDouble());
            moCommissionsSalesAgent.setAgentValueUnitary(moFieldValueUnitary.getDouble());
            moCommissionsSalesAgent.setAgentValue(moFieldValue.getDouble());
            moCommissionsSalesAgent.setSupervisorPercentage(moFieldSupervisorPercentage.getDouble());
            moCommissionsSalesAgent.setSupervisorValueUnitary(moFieldSupervisorValueUnitary.getDouble());
            moCommissionsSalesAgent.setSupervisorValue(moFieldSupervisorValue.getDouble());

            moCommissionsSalesAgent.setIsDeleted(moFieldIsDeleted.getBoolean());
            moCommissionsSalesAgent.setFkCommissionsTypeId(SDataConstantsSys.MKTS_TP_COMMS_PER); // XXX

            moCommissionsSalesAgent.setDbmsLinkType(jcbPkLinkTypeId.getSelectedItem().toString());
            moCommissionsSalesAgent.setDbmsReference(moFieldPkLinkTypeId.getKeyAsIntArray()[0] != SDataConstantsSys.TRNS_TP_LINK_ALL ? jcbPkReferenceId.getSelectedItem().toString() : SDataConstantsSys.TXT_TRNS_TP_LINK_ALL);

            registry = moCommissionsSalesAgent;
        }

        return registry;
    }

    @Override
    public void setValue(int type, Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOK) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbPkReferenceId) {
                actionPkReferenceId();
            }
            else if (button == jbPkDateStartId) {
                actionSetPkDateStartId();
            }
            else if (button == jbPkSalesAgentId) {
                actionPkSalesAgentId();
            }
        }
    }
}
