/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SDialogCommissionsCalculate.java
 *
 * Created on 22/09/2011, 04:24:20 PM
 */

package erp.mmkt.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataReadTableRows;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibTimeUtilities;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STableConstants;
import erp.lib.table.STablePane;
import erp.lib.table.STableRow;
import erp.lib.table.STableUtilities;
import erp.mod.mkt.db.SMktCommissionCalculate;
import erp.mod.mkt.form.SFormCommissionPayment;
import erp.mtrn.form.SDialogUpdateDpsSalesAgentComms;
import java.awt.BorderLayout;
import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.Map;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;
import sa.lib.SLibUtils;
import sa.lib.db.SDbConsts;
import sa.lib.gui.SGuiConsts;

/**
 *
 * @author Néstor Ávalos
 */
public class SDialogCommissionsCalculate extends javax.swing.JDialog implements erp.lib.form.SFormOptionPickerInterface, java.awt.event.ActionListener {

    private erp.client.SClientInterface miClient;
    private int mnOptionType;
    private int mnFormResult;
    private boolean mbFirstTime;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private java.lang.Object moFilterKey;
    private erp.lib.table.STablePane moPaneOptions;

    private erp.lib.form.SFormField moFieldDateStart;
    private erp.lib.form.SFormField moFieldDateEnd;
    private erp.lib.form.SFormField moFieldSalesAgentId;
    private erp.lib.form.SFormField moFieldDateCommissions;

    private erp.mtrn.form.SDialogUpdateDpsSalesAgentComms moDialogUpdateDpsSalesAgentComms;

    public SDialogCommissionsCalculate(erp.client.SClientInterface client, int optionType) {
        super(client.getFrame(), false); // No modal is required to print the report commissions
        miClient = client;
        mnOptionType = optionType;
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel6 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jlDateInitial = new javax.swing.JLabel();
        jtfDateStart = new javax.swing.JFormattedTextField();
        jbDateStart = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jlDateEnd = new javax.swing.JLabel();
        jtfDateEnd = new javax.swing.JFormattedTextField();
        jbDateEnd = new javax.swing.JButton();
        jPanel14 = new javax.swing.JPanel();
        jlDateEnd1 = new javax.swing.JLabel();
        jbViewDocs = new javax.swing.JButton();
        jbViewClearValues = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jlDateCommsCalculate = new javax.swing.JLabel();
        jtfDateCommissions = new javax.swing.JFormattedTextField();
        jbDateCommissions = new javax.swing.JButton();
        jPanel15 = new javax.swing.JPanel();
        jlSalesAgentId = new javax.swing.JLabel();
        jcbSalesAgentId = new javax.swing.JComboBox();
        jbSalesAgentId = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        jlSalesAgentId1 = new javax.swing.JLabel();
        jbCalculateCommissions = new javax.swing.JButton();
        jpOptions = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jbUpdateSalesBizPartner = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jtfSeek = new javax.swing.JTextField();
        jbSeek = new javax.swing.JButton();
        jbExportCsv = new javax.swing.JButton();
        jbRefresh = new javax.swing.JButton();
        jpControls = new javax.swing.JPanel();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Calcular comisiones");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel6.setLayout(new java.awt.GridLayout(1, 2, 0, 5));

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel11.setLayout(new java.awt.GridLayout(3, 1, 0, 2));

        jPanel8.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlDateInitial.setText("Fecha inicial:*");
        jlDateInitial.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlDateInitial);

        jtfDateStart.setText("dd/mm/yyyy");
        jtfDateStart.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel8.add(jtfDateStart);

        jbDateStart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_date_day.gif"))); // NOI18N
        jbDateStart.setToolTipText("Seleccionar fecha inicial");
        jbDateStart.setFocusable(false);
        jbDateStart.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel8.add(jbDateStart);

        jPanel11.add(jPanel8);

        jPanel7.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlDateEnd.setText("Fecha final:*");
        jlDateEnd.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlDateEnd);

        jtfDateEnd.setText("dd/mm/yyyy");
        jtfDateEnd.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel7.add(jtfDateEnd);

        jbDateEnd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_date_day.gif"))); // NOI18N
        jbDateEnd.setToolTipText("Seleccionar fecha final");
        jbDateEnd.setFocusable(false);
        jbDateEnd.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel7.add(jbDateEnd);

        jPanel11.add(jPanel7);

        jPanel14.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlDateEnd1.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jlDateEnd1);

        jbViewDocs.setText("Mostar documentos");
        jbViewDocs.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel14.add(jbViewDocs);

        jbViewClearValues.setText("Limpiar valores");
        jbViewClearValues.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel14.add(jbViewClearValues);

        jPanel11.add(jPanel14);

        jPanel6.add(jPanel11);

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos para cálculo:"));
        jPanel12.setLayout(new java.awt.GridLayout(3, 1, 0, 2));

        jPanel9.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlDateCommsCalculate.setText("Fecha cálculo:*");
        jlDateCommsCalculate.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel9.add(jlDateCommsCalculate);

        jtfDateCommissions.setText("dd/mm/yyyy");
        jtfDateCommissions.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel9.add(jtfDateCommissions);

        jbDateCommissions.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_date_day.gif"))); // NOI18N
        jbDateCommissions.setToolTipText("Seleccionar fecha final");
        jbDateCommissions.setFocusable(false);
        jbDateCommissions.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel9.add(jbDateCommissions);

        jPanel12.add(jPanel9);

        jPanel15.setLayout(new java.awt.FlowLayout(0, 5, 1));

        jlSalesAgentId.setText("Agente ventas:*");
        jlSalesAgentId.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel15.add(jlSalesAgentId);

        jcbSalesAgentId.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel15.add(jcbSalesAgentId);

        jbSalesAgentId.setText("jButton1");
        jbSalesAgentId.setToolTipText("Seleccionar agente de ventas");
        jbSalesAgentId.setFocusable(false);
        jbSalesAgentId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel15.add(jbSalesAgentId);

        jPanel12.add(jPanel15);

        jPanel13.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlSalesAgentId1.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel13.add(jlSalesAgentId1);

        jbCalculateCommissions.setText("Calcular comisiones");
        jbCalculateCommissions.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel13.add(jbCalculateCommissions);

        jPanel12.add(jPanel13);

        jPanel6.add(jPanel12);

        getContentPane().add(jPanel6, java.awt.BorderLayout.PAGE_START);

        jpOptions.setBorder(javax.swing.BorderFactory.createTitledBorder("Documentos disponibles:"));
        jpOptions.setLayout(new java.awt.BorderLayout());

        jPanel4.setLayout(new java.awt.GridLayout(1, 1, 0, 1));

        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.FlowLayout(0, 3, 0));

        jbUpdateSalesBizPartner.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_edit.gif"))); // NOI18N
        jbUpdateSalesBizPartner.setToolTipText("Modificar agente/supervisor ventas");
        jbUpdateSalesBizPartner.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel2.add(jbUpdateSalesBizPartner);

        jPanel5.add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.FlowLayout(0, 3, 0));

        jtfSeek.setText("Seek");
        jtfSeek.setToolTipText("Texto a buscar [Ctrl+B]");
        jtfSeek.setEnabled(false);
        jtfSeek.setPreferredSize(new java.awt.Dimension(100, 20));
        jPanel1.add(jtfSeek);

        jbSeek.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_seek.gif"))); // NOI18N
        jbSeek.setToolTipText("Buscar");
        jbSeek.setEnabled(false);
        jbSeek.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel1.add(jbSeek);

        jbExportCsv.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_file_csv.gif"))); // NOI18N
        jbExportCsv.setToolTipText("Exportar CSV [Ctrl+E]");
        jbExportCsv.setEnabled(false);
        jbExportCsv.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel1.add(jbExportCsv);

        jbRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_reload.gif"))); // NOI18N
        jbRefresh.setToolTipText("Refrescar [Ctrl+R]");
        jbRefresh.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel1.add(jbRefresh);

        jPanel5.add(jPanel1, java.awt.BorderLayout.EAST);

        jPanel4.add(jPanel5);

        jpOptions.add(jPanel4, java.awt.BorderLayout.NORTH);

        getContentPane().add(jpOptions, java.awt.BorderLayout.CENTER);

        jpControls.setPreferredSize(new java.awt.Dimension(392, 33));
        jpControls.setLayout(new java.awt.FlowLayout(2));

        jbCancel.setText("Cerrar");
        jbCancel.setToolTipText("[Ctrl + Enter]");
        jbCancel.setPreferredSize(new java.awt.Dimension(75, 23));
        jpControls.add(jbCancel);

        getContentPane().add(jpControls, java.awt.BorderLayout.PAGE_END);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-978)/2, (screenSize.height-634)/2, 978, 634);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        int i = 0;
        STableColumnForm[] tableColumns = null;

        mvFields = new Vector<SFormField>();

        moPaneOptions = new STablePane(miClient);
        jpOptions.add(moPaneOptions, BorderLayout.CENTER);

        moFieldDateStart = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, false, jtfDateStart, jlDateInitial);
        moFieldDateEnd = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, false, jtfDateEnd, jlDateEnd);
        moFieldSalesAgentId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbSalesAgentId, jlSalesAgentId);
        moFieldDateCommissions = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, false, jtfDateCommissions, jlDateCommsCalculate);

        mvFields.add(moFieldDateStart);
        mvFields.add(moFieldDateEnd);
        mvFields.add(moFieldSalesAgentId);
        mvFields.add(moFieldDateCommissions);

        moDialogUpdateDpsSalesAgentComms = new SDialogUpdateDpsSalesAgentComms(miClient);

        tableColumns = new STableColumnForm[18];
        tableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "Fecha doc", STableConstants.WIDTH_DATE);
        tableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo doc", STableConstants.WIDTH_CODE_DOC);
        tableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Folio doc", STableConstants.WIDTH_DOC_NUM);
        tableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Asociado negocios", 100);
        tableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Subtotal $", STableConstants.WIDTH_VALUE);
        tableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Ajustes $", STableConstants.WIDTH_EXCHANGE_RATE);
        tableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Subtotal neto $", STableConstants.WIDTH_VALUE);
        tableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Moneda", STableConstants.WIDTH_CURRENCY_KEY);
        tableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "Fecha liquidación", STableConstants.WIDTH_DATE);
        tableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Agente ventas", 100);
        tableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Agente comisión $", STableConstants.WIDTH_VALUE);
        tableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Agente pagos $", STableConstants.WIDTH_VALUE);
        tableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "Agente últ pago", STableConstants.WIDTH_DATE);
        tableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Supervisor ventas", 100);
        tableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Supervisor comisión $", STableConstants.WIDTH_VALUE);
        tableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Supervisor pagos $", STableConstants.WIDTH_VALUE);
        tableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "Supervisor últ pago", STableConstants.WIDTH_DATE);
        tableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Moneda", STableConstants.WIDTH_CURRENCY_KEY);

        for (i = 0; i < tableColumns.length; i++) {
            moPaneOptions.addTableColumn(tableColumns[i]);
        }
        moPaneOptions.createTable(null);

        jbDateStart.addActionListener(this);
        jbDateEnd.addActionListener(this);
        jbViewDocs.addActionListener(this);
        jbViewClearValues.addActionListener(this);
        jbDateCommissions.addActionListener(this);
        jbSalesAgentId.addActionListener(this);
        jbCalculateCommissions.addActionListener(this);
        jbUpdateSalesBizPartner.addActionListener(this);

        jbCancel.addActionListener(this);
        jbSeek.addActionListener(this);
        jbExportCsv.addActionListener(this);
        jbRefresh.addActionListener(this);
        jtfSeek.addActionListener(this);

        SFormUtilities.createActionMap(rootPane, this, "focusSeek", "seek", KeyEvent.VK_B, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "actionExportCsv", "exportCsv", KeyEvent.VK_E, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "actionRefresh", "refresh", KeyEvent.VK_R, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
        }
    }

    private void actionDateStart() {
        miClient.getGuiDatePickerXXX().formReset();
        miClient.getGuiDatePickerXXX().setDate(moFieldDateStart.getDate());
        miClient.getGuiDatePickerXXX().setVisible(true);

        if (miClient.getGuiDatePickerXXX().getFormResult() == SLibConstants.FORM_RESULT_OK) {
            moFieldDateStart.setDate(miClient.getGuiDatePickerXXX().getGuiDate());
            jtfDateStart.requestFocus();
        }
    }

    private void actionDateEnd() {
        miClient.getGuiDatePickerXXX().formReset();
        miClient.getGuiDatePickerXXX().setDate(moFieldDateEnd.getDate());
        miClient.getGuiDatePickerXXX().setVisible(true);

        if (miClient.getGuiDatePickerXXX().getFormResult() == SLibConstants.FORM_RESULT_OK) {
            moFieldDateEnd.setDate(miClient.getGuiDatePickerXXX().getGuiDate());
            jtfDateEnd.requestFocus();
        }
    }

    private void actionViewDocs(final int type) {
        if (jbViewDocs.isEnabled()) {

            if (moFieldDateStart.getDate() == null) {

                miClient.showMsgBoxWarning("Se debe especificar un valor para el campo '" + moFieldDateStart.getFieldName() + "'.");
                moFieldDateStart.getComponent().requestFocus();
            }
            else if (moFieldDateEnd.getDate() == null) {

                miClient.showMsgBoxWarning("Se debe especificar un valor para el campo '" + moFieldDateEnd.getFieldName() + "'.");
                moFieldDateEnd.getComponent().requestFocus();
            }
            else {

                moFilterKey = new Object[] {
                    moFieldDateStart.getDate(),
                    moFieldDateEnd.getDate(),
                    type,
                    SLibTimeUtilities.digestYear(moFieldDateStart.getDate())[0] };

                enabledPeriodDates(false);
                formRefreshOptionPane();
                enabledButtonsViewDocs(false);
            }
        }
    }

    private void actionViewClearValues() {
        if (jbViewClearValues.isEnabled()) {

            enabledPeriodDates(true);
            moPaneOptions.clearTableRows();
            enabledButtonsViewDocs(true);
        }
    }

    private void enabledButtonsViewDocs(final boolean enabled) {
        jbViewDocs.setEnabled(enabled);
        jbViewClearValues.setEnabled(!enabled);
    }

    private void enabledPeriodDates(final boolean enabled) {
        moFieldDateStart.getComponent().setEnabled(enabled);
        jbDateStart.setEnabled(enabled);
        moFieldDateEnd.getComponent().setEnabled(enabled);
        jbDateEnd.setEnabled(enabled);
    }

    private void actionDateCommissions() {
        miClient.getGuiDatePickerXXX().formReset();
        miClient.getGuiDatePickerXXX().setDate(moFieldDateCommissions.getDate());
        miClient.getGuiDatePickerXXX().setVisible(true);

        if (miClient.getGuiDatePickerXXX().getFormResult() == SLibConstants.FORM_RESULT_OK) {
            moFieldDateCommissions.setDate(miClient.getGuiDatePickerXXX().getGuiDate());
            jtfDateCommissions.requestFocus();
        }
    }

    private void actionSalesAgentId() {
        miClient.pickOption(SDataConstants.BPSX_BP_ATT_SAL_AGT, moFieldSalesAgentId, new int[] { moFieldSalesAgentId.getKeyAsIntArray()[0] });
    }

    private void actionCalculateCommisions() {
        Cursor cursor = getCursor();
        Map<String, Object> oMap = null;
        JasperPrint jasperPrint = null;
        JasperViewer jasperViewer = null;
        SMktCommissionCalculate moCommissionsCalculate = null;
        SFormCommissionPayment formCommissionPayment = null;

        // Obtain commisions:

        if (moPaneOptions.getTable() == null ||
               moPaneOptions.getTable().getRowCount() <= 0) {

            miClient.showMsgBoxWarning("No existen documentos de ventas para cálculo de comisiones.");
        }
        else if (moFieldDateCommissions.getDate() == null) {

            miClient.showMsgBoxWarning("Se debe especificar un valor para el campo '" + moFieldDateCommissions.getFieldName() + "'.");
            moFieldDateCommissions.getComponent().requestFocus();
        }
        else if (jcbSalesAgentId.getSelectedIndex() <= 0) {

            miClient.showMsgBoxWarning("Se debe especificar un valor para el campo '" + moFieldSalesAgentId.getFieldName() + "'.");
            moFieldSalesAgentId.getComponent().requestFocus();
        }
        else if (miClient.showMsgBoxConfirm("Se va a ejecutar el cálculo de comisiones.\n" + SLibConstants.MSG_CNF_MSG_CONT) == JOptionPane.YES_OPTION) {

            setCursor(new Cursor(Cursor.WAIT_CURSOR));
            try {
                moCommissionsCalculate = new SMktCommissionCalculate();
                moCommissionsCalculate.setBizPartnerId(((int[]) moFieldSalesAgentId.getFieldValue())[0]);
                moCommissionsCalculate.setDateStart(moFieldDateStart.getDate());
                moCommissionsCalculate.setDateEnd(moFieldDateEnd.getDate());
                moCommissionsCalculate.setDateCommissionsCalcuate(moFieldDateCommissions.getDate());
                moCommissionsCalculate.read(miClient.getSession(), null);

                formCommissionPayment = new SFormCommissionPayment(miClient.getSession().getClient(), "Pago de comisiones", SLibConstants.UNDEFINED);
                formCommissionPayment.setRegistry(moCommissionsCalculate);
                formCommissionPayment.setVisible(true);

                if (formCommissionPayment.getFormResult() == SGuiConsts.FORM_RESULT_OK) {

                    moCommissionsCalculate = (SMktCommissionCalculate) formCommissionPayment.getRegistry();
                    moCommissionsCalculate.save(miClient.getSession());
                    if (moCommissionsCalculate.getQueryResultId() == SDbConsts.SAVE_OK) {
                        miClient.showMsgBoxInformation("El pago de comisiones se guardo con éxito.");
                    }

                    if (formCommissionPayment.isPrintToSave()) {
                        try {
                            oMap = miClient.createReportParams();

                            oMap.put("tDateStart", moFieldDateStart.getDate());
                            oMap.put("tDateEnd", moFieldDateEnd.getDate());
                            oMap.put("sSqlWherePeriodCom", " AND c.dt_comms BETWEEN '" + SLibUtils.DbmsDateFormatDate.format(moFieldDateStart.getDate()) + "' AND '" + SLibUtils.DbmsDateFormatDate.format(moFieldDateEnd.getDate()) + "' ");
                            oMap.put("nFidCtDps", SDataConstantsSys.TRNS_CT_DPS_SAL);
                            oMap.put("nFidClDps", SDataConstantsSys.TRNU_TP_DPS_SAL_INV[1]);
                            oMap.put("nFidTpDps", SDataConstantsSys.TRNU_TP_DPS_SAL_INV[2]);
                            oMap.put("nFidStDps", SDataConstantsSys.TRNS_ST_DPS_EMITED);
                            oMap.put("nFidValDpsId", SDataConstantsSys.TRNS_ST_DPS_VAL_EFF);
                            oMap.put("nFidCtBpId", SDataConstantsSys.BPSS_CT_BP_CUS);
                            oMap.put("nSalesAgentId", ((int[]) moFieldSalesAgentId.getFieldValue())[0]);
                            oMap.put("sSalesAgent", jcbSalesAgentId.getSelectedItem().toString());
                            oMap.put("sCompanyBranch", "(TODAS)");
                            oMap.put("sSqlWhereCompanyBranch", "");
                            oMap.put("sSqlHaving", "");
                            oMap.put("sSqlInnerLeftPayment", " INNER JOIN mkt_comms_pay AS p ON p.fk_sal_agt = c.id_sal_agt AND p.b_del = 0 " +
                                    "INNER JOIN mkt_comms_pay_ety AS pe ON p.id_pay = pe.id_pay AND pe.fk_year = d.id_year " +
                                    "AND pe.fk_doc = d.id_doc AND pe.fk_ety = de.id_ety AND pe.fk_sal_agt = c.id_sal_agt ");
                            oMap.put("sSqlWherePayment", " AND pe.id_pay = " + moCommissionsCalculate.getCommissionPayment().getPkPaymentId() + " ");

                            jasperPrint = SDataUtilities.fillReport(miClient, SDataConstantsSys.REP_TRN_COMMS_DPS, oMap);
                            jasperViewer = new JasperViewer(jasperPrint, false);
                            jasperViewer.setTitle("Reporte de comisiones pagadas");
                            jasperViewer.setVisible(true);
                        }
                        catch(Exception e) {
                            SLibUtilities.renderException(this, e);
                        }
                    }
                    miClient.getSession().notifySuscriptors(SDataConstants.MKT_COMMS);
                }

                formRefreshOptionPane();
            }
            catch (Exception e) {
                SLibUtilities.printOutException(this, e);
                miClient.showMsgBoxWarning("Error: " + e);
            }

            setCursor(cursor);
        }
    }

    private void actionUpdateSalesBizPartner() {
        if (moPaneOptions.getTable() == null ||
                moPaneOptions.getTable().getRowCount() <= 0) {
            miClient.showMsgBoxInformation(SLibConstants.MSG_ERR_GUI_ROW_UNDEF);
        }
        else {
            moDialogUpdateDpsSalesAgentComms.formReset();
            moDialogUpdateDpsSalesAgentComms.setValue(SDataConstants.TRN_DPS, moPaneOptions.getSelectedTableRow().getPrimaryKey());
            moDialogUpdateDpsSalesAgentComms.setFormVisible(true);

            if (moDialogUpdateDpsSalesAgentComms.getFormResult() == SLibConstants.FORM_RESULT_OK) {
                formRefreshOptionPane();
            }
        }
    }

    private void actionOk() {
        if (moPaneOptions.getSelectedTableRow() == null) {
            miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_UTIL_UNKNOWN_OPTION);
            moPaneOptions.getTable().requestFocus();
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_OK;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbCalculateCommissions;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbDateCommissions;
    private javax.swing.JButton jbDateEnd;
    private javax.swing.JButton jbDateStart;
    private javax.swing.JButton jbExportCsv;
    private javax.swing.JButton jbRefresh;
    private javax.swing.JButton jbSalesAgentId;
    private javax.swing.JButton jbSeek;
    private javax.swing.JButton jbUpdateSalesBizPartner;
    private javax.swing.JButton jbViewClearValues;
    private javax.swing.JButton jbViewDocs;
    private javax.swing.JComboBox jcbSalesAgentId;
    private javax.swing.JLabel jlDateCommsCalculate;
    private javax.swing.JLabel jlDateEnd;
    private javax.swing.JLabel jlDateEnd1;
    private javax.swing.JLabel jlDateInitial;
    private javax.swing.JLabel jlSalesAgentId;
    private javax.swing.JLabel jlSalesAgentId1;
    private javax.swing.JPanel jpControls;
    private javax.swing.JPanel jpOptions;
    private javax.swing.JFormattedTextField jtfDateCommissions;
    private javax.swing.JFormattedTextField jtfDateEnd;
    private javax.swing.JFormattedTextField jtfDateStart;
    private javax.swing.JTextField jtfSeek;
    // End of variables declaration//GEN-END:variables

    public void focusSeek() {
        if (jtfSeek.isEnabled()) {
            jtfSeek.requestFocus();
        }
    }

    public void actionSeek() {
        if (jbSeek.isEnabled()) {
            STableUtilities.actionSeek(miClient, moPaneOptions, jtfSeek.getText().trim());
        }
    }

    public void actionExportCsv() {
        if (jbExportCsv.isEnabled()) {
            STableUtilities.actionExportCsv(miClient, moPaneOptions, getTitle());
        }
    }

    public void actionRefresh() {
        if (!jbViewDocs.isEnabled()) {
            formRefreshOptionPane();
        }
    }

    @Override
    @SuppressWarnings("unchecked")
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mbFirstTime = true;
        moFilterKey = null;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        moPaneOptions.clearTableRows();
        enabledPeriodDates(true);
        enabledButtonsViewDocs(true);
        moFieldDateStart.setFieldValue(SLibTimeUtilities.getBeginOfMonth(miClient.getSessionXXX().getWorkingDate()));
        moFieldDateEnd.setFieldValue(SLibTimeUtilities.getEndOfMonth(miClient.getSessionXXX().getWorkingDate()));
        moFieldDateCommissions.setFieldValue(miClient.getSession().getCurrentDate());
        SFormUtilities.populateComboBox(miClient, jcbSalesAgentId, SDataConstants.BPSX_BP_ATT_SAL_AGT);

        moFieldDateStart.getComponent().requestFocus();
    }

    @Override
    public void formRefreshOptionPane() {
        Cursor cursor = getCursor();
        setCursor(new Cursor(Cursor.WAIT_CURSOR));
        
        Vector<STableRow> vTableRows = SDataReadTableRows.getTableRows(miClient, mnOptionType, moFilterKey);

        jtfSeek.setText("");
        jtfSeek.setEnabled(false);
        jbSeek.setEnabled(false);
        jbExportCsv.setEnabled(false);

        moPaneOptions.createTable();
        moPaneOptions.clearTableRows();

        for (int i = 0; i < vTableRows.size(); i++) {
            moPaneOptions.addTableRow(vTableRows.get(i));
        }
        moPaneOptions.renderTableRows();
        moPaneOptions.setTableRowSelection(0);

        if (moPaneOptions.getTableGuiRowCount() > 0) {
            jtfSeek.setEnabled(true);
            jbSeek.setEnabled(true);
            jbExportCsv.setEnabled(true);
        }

        moPaneOptions.getTable().addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(java.awt.event.KeyEvent evt) {
                if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                    evt.consume();
                    actionOk();
                }
            }
        });

        setCursor(cursor);
    }

    @Override
    public int getOptionType() {
        return mnOptionType;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setFilterKey(Object filterKey) {
        moFilterKey = filterKey;

        // Dates values:

        moFieldDateStart.setFieldValue(((Object[]) moFilterKey)[0]);
        moFieldDateEnd.setFieldValue(((Object[]) moFilterKey)[1]);
    }

    @Override
    public void setSelectedPrimaryKey(Object pk) {
        moPaneOptions.renderTableRows();

        for (int i = 0; i < moPaneOptions.getTableGuiRowCount(); i++) {
            if (SLibUtilities.compareKeys(pk, moPaneOptions.getTableModel().getTableRow(i).getPrimaryKey())) {
                moPaneOptions.setTableRowSelection(i);
                break;
            }
        }
    }

    @Override
    public java.lang.Object getSelectedPrimaryKey() {
        Object pk = null;

        if (moPaneOptions.getSelectedTableRow() != null) {
            pk = moPaneOptions.getSelectedTableRow().getPrimaryKey();
        }

        return pk;
    }

    @Override
    public erp.lib.table.STableRow getSelectedOption() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbSeek) {
                actionSeek();
            }
            else if (button == jbExportCsv) {
                actionExportCsv();
            }
            else if (button == jbRefresh) {
                actionRefresh();
            }
            else if (button == jbDateStart) {
                actionDateStart();
            }
            else if (button == jbDateEnd) {
                actionDateEnd();
            }
            else if (button == jbViewDocs) {
                actionViewDocs(SDataConstants.MKTX_COMMS_ALL);
            }
            else if (button == jbViewClearValues) {
                actionViewClearValues();
            }
            else if (button == jbDateCommissions) {
                actionDateCommissions();
            }
            else if (button == jbSalesAgentId) {
                actionSalesAgentId();
            }
            else if (button == jbCalculateCommissions) {
                actionCalculateCommisions();
            }
            else if (button == jbUpdateSalesBizPartner) {
                actionUpdateSalesBizPartner();
            }
        }
        else if (e.getSource() instanceof javax.swing.JTextField) {
            JTextField textField = (JTextField) e.getSource();

            if (textField == jtfSeek) {
                actionSeek();
            }
        }
    }
}
