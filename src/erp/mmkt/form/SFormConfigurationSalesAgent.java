/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SFormConfigurationSalesAgent.java
 *
 * Created on 11/10/2010
 */

package erp.mmkt.form;

import erp.data.SDataConstants;
import erp.lib.SLibConstants;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.mmkt.data.SDataConfigurationSalesAgent;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;

/**
 *
 * @author Néstor Ávalos, Sergio Flores
 */
public class SFormConfigurationSalesAgent extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mmkt.data.SDataConfigurationSalesAgent moConfigurationSalesAgent;
    private erp.lib.form.SFormField moFieldPkSalesAgentId;
    private erp.lib.form.SFormField moFieldFkSalesAgentTypeId;
    private erp.lib.form.SFormField moFieldIsDeleted;

    /** Creates new form SFormElement */
    public SFormConfigurationSalesAgent(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        mnFormType = SDataConstants.MKT_CFG_SAL_AGT;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jbOK = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jlPkSalesAgentId = new javax.swing.JLabel();
        jcbPkSalesAgentId = new javax.swing.JComboBox<SFormComponentItem>();
        jbPkSalesAgentId = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jlFkSalesAgentTypeId = new javax.swing.JLabel();
        jcbFkSalesAgentTypeId = new javax.swing.JComboBox<SFormComponentItem>();
        jbFkSalesAgentTypeId = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jckIsDeleted = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Configuración agente de ventas");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setPreferredSize(new java.awt.Dimension(400, 33));
        jPanel1.setLayout(new java.awt.FlowLayout(2));

        jbOK.setText("Aceptar");
        jbOK.setToolTipText("[Ctrl + Enter]");
        jbOK.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jbOK);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jPanel1.add(jbCancel);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel2.setLayout(new java.awt.GridLayout(5, 1));

        jPanel9.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlPkSalesAgentId.setForeground(java.awt.Color.blue);
        jlPkSalesAgentId.setText("Agente ventas: *");
        jlPkSalesAgentId.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel9.add(jlPkSalesAgentId);

        jcbPkSalesAgentId.setPreferredSize(new java.awt.Dimension(325, 23));
        jPanel9.add(jcbPkSalesAgentId);

        jbPkSalesAgentId.setText("jButton1");
        jbPkSalesAgentId.setToolTipText("Seleccionar agente de ventas");
        jbPkSalesAgentId.setFocusable(false);
        jbPkSalesAgentId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel9.add(jbPkSalesAgentId);

        jPanel2.add(jPanel9);

        jPanel10.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlFkSalesAgentTypeId.setText("Tipo agente ventas: *");
        jlFkSalesAgentTypeId.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel10.add(jlFkSalesAgentTypeId);

        jcbFkSalesAgentTypeId.setPreferredSize(new java.awt.Dimension(325, 23));
        jPanel10.add(jcbFkSalesAgentTypeId);

        jbFkSalesAgentTypeId.setText("jButton1");
        jbFkSalesAgentTypeId.setToolTipText("Seleccionar tipo agente de ventas");
        jbFkSalesAgentTypeId.setFocusable(false);
        jbFkSalesAgentTypeId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel10.add(jbFkSalesAgentTypeId);

        jPanel2.add(jPanel10);

        jPanel3.setLayout(new java.awt.FlowLayout(0, 0, 0));

        jckIsDeleted.setText("Registro eliminado");
        jckIsDeleted.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel3.add(jckIsDeleted);

        jPanel2.add(jPanel3);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-528)/2, (screenSize.height-236)/2, 528, 236);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        mvFields = new Vector<>();

        moFieldPkSalesAgentId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbPkSalesAgentId, jlPkSalesAgentId);
        moFieldPkSalesAgentId.setPickerButton(jbPkSalesAgentId);
        moFieldFkSalesAgentTypeId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkSalesAgentTypeId, jlFkSalesAgentTypeId);
        moFieldFkSalesAgentTypeId.setPickerButton(jbFkSalesAgentTypeId);
        moFieldIsDeleted = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsDeleted);

        mvFields.add(moFieldPkSalesAgentId);
        mvFields.add(moFieldFkSalesAgentTypeId);
        mvFields.add(moFieldIsDeleted);

        jbOK.addActionListener(this);
        jbCancel.addActionListener(this);
        jbPkSalesAgentId.addActionListener(this);
        jbFkSalesAgentTypeId.addActionListener(this);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            if (jcbPkSalesAgentId.isEnabled()) jcbPkSalesAgentId.requestFocus(); else jcbFkSalesAgentTypeId.requestFocus();
        }
    }

    private void actionFkSalesAgentTypeId() {
        miClient.pickOption(SDataConstants.MKTU_TP_SAL_AGT, moFieldFkSalesAgentTypeId, new int[] { moFieldFkSalesAgentTypeId.getKeyAsIntArray()[0] });
    }

    private void actionPkSalesAgentId() {
        miClient.pickOption(SDataConstants.BPSX_BP_ATT_SAL_AGT, moFieldPkSalesAgentId, new int[] { moFieldPkSalesAgentId.getKeyAsIntArray()[0] });
    }

    private void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbFkSalesAgentTypeId;
    private javax.swing.JButton jbOK;
    private javax.swing.JButton jbPkSalesAgentId;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkSalesAgentTypeId;
    private javax.swing.JComboBox<SFormComponentItem> jcbPkSalesAgentId;
    private javax.swing.JCheckBox jckIsDeleted;
    private javax.swing.JLabel jlFkSalesAgentTypeId;
    private javax.swing.JLabel jlPkSalesAgentId;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moConfigurationSalesAgent = null;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        jcbPkSalesAgentId.setEnabled(true);
        jbPkSalesAgentId.setEnabled(true);
        jckIsDeleted.setEnabled(false);
    }

    @Override
    public void formRefreshCatalogues() {
        SFormUtilities.populateComboBox(miClient, jcbFkSalesAgentTypeId, SDataConstants.MKTU_TP_SAL_AGT);
        SFormUtilities.populateComboBox(miClient, jcbPkSalesAgentId, SDataConstants.BPSX_BP_ATT_SAL_AGT);
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        moConfigurationSalesAgent = (SDataConfigurationSalesAgent) registry;

        moFieldPkSalesAgentId.setFieldValue(new int[] { moConfigurationSalesAgent.getPkSalesAgentId() });
        moFieldFkSalesAgentTypeId.setFieldValue(new int[] { moConfigurationSalesAgent.getFkSalesAgentTypeId() });
        moFieldIsDeleted.setFieldValue(moConfigurationSalesAgent.getIsDeleted());

        jcbPkSalesAgentId.setEnabled(false);
        jbPkSalesAgentId.setEnabled(false);
        jckIsDeleted.setEnabled(true);
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        if (moConfigurationSalesAgent == null) {
            moConfigurationSalesAgent = new SDataConfigurationSalesAgent();
            moConfigurationSalesAgent.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
        }
        else {
            moConfigurationSalesAgent.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
        }

        moConfigurationSalesAgent.setPkSalesAgentId(moFieldPkSalesAgentId.getKeyAsIntArray()[0]);
        moConfigurationSalesAgent.setFkSalesAgentTypeId(moFieldFkSalesAgentTypeId.getKeyAsIntArray()[0]);
        moConfigurationSalesAgent.setIsDeleted(moFieldIsDeleted.getBoolean());
        
        moConfigurationSalesAgent.setIsRegistryEdited(true);

        return moConfigurationSalesAgent;
    }

    @Override
    public void setValue(int type, Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOK) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbPkSalesAgentId) {
                actionPkSalesAgentId();
            }
            else if (button == jbFkSalesAgentTypeId) {
                actionFkSalesAgentTypeId();
            }
        }
    }
}
