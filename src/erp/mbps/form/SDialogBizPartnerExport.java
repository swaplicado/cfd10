/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SDialogBizPartnerExport.java
 *
 * Created on 27/01/2012, 01:50:32 PM
 */

package erp.mbps.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.data.SDataRegistry;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.mbps.data.SDataBizPartner;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JButton;
import javax.swing.JLabel;

/**
 *
 * @author Juan Barajas
 */
public class SDialogBizPartnerExport extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private int mnFormResult;
    private boolean mbFirstTime;
    private int mnBizPartnerCategoryId;
    private int mnBizPartnerCategory;
    private int[] mnBizPartnerId;
    private erp.mbps.data.SDataBizPartner moBizPartner;
    private erp.lib.form.SFormField moFieldFkBizPartnerCategoryId;

    /** Creates new form SDialogBizPartnerExport */
    public SDialogBizPartnerExport(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;

        initComponents();
        initComponentsExtra();
    }

    private void initComponentsExtra() {
        mvFields = new Vector<SFormField>();

        moFieldFkBizPartnerCategoryId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkBizPartnerCategoryId, jlFkBizPartnerCategoryId);

        mvFields.add(moFieldFkBizPartnerCategoryId);

        jbExport.addActionListener(this);
        jbExit.addActionListener(this);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionExport(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "export", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction action = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionClose(); }
        };

        SFormUtilities.putActionMap(getRootPane(), action, "exit", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            jcbFkBizPartnerCategoryId.requestFocus();
        }
    }

    private void actionExport() {
        erp.lib.form.SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            switch(moFieldFkBizPartnerCategoryId.getKeyAsIntArray()[0]) {
                case SDataConstantsSys.BPSS_CT_BP_SUP:
                    mnBizPartnerCategory = SDataConstants.BPSX_BP_SUP;
                    break;
                case SDataConstantsSys.BPSS_CT_BP_CUS:
                    mnBizPartnerCategory = SDataConstants.BPSX_BP_CUS;
                    break;
                case SDataConstantsSys.BPSS_CT_BP_DBR:
                    mnBizPartnerCategory = SDataConstants.BPSX_BP_DBR;
                    break;
                case SDataConstantsSys.BPSS_CT_BP_CDR:
                    mnBizPartnerCategory = SDataConstants.BPSX_BP_CDR;
                    break;
                default:
                    mnBizPartnerCategory = SDataConstants.UNDEFINED;
                    break;
            }
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionClose() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlFkBizPartnerCategoryId = new javax.swing.JLabel();
        jcbFkBizPartnerCategoryId = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jbExport = new javax.swing.JButton();
        jbExit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Exportar a otra categoría");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.GridLayout(2, 0));

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Configuración del asociado:"));
        jPanel4.setLayout(new java.awt.FlowLayout(0));

        jlFkBizPartnerCategoryId.setText("Categoría para el asociado:");
        jlFkBizPartnerCategoryId.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel4.add(jlFkBizPartnerCategoryId);

        jcbFkBizPartnerCategoryId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "CLIENTE", "PROVEEDOR", "DEUDOR DIVERSO", "ACREEDOR DIVERSO" }));
        jcbFkBizPartnerCategoryId.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel4.add(jcbFkBizPartnerCategoryId);

        jPanel3.add(jPanel4);

        jPanel1.add(jPanel3, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel2.setPreferredSize(new java.awt.Dimension(392, 33));
        jPanel2.setLayout(new java.awt.FlowLayout(2));

        jbExport.setText("Exportar");
        jbExport.setToolTipText("[Ctrl + Enter]");
        jPanel2.add(jbExport);

        jbExit.setText("Cerrar");
        jbExit.setToolTipText("[Escape]");
        jbExit.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel2.add(jbExit);

        getContentPane().add(jPanel2, java.awt.BorderLayout.SOUTH);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-416)/2, (screenSize.height-246)/2, 416, 246);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JButton jbExit;
    private javax.swing.JButton jbExport;
    private javax.swing.JComboBox jcbFkBizPartnerCategoryId;
    private javax.swing.JLabel jlFkBizPartnerCategoryId;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnBizPartnerCategoryId = SLibConstants.UNDEFINED;
        mnBizPartnerCategory = SDataConstants.UNDEFINED;
        mbFirstTime = true;
    }

    @Override
    public void formRefreshCatalogues() {
        SFormUtilities.populateComboBox(miClient, jcbFkBizPartnerCategoryId, SDataConstants.BPSS_CT_BP);
    }

    @Override
    public SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        moBizPartner = (SDataBizPartner) SDataUtilities.readRegistry(miClient, SDataConstants.BPSU_BP, mnBizPartnerId, SLibConstants.EXEC_MODE_VERBOSE);

        if (!validation.getIsError()) {
            if (moFieldFkBizPartnerCategoryId.getKeyAsIntArray()[0] == SLibConstants.UNDEFINED) {
                validation.setMessage("Se debe seleccionar una categoría.");
                jcbFkBizPartnerCategoryId.requestFocus();
            }
            else if (moFieldFkBizPartnerCategoryId.getKeyAsIntArray()[0] == mnBizPartnerCategoryId) {
                validation.setMessage("El asociado de negocios no se puede exportar a la misma categoría.");
            }
            else {
                switch(moFieldFkBizPartnerCategoryId.getKeyAsIntArray()[0]) {
                    case SDataConstantsSys.BPSS_CT_BP_CUS:
                        if (moBizPartner.getIsCustomer()) {
                            validation.setMessage("El asociado de negocios ya existe en la categoría cliente.");
                        }
                        break;
                    case SDataConstantsSys.BPSS_CT_BP_SUP:
                        if (moBizPartner.getIsSupplier()) {
                            validation.setMessage("El asociado de negocios ya existe en la categoría proveedor.");
                        }
                        break;
                    case SDataConstantsSys.BPSS_CT_BP_DBR:
                        if (moBizPartner.getIsDebtor()) {
                            validation.setMessage("El asociado de negocios ya existe en la categoría deudor diverso.");
                        }
                        break;
                    case SDataConstantsSys.BPSS_CT_BP_CDR:
                        if (moBizPartner.getIsCreditor()) {
                            validation.setMessage("El asociado de negocios ya existe en la categoría acreedor diverso.");
                        }
                        break;
                    default:
                }
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(true);
    }

    @Override
    public int getFormStatus() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(SDataRegistry registry) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public SDataRegistry getRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setValue(int type, Object value) {
        mnBizPartnerCategoryId = type;
        mnBizPartnerId = ((int[]) value);
    }

    @Override
    public Object getValue(int type) {
        Object o = null;

        o = mnBizPartnerCategory;

        return o;
    }

    @Override
    public JLabel getTimeoutLabel() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void actionPerformed(ActionEvent evt) {
        if (evt.getSource() instanceof javax.swing.JButton) {
            JButton button = (JButton) evt.getSource();

            if (button == jbExport) {
                actionExport();
            }
            else if (button == jbExit) {
                actionClose();
            }
            }
    }

}
