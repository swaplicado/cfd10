/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SFormCtrEntry.java
 *
 * Created on 22/03/2011, 04:06:16 PM
 */

package erp.mtrn.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.mtrn.data.SDataCtrEntry;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;

/**
 *
 * @author Alfonso Flores
 */
public class SFormCtrEntry extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mtrn.data.SDataCtrEntry moCtrEntry;
    private erp.lib.form.SFormField moFieldFkDpsTypeId;
    private erp.lib.form.SFormField moFieldDate;
    private erp.lib.form.SFormField moFieldNumberSeries;
    private erp.lib.form.SFormField moFieldNumber;
    private erp.lib.form.SFormField moFieldNumberSeriesDps;
    private erp.lib.form.SFormField moFieldNumberDps;
    private erp.lib.form.SFormField moFieldFkCurrencyId;
    private erp.lib.form.SFormField moFieldExchangeRate;
    private erp.lib.form.SFormField moFieldTotalCy;
    private erp.lib.form.SFormField moFieldTotal_r;
    private erp.lib.form.SFormField moFieldIsDeleted;

    /** Creates new form SFormCtrEntry */
    public SFormCtrEntry(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        mnFormType = SDataConstants.TRN_CTR_ETY;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlFkDpsTypeId = new javax.swing.JLabel();
        jcbFkDpsTypeId = new javax.swing.JComboBox();
        jbFkDpsTypeId = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jlDate = new javax.swing.JLabel();
        jftDate = new javax.swing.JFormattedTextField();
        jbDate = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jlNumberSeries = new javax.swing.JLabel();
        jtfNumberSeries = new javax.swing.JTextField();
        jtfNumber = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jlNumberSeriesDps = new javax.swing.JLabel();
        jtfNumberSeriesDps = new javax.swing.JTextField();
        jtfNumberDps = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        jlFkCurrencyId = new javax.swing.JLabel();
        jcbFkCurrencyId = new javax.swing.JComboBox();
        jbFkCurrencyId = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jlExchangeRate = new javax.swing.JLabel();
        jtfExchangeRate = new javax.swing.JTextField();
        jPanel10 = new javax.swing.JPanel();
        jlTotalCy = new javax.swing.JLabel();
        jtfTotalCy = new javax.swing.JTextField();
        jtfTotal_r = new javax.swing.JTextField();
        jtfErpCurrency = new javax.swing.JTextField();
        jckIsDeleted = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Partida de contrarrecibo");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setPreferredSize(new java.awt.Dimension(392, 33));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jPanel1.add(jbCancel);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.GridLayout(8, 1, 0, 1));

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFkDpsTypeId.setText("Tipo de documento: *");
        jlFkDpsTypeId.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel4.add(jlFkDpsTypeId);

        jcbFkDpsTypeId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbFkDpsTypeId.setPreferredSize(new java.awt.Dimension(218, 23));
        jcbFkDpsTypeId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbFkDpsTypeIdItemStateChanged(evt);
            }
        });
        jPanel4.add(jcbFkDpsTypeId);

        jbFkDpsTypeId.setText("jButton1");
        jbFkDpsTypeId.setToolTipText("Seleccionar tipo de documento");
        jbFkDpsTypeId.setFocusable(false);
        jbFkDpsTypeId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel4.add(jbFkDpsTypeId);

        jPanel3.add(jPanel4);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDate.setText("Fecha: *");
        jlDate.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel5.add(jlDate);

        jftDate.setText("dd/mm/yyyy");
        jftDate.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel5.add(jftDate);

        jbDate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_date_day.gif"))); // NOI18N
        jbDate.setToolTipText("Seleccionar fecha");
        jbDate.setFocusable(false);
        jbDate.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel5.add(jbDate);

        jPanel3.add(jPanel5);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNumberSeries.setText("Serie y folio: *");
        jlNumberSeries.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel6.add(jlNumberSeries);

        jtfNumberSeries.setText("NUM SER");
        jtfNumberSeries.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel6.add(jtfNumberSeries);

        jtfNumber.setText("NUMBER");
        jtfNumber.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jtfNumber);

        jPanel3.add(jPanel6);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNumberSeriesDps.setText("Serie y folio factura:");
        jlNumberSeriesDps.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel7.add(jlNumberSeriesDps);

        jtfNumberSeriesDps.setText("NUM SER DPS");
        jtfNumberSeriesDps.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel7.add(jtfNumberSeriesDps);

        jtfNumberDps.setText("NUMBER DPS");
        jtfNumberDps.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jtfNumberDps);

        jPanel3.add(jPanel7);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFkCurrencyId.setText("Moneda documento: *");
        jlFkCurrencyId.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel8.add(jlFkCurrencyId);

        jcbFkCurrencyId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbFkCurrencyId.setPreferredSize(new java.awt.Dimension(218, 23));
        jcbFkCurrencyId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbFkCurrencyIdItemStateChanged(evt);
            }
        });
        jPanel8.add(jcbFkCurrencyId);

        jbFkCurrencyId.setText("jButton3");
        jbFkCurrencyId.setToolTipText("Seleccionar moneda");
        jbFkCurrencyId.setFocusable(false);
        jbFkCurrencyId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel8.add(jbFkCurrencyId);

        jPanel3.add(jPanel8);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlExchangeRate.setText("Tipo de cambio: *");
        jlExchangeRate.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel9.add(jlExchangeRate);

        jtfExchangeRate.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfExchangeRate.setText("0.0000");
        jtfExchangeRate.setPreferredSize(new java.awt.Dimension(100, 23));
        jtfExchangeRate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfExchangeRateFocusLost(evt);
            }
        });
        jPanel9.add(jtfExchangeRate);

        jPanel3.add(jPanel9);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTotalCy.setText("Total documento: *");
        jlTotalCy.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel10.add(jlTotalCy);

        jtfTotalCy.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfTotalCy.setText("1,000,000,000.00");
        jtfTotalCy.setPreferredSize(new java.awt.Dimension(100, 23));
        jtfTotalCy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfTotalCyFocusLost(evt);
            }
        });
        jPanel10.add(jtfTotalCy);

        jtfTotal_r.setEditable(false);
        jtfTotal_r.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfTotal_r.setText("1,000,000,000.00");
        jtfTotal_r.setFocusable(false);
        jtfTotal_r.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jtfTotal_r);

        jtfErpCurrency.setEditable(false);
        jtfErpCurrency.setText("CUR");
        jtfErpCurrency.setFocusable(false);
        jtfErpCurrency.setPreferredSize(new java.awt.Dimension(36, 23));
        jPanel10.add(jtfErpCurrency);

        jPanel3.add(jPanel10);

        jckIsDeleted.setText("Registro eliminado");
        jPanel3.add(jckIsDeleted);

        jPanel2.add(jPanel3, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-400)/2, (screenSize.height-300)/2, 400, 300);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowsActivated();
    }//GEN-LAST:event_formWindowActivated

    private void jcbFkDpsTypeIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbFkDpsTypeIdItemStateChanged
        if (!mbResetingForm) {
            if (evt.getStateChange() == ItemEvent.SELECTED) {
                itemStateChangedFkDpsTypeId();
            }
        }
    }//GEN-LAST:event_jcbFkDpsTypeIdItemStateChanged

    private void jcbFkCurrencyIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbFkCurrencyIdItemStateChanged
        if (!mbResetingForm) {
            if (evt.getStateChange() == ItemEvent.SELECTED) {
                itemStateChangedFkCurrencyId();
            }
        }
    }//GEN-LAST:event_jcbFkCurrencyIdItemStateChanged

    private void jtfExchangeRateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfExchangeRateFocusLost
        focusLostExchangeRate();
    }//GEN-LAST:event_jtfExchangeRateFocusLost

    private void jtfTotalCyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfTotalCyFocusLost
        focusLostTotalCy();
    }//GEN-LAST:event_jtfTotalCyFocusLost

    private void initComponentsExtra() {
        mvFields = new Vector<SFormField>();

        moFieldFkDpsTypeId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkDpsTypeId, jlFkDpsTypeId);
        moFieldDate = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jftDate, jlDate);
        moFieldDate.setPickerButton(jbDate);
        moFieldNumberSeries = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, false, jtfNumberSeries, jlNumberSeries);
        moFieldNumberSeries.setLengthMax(15);
        moFieldNumber = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtfNumber, jlNumberSeries);
        moFieldNumber.setLengthMax(15);
        moFieldNumberSeriesDps = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, false, jtfNumberSeriesDps, jlNumberSeriesDps);
        moFieldNumberSeriesDps.setLengthMax(15);
        moFieldNumberDps = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, false, jtfNumberDps, jlNumberSeriesDps);
        moFieldNumberDps.setLengthMax(15);
        moFieldFkCurrencyId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkCurrencyId, jlFkCurrencyId);
        moFieldFkCurrencyId.setPickerButton(jbFkCurrencyId);
        moFieldExchangeRate = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfExchangeRate, jlExchangeRate);
        moFieldExchangeRate.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsExchangeRateFormat());
        moFieldTotalCy = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfTotalCy, jlTotalCy);
        moFieldTotalCy.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsValueFormat());
        moFieldTotal_r = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfTotal_r, jlTotalCy);
        moFieldTotal_r.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsValueFormat());
        moFieldIsDeleted = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, true, jckIsDeleted);

        mvFields.add(moFieldFkDpsTypeId);
        mvFields.add(moFieldDate);
        mvFields.add(moFieldNumberSeries);
        mvFields.add(moFieldNumber);
        mvFields.add(moFieldNumberSeriesDps);
        mvFields.add(moFieldNumberDps);
        mvFields.add(moFieldFkCurrencyId);
        mvFields.add(moFieldExchangeRate);
        mvFields.add(moFieldTotalCy);
        mvFields.add(moFieldTotal_r);
        mvFields.add(moFieldIsDeleted);

        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);
        jbDate.addActionListener(this);
        jbFkDpsTypeId.addActionListener(this);
        jbFkCurrencyId.addActionListener(this);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction action = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), action, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowsActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            jcbFkDpsTypeId.requestFocus();
            jtfErpCurrency.setText(miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getKey());
        }
    }

    public void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    public void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    private void actionDate() {
        miClient.getGuiDatePickerXXX().formReset();
        miClient.getGuiDatePickerXXX().setDate(moFieldDate.getDate());
        miClient.getGuiDatePickerXXX().setVisible(true);

        if (miClient.getGuiDatePickerXXX().getFormResult() == SLibConstants.FORM_RESULT_OK) {
            moFieldDate.setFieldValue(miClient.getGuiDatePickerXXX().getGuiDate());
            jftDate.requestFocus();
        }
    }

    private void actionFkDpsTypeId() {
        miClient.pickOption(SDataConstants.TRNU_TP_DPS, moFieldFkDpsTypeId, null);
    }

    private void actionFkCurrencyId() {
        miClient.pickOption(SDataConstants.CFGU_CUR, moFieldFkCurrencyId, null);
    }

    private void calculateTotal() {
        if (moFieldExchangeRate.getDouble() > 0 && moFieldTotalCy.getDouble() > 0) {
            moFieldTotal_r.setFieldValue(moFieldExchangeRate.getDouble() * moFieldTotalCy.getDouble());
        }
        else {
            moFieldTotal_r.setFieldValue(0d);
        }
    }

    private void focusLostExchangeRate() {
            calculateTotal();
    }

    private void focusLostTotalCy() {
            calculateTotal();
    }

    private void itemStateChangedFkDpsTypeId() {
        if (SLibUtilities.compareKeys(moFieldFkDpsTypeId.getKeyAsIntArray(), SDataConstantsSys.TRNU_TP_DPS_PUR_CN) ||
                SLibUtilities.compareKeys(moFieldFkDpsTypeId.getKeyAsIntArray(), SDataConstantsSys.TRNU_TP_DPS_SAL_CN)) {
            jtfNumberSeriesDps.setEditable(true);
            jtfNumberSeriesDps.setFocusable(true);
            jtfNumberDps.setEditable(true);
            jtfNumberDps.setFocusable(true);
        }
        else {
            jtfNumberSeriesDps.setEditable(false);
            jtfNumberSeriesDps.setFocusable(false);
            jtfNumberDps.setEditable(false);
            jtfNumberDps.setFocusable(false);
        }
    }

    private void itemStateChangedFkCurrencyId() {
        if (moFieldFkCurrencyId.getKeyAsIntArray()[0] == miClient.getSessionXXX().getParamsErp().getFkCurrencyId() ||
                moFieldFkCurrencyId.getKeyAsIntArray()[0] == 0) {
            jtfExchangeRate.setEditable(false);
            jtfExchangeRate.setFocusable(false);

            moFieldExchangeRate.setFieldValue(1d);
        }
        else {
            jtfExchangeRate.setEditable(true);
            jtfExchangeRate.setFocusable(true);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbDate;
    private javax.swing.JButton jbFkCurrencyId;
    private javax.swing.JButton jbFkDpsTypeId;
    private javax.swing.JButton jbOk;
    private javax.swing.JComboBox jcbFkCurrencyId;
    private javax.swing.JComboBox jcbFkDpsTypeId;
    private javax.swing.JCheckBox jckIsDeleted;
    private javax.swing.JFormattedTextField jftDate;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlExchangeRate;
    private javax.swing.JLabel jlFkCurrencyId;
    private javax.swing.JLabel jlFkDpsTypeId;
    private javax.swing.JLabel jlNumberSeries;
    private javax.swing.JLabel jlNumberSeriesDps;
    private javax.swing.JLabel jlTotalCy;
    private javax.swing.JTextField jtfErpCurrency;
    private javax.swing.JTextField jtfExchangeRate;
    private javax.swing.JTextField jtfNumber;
    private javax.swing.JTextField jtfNumberDps;
    private javax.swing.JTextField jtfNumberSeries;
    private javax.swing.JTextField jtfNumberSeriesDps;
    private javax.swing.JTextField jtfTotalCy;
    private javax.swing.JTextField jtfTotal_r;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moCtrEntry = null;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        moFieldDate.setFieldValue(miClient.getSessionXXX().getWorkingDate());
        jtfNumberSeriesDps.setEditable(false);
        jtfNumberSeriesDps.setFocusable(false);
        jtfNumberDps.setEditable(false);
        jtfNumberDps.setFocusable(false);
        jtfExchangeRate.setEditable(false);
        jtfExchangeRate.setFocusable(false);

        moFieldExchangeRate.setFieldValue(1d);

        jckIsDeleted.setEnabled(false);
        mbResetingForm = false;
    }

    @Override
    @SuppressWarnings("unchecked")
    public void formRefreshCatalogues() {
        mbResetingForm = true;
        SFormUtilities.populateComboBox(miClient, jcbFkDpsTypeId, SDataConstants.TRNU_TP_DPS);
        SFormUtilities.populateComboBox(miClient, jcbFkCurrencyId, SDataConstants.CFGU_CUR);
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        if (!validation.getIsError()) {
            if ((SLibUtilities.compareKeys(moFieldFkDpsTypeId.getKeyAsIntArray(), SDataConstantsSys.TRNU_TP_DPS_PUR_CN) ||
                SLibUtilities.compareKeys(moFieldFkDpsTypeId.getKeyAsIntArray(), SDataConstantsSys.TRNU_TP_DPS_SAL_CN)) && moFieldNumberDps.getString().length() == 0) {
                validation.setMessage("Se debe ingresar un folio de documento afectado por la nota de crédito.");
                validation.setComponent(jtfNumberDps);
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        moCtrEntry = (SDataCtrEntry) registry;

        moFieldFkDpsTypeId.setFieldValue(new int[] { moCtrEntry.getFkDpsCategoryId(), moCtrEntry.getFkDpsClassId(), moCtrEntry.getFkDpsTypeId() });
        moFieldDate.setFieldValue(moCtrEntry.getDate());
        moFieldNumberSeries.setFieldValue(moCtrEntry.getNumberSeries());
        moFieldNumber.setFieldValue(moCtrEntry.getNumber());
        moFieldNumberSeriesDps.setFieldValue(moCtrEntry.getNumberSeriesDps());
        moFieldNumberDps.setFieldValue(moCtrEntry.getNumberDps());
        moFieldFkCurrencyId.setFieldValue(new int[] { moCtrEntry.getFkCurrencyId() });
        moFieldExchangeRate.setFieldValue(moCtrEntry.getExchangeRate());
        moFieldTotalCy.setFieldValue(moCtrEntry.getTotalCy());
        moFieldTotal_r.setFieldValue(moCtrEntry.getTotal_r());
        jtfErpCurrency.setText(miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getKey());
        moFieldIsDeleted.setFieldValue(moCtrEntry.getIsDeleted());

        jckIsDeleted.setEnabled(true);
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        if (moCtrEntry == null) {
            moCtrEntry = new SDataCtrEntry();
            moCtrEntry.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
            moCtrEntry.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
        }
        else {
            moCtrEntry.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
        }

        moCtrEntry.setFkDpsCategoryId(moFieldFkDpsTypeId.getKeyAsIntArray()[0]);
        moCtrEntry.setFkDpsClassId(moFieldFkDpsTypeId.getKeyAsIntArray()[1]);
        moCtrEntry.setFkDpsTypeId(moFieldFkDpsTypeId.getKeyAsIntArray()[2]);
        moCtrEntry.setDate(moFieldDate.getDate());
        moCtrEntry.setNumberSeries(moFieldNumberSeries.getString());
        moCtrEntry.setNumber(moFieldNumber.getString());
        moCtrEntry.setNumberSeriesDps(moFieldNumberSeriesDps.getString());
        moCtrEntry.setNumberDps(moFieldNumberDps.getString());
        moCtrEntry.setFkCurrencyId(moFieldFkCurrencyId.getKeyAsIntArray()[0]);
        moCtrEntry.setExchangeRate(moFieldExchangeRate.getDouble());
        moCtrEntry.setTotalCy(moFieldTotalCy.getDouble());
        moCtrEntry.setTotal_r(moFieldTotal_r.getDouble());
        moCtrEntry.setIsDeleted(moFieldIsDeleted.getBoolean());

        return moCtrEntry;
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbDate) {
                actionDate();
            }
            else if (button == jbFkDpsTypeId) {
                actionFkDpsTypeId();
            }
            else if (button == jbFkCurrencyId) {
                actionFkCurrencyId();
            }
        }
    }
}
