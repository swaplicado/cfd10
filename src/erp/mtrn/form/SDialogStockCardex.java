/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mtrn.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibTimeUtilities;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormUtilities;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STableConstants;
import erp.lib.table.STablePane;
import erp.lib.table.STableRowCustom;
import erp.lib.table.STableUtilities;
import erp.mbps.data.SDataBizPartnerBranch;
import erp.mcfg.data.SDataCompanyBranchEntity;
import erp.mitm.data.SDataItem;
import erp.mitm.data.SDataUnit;
import erp.mod.SModConsts;
import erp.mtrn.data.SDataStockLot;
import java.awt.BorderLayout;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.util.Date;
import javax.swing.JButton;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableCellRenderer;
import sa.lib.db.SDbRegistry;

/**
 *
 * @author Sergio Flores
 */
public class SDialogStockCardex extends javax.swing.JDialog implements java.awt.event.ActionListener {

    private static final int COL_IN = 9;
    private static final int COL_OUT = 10;
    private static final int COL_STOCK = 11;

    private boolean mbFirstTime;
    private erp.client.SClientInterface miClient;
    private erp.lib.table.STablePane moPaneStockMoves;

    private int mnParamYear;
    private Date mtParamDateCutOff;
    private int[] manParamWarehouseKey;
    private int mnParamFormMode; // SLibConstants.MODE_QTY o SLibConstants.MODE_QTY_EXT
    private int mnParamMaintUser;
    private erp.mitm.data.SDataItem moParamItem;
    private erp.mitm.data.SDataUnit moParamUnit;
    private erp.mbps.data.SDataBizPartnerBranch moParamCompanyBranch;
    private erp.mcfg.data.SDataCompanyBranchEntity moParamWarehouse;
    private erp.mtrn.data.SDataStockLot moParamStockLot;

    /** Creates new form SDialogAccountingDetail */
    public SDialogStockCardex(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpParams = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jlWarehouse = new javax.swing.JLabel();
        jtfCompanyBranch = new javax.swing.JTextField();
        jtfCompanyBranchCode = new javax.swing.JTextField();
        jtfWarehouse = new javax.swing.JTextField();
        jtfWarehouseCode = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jlItem = new javax.swing.JLabel();
        jtfItemKey = new javax.swing.JTextField();
        jtfItem = new javax.swing.JTextField();
        jPanel15 = new javax.swing.JPanel();
        jlLot = new javax.swing.JLabel();
        jtfLot = new javax.swing.JTextField();
        jtfLotUnitSymbol = new javax.swing.JTextField();
        jlLotDateExpiration = new javax.swing.JLabel();
        jtfLotDateExpiration = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jlDateCutOff = new javax.swing.JLabel();
        jtfDateCutOff = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        jlYear = new javax.swing.JLabel();
        jtfYear = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel16 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jlIn = new javax.swing.JLabel();
        jtfIn = new javax.swing.JTextField();
        jtfInUnitSymbol = new javax.swing.JTextField();
        jPanel12 = new javax.swing.JPanel();
        jlOut = new javax.swing.JLabel();
        jtfOut = new javax.swing.JTextField();
        jtfOutUnitSymbol = new javax.swing.JTextField();
        jPanel13 = new javax.swing.JPanel();
        jlStock = new javax.swing.JLabel();
        jtfStock = new javax.swing.JTextField();
        jtfStockUnitSymbol = new javax.swing.JTextField();
        jpStockMoves = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jtfSeek = new javax.swing.JTextField();
        jbSeek = new javax.swing.JButton();
        jbExportCsv = new javax.swing.JButton();
        jbRefresh = new javax.swing.JButton();
        jpControls = new javax.swing.JPanel();
        jbClose = new javax.swing.JButton();
        jtfMaintUser = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Tarjeta auxiliar de almacén");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpParams.setLayout(new java.awt.BorderLayout(5, 0));

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Almacén, ítem y lote:"));
        jPanel4.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWarehouse.setText("Almacén:");
        jlWarehouse.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel8.add(jlWarehouse);

        jtfCompanyBranch.setBackground(java.awt.Color.lightGray);
        jtfCompanyBranch.setEditable(false);
        jtfCompanyBranch.setText("TEXT");
        jtfCompanyBranch.setFocusable(false);
        jtfCompanyBranch.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jtfCompanyBranch);

        jtfCompanyBranchCode.setBackground(java.awt.Color.lightGray);
        jtfCompanyBranchCode.setEditable(false);
        jtfCompanyBranchCode.setText("CODE");
        jtfCompanyBranchCode.setFocusable(false);
        jtfCompanyBranchCode.setPreferredSize(new java.awt.Dimension(55, 23));
        jPanel8.add(jtfCompanyBranchCode);

        jtfWarehouse.setBackground(java.awt.Color.lightGray);
        jtfWarehouse.setEditable(false);
        jtfWarehouse.setText("TEXT");
        jtfWarehouse.setFocusable(false);
        jtfWarehouse.setPreferredSize(new java.awt.Dimension(155, 23));
        jPanel8.add(jtfWarehouse);

        jtfWarehouseCode.setBackground(java.awt.Color.lightGray);
        jtfWarehouseCode.setEditable(false);
        jtfWarehouseCode.setText("CODE");
        jtfWarehouseCode.setFocusable(false);
        jtfWarehouseCode.setPreferredSize(new java.awt.Dimension(55, 23));
        jPanel8.add(jtfWarehouseCode);

        jPanel4.add(jPanel8);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItem.setText("Ítem:");
        jlItem.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel7.add(jlItem);

        jtfItemKey.setEditable(false);
        jtfItemKey.setText("TEXT");
        jtfItemKey.setFocusable(false);
        jtfItemKey.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jtfItemKey);

        jtfItem.setEditable(false);
        jtfItem.setText("TEXT");
        jtfItem.setFocusable(false);
        jtfItem.setPreferredSize(new java.awt.Dimension(275, 23));
        jPanel7.add(jtfItem);

        jPanel4.add(jPanel7);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlLot.setText("Lote:");
        jlLot.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel15.add(jlLot);

        jtfLot.setEditable(false);
        jtfLot.setText("TEXT");
        jtfLot.setFocusable(false);
        jtfLot.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel15.add(jtfLot);

        jtfLotUnitSymbol.setEditable(false);
        jtfLotUnitSymbol.setText("CODE");
        jtfLotUnitSymbol.setFocusable(false);
        jtfLotUnitSymbol.setPreferredSize(new java.awt.Dimension(55, 23));
        jPanel15.add(jtfLotUnitSymbol);

        jlLotDateExpiration.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlLotDateExpiration.setText("Caducidad:");
        jlLotDateExpiration.setPreferredSize(new java.awt.Dimension(85, 23));
        jPanel15.add(jlLotDateExpiration);

        jtfLotDateExpiration.setEditable(false);
        jtfLotDateExpiration.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfLotDateExpiration.setText("01/01/2000");
        jtfLotDateExpiration.setFocusable(false);
        jtfLotDateExpiration.setPreferredSize(new java.awt.Dimension(65, 23));
        jPanel15.add(jtfLotDateExpiration);

        jPanel4.add(jPanel15);

        jpParams.add(jPanel4, java.awt.BorderLayout.WEST);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Fecha de corte:"));
        jPanel5.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateCutOff.setText("Fecha corte:");
        jlDateCutOff.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel10.add(jlDateCutOff);

        jtfDateCutOff.setEditable(false);
        jtfDateCutOff.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfDateCutOff.setText("01/01/2000");
        jtfDateCutOff.setFocusable(false);
        jtfDateCutOff.setPreferredSize(new java.awt.Dimension(65, 23));
        jPanel10.add(jtfDateCutOff);

        jPanel5.add(jPanel10);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlYear.setText("Año:");
        jlYear.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel9.add(jlYear);

        jtfYear.setEditable(false);
        jtfYear.setBackground(new java.awt.Color(153, 204, 255));
        jtfYear.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtfYear.setText("2000");
        jtfYear.setFocusable(false);
        jtfYear.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel9.add(jtfYear);

        jButton1.setText("+");
        jButton1.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jButton1.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel9.add(jButton1);

        jButton2.setText("-");
        jButton2.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jButton2.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel9.add(jButton2);

        jPanel5.add(jPanel9);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jPanel5.add(jPanel16);

        jpParams.add(jPanel5, java.awt.BorderLayout.CENTER);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Existencias:"));
        jPanel6.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlIn.setText("Entradas:");
        jlIn.setPreferredSize(new java.awt.Dimension(75, 23));
        jlIn.setRequestFocusEnabled(false);
        jPanel11.add(jlIn);

        jtfIn.setEditable(false);
        jtfIn.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfIn.setText("0.000");
        jtfIn.setFocusable(false);
        jtfIn.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jtfIn);

        jtfInUnitSymbol.setEditable(false);
        jtfInUnitSymbol.setText("CODE");
        jtfInUnitSymbol.setFocusable(false);
        jtfInUnitSymbol.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel11.add(jtfInUnitSymbol);

        jPanel6.add(jPanel11);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlOut.setText("Salidas:");
        jlOut.setPreferredSize(new java.awt.Dimension(75, 23));
        jlOut.setRequestFocusEnabled(false);
        jPanel12.add(jlOut);

        jtfOut.setEditable(false);
        jtfOut.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfOut.setText("0.000");
        jtfOut.setFocusable(false);
        jtfOut.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jtfOut);

        jtfOutUnitSymbol.setEditable(false);
        jtfOutUnitSymbol.setText("CODE");
        jtfOutUnitSymbol.setFocusable(false);
        jtfOutUnitSymbol.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel12.add(jtfOutUnitSymbol);

        jPanel6.add(jPanel12);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlStock.setText("Existencias:");
        jlStock.setPreferredSize(new java.awt.Dimension(75, 23));
        jlStock.setRequestFocusEnabled(false);
        jPanel13.add(jlStock);

        jtfStock.setBackground(new java.awt.Color(153, 204, 255));
        jtfStock.setEditable(false);
        jtfStock.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfStock.setText("0.000");
        jtfStock.setFocusable(false);
        jtfStock.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jtfStock);

        jtfStockUnitSymbol.setBackground(new java.awt.Color(153, 204, 255));
        jtfStockUnitSymbol.setEditable(false);
        jtfStockUnitSymbol.setText("CODE");
        jtfStockUnitSymbol.setFocusable(false);
        jtfStockUnitSymbol.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel13.add(jtfStockUnitSymbol);

        jPanel6.add(jPanel13);

        jpParams.add(jPanel6, java.awt.BorderLayout.EAST);

        getContentPane().add(jpParams, java.awt.BorderLayout.NORTH);

        jpStockMoves.setBorder(javax.swing.BorderFactory.createTitledBorder("Movimientos de inventarios:"));
        jpStockMoves.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 3, 0));

        jtfSeek.setText("Seek");
        jtfSeek.setToolTipText("Texto a buscar [Ctrl+B]");
        jtfSeek.setEnabled(false);
        jtfSeek.setPreferredSize(new java.awt.Dimension(100, 20));
        jPanel3.add(jtfSeek);

        jbSeek.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_seek.gif"))); // NOI18N
        jbSeek.setToolTipText("Buscar");
        jbSeek.setEnabled(false);
        jbSeek.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel3.add(jbSeek);

        jbExportCsv.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_file_csv.gif"))); // NOI18N
        jbExportCsv.setToolTipText("Exportar CSV [Ctrl+E]");
        jbExportCsv.setEnabled(false);
        jbExportCsv.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel3.add(jbExportCsv);

        jbRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_reload.gif"))); // NOI18N
        jbRefresh.setToolTipText("Refrescar [Ctrl+R]");
        jbRefresh.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel3.add(jbRefresh);

        jpStockMoves.add(jPanel3, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(jpStockMoves, java.awt.BorderLayout.CENTER);

        jpControls.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        jpControls.setLayout(new java.awt.BorderLayout());

        jbClose.setText("Cerrar");
        jbClose.setPreferredSize(new java.awt.Dimension(75, 23));
        jpControls.add(jbClose, java.awt.BorderLayout.EAST);

        jtfMaintUser.setEditable(false);
        jtfMaintUser.setFocusable(false);
        jtfMaintUser.setPreferredSize(new java.awt.Dimension(300, 23));
        jpControls.add(jtfMaintUser, java.awt.BorderLayout.WEST);

        getContentPane().add(jpControls, java.awt.BorderLayout.SOUTH);

        setSize(new java.awt.Dimension(968, 634));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        int col = 0;
        STableColumnForm[] columns = null;

        columns = new STableColumnForm[37];
        columns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_INTEGER, "#", STableConstants.WIDTH_NUM_SMALLINT);
        columns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "Fecha", STableConstants.WIDTH_DATE);
        columns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Código tipo movimiento ES", STableConstants.WIDTH_CODE_DOC);
        columns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo movimiento ES", 125);
        columns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Lote", 100);
        columns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "Caducidad", STableConstants.WIDTH_DATE);
        columns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "Bloqueado", STableConstants.WIDTH_BOOLEAN);
        columns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Sucursal empresa", STableConstants.WIDTH_CODE_COB);
        columns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Almacén", STableConstants.WIDTH_CODE_COB_ENT);
        columns[col] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Entradas", STableConstants.WIDTH_QUANTITY_2X);
        columns[col++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererQuantity());
        columns[col] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Salidas", STableConstants.WIDTH_QUANTITY_2X);
        columns[col++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererQuantity());
        columns[col] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Existencias", STableConstants.WIDTH_QUANTITY_2X);
        columns[col++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererQuantity());
        columns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Unidad", STableConstants.WIDTH_UNIT_SYMBOL);
        columns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Cargos $", STableConstants.WIDTH_VALUE_2X);
        columns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Abonos $", STableConstants.WIDTH_VALUE_2X);
        columns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Saldo $", STableConstants.WIDTH_VALUE_2X);
        columns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "Fecha doc. ES", STableConstants.WIDTH_DATE);
        columns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo doc. ES", STableConstants.WIDTH_CODE_DOC);
        columns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Folio doc. ES", STableConstants.WIDTH_DOC_NUM);
        columns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Sucursal empresa doc. ES", STableConstants.WIDTH_CODE_COB);
        columns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Almacén doc. ES", STableConstants.WIDTH_CODE_COB_ENT);
        columns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Usr. creación", STableConstants.WIDTH_USER);
        columns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE_TIME, "Creación", STableConstants.WIDTH_DATE_TIME);
        columns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Usr. modificación", STableConstants.WIDTH_USER);
        columns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE_TIME, "Modificación", STableConstants.WIDTH_DATE_TIME);
        columns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo doc. CV", STableConstants.WIDTH_CODE_DOC);
        columns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Folio doc. CV", STableConstants.WIDTH_DOC_NUM);
        columns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "Fecha doc. CV", STableConstants.WIDTH_DATE);
        columns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Sucursal empresa doc. CV", STableConstants.WIDTH_CODE_COB);
        columns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo adj. CV", STableConstants.WIDTH_CODE_DOC);
        columns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Folio adj. CV", STableConstants.WIDTH_DOC_NUM);
        columns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "Fecha adj. CV", STableConstants.WIDTH_DATE);
        columns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Sucursal empresa adj. CV", STableConstants.WIDTH_CODE_COB);
        columns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Folio ord. prod.", STableConstants.WIDTH_DOC_NUM);
        columns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo ord. prod.", 100);
        columns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Sucursal empresa ord. prod.", STableConstants.WIDTH_CODE_COB);
        columns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Planta ord. prod.", STableConstants.WIDTH_CODE_COB_ENT);

        moPaneStockMoves = new STablePane(miClient);
        jpStockMoves.add(moPaneStockMoves, BorderLayout.CENTER);

        for (STableColumnForm column : columns) {
            moPaneStockMoves.addTableColumn(column);
        }

        moPaneStockMoves.createTable();
        moPaneStockMoves.getTable().getTableHeader().setReorderingAllowed(false);

        jbClose.addActionListener(this);
        jbSeek.addActionListener(this);
        jbRefresh.addActionListener(this);
        jbExportCsv.addActionListener(this);
        jtfSeek.addActionListener(this);

        SFormUtilities.createActionMap(getRootPane(), this, "actionClose", "close", KeyEvent.VK_ESCAPE, SLibConstants.UNDEFINED);
        SFormUtilities.createActionMap(getRootPane(), this, "focusSeek", "seek", KeyEvent.VK_B, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(getRootPane(), this, "actionExportCsv", "exportCsv", KeyEvent.VK_E, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(getRootPane(), this, "actionRefresh", "refresh", KeyEvent.VK_R, KeyEvent.CTRL_DOWN_MASK);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            jbClose.requestFocus();
        }
    }

    @SuppressWarnings("unchecked")
    private void showStockMoves() {
        int col = 0;
        int row = 0;
        double in = 0;
        double inSum = 0;
        double out = 0;
        double outSum = 0;
        double stock = 0;
        double debit = 0;
        double debitSum = 0;
        double credit = 0;
        double creditSum = 0;
        double balance = 0;
        String sql = "";
        ResultSet resulSet = null;

        moPaneStockMoves.clearTableRows();
        moPaneStockMoves.createTable();
        moPaneStockMoves.getTable().getTableHeader().setReorderingAllowed(false);

        try {
            sql = "SELECT s.id_year, s.id_item, s.id_unit, s.id_lot, s.id_cob, s.id_wh, s.id_mov, " +   // 06
                    "s.dt, st.code, st.tp_iog, l.lot, l.dt_exp_n, l.b_block, cob.code, ent.code, " +    // 14
                    "s.mov_in, s.mov_out, u.symbol, s.debit, s.credit, " +                              // 19
                    "iog.dt, iogt.code, CONCAT(iog.num_ser, IF(length(iog.num_ser) = 0, '', '-'), erp.lib_fix_int(iog.num, " + SDataConstantsSys.NUM_LEN_IOG + ")) AS f_iog_num, iog_cob.code, iog_ent.code, " +    // 24
                    "un.usr, iog.ts_new, ue.usr, iog.ts_edit, " +                                       // 28
                    "dpst.code, CONCAT(dps.num_ser, IF(length(dps.num_ser) = 0, '', '-'), dps.num) AS f_dps_num, dps.dt, dps_cob.code, " +  // 32
                    "adjt.code, CONCAT(adj.num_ser, IF(length(adj.num_ser) = 0, '', '-'), adj.num) AS f_adj_num, adj.dt, adj_cob.code, " +  // 36
                    "CAST(CONCAT(mfg.id_year, '-', erp.lib_fix_int(mfg.num, " + SDataConstantsSys.NUM_LEN_IOG + ")) AS CHAR) AS f_mfg_num, mfgt.tp, mfg_cob.code, mfg_ent.code " + // 40
                    "FROM trn_stk AS s " +
                    "INNER JOIN erp.itmu_unit AS u ON s.id_unit = u.id_unit " +
                    "INNER JOIN trn_lot AS l ON s.id_item = l.id_item AND s.id_unit = l.id_unit AND s.id_lot = l.id_lot " +
                    "INNER JOIN erp.bpsu_bpb AS cob ON s.id_cob = cob.id_bpb " +
                    "INNER JOIN erp.cfgu_cob_ent AS ent ON s.id_cob = ent.id_cob AND s.id_wh = ent.id_ent " +
                    "INNER JOIN erp.trns_tp_iog AS st ON s.fid_ct_iog = st.id_ct_iog AND s.fid_cl_iog = st.id_cl_iog AND s.fid_tp_iog = st.id_tp_iog " +
                    "INNER JOIN trn_diog AS iog ON s.fid_diog_year = iog.id_year AND s.fid_diog_doc = iog.id_doc " +
                    "INNER JOIN erp.trns_tp_iog AS iogt ON iog.fid_ct_iog = iogt.id_ct_iog AND iog.fid_cl_iog = iogt.id_cl_iog AND iog.fid_tp_iog = iogt.id_tp_iog " +
                    "INNER JOIN erp.bpsu_bpb AS iog_cob ON iog.fid_cob = iog_cob.id_bpb " +
                    "INNER JOIN erp.cfgu_cob_ent AS iog_ent ON iog.fid_cob = iog_ent.id_cob AND iog.fid_wh = iog_ent.id_ent " +
                    "INNER JOIN erp.usru_usr AS un ON iog.fid_usr_new = un.id_usr " +
                    "INNER JOIN erp.usru_usr AS ue ON iog.fid_usr_edit = ue.id_usr " +
                    "LEFT OUTER JOIN trn_dps AS dps ON s.fid_dps_year_n = dps.id_year AND s.fid_dps_doc_n = dps.id_doc " +
                    "LEFT OUTER JOIN erp.trnu_tp_dps AS dpst ON dps.fid_ct_dps = dpst.id_ct_dps AND dps.fid_cl_dps = dpst.id_cl_dps AND dps.fid_tp_dps = dpst.id_tp_dps " +
                    "LEFT OUTER JOIN erp.bpsu_bpb AS dps_cob ON dps.fid_cob = dps_cob.id_bpb " +
                    "LEFT OUTER JOIN trn_dps AS adj ON s.fid_dps_adj_year_n = adj.id_year AND s.fid_dps_adj_doc_n = adj.id_doc " +
                    "LEFT OUTER JOIN erp.trnu_tp_dps AS adjt ON adj.fid_ct_dps = adjt.id_ct_dps AND adj.fid_cl_dps = adjt.id_cl_dps AND adj.fid_tp_dps = adjt.id_tp_dps " +
                    "LEFT OUTER JOIN erp.bpsu_bpb AS adj_cob ON adj.fid_cob = adj_cob.id_bpb " +
                    "LEFT OUTER JOIN mfg_ord AS mfg ON iog.fid_mfg_year_n = mfg.id_year AND iog.fid_mfg_ord_n = mfg.id_ord " +
                    "LEFT OUTER JOIN erp.mfgu_tp_ord AS mfgt ON mfg.fid_tp_ord = mfgt.id_tp " +
                    "LEFT OUTER JOIN erp.bpsu_bpb AS mfg_cob ON mfg.fid_cob = mfg_cob.id_bpb " +
                    "LEFT OUTER JOIN erp.cfgu_cob_ent AS mfg_ent ON mfg.fid_cob = mfg_ent.id_cob AND mfg.fid_ent = mfg_ent.id_ent " +
                    "WHERE s.id_year = " + mnParamYear + " AND s.id_item = " + moParamItem.getPkItemId() + " AND s.id_unit = " + moParamUnit.getPkUnitId() + " " +
                    (moParamStockLot == null ? "" : "AND s.id_lot = " + moParamStockLot.getPkLotId() + " ") +
                    (manParamWarehouseKey[0] == SLibConstants.UNDEFINED ? "" : "AND s.id_cob = " + manParamWarehouseKey[0] + " ") +
                    (manParamWarehouseKey[1] == SLibConstants.UNDEFINED ? "" : "AND s.id_wh = " + manParamWarehouseKey[1] + " ") +
                    (mnParamMaintUser == SLibConstants.UNDEFINED ? "" : "AND iog.fid_maint_user_n = " + mnParamMaintUser + " ") +
                    "AND s.b_del = 0 AND s.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtParamDateCutOff) + "' " +
                    "ORDER BY s.dt, st.code, st.tp_iog, iog.num_ser, erp.lib_fix_int(iog.num, " + SDataConstantsSys.NUM_LEN_IOG + "), " +
                    "l.lot, s.id_year, s.id_item, s.id_unit, s.id_lot, s.id_cob, s.id_wh, s.id_mov ";

            resulSet = miClient.getSession().getStatement().executeQuery(sql);
            while (resulSet.next()) {
                STableRowCustom rowCustom = new STableRowCustom();

                col = 8;
                rowCustom.getValues().add(++row);
                rowCustom.getValues().add(resulSet.getDate(col++));
                rowCustom.getValues().add(resulSet.getString(col++));
                rowCustom.getValues().add(resulSet.getString(col++));
                rowCustom.getValues().add(resulSet.getString(col++));
                rowCustom.getValues().add(resulSet.getDate(col++));
                rowCustom.getValues().add(resulSet.getBoolean(col++));
                rowCustom.getValues().add(resulSet.getString(col++));
                rowCustom.getValues().add(resulSet.getString(col++));

                inSum += in = resulSet.getDouble(col++);
                outSum += out = resulSet.getDouble(col++);
                stock += (in - out);

                rowCustom.getValues().add(in);
                rowCustom.getValues().add(out);
                rowCustom.getValues().add(stock);
                rowCustom.getValues().add(resulSet.getString(col++));

                debitSum += debit = resulSet.getDouble(col++);
                creditSum += credit = resulSet.getDouble(col++);
                balance += (debit - credit);

                rowCustom.getValues().add(debit);
                rowCustom.getValues().add(credit);
                rowCustom.getValues().add(balance);

                rowCustom.getValues().add(resulSet.getDate(col++));
                rowCustom.getValues().add(resulSet.getString(col++));
                rowCustom.getValues().add(resulSet.getString(col++));
                rowCustom.getValues().add(resulSet.getString(col++));
                rowCustom.getValues().add(resulSet.getString(col++));
                rowCustom.getValues().add(resulSet.getString(col++));
                rowCustom.getValues().add(resulSet.getTimestamp(col++));
                rowCustom.getValues().add(resulSet.getString(col++));
                rowCustom.getValues().add(resulSet.getTimestamp(col++));
                rowCustom.getValues().add(resulSet.getString(col++));
                rowCustom.getValues().add(resulSet.getString(col++));
                rowCustom.getValues().add(resulSet.getDate(col++));
                rowCustom.getValues().add(resulSet.getString(col++));
                rowCustom.getValues().add(resulSet.getString(col++));
                rowCustom.getValues().add(resulSet.getString(col++));
                rowCustom.getValues().add(resulSet.getDate(col++));
                rowCustom.getValues().add(resulSet.getString(col++));
                rowCustom.getValues().add(resulSet.getString(col++));
                rowCustom.getValues().add(resulSet.getString(col++));
                rowCustom.getValues().add(resulSet.getString(col++));
                rowCustom.getValues().add(resulSet.getString(col++));

                moPaneStockMoves.addTableRow(rowCustom);
            }

            moPaneStockMoves.renderTableRows();
            moPaneStockMoves.setTableRowSelection(0);

            if (moPaneStockMoves.getTableGuiRowCount() == 0) {
                jtfSeek.setEnabled(false);
                jbSeek.setEnabled(false);
                jbExportCsv.setEnabled(false);
            }
            else {
                jtfSeek.setEnabled(true);
                jbSeek.setEnabled(true);
                jbExportCsv.setEnabled(true);
            }
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }

        jtfIn.setText((mnParamFormMode == SLibConstants.MODE_QTY ?
            miClient.getSessionXXX().getFormatters().getDecimalsQuantityFormat() :
            miClient.getSessionXXX().getFormatters().getDecimalsValueUnitaryFormat()).format(inSum));
        jtfOut.setText((mnParamFormMode == SLibConstants.MODE_QTY ?
            miClient.getSessionXXX().getFormatters().getDecimalsQuantityFormat() :
            miClient.getSessionXXX().getFormatters().getDecimalsValueUnitaryFormat()).format(outSum));
        jtfStock.setText((mnParamFormMode == SLibConstants.MODE_QTY ?
            miClient.getSessionXXX().getFormatters().getDecimalsQuantityFormat() :
            miClient.getSessionXXX().getFormatters().getDecimalsValueUnitaryFormat()).format(stock));
    }

    public void actionClose() {
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbClose;
    private javax.swing.JButton jbExportCsv;
    private javax.swing.JButton jbRefresh;
    private javax.swing.JButton jbSeek;
    private javax.swing.JLabel jlDateCutOff;
    private javax.swing.JLabel jlIn;
    private javax.swing.JLabel jlItem;
    private javax.swing.JLabel jlLot;
    private javax.swing.JLabel jlLotDateExpiration;
    private javax.swing.JLabel jlOut;
    private javax.swing.JLabel jlStock;
    private javax.swing.JLabel jlWarehouse;
    private javax.swing.JLabel jlYear;
    private javax.swing.JPanel jpControls;
    private javax.swing.JPanel jpParams;
    private javax.swing.JPanel jpStockMoves;
    private javax.swing.JTextField jtfCompanyBranch;
    private javax.swing.JTextField jtfCompanyBranchCode;
    private javax.swing.JTextField jtfDateCutOff;
    private javax.swing.JTextField jtfIn;
    private javax.swing.JTextField jtfInUnitSymbol;
    private javax.swing.JTextField jtfItem;
    private javax.swing.JTextField jtfItemKey;
    private javax.swing.JTextField jtfLot;
    private javax.swing.JTextField jtfLotDateExpiration;
    private javax.swing.JTextField jtfLotUnitSymbol;
    private javax.swing.JTextField jtfMaintUser;
    private javax.swing.JTextField jtfOut;
    private javax.swing.JTextField jtfOutUnitSymbol;
    private javax.swing.JTextField jtfSeek;
    private javax.swing.JTextField jtfStock;
    private javax.swing.JTextField jtfStockUnitSymbol;
    private javax.swing.JTextField jtfWarehouse;
    private javax.swing.JTextField jtfWarehouseCode;
    private javax.swing.JTextField jtfYear;
    // End of variables declaration//GEN-END:variables

    public void focusSeek() {
        if (jtfSeek.isEnabled()) {
            jtfSeek.requestFocus();
        }
    }

    public void actionSeek() {
        if (jbSeek.isEnabled()) {
            STableUtilities.actionSeek(miClient, moPaneStockMoves, jtfSeek.getText().trim());
        }
    }

    public void actionExportCsv() {
        if (jbExportCsv.isEnabled()) {
            STableUtilities.actionExportCsv(miClient, moPaneStockMoves, getTitle());
        }
    }

    public void actionRefresh() {
        showStockMoves();
    }

    public void setFormParams(final Date dateCutOff, final int itemId, final int unitId, final int lotId, final int[] warehouseKey, int mode) {
        setFormParams(dateCutOff, itemId, unitId, lotId, warehouseKey, mode, 0);
    }

    public void setFormParams(final Date dateCutOff, final int itemId, final int unitId, final int lotId, final int[] warehouseKey, int mode, int maintUser) {
        mnParamYear = SLibTimeUtilities.digestYear(dateCutOff)[0];
        mtParamDateCutOff = dateCutOff;
        manParamWarehouseKey = warehouseKey;
        mnParamFormMode = mode;
        mnParamMaintUser = maintUser;
        
        if (itemId == SLibConstants.UNDEFINED) {
            moParamCompanyBranch = null;
            moParamWarehouse = null;
            moParamItem = null;
            moParamUnit = null;
            moParamStockLot = null;

            jtfCompanyBranch.setText("");
            jtfCompanyBranchCode.setText("");
            jtfWarehouse.setText("");
            jtfWarehouseCode.setText("");
            jtfItem.setText("");
            jtfItemKey.setText("");
            jtfLot.setText("");
            jtfLotUnitSymbol.setText("");
            jtfLotDateExpiration.setText("");

            jtfYear.setText("");
            jtfDateCutOff.setText("");

            jtfInUnitSymbol.setText("");
            jtfOutUnitSymbol.setText("");
            jtfStockUnitSymbol.setText("");
        }
        else {
            moParamCompanyBranch = (SDataBizPartnerBranch) (manParamWarehouseKey[0] == SLibConstants.UNDEFINED ? null : SDataUtilities.readRegistry(miClient, SDataConstants.BPSU_BPB, new int[] { manParamWarehouseKey[0] }, SLibConstants.EXEC_MODE_VERBOSE));
            moParamWarehouse = (SDataCompanyBranchEntity) (manParamWarehouseKey[1] == SLibConstants.UNDEFINED ? null : SDataUtilities.readRegistry(miClient, SDataConstants.CFGU_COB_ENT, manParamWarehouseKey, SLibConstants.EXEC_MODE_VERBOSE));
            moParamItem = (SDataItem) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_ITEM, new int[] { itemId }, SLibConstants.EXEC_MODE_VERBOSE);
            moParamUnit = (SDataUnit) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_UNIT, new int[] { unitId }, SLibConstants.EXEC_MODE_VERBOSE);
            moParamStockLot = (SDataStockLot) (lotId == SLibConstants.UNDEFINED ? null : SDataUtilities.readRegistry(miClient, SDataConstants.TRN_LOT, new int[] { itemId, unitId, lotId }, SLibConstants.EXEC_MODE_VERBOSE));

            jtfCompanyBranch.setText(moParamCompanyBranch == null ? SLibConstants.TXT_ALL : moParamCompanyBranch.getBizPartnerBranch());
            jtfCompanyBranchCode.setText(moParamCompanyBranch == null ? "" : moParamCompanyBranch.getCode());
            jtfWarehouse.setText(moParamWarehouse == null ? SLibConstants.TXT_ALL : moParamWarehouse.getEntity());
            jtfWarehouseCode.setText(moParamWarehouse == null ? "" : moParamWarehouse.getCode());
            jtfItem.setText(moParamItem.getItem());
            jtfItemKey.setText(moParamItem.getKey());
            jtfLot.setText(moParamStockLot == null ? SLibConstants.TXT_ALL : moParamStockLot.getLot());
            jtfLotUnitSymbol.setText(moParamUnit.getSymbol());
            jtfLotDateExpiration.setText(moParamStockLot == null ? "" : (moParamStockLot.getDateExpiration_n() == null ? "?" : miClient.getSessionXXX().getFormatters().getDateFormat().format(moParamStockLot.getDateExpiration_n())));

            jtfYear.setText(miClient.getSessionXXX().getFormatters().getYearFormat().format(mnParamYear));
            jtfDateCutOff.setText(miClient.getSessionXXX().getFormatters().getDateFormat().format(mtParamDateCutOff));

            jtfCompanyBranch.setCaretPosition(0);
            jtfCompanyBranchCode.setCaretPosition(0);
            jtfWarehouse.setCaretPosition(0);
            jtfWarehouseCode.setCaretPosition(0);
            jtfItem.setCaretPosition(0);
            jtfItemKey.setCaretPosition(0);
            jtfLot.setCaretPosition(0);
            jtfLotUnitSymbol.setCaretPosition(0);
            jtfLotDateExpiration.setCaretPosition(0);

            jtfYear.setCaretPosition(0);
            jtfDateCutOff.setCaretPosition(0);

            jtfInUnitSymbol.setText(moParamUnit.getSymbol());
            jtfOutUnitSymbol.setText(moParamUnit.getSymbol());
            jtfStockUnitSymbol.setText(moParamUnit.getSymbol());

            jtfInUnitSymbol.setCaretPosition(0);
            jtfOutUnitSymbol.setCaretPosition(0);
            jtfStockUnitSymbol.setCaretPosition(0);
        }

        // show maintenance user if necessary:
        if (mnParamMaintUser == SLibConstants.UNDEFINED) {
            jtfMaintUser.setText("");
        }
        else {
            jtfMaintUser.setText((String) miClient.getSession().readField(SModConsts.BPSU_BP, new int[] { mnParamMaintUser }, SDbRegistry.FIELD_NAME));
            jtfMaintUser.setCaretPosition(0);
        }
        
        setDecimals();
        showStockMoves();
    }

    public void setDecimals() {
        DefaultTableCellRenderer tcr = mnParamFormMode == SLibConstants.MODE_QTY ?
            miClient.getSessionXXX().getFormatters().getTableCellRendererQuantity() :
            miClient.getSessionXXX().getFormatters().getTableCellRendererValueUnitary();

        moPaneStockMoves.getTableColumn(COL_IN).setCellRenderer(tcr);
        moPaneStockMoves.getTableColumn(COL_OUT).setCellRenderer(tcr);
        moPaneStockMoves.getTableColumn(COL_STOCK).setCellRenderer(tcr);
        moPaneStockMoves.clearTableRows();
        moPaneStockMoves.createTable();
        moPaneStockMoves.getTable().getTableHeader().setReorderingAllowed(false);
    }

    public void formReset() {
        mbFirstTime = true;

        jtfSeek.setText("");
        jtfSeek.setEnabled(false);
        jbSeek.setEnabled(false);
        jbExportCsv.setEnabled(false);
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbClose) {
                actionClose();
            }
            else if (button == jbSeek) {
                actionSeek();
            }
            else if (button == jbExportCsv) {
                actionExportCsv();
            }
            else if (button == jbRefresh) {
                actionRefresh();
            }
        }
        else if (e.getSource() instanceof javax.swing.JTextField) {
            JTextField textField = (JTextField) e.getSource();

            if (textField == jtfSeek) {
                actionSeek();
            }
        }
    }
}
