/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mtrn.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormUtilities;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STableConstants;
import erp.lib.table.STablePaneGrid;
import erp.lib.table.STableRowCustom;
import erp.mtrn.data.SDataDps;
import erp.mtrn.data.SDataDpsEntry;
import erp.server.SServerConstants;
import erp.server.SServerRequest;
import erp.server.SServerResponse;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JButton;
import sa.lib.srv.SSrvConsts;

/**
 *
 * @author Sergio Flores
 */
public class SDialogShowDocumentLinks extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private erp.client.SClientInterface miClient;
    private int mnDialogType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;

    private erp.mtrn.data.SDataDps moParamDps;
    private erp.mtrn.data.SDataDpsEntry moParamDpsEntry;
    private erp.lib.table.STablePaneGrid moPaneGrid;
    private erp.lib.table.STableColumnForm[] maoTableColumnsDps = null;
    private erp.lib.table.STableColumnForm[] maoTableColumnsDpsEntry = null;
    private erp.mtrn.form.SPanelDps moPanelDps;

    /** Creates new form SDialogDpsActionViewLinks */
    public SDialogShowDocumentLinks(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        mnDialogType = SDataConstants.TRNX_DPS_ACT_VIEW_LINKS;
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbtButtonGroup = new javax.swing.ButtonGroup();
        jpDps = new javax.swing.JPanel();
        jlPanelDps = new javax.swing.JLabel();
        jpDpsRelations = new javax.swing.JPanel();
        jpDpsEntry = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jlDpsEntry = new javax.swing.JLabel();
        jtfDpsEntry = new javax.swing.JTextField();
        jpControls = new javax.swing.JPanel();
        jbClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Vínculos del documento");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpDps.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpDps.setLayout(new java.awt.BorderLayout());

        jlPanelDps.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jlPanelDps.setText("[Panel de documento de compras-ventas]");
        jlPanelDps.setPreferredSize(new java.awt.Dimension(100, 200));
        jpDps.add(jlPanelDps, java.awt.BorderLayout.NORTH);

        jpDpsRelations.setBorder(javax.swing.BorderFactory.createTitledBorder("Vínculos actuales del documento:"));
        jpDpsRelations.setLayout(new java.awt.BorderLayout(0, 5));

        jpDpsEntry.setLayout(new java.awt.GridLayout(2, 1, 0, 1));

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlDpsEntry.setText("Partida del documento:");
        jlDpsEntry.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel3.add(jlDpsEntry);

        jtfDpsEntry.setEditable(false);
        jtfDpsEntry.setText("DOCUMENT ENTRY");
        jtfDpsEntry.setFocusable(false);
        jtfDpsEntry.setPreferredSize(new java.awt.Dimension(629, 23));
        jPanel3.add(jtfDpsEntry);

        jpDpsEntry.add(jPanel3);

        jpDpsRelations.add(jpDpsEntry, java.awt.BorderLayout.NORTH);

        jpDps.add(jpDpsRelations, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpDps, java.awt.BorderLayout.CENTER);

        jpControls.setPreferredSize(new java.awt.Dimension(392, 33));
        jpControls.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbClose.setText("Cerrar");
        jbClose.setToolTipText("[Escape]");
        jbClose.setPreferredSize(new java.awt.Dimension(75, 23));
        jpControls.add(jbClose);

        getContentPane().add(jpControls, java.awt.BorderLayout.PAGE_END);

        setSize(new java.awt.Dimension(800, 600));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        int i = 0;

        maoTableColumnsDps = new STableColumnForm[8];
        maoTableColumnsDps[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo vínculo", 150);
        maoTableColumnsDps[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "Fecha doc.", STableConstants.WIDTH_DATE);
        maoTableColumnsDps[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo doc.", STableConstants.WIDTH_CODE_DOC);
        maoTableColumnsDps[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Folio doc.", STableConstants.WIDTH_DOC_NUM);
        maoTableColumnsDps[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Total $", STableConstants.WIDTH_VALUE_2X);
        maoTableColumnsDps[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Total mon $", STableConstants.WIDTH_VALUE_2X);
        maoTableColumnsDps[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Moneda", STableConstants.WIDTH_CURRENCY_KEY);
        maoTableColumnsDps[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Sucursal empresa", STableConstants.WIDTH_CODE_COB);

        maoTableColumnsDpsEntry = new STableColumnForm[16];

        for (i = 0; i < maoTableColumnsDps.length; i++) {
            maoTableColumnsDpsEntry[i] = maoTableColumnsDps[i];
        }

        maoTableColumnsDpsEntry[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_INTEGER, "#", STableConstants.WIDTH_NUM_TINYINT);
        maoTableColumnsDpsEntry[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Clave", STableConstants.WIDTH_ITEM_KEY);
        maoTableColumnsDpsEntry[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Concepto", STableConstants.WIDTH_ITEM);
        maoTableColumnsDpsEntry[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Cantidad", STableConstants.WIDTH_QUANTITY);
        maoTableColumnsDpsEntry[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererQuantity());
        maoTableColumnsDpsEntry[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Unidad", STableConstants.WIDTH_UNIT_SYMBOL);
        maoTableColumnsDpsEntry[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Valor $", STableConstants.WIDTH_VALUE);
        maoTableColumnsDpsEntry[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Valor mon $", STableConstants.WIDTH_VALUE);
        maoTableColumnsDpsEntry[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Moneda", STableConstants.WIDTH_CURRENCY_KEY);

        moPaneGrid = new STablePaneGrid(miClient);
        jpDpsRelations.add(moPaneGrid, BorderLayout.CENTER);

        moPanelDps = new SPanelDps(miClient);
        jpDps.remove(jlPanelDps);
        jpDps.add(moPanelDps, BorderLayout.NORTH);

        jbClose.addActionListener(this);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionClose(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "close", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            jbClose.requestFocus();
        }
    }

    private void renderDpsEntry() {
        if (moParamDpsEntry == null) {
            jlDpsEntry.setEnabled(false);
            jtfDpsEntry.setEnabled(false);

            jtfDpsEntry.setText("");
        }
        else {
            jlDpsEntry.setEnabled(true);
            jtfDpsEntry.setEnabled(true);

            jtfDpsEntry.setText("# " +
                    miClient.getSessionXXX().getFormatters().getNumberLongFormat().format(moParamDpsEntry.getSortingPosition()) + "; " +
                    miClient.getSessionXXX().getFormatters().getDecimalsQuantityFormat().format(moParamDpsEntry.getOriginalQuantity()) + " " +
                    moParamDpsEntry.getDbmsOriginalUnitSymbol() + "; " + moParamDpsEntry.getConceptKey() + " - " + moParamDpsEntry.getConcept());
            jtfDpsEntry.setCaretPosition(0);
        }
    }

    private void actionClose() {
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel3;
    private javax.swing.JButton jbClose;
    private javax.swing.ButtonGroup jbtButtonGroup;
    private javax.swing.JLabel jlDpsEntry;
    private javax.swing.JLabel jlPanelDps;
    private javax.swing.JPanel jpControls;
    private javax.swing.JPanel jpDps;
    private javax.swing.JPanel jpDpsEntry;
    private javax.swing.JPanel jpDpsRelations;
    private javax.swing.JTextField jtfDpsEntry;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moParamDps = null;
        moPanelDps.setDps(null, null);

        moParamDpsEntry = null;
        renderDpsEntry();
    }

    @Override
    public void formRefreshCatalogues() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        switch (type) {
            case SDataConstants.TRN_DPS:
                moParamDps = (SDataDps) value;
                moPanelDps.setDps(moParamDps, null);
                break;

            case SDataConstants.TRN_DPS_ETY:
                moParamDpsEntry = (SDataDpsEntry) value;
                renderDpsEntry();
                break;

            default:
        }
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbClose) {
                actionClose();
            }
        }
    }

    @SuppressWarnings("unchecked")
    public int readLinks() {
        int i = 0;
        int count = 0;
        String sSql = "";
        SServerRequest oRequest = null;
        SServerResponse oResponse = null;
        int[] anSubclassKey = null;
        int[] anSubclassKeyForAdjs = null;
        Vector<Vector<Object>> vData = null;

        try {
            moPaneGrid.clearTable();

            if (moParamDpsEntry != null) {
                // DPS entry links:

                sSql = "" +
                        "SELECT DISTINCT 1 AS f_id_type, 'VÍNCULO COMO ORIGEN' AS f_type, d.dt, t.code AS f_code, CONCAT(d.num_ser, IF(LENGTH(d.num_ser) = 0, '', '-'), d.num) AS f_num, " +
                        "d.tot_r AS f_tot, d.tot_cur_r AS f_tot_cur, c.cur_key AS f_cur, b.code AS f_cob, de.sort_pos AS f_sp, de.concept_key AS f_cpt_key, de.concept AS f_cpt, " +
                        "s.orig_qty AS f_qty, u.symbol AS f_us, 0 AS f_tot_de, 0 AS f_tot_cur_de, c.cur_key AS f_cur_de " +
                        "FROM trn_dps_dps_supply AS s INNER JOIN trn_dps AS d ON s.id_des_year = d.id_year AND s.id_des_doc = d.id_doc AND d.b_del = 0 " +
                        "INNER JOIN trn_dps_ety AS de ON s.id_des_year = de.id_year AND s.id_des_doc = de.id_doc AND s.id_des_ety = de.id_ety AND de.b_del = 0 " +
                        "INNER JOIN erp.itmu_unit AS u ON de.fid_orig_unit = u.id_unit " +
                        "INNER JOIN erp.trnu_tp_dps AS t ON d.fid_ct_dps = t.id_ct_dps AND d.fid_cl_dps = t.id_cl_dps AND d.fid_tp_dps = t.id_tp_dps " +
                        "INNER JOIN erp.bpsu_bpb AS b ON d.fid_cob = b.id_bpb " +
                        "INNER JOIN erp.cfgu_cur AS c ON d.fid_cur = c.id_cur " +
                        "WHERE s.id_src_year = " + moParamDpsEntry.getPkYearId() + " AND s.id_src_doc = " + moParamDpsEntry.getPkDocId() + " AND s.id_src_ety = " + moParamDpsEntry.getPkEntryId() + " " +
                        "UNION " +
                        "SELECT DISTINCT 2 AS f_id_type, 'VÍNCULO COMO DESTINO' AS f_type, d.dt, t.code AS f_code, CONCAT(d.num_ser, IF(LENGTH(d.num_ser) = 0, '', '-'), d.num) AS f_num, " +
                        "d.tot_r AS f_tot, d.tot_cur_r AS f_tot_cur, c.cur_key AS f_cur, b.code AS f_cob, de.sort_pos AS f_sp, de.concept_key AS f_cpt_key, de.concept AS f_cpt, " +
                        "s.orig_qty AS f_qty, u.symbol AS f_us, 0 AS f_tot_de, 0 AS f_tot_cur_de, c.cur_key AS f_cur_de " +
                        "FROM trn_dps_dps_supply AS s INNER JOIN trn_dps AS d ON s.id_src_year = d.id_year AND s.id_src_doc = d.id_doc AND d.b_del = 0 " +
                        "INNER JOIN trn_dps_ety AS de ON s.id_src_year = de.id_year AND s.id_src_doc = de.id_doc AND s.id_src_ety = de.id_ety AND de.b_del = 0 " +
                        "INNER JOIN erp.itmu_unit AS u ON de.fid_orig_unit = u.id_unit " +
                        "INNER JOIN erp.trnu_tp_dps AS t ON d.fid_ct_dps = t.id_ct_dps AND d.fid_cl_dps = t.id_cl_dps AND d.fid_tp_dps = t.id_tp_dps " +
                        "INNER JOIN erp.bpsu_bpb AS b ON d.fid_cob = b.id_bpb " +
                        "INNER JOIN erp.cfgu_cur AS c ON d.fid_cur = c.id_cur " +
                        "WHERE s.id_des_year = " + moParamDpsEntry.getPkYearId() + " AND s.id_des_doc = " + moParamDpsEntry.getPkDocId() + " AND s.id_des_ety = " + moParamDpsEntry.getPkEntryId() + " " +
                        "UNION " +
                        "SELECT DISTINCT 3 AS f_id_type, 'AJUSTE COMO DOCUMENTO' AS f_type, d.dt, t.code AS f_code, CONCAT(d.num_ser, IF(LENGTH(d.num_ser) = 0, '', '-'), d.num) AS f_num, " +
                        "d.tot_r AS f_tot, d.tot_cur_r AS f_tot_cur, c.cur_key AS f_cur, b.code AS f_cob, de.sort_pos AS f_sp, de.concept_key AS f_cpt_key, de.concept AS f_cpt, " +
                        "de.orig_qty AS f_qty, u.symbol AS f_us, de.tot_r AS f_tot_de, de.tot_cur_r AS f_tot_cur_de, c.cur_key AS f_cur_de " +
                        "FROM trn_dps_dps_adj AS s INNER JOIN trn_dps AS d ON s.id_adj_year = d.id_year AND s.id_adj_doc = d.id_doc AND d.b_del = 0 " +
                        "INNER JOIN trn_dps_ety AS de ON s.id_adj_year = de.id_year AND s.id_adj_doc = de.id_doc AND s.id_adj_ety = de.id_ety AND de.b_del = 0 " +
                        "INNER JOIN erp.itmu_unit AS u ON de.fid_orig_unit = u.id_unit " +
                        "INNER JOIN erp.trnu_tp_dps AS t ON d.fid_ct_dps = t.id_ct_dps AND d.fid_cl_dps = t.id_cl_dps AND d.fid_tp_dps = t.id_tp_dps " +
                        "INNER JOIN erp.bpsu_bpb AS b ON d.fid_cob = b.id_bpb " +
                        "INNER JOIN erp.cfgu_cur AS c ON d.fid_cur = c.id_cur " +
                        "WHERE s.id_dps_year = " + moParamDpsEntry.getPkYearId() + " AND s.id_dps_doc = " + moParamDpsEntry.getPkDocId() + " AND s.id_dps_ety = " + moParamDpsEntry.getPkEntryId() + " " +
                        "UNION " +
                        "SELECT DISTINCT 4 AS f_id_type, 'AJUSTE COMO DOCUMENTO DE AJUSTE' AS f_type, d.dt, t.code AS f_code, CONCAT(d.num_ser, IF(LENGTH(d.num_ser) = 0, '', '-'), d.num) AS f_num, " +
                        "d.tot_r AS f_tot, d.tot_cur_r AS f_tot_cur, c.cur_key AS f_cur, b.code AS f_cob, de.sort_pos AS f_sp, de.concept_key AS f_cpt_key, de.concept AS f_cpt, " +
                        "de.orig_qty AS f_qty, u.symbol AS f_us, de.tot_r AS f_tot_de, de.tot_cur_r AS f_tot_cur_de, c.cur_key AS f_cur_de " +
                        "FROM trn_dps_dps_adj AS s INNER JOIN trn_dps AS d ON s.id_dps_year = d.id_year AND s.id_dps_doc = d.id_doc AND d.b_del = 0 " +
                        "INNER JOIN trn_dps_ety AS de ON s.id_dps_year = de.id_year AND s.id_dps_doc = de.id_doc AND s.id_dps_ety = de.id_ety AND de.b_del = 0 " +
                        "INNER JOIN erp.itmu_unit AS u ON de.fid_orig_unit = u.id_unit " +
                        "INNER JOIN erp.trnu_tp_dps AS t ON d.fid_ct_dps = t.id_ct_dps AND d.fid_cl_dps = t.id_cl_dps AND d.fid_tp_dps = t.id_tp_dps " +
                        "INNER JOIN erp.bpsu_bpb AS b ON d.fid_cob = b.id_bpb " +
                        "INNER JOIN erp.cfgu_cur AS c ON d.fid_cur = c.id_cur " +
                        "WHERE s.id_adj_year = " + moParamDpsEntry.getPkYearId() + " AND s.id_adj_doc = " + moParamDpsEntry.getPkDocId() + " AND s.id_adj_ety = " + moParamDpsEntry.getPkEntryId() + " " +
                        "UNION " +
                        "SELECT DISTINCT 6 AS f_id_type, 'SURTIDO ALMACÉN' AS f_type, d.dt, t.code AS f_code, CONCAT(d.num_ser, IF(LENGTH(d.num_ser) = 0, '', '-'), d.num) AS f_num, " +
                        "0 AS f_tot, 0 AS f_tot_cur, 'N/A' AS f_cur, b.code AS f_cob, 0 AS f_sp, i.item_key AS f_cpt_key, i.item AS f_cpt, " +
                        "de.orig_qty AS f_qty, u.symbol AS f_us, 0 AS f_tot_de, 0 AS f_tot_cur_de, 'N/A' AS f_cur_de " +
                        "FROM trn_diog AS d INNER JOIN trn_diog_ety AS de ON d.id_year = de.id_year AND d.id_doc = de.id_doc AND d.b_del = 0 AND de.b_del = 0 " +
                        "INNER JOIN erp.itmu_item AS i ON de.fid_item = i.id_item " +
                        "INNER JOIN erp.itmu_unit AS u ON de.fid_orig_unit = u.id_unit " +
                        "INNER JOIN erp.trns_tp_iog AS t ON d.fid_ct_iog = t.id_ct_iog AND d.fid_cl_iog = t.id_cl_iog AND d.fid_tp_iog = t.id_tp_iog " +
                        "INNER JOIN erp.bpsu_bpb AS b ON d.fid_cob = b.id_bpb " +
                        "WHERE de.fid_dps_year_n = " + moParamDpsEntry.getPkYearId() + " AND de.fid_dps_doc_n = " + moParamDpsEntry.getPkDocId() + " AND de.fid_dps_ety_n = " + moParamDpsEntry.getPkEntryId() + " AND " +
                        "de.fid_dps_adj_year_n IS NULL AND de.fid_dps_adj_doc_n IS NULL AND de.fid_dps_adj_ety_n IS NULL " +
                        "UNION " +
                        "SELECT DISTINCT 7 AS f_id_type, 'DEVOLUCIÓN ALMACÉN COMO DOCUMENTO' AS f_type, d.dt, t.code AS f_code, CONCAT(d.num_ser, IF(LENGTH(d.num_ser) = 0, '', '-'), d.num) AS f_num, " +
                        "0 AS f_tot, 0 AS f_tot_cur, 'N/A' AS f_cur, b.code AS f_cob, 0 AS f_sp, i.item_key AS f_cpt_key, i.item AS f_cpt, " +
                        "de.orig_qty AS f_qty, u.symbol AS f_us, 0 AS f_tot_de, 0 AS f_tot_cur_de, 'N/A' AS f_cur_de " +
                        "FROM trn_diog AS d INNER JOIN trn_diog_ety AS de ON d.id_year = de.id_year AND d.id_doc = de.id_doc AND d.b_del = 0 AND de.b_del = 0 " +
                        "INNER JOIN erp.itmu_item AS i ON de.fid_item = i.id_item " +
                        "INNER JOIN erp.itmu_unit AS u ON de.fid_orig_unit = u.id_unit " +
                        "INNER JOIN erp.trns_tp_iog AS t ON d.fid_ct_iog = t.id_ct_iog AND d.fid_cl_iog = t.id_cl_iog AND d.fid_tp_iog = t.id_tp_iog " +
                        "INNER JOIN erp.bpsu_bpb AS b ON d.fid_cob = b.id_bpb " +
                        "WHERE de.fid_dps_year_n = " + moParamDpsEntry.getPkYearId() + " AND de.fid_dps_doc_n = " + moParamDpsEntry.getPkDocId() + " AND de.fid_dps_ety_n = " + moParamDpsEntry.getPkEntryId() + " AND " +
                        "de.fid_dps_adj_year_n IS NOT NULL AND de.fid_dps_adj_doc_n IS NOT NULL AND de.fid_dps_adj_ety_n IS NOT NULL " +
                        "UNION " +
                        "SELECT DISTINCT 8 AS f_id_type, 'DEVOLUCIÓN ALMACÉN COMO DOCUMENTO DE AJUSTE' AS f_type, d.dt, t.code AS f_code, CONCAT(d.num_ser, IF(LENGTH(d.num_ser) = 0, '', '-'), d.num) AS f_num, " +
                        "0 AS f_tot, 0 AS f_tot_cur, 'N/A' AS f_cur, b.code AS f_cob, 0 AS f_sp, i.item_key AS f_cpt_key, i.item AS f_cpt, " +
                        "de.orig_qty AS f_qty, u.symbol AS f_us, 0 AS f_tot_de, 0 AS f_tot_cur_de, 'N/A' AS f_cur_de " +
                        "FROM trn_diog AS d INNER JOIN trn_diog_ety AS de ON d.id_year = de.id_year AND d.id_doc = de.id_doc AND d.b_del = 0 AND de.b_del = 0 " +
                        "INNER JOIN erp.itmu_item AS i ON de.fid_item = i.id_item " +
                        "INNER JOIN erp.itmu_unit AS u ON de.fid_orig_unit = u.id_unit " +
                        "INNER JOIN erp.trns_tp_iog AS t ON d.fid_ct_iog = t.id_ct_iog AND d.fid_cl_iog = t.id_cl_iog AND d.fid_tp_iog = t.id_tp_iog " +
                        "INNER JOIN erp.bpsu_bpb AS b ON d.fid_cob = b.id_bpb " +
                        "WHERE de.fid_dps_adj_year_n = " + moParamDpsEntry.getPkYearId() + " AND de.fid_dps_adj_doc_n = " + moParamDpsEntry.getPkDocId() + " AND de.fid_dps_adj_ety_n = " + moParamDpsEntry.getPkEntryId() + " " +
                        "UNION " +
                        "SELECT DISTINCT 10 AS f_id_type, 'PARTIDAS DE COMISIONES' AS f_type, e.dt, '' AS f_code, '' AS f_num, " +
                        "e.comms AS f_tot, 0 AS f_tot_cur, 'N/A' AS f_cur, '' AS f_cob, 0 AS f_sp, '' AS f_cpt_key, '' AS f_cpt, " +
                        "0 AS f_qty, '' AS f_us, e.comms AS f_tot_de, 0 AS f_tot_cur_de, 'N/A' AS f_cur_de  " +
                        "FROM mkt_comms AS e " +
                        "WHERE e.id_year = " + moParamDpsEntry.getPkYearId() + " AND e.id_doc = " + moParamDpsEntry.getPkDocId() + " AND e.id_ety = " + moParamDpsEntry.getPkEntryId() + " AND " +
                        "e.b_del = FALSE " +
                        "ORDER BY f_id_type, f_code, f_num ";

                oRequest = new SServerRequest(SServerConstants.REQ_DB_QUERY_SIMPLE, sSql);
                oResponse = miClient.getSessionXXX().request(oRequest);

                if (oResponse.getResponseType() != SSrvConsts.RESP_TYPE_OK) {
                    throw new Exception(oResponse.getMessage());
                }
                else {
                    for (i = 0; i < maoTableColumnsDpsEntry.length; i++) {
                        moPaneGrid.addTableColumn(maoTableColumnsDpsEntry[i]);
                    }
                    moPaneGrid.createTable();

                    vData = (Vector<Vector<Object>>) oResponse.getPacket();

                    for (Vector<Object> data : vData) {
                        STableRowCustom row = new STableRowCustom();

                        for (i = 1; i < data.size(); i++) {     // index 0 is descarted, used only for ordering purpouses
                            row.getValues().add(data.get(i));
                        }

                        moPaneGrid.addTableRow(row);
                    }
                    moPaneGrid.renderTableRows();
                    moPaneGrid.setTableRowSelection(0);

                    count = vData.size();
                }
            }
            else {
                // DPS links:

                anSubclassKey = moParamDps.getAccMvtSubclassKeyBizPartner();
                anSubclassKeyForAdjs = moParamDps.getAccMvtSubclassKeyBizPartnerAdjustment();

                sSql = "" +
                        "SELECT DISTINCT 1 AS f_id_type, 'VÍNCULO COMO ORIGEN' AS f_type, d.dt, t.code AS f_code, CONCAT(d.num_ser, IF(LENGTH(d.num_ser) = 0, '', '-'), d.num) AS f_num, " +
                        "d.tot_r AS f_tot, d.tot_cur_r AS f_tot_cur, c.cur_key AS f_cur, b.code AS f_cob " +
                        "FROM trn_dps_dps_supply AS s INNER JOIN trn_dps AS d ON s.id_des_year = d.id_year AND s.id_des_doc = d.id_doc AND d.b_del = 0 " +
                        "INNER JOIN erp.trnu_tp_dps AS t ON d.fid_ct_dps = t.id_ct_dps AND d.fid_cl_dps = t.id_cl_dps AND d.fid_tp_dps = t.id_tp_dps " +
                        "INNER JOIN erp.bpsu_bpb AS b ON d.fid_cob = b.id_bpb " +
                        "INNER JOIN erp.cfgu_cur AS c ON d.fid_cur = c.id_cur " +
                        "WHERE s.id_src_year = " + moParamDps.getPkYearId() + " AND s.id_src_doc = " + moParamDps.getPkDocId() + " " +
                        "UNION " +
                        "SELECT DISTINCT 2 AS f_id_type, 'VÍNCULO COMO DESTINO' AS f_type, d.dt, t.code AS f_code, CONCAT(d.num_ser, IF(LENGTH(d.num_ser) = 0, '', '-'), d.num) AS f_num, " +
                        "d.tot_r AS f_tot, d.tot_cur_r AS f_tot_cur, c.cur_key AS f_cur, b.code AS f_cob " +
                        "FROM trn_dps_dps_supply AS s INNER JOIN trn_dps AS d ON s.id_src_year = d.id_year AND s.id_src_doc = d.id_doc AND d.b_del = 0 " +
                        "INNER JOIN erp.trnu_tp_dps AS t ON d.fid_ct_dps = t.id_ct_dps AND d.fid_cl_dps = t.id_cl_dps AND d.fid_tp_dps = t.id_tp_dps " +
                        "INNER JOIN erp.bpsu_bpb AS b ON d.fid_cob = b.id_bpb " +
                        "INNER JOIN erp.cfgu_cur AS c ON d.fid_cur = c.id_cur " +
                        "WHERE s.id_des_year = " + moParamDps.getPkYearId() + " AND s.id_des_doc = " + moParamDps.getPkDocId() + " " +
                        "UNION " +
                        "SELECT DISTINCT 3 AS f_id_type, 'AJUSTE COMO DOCUMENTO' AS f_type, d.dt, t.code AS f_code, CONCAT(d.num_ser, IF(LENGTH(d.num_ser) = 0, '', '-'), d.num) AS f_num, " +
                        "d.tot_r AS f_tot, d.tot_cur_r AS f_tot_cur, c.cur_key AS f_cur, b.code AS f_cob " +
                        "FROM trn_dps_dps_adj AS s INNER JOIN trn_dps AS d ON s.id_adj_year = d.id_year AND s.id_adj_doc = d.id_doc AND d.b_del = 0 " +
                        "INNER JOIN erp.trnu_tp_dps AS t ON d.fid_ct_dps = t.id_ct_dps AND d.fid_cl_dps = t.id_cl_dps AND d.fid_tp_dps = t.id_tp_dps " +
                        "INNER JOIN erp.bpsu_bpb AS b ON d.fid_cob = b.id_bpb " +
                        "INNER JOIN erp.cfgu_cur AS c ON d.fid_cur = c.id_cur " +
                        "WHERE s.id_dps_year = " + moParamDps.getPkYearId() + " AND s.id_dps_doc = " + moParamDps.getPkDocId() + " " +
                        "UNION " +
                        "SELECT DISTINCT 4 AS f_id_type, 'AJUSTE COMO DOCUMENTO DE AJUSTE' AS f_type, d.dt, t.code AS f_code, CONCAT(d.num_ser, IF(LENGTH(d.num_ser) = 0, '', '-'), d.num) AS f_num, " +
                        "d.tot_r AS f_tot, d.tot_cur_r AS f_tot_cur, c.cur_key AS f_cur, b.code AS f_cob " +
                        "FROM trn_dps_dps_adj AS s INNER JOIN trn_dps AS d ON s.id_dps_year = d.id_year AND s.id_dps_doc = d.id_doc AND d.b_del = 0 " +
                        "INNER JOIN erp.trnu_tp_dps AS t ON d.fid_ct_dps = t.id_ct_dps AND d.fid_cl_dps = t.id_cl_dps AND d.fid_tp_dps = t.id_tp_dps " +
                        "INNER JOIN erp.bpsu_bpb AS b ON d.fid_cob = b.id_bpb " +
                        "INNER JOIN erp.cfgu_cur AS c ON d.fid_cur = c.id_cur " +
                        "WHERE s.id_adj_year = " + moParamDps.getPkYearId() + " AND s.id_adj_doc = " + moParamDps.getPkDocId() + " " +
                        /* This link is not necesary, it is redundant:
                        "UNION " +
                        "SELECT DISTINCT 5 AS f_id_type, 'DOCUMENTO SURTIDO O DEVUELTO' AS f_type, d.dt, t.code AS f_code, CONCAT(d.num_ser, IF(LENGTH(d.num_ser) = 0, '', '-'), d.num) AS f_num, " +
                        "0 AS f_tot, 0 AS f_tot_cur, 'N/A' AS f_cur, b.code AS f_cob " +
                        "FROM trn_diog AS d INNER JOIN erp.trns_tp_iog AS t ON d.fid_ct_iog = t.id_ct_iog AND d.fid_cl_iog = t.id_cl_iog AND d.fid_tp_iog = t.id_tp_iog AND d.b_del = 0 " +
                        "INNER JOIN erp.bpsu_bpb AS b ON d.fid_cob = b.id_bpb " +
                        "WHERE d.fid_dps_year_n = " + moParamDps.getPkYearId() + " AND d.fid_dps_doc_n = " + moParamDps.getPkDocId() + " " +
                        */
                        "UNION " +
                        "SELECT DISTINCT 6 AS f_id_type, 'SURTIDO ALMACÉN' AS f_type, d.dt, t.code AS f_code, CONCAT(d.num_ser, IF(LENGTH(d.num_ser) = 0, '', '-'), d.num) AS f_num, " +
                        "0 AS f_tot, 0 AS f_tot_cur, 'N/A' AS f_cur, b.code AS f_cob " +
                        "FROM trn_diog AS d INNER JOIN trn_diog_ety AS de ON d.id_year = de.id_year AND d.id_doc = de.id_doc AND d.b_del = 0 AND de.b_del = 0 " +
                        "INNER JOIN erp.trns_tp_iog AS t ON d.fid_ct_iog = t.id_ct_iog AND d.fid_cl_iog = t.id_cl_iog AND d.fid_tp_iog = t.id_tp_iog " +
                        "INNER JOIN erp.bpsu_bpb AS b ON d.fid_cob = b.id_bpb " +
                        "WHERE de.fid_dps_year_n = " + moParamDps.getPkYearId() + " AND de.fid_dps_doc_n = " + moParamDps.getPkDocId() + " AND " +
                        "de.fid_dps_adj_year_n IS NULL AND de.fid_dps_adj_doc_n IS NULL " +
                        "UNION " +
                        "SELECT DISTINCT 7 AS f_id_type, 'DEVOLUCIÓN ALMACÉN COMO DOCUMENTO' AS f_type, d.dt, t.code AS f_code, CONCAT(d.num_ser, IF(LENGTH(d.num_ser) = 0, '', '-'), d.num) AS f_num, " +
                        "0 AS f_tot, 0 AS f_tot_cur, 'N/A' AS f_cur, b.code AS f_cob " +
                        "FROM trn_diog AS d INNER JOIN trn_diog_ety AS de ON d.id_year = de.id_year AND d.id_doc = de.id_doc AND d.b_del = 0 AND de.b_del = 0 " +
                        "INNER JOIN erp.trns_tp_iog AS t ON d.fid_ct_iog = t.id_ct_iog AND d.fid_cl_iog = t.id_cl_iog AND d.fid_tp_iog = t.id_tp_iog " +
                        "INNER JOIN erp.bpsu_bpb AS b ON d.fid_cob = b.id_bpb " +
                        "WHERE de.fid_dps_year_n = " + moParamDps.getPkYearId() + " AND de.fid_dps_doc_n = " + moParamDps.getPkDocId() + " AND " +
                        "de.fid_dps_adj_year_n IS NOT NULL AND de.fid_dps_adj_doc_n IS NOT NULL " +
                        "UNION " +
                        "SELECT DISTINCT 8 AS f_id_type, 'DEVOLUCIÓN ALMACÉN COMO DOCUMENTO DE AJUSTE' AS f_type, d.dt, t.code AS f_code, CONCAT(d.num_ser, IF(LENGTH(d.num_ser) = 0, '', '-'), d.num) AS f_num, " +
                        "0 AS f_tot, 0 AS f_tot_cur, 'N/A' AS f_cur, b.code AS f_cob " +
                        "FROM trn_diog AS d INNER JOIN trn_diog_ety AS de ON d.id_year = de.id_year AND d.id_doc = de.id_doc AND d.b_del = 0 AND de.b_del = 0 " +
                        "INNER JOIN erp.trns_tp_iog AS t ON d.fid_ct_iog = t.id_ct_iog AND d.fid_cl_iog = t.id_cl_iog AND d.fid_tp_iog = t.id_tp_iog " +
                        "INNER JOIN erp.bpsu_bpb AS b ON d.fid_cob = b.id_bpb " +
                        "WHERE de.fid_dps_adj_year_n = " + moParamDps.getPkYearId() + " AND de.fid_dps_adj_doc_n = " + moParamDps.getPkDocId() + " " +
                        "UNION " +
                        "SELECT DISTINCT 9 AS f_id_type, 'COMISIONES' AS f_type, d.dt, '' AS f_code, '' AS f_num, " +
                        "d.comms AS f_tot, 0 AS f_tot_cur, 'N/A' AS f_cur, '' AS f_cob " +
                        "FROM mkt_comms AS d " +
                        "WHERE d.id_year = " + moParamDps.getPkYearId() + " AND d.id_doc = " + moParamDps.getPkDocId() + " AND d.b_del = FALSE " +
                        "UNION " +
                        "SELECT DISTINCT 10 AS f_id_type, 'PARTIDAS COMISIONES' AS f_type, e.dt, '' AS f_code, '' AS f_num, " +
                        "e.comms AS f_tot, 0 AS f_tot_cur, 'N/A' AS f_cur, '' AS f_cob " +
                        "FROM mkt_comms AS e " +
                        "WHERE e.id_year = " + moParamDps.getPkYearId() + " AND e.id_doc = " + moParamDps.getPkDocId() + " AND e.b_del = FALSE " +
                        "UNION " +
                        "SELECT DISTINCT 11 AS f_id_type, 'REIMPRESIÓN DOC. ANTERIOR' AS f_type, d.dt, t.code AS f_code, CONCAT(d.num_ser, IF(LENGTH(d.num_ser) = 0, '', '-'), d.num) AS f_num, " +
                        "d.tot_r AS f_tot, d.tot_cur_r AS f_tot_cur, c.cur_key AS f_cur, b.code AS f_cob " +
                        "FROM trn_dps_riss AS s INNER JOIN trn_dps AS d ON s.id_new_year = d.id_year AND s.id_new_doc = d.id_doc AND d.b_del = 0 " +
                        "INNER JOIN erp.trnu_tp_dps AS t ON d.fid_ct_dps = t.id_ct_dps AND d.fid_cl_dps = t.id_cl_dps AND d.fid_tp_dps = t.id_tp_dps " +
                        "INNER JOIN erp.bpsu_bpb AS b ON d.fid_cob = b.id_bpb " +
                        "INNER JOIN erp.cfgu_cur AS c ON d.fid_cur = c.id_cur " +
                        "WHERE s.id_old_year = " + moParamDps.getPkYearId() + " AND s.id_old_doc = " + moParamDps.getPkDocId() + " " +
                        "UNION " +
                        "SELECT DISTINCT 12 AS f_id_type, 'REIMPRESIÓN DOC. NUEVO' AS f_type, d.dt, t.code AS f_code, CONCAT(d.num_ser, IF(LENGTH(d.num_ser) = 0, '', '-'), d.num) AS f_num, " +
                        "d.tot_r AS f_tot, d.tot_cur_r AS f_tot_cur, c.cur_key AS f_cur, b.code AS f_cob " +
                        "FROM trn_dps_riss AS s INNER JOIN trn_dps AS d ON s.id_old_year = d.id_year AND s.id_old_doc = d.id_doc AND d.b_del = 0 " +
                        "INNER JOIN erp.trnu_tp_dps AS t ON d.fid_ct_dps = t.id_ct_dps AND d.fid_cl_dps = t.id_cl_dps AND d.fid_tp_dps = t.id_tp_dps " +
                        "INNER JOIN erp.bpsu_bpb AS b ON d.fid_cob = b.id_bpb " +
                        "INNER JOIN erp.cfgu_cur AS c ON d.fid_cur = c.id_cur " +
                        "WHERE s.id_new_year = " + moParamDps.getPkYearId() + " AND s.id_new_doc = " + moParamDps.getPkDocId() + " " +
                        "UNION " +
                        "SELECT DISTINCT 13 AS f_id_type, 'SUSTITUCIÓN DOC. ANTERIOR' AS f_type, d.dt, t.code AS f_code, CONCAT(d.num_ser, IF(LENGTH(d.num_ser) = 0, '', '-'), d.num) AS f_num," +
                        "d.tot_r AS f_tot, d.tot_cur_r AS f_tot_cur, c.cur_key AS f_cur, b.code AS f_cob " +
                        "FROM trn_dps_repl AS s INNER JOIN trn_dps AS d ON s.id_new_year = d.id_year AND s.id_new_doc = d.id_doc AND d.b_del = 0 " +
                        "INNER JOIN erp.trnu_tp_dps AS t ON d.fid_ct_dps = t.id_ct_dps AND d.fid_cl_dps = t.id_cl_dps AND d.fid_tp_dps = t.id_tp_dps " +
                        "INNER JOIN erp.bpsu_bpb AS b ON d.fid_cob = b.id_bpb " +
                        "INNER JOIN erp.cfgu_cur AS c ON d.fid_cur = c.id_cur " +
                        "WHERE s.id_old_year = " + moParamDps.getPkYearId() + " AND s.id_old_doc = " + moParamDps.getPkDocId() + " " +
                        "UNION " +
                        "SELECT DISTINCT 14 AS f_id_type, 'SUSTITUCIÓN DOC. NUEVO' AS f_type, d.dt, t.code AS f_code, CONCAT(d.num_ser, IF(LENGTH(d.num_ser) = 0, '', '-'), d.num) AS f_num, " +
                        "d.tot_r AS f_tot, d.tot_cur_r AS f_tot_cur, c.cur_key AS f_cur, b.code AS f_cob " +
                        "FROM trn_dps_repl AS s INNER JOIN trn_dps AS d ON s.id_old_year = d.id_year AND s.id_old_doc = d.id_doc AND d.b_del = 0 " +
                        "INNER JOIN erp.trnu_tp_dps AS t ON d.fid_ct_dps = t.id_ct_dps AND d.fid_cl_dps = t.id_cl_dps AND d.fid_tp_dps = t.id_tp_dps " +
                        "INNER JOIN erp.bpsu_bpb AS b ON d.fid_cob = b.id_bpb " +
                        "INNER JOIN erp.cfgu_cur AS c ON d.fid_cur = c.id_cur " +
                        "WHERE s.id_new_year = " + moParamDps.getPkYearId() + " AND s.id_new_doc = " + moParamDps.getPkDocId() + " " +
                        "UNION " +
                        "SELECT DISTINCT 15 AS f_id_type, 'CAMBIO FÍSICO' AS f_type, d.dt, t.code AS f_code, CONCAT(d.num_ser, IF(LENGTH(d.num_ser) = 0, '', '-'), d.num) AS f_num, " +
                        "0 AS f_tot, 0 AS f_tot_cur, 'N/A' AS f_cur, b.code AS f_cob " +
                        "FROM trn_dps_iog_chg AS s INNER JOIN trn_diog AS d ON s.id_diog_year = d.id_year AND s.id_diog_doc = d.id_doc AND d.b_del = 0 " +
                        "INNER JOIN erp.trns_tp_iog AS t ON d.fid_ct_iog = t.id_ct_iog AND d.fid_cl_iog = t.id_cl_iog AND d.fid_tp_iog = t.id_tp_iog " +
                        "INNER JOIN erp.bpsu_bpb AS b ON d.fid_cob = b.id_bpb " +
                        "WHERE s.id_dps_year = " + moParamDps.getPkYearId() + " AND s.id_dps_doc = " + moParamDps.getPkDocId() + " " +
                        "UNION " +
                        "SELECT DISTINCT 16 AS f_id_type, 'CAMBIO GARANTÍA' AS f_type, d.dt, t.code AS f_code, CONCAT(d.num_ser, IF(LENGTH(d.num_ser) = 0, '', '-'), d.num) AS f_num, " +
                        "0 AS f_tot, 0 AS f_tot_cur, 'N/A' AS f_cur, b.code AS f_cob " +
                        "FROM trn_dps_iog_war s INNER JOIN trn_diog AS d ON s.id_diog_year = d.id_year AND s.id_diog_doc = d.id_doc AND d.b_del = 0 " +
                        "INNER JOIN erp.trns_tp_iog AS t ON d.fid_ct_iog = t.id_ct_iog AND d.fid_cl_iog = t.id_cl_iog AND d.fid_tp_iog = t.id_tp_iog " +
                        "INNER JOIN erp.bpsu_bpb AS b ON d.fid_cob = b.id_bpb " +
                        "WHERE s.id_dps_year = " + moParamDps.getPkYearId() + " AND s.id_dps_doc = " + moParamDps.getPkDocId() + " " +
                        "UNION " +
                        "SELECT DISTINCT 17 AS f_id_type, 'MOV. ASOC. NEG. ORIGEN' AS f_type, d.dt, t.code AS f_code, '' AS f_num, " +
                        "0 AS f_tot, 0 AS f_tot_cur, 'N/A' AS f_cur, b.code AS f_cob " +
                        "FROM trn_dsm_ety AS s INNER JOIN trn_dsm AS d ON s.id_year = d.id_year AND s.id_doc = d.id_doc AND d.b_del = 0 " +
                        "INNER JOIN erp.bpss_ct_bp AS t ON d.fid_ct_dsm = t.id_ct_bp " +
                        "INNER JOIN erp.bpsu_bpb AS b ON d.fid_cob = b.id_bpb " +
                        "WHERE s.fid_src_dps_year_n = " + moParamDps.getPkYearId() + " AND s.fid_src_dps_doc_n = " + moParamDps.getPkDocId() + " " +
                        "UNION " +
                        "SELECT DISTINCT 18 AS f_id_type, 'MOV. ASOC. NEG. DESTINO' AS f_type, d.dt, t.code AS f_code, '' AS f_num, " +
                        "0 AS f_tot, 0 AS f_tot_cur, 'N/A' AS f_cur, b.code AS f_cob " +
                        "FROM trn_dsm_ety AS s INNER JOIN trn_dsm AS d ON s.id_year = d.id_year AND s.id_doc = d.id_doc AND d.b_del = 0 " +
                        "INNER JOIN erp.bpss_ct_bp AS t ON d.fid_ct_dsm = t.id_ct_bp " +
                        "INNER JOIN erp.bpsu_bpb AS b ON d.fid_cob = b.id_bpb " +
                        "WHERE s.fid_des_dps_year_n = " + moParamDps.getPkYearId() + " AND s.fid_des_dps_doc_n = " + moParamDps.getPkDocId() + " " +
                        "UNION " +
                        "SELECT DISTINCT 19 AS f_id_type, 'PÓLIZA DOCUMENTO' AS f_type, r.dt, '' AS f_code, CONCAT(r.id_tp_rec, '-', erp.lib_fix_int(r.id_num, " + SDataConstantsSys.NUM_LEN_FIN_REC + ")) AS f_num, " +
                        "re.debit + re.credit AS f_tot, re.debit_cur + re.credit_cur AS f_tot_cur, c.cur_key AS f_cur, b.code AS f_cob " +
                        "FROM fin_rec_ety AS re INNER JOIN fin_rec AS r ON re.id_year = r.id_year AND re.id_per = r.id_per AND re.id_bkc = r.id_bkc AND re.id_tp_rec = r.id_tp_rec AND re.id_num = r.id_num AND r.b_del = 0 AND re.b_del = 0 " +
                        "INNER JOIN erp.bpsu_bpb AS b ON r.fid_cob = b.id_bpb " +
                        "INNER JOIN erp.cfgu_cur AS c ON re.fid_cur = c.id_cur " +
                        "WHERE re.fid_dps_year_n = " + moParamDps.getPkYearId() + " AND re.fid_dps_doc_n = " + moParamDps.getPkDocId() + " AND re.b_del = FALSE AND r.b_del = FALSE " +
                        (anSubclassKey == null ? "" : "AND NOT (fid_tp_acc_mov = " + anSubclassKey[0] + " AND fid_cl_acc_mov = " + anSubclassKey[1] + " AND fid_cls_acc_mov = " + anSubclassKey[2] + ") ") +
                        (anSubclassKeyForAdjs == null ? "" : "AND NOT (fid_tp_acc_mov = " + anSubclassKeyForAdjs[0] + " AND fid_cl_acc_mov = " + anSubclassKeyForAdjs[1] + " AND fid_cls_acc_mov = " + anSubclassKeyForAdjs[2] + ") ") +
                        "UNION " +
                        "SELECT DISTINCT 20 AS f_id_type, 'PÓLIZA DOCUMENTO AJUSTE' AS f_type, r.dt, '' AS f_code, CONCAT(r.id_tp_rec, '-', erp.lib_fix_int(r.id_num, " + SDataConstantsSys.NUM_LEN_FIN_REC + ")) AS f_num," +
                        "re.debit + re.credit AS f_tot, re.debit_cur + re.credit_cur AS f_tot_cur, c.cur_key AS f_cur, b.code AS f_cob " +
                        "FROM fin_rec_ety AS re INNER JOIN fin_rec AS r ON re.id_year = r.id_year AND re.id_per = r.id_per AND re.id_bkc = r.id_bkc AND re.id_tp_rec = r.id_tp_rec AND re.id_num = r.id_num AND r.b_del = 0 AND re.b_del = 0 " +
                        "INNER JOIN erp.bpsu_bpb AS b ON r.fid_cob = b.id_bpb " +
                        "INNER JOIN erp.cfgu_cur AS c ON re.fid_cur = c.id_cur " +
                        "WHERE fid_dps_adj_year_n = " + moParamDps.getPkYearId() + " AND fid_dps_adj_doc_n = " + moParamDps.getPkDocId() + " AND re.b_del = FALSE AND r.b_del = FALSE " +
                        (anSubclassKey == null ? "" : "AND NOT (fid_tp_acc_mov = " + anSubclassKey[0] + " AND fid_cl_acc_mov = " + anSubclassKey[1] + " AND fid_cls_acc_mov = " + anSubclassKey[2] + ") ") +
                        (anSubclassKeyForAdjs == null ? "" : "AND NOT (fid_tp_acc_mov = " + anSubclassKeyForAdjs[0] + " AND fid_cl_acc_mov = " + anSubclassKeyForAdjs[1] + " AND fid_cls_acc_mov = " + anSubclassKeyForAdjs[2] + ") ") +
                        "UNION " +
                        "SELECT DISTINCT 21 AS f_id_type, 'VÍNCULO COMO ORIGEN' AS f_type, d.dt, 'ENT' AS f_code, d.num, 0.0 AS f_tot, 0.0 AS f_tot_cur, '' AS f_cur, '' AS f_cob " +
                        "FROM trn_dvy AS d " +
                        "INNER JOIN trn_dvy_ety AS de ON d.id_dvy = de.id_dvy " +
                        "WHERE NOT d.b_del AND ((de.fk_dps_year =  " + moParamDps.getPkYearId() + " AND de.fk_dps_doc =  " + moParamDps.getPkDocId() + ") " +
                        "OR (de.fk_ord_year =  " + moParamDps.getPkYearId() + " AND de.fk_ord_doc =  " + moParamDps.getPkDocId() + ")) "+
                        "ORDER BY f_id_type, f_code, f_num ";

                oRequest = new SServerRequest(SServerConstants.REQ_DB_QUERY_SIMPLE, sSql);
                oResponse = miClient.getSessionXXX().request(oRequest);

                if (oResponse.getResponseType() != SSrvConsts.RESP_TYPE_OK) {
                    throw new Exception(oResponse.getMessage());
                }
                else {
                    for (i = 0; i < maoTableColumnsDps.length; i++) {
                        moPaneGrid.addTableColumn(maoTableColumnsDps[i]);
                    }
                    moPaneGrid.createTable();

                    vData = (Vector<Vector<Object>>) oResponse.getPacket();

                    for (Vector<Object> data : vData) {
                        STableRowCustom row = new STableRowCustom();

                        for (i = 1; i < data.size(); i++) {     // index 0 is descarted, used only for ordering purpouses
                            row.getValues().add(data.get(i));
                        }

                        moPaneGrid.addTableRow(row);
                    }
                    moPaneGrid.renderTableRows();
                    moPaneGrid.setTableRowSelection(0);

                    count = vData.size();
                }
            }
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }

        return count;
    }
}
