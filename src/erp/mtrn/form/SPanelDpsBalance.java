/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SPanelDpsBalance.java
 *
 * Created on 11/02/2010, 05:40:47 PM
 */

package erp.mtrn.form;

import java.text.DecimalFormat;
import javax.swing.JButton;
import java.util.Vector;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SProcConstants;
import erp.data.SDataUtilities;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.mbps.data.SDataBizPartner;
import erp.mbps.data.SDataBizPartnerBranch;
import erp.mtrn.data.SDataDps;
import erp.mtrn.form.SFormOptionPickerDpsBalance;
import erp.mtrn.form.SPanelCurrency;
import erp.mtrn.form.SPanelDpsBalance;
import erp.mtrn.form.SPanelReference;

/**
 *
 * @author Néstor Ávalos
 */
public class SPanelDpsBalance extends javax.swing.JPanel implements java.awt.event.ActionListener {

    private erp.client.SClientInterface miClient;

    private java.util.Vector<erp.lib.form.SFormField> mvFields;

    private erp.lib.form.SFormField moFieldFkDpsId;
    private erp.lib.form.SFormField moFieldValueDps;
    private erp.lib.form.SFormField moFieldBalance;

    private erp.lib.form.SFormField moFieldValue;
    private erp.lib.form.SFormField moFieldExchangeRate;
    private erp.lib.form.SFormField moFieldExchangeRateSystem;
    private erp.lib.form.SFormField moFieldValueCy;
    private erp.lib.form.SFormField moFieldFkCurrencyId;

    private double mdParamValueCyPanel;
    private int mnParamDsmEtyType;
    private int mnParamFkBizPartnerId;
    private int mnParamFkDpsCategoryId;
    private int mnParamTpSysMovId[];
    private java.lang.String msNumberDps;
    private java.util.Date mtParamDate;

    private erp.mtrn.form.SPanelDpsBalance moParamPanelFkDpsId;
    private erp.mtrn.form.SPanelReference moParamPanelFkReferenceId;
    private erp.mtrn.form.SPanelCurrency moParamPanelFkCurrencyId;

    /**
     * Creates new form SPanel
     *
     */
    public SPanelDpsBalance(erp.client.SClientInterface client, int nFkTpSysMovId[], int bizPartnerId, int dsmEtyType) throws java.lang.Exception {
        miClient = client;
        mnParamTpSysMovId = nFkTpSysMovId;
        mnParamFkBizPartnerId = bizPartnerId;
        mnParamFkDpsCategoryId = 0;
        mnParamDsmEtyType = dsmEtyType;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel27 = new javax.swing.JPanel();
        jlFkDpsId = new javax.swing.JLabel();
        jPanel46 = new javax.swing.JPanel();
        jcbFkDpsId = new javax.swing.JComboBox();
        jPanel47 = new javax.swing.JPanel();
        jbFkDpsId = new javax.swing.JButton();
        jPanel60 = new javax.swing.JPanel();
        jlBranch = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jtfBranch = new javax.swing.JTextField();
        jPanel63 = new javax.swing.JPanel();
        jPanel68 = new javax.swing.JPanel();
        jlValueDps = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jtfValueDps = new javax.swing.JTextField();
        jPanel70 = new javax.swing.JPanel();
        jPanel71 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jlBalance = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        jtfBalance = new javax.swing.JTextField();
        jPanel75 = new javax.swing.JPanel();
        jPanel76 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jPanel62 = new javax.swing.JPanel();
        jlFkCurrencyId = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jcbFkCurrencyId = new javax.swing.JComboBox();
        jPanel66 = new javax.swing.JPanel();
        jbFkCurrencyId = new javax.swing.JButton();
        jPanel69 = new javax.swing.JPanel();
        jlValueCy = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        jtfValueCy = new javax.swing.JTextField();
        jPanel72 = new javax.swing.JPanel();
        jbValueCy = new javax.swing.JButton();
        jPanel73 = new javax.swing.JPanel();
        jlExchangeRateSystem = new javax.swing.JLabel();
        jPanel15 = new javax.swing.JPanel();
        jtfExchangeRateSystem = new javax.swing.JTextField();
        jbExchangeRateSystem = new javax.swing.JButton();
        jPanel67 = new javax.swing.JPanel();
        jPanel77 = new javax.swing.JPanel();
        jlValue = new javax.swing.JLabel();
        jPanel16 = new javax.swing.JPanel();
        jtfValue = new javax.swing.JTextField();
        jPanel78 = new javax.swing.JPanel();
        jbValue = new javax.swing.JButton();
        jPanel79 = new javax.swing.JPanel();
        jlExchangeRate = new javax.swing.JLabel();
        jPanel17 = new javax.swing.JPanel();
        jtfExchangeRate = new javax.swing.JTextField();
        jbExchangeRate = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.GridLayout(7, 1, 0, 1));

        jPanel27.setLayout(new java.awt.BorderLayout(5, 0));

        jlFkDpsId.setText("Doc. compras-ventas: *");
        jlFkDpsId.setPreferredSize(new java.awt.Dimension(130, 14));
        jPanel27.add(jlFkDpsId, java.awt.BorderLayout.WEST);

        jPanel46.setLayout(new java.awt.BorderLayout(5, 5));

        jcbFkDpsId.setMaximumRowCount(16);
        jcbFkDpsId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbFkDpsId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbFkDpsIdItemStateChanged(evt);
            }
        });
        jPanel46.add(jcbFkDpsId, java.awt.BorderLayout.CENTER);

        jPanel47.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel47.setLayout(new java.awt.BorderLayout(5, 0));

        jbFkDpsId.setText("...");
        jbFkDpsId.setToolTipText("Seleccionar doc. compra-venta");
        jbFkDpsId.setFocusable(false);
        jbFkDpsId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel47.add(jbFkDpsId, java.awt.BorderLayout.EAST);

        jPanel46.add(jPanel47, java.awt.BorderLayout.EAST);

        jPanel27.add(jPanel46, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel27);

        jPanel60.setLayout(new java.awt.BorderLayout(5, 5));

        jlBranch.setText("Sucursal de la empresa:");
        jlBranch.setPreferredSize(new java.awt.Dimension(130, 14));
        jPanel60.add(jlBranch, java.awt.BorderLayout.WEST);

        jPanel7.setLayout(new java.awt.BorderLayout(5, 0));

        jPanel2.setLayout(new java.awt.BorderLayout());

        jtfBranch.setEditable(false);
        jtfBranch.setText("BRANCH");
        jtfBranch.setFocusable(false);
        jtfBranch.setPreferredSize(new java.awt.Dimension(150, 20));
        jPanel2.add(jtfBranch, java.awt.BorderLayout.WEST);

        jPanel7.add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel63.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel63.setLayout(new java.awt.BorderLayout());
        jPanel7.add(jPanel63, java.awt.BorderLayout.EAST);

        jPanel60.add(jPanel7, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel60);

        jPanel68.setLayout(new java.awt.BorderLayout(5, 0));

        jlValueDps.setText("Valor original:");
        jlValueDps.setPreferredSize(new java.awt.Dimension(130, 14));
        jPanel68.add(jlValueDps, java.awt.BorderLayout.WEST);

        jPanel11.setLayout(new java.awt.BorderLayout(5, 0));

        jtfValueDps.setEditable(false);
        jtfValueDps.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfValueDps.setText("00,000,000.0000");
        jtfValueDps.setFocusable(false);
        jtfValueDps.setPreferredSize(new java.awt.Dimension(100, 20));
        jPanel11.add(jtfValueDps, java.awt.BorderLayout.WEST);

        jPanel70.setLayout(new java.awt.BorderLayout(15, 0));

        jPanel71.setLayout(new java.awt.BorderLayout(5, 0));

        jPanel8.setLayout(new java.awt.BorderLayout(5, 0));

        jlBalance.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jlBalance.setText("Saldo:");
        jlBalance.setPreferredSize(new java.awt.Dimension(94, 14));
        jlBalance.setRequestFocusEnabled(false);
        jPanel8.add(jlBalance, java.awt.BorderLayout.WEST);

        jPanel13.setLayout(new java.awt.BorderLayout(5, 0));

        jtfBalance.setEditable(false);
        jtfBalance.setFont(new java.awt.Font("Tahoma", 1, 11));
        jtfBalance.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfBalance.setText("00,000,000.0000");
        jtfBalance.setFocusable(false);
        jtfBalance.setPreferredSize(new java.awt.Dimension(100, 20));
        jPanel13.add(jtfBalance, java.awt.BorderLayout.WEST);

        jPanel75.setLayout(new java.awt.BorderLayout(15, 0));

        jPanel76.setLayout(new java.awt.BorderLayout(5, 0));

        jPanel14.setLayout(new java.awt.BorderLayout(5, 0));
        jPanel76.add(jPanel14, java.awt.BorderLayout.CENTER);

        jPanel75.add(jPanel76, java.awt.BorderLayout.CENTER);

        jPanel13.add(jPanel75, java.awt.BorderLayout.CENTER);

        jPanel8.add(jPanel13, java.awt.BorderLayout.CENTER);

        jPanel71.add(jPanel8, java.awt.BorderLayout.CENTER);

        jPanel70.add(jPanel71, java.awt.BorderLayout.CENTER);

        jPanel11.add(jPanel70, java.awt.BorderLayout.CENTER);

        jPanel68.add(jPanel11, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel68);

        jPanel62.setLayout(new java.awt.BorderLayout(5, 5));

        jlFkCurrencyId.setText("Moneda: *");
        jlFkCurrencyId.setPreferredSize(new java.awt.Dimension(130, 14));
        jPanel62.add(jlFkCurrencyId, java.awt.BorderLayout.WEST);

        jPanel10.setLayout(new java.awt.BorderLayout(5, 0));

        jPanel5.setLayout(new java.awt.BorderLayout(5, 0));

        jcbFkCurrencyId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbFkCurrencyId.setEnabled(false);
        jcbFkCurrencyId.setLightWeightPopupEnabled(false);
        jcbFkCurrencyId.setPreferredSize(new java.awt.Dimension(150, 20));
        jcbFkCurrencyId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbFkCurrencyIdItemStateChanged(evt);
            }
        });
        jPanel5.add(jcbFkCurrencyId, java.awt.BorderLayout.WEST);

        jPanel66.setLayout(new java.awt.BorderLayout());

        jbFkCurrencyId.setText("...");
        jbFkCurrencyId.setToolTipText("Seleccionar moneda");
        jbFkCurrencyId.setEnabled(false);
        jbFkCurrencyId.setFocusable(false);
        jbFkCurrencyId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel66.add(jbFkCurrencyId, java.awt.BorderLayout.WEST);

        jPanel5.add(jPanel66, java.awt.BorderLayout.CENTER);

        jPanel10.add(jPanel5, java.awt.BorderLayout.CENTER);

        jPanel62.add(jPanel10, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel62);

        jPanel69.setLayout(new java.awt.BorderLayout(5, 0));

        jlValueCy.setText("Valor: *");
        jlValueCy.setPreferredSize(new java.awt.Dimension(130, 14));
        jPanel69.add(jlValueCy, java.awt.BorderLayout.WEST);

        jPanel12.setLayout(new java.awt.BorderLayout(5, 0));

        jtfValueCy.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfValueCy.setText("00,000,000.0000");
        jtfValueCy.setPreferredSize(new java.awt.Dimension(100, 20));
        jtfValueCy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfValueCyFocusLost(evt);
            }
        });
        jPanel12.add(jtfValueCy, java.awt.BorderLayout.WEST);

        jPanel72.setLayout(new java.awt.BorderLayout(15, 0));

        jbValueCy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_action.gif"))); // NOI18N
        jbValueCy.setToolTipText("Calcular valor del documento");
        jbValueCy.setFocusable(false);
        jbValueCy.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel72.add(jbValueCy, java.awt.BorderLayout.WEST);

        jPanel73.setLayout(new java.awt.BorderLayout(5, 0));

        jlExchangeRateSystem.setText("T. cambio sist.:");
        jlExchangeRateSystem.setMaximumSize(new java.awt.Dimension(82, 14));
        jlExchangeRateSystem.setPreferredSize(new java.awt.Dimension(75, 14));
        jPanel73.add(jlExchangeRateSystem, java.awt.BorderLayout.WEST);

        jPanel15.setLayout(new java.awt.BorderLayout(5, 0));

        jtfExchangeRateSystem.setEditable(false);
        jtfExchangeRateSystem.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfExchangeRateSystem.setText("00.0000");
        jtfExchangeRateSystem.setFocusable(false);
        jPanel15.add(jtfExchangeRateSystem, java.awt.BorderLayout.CENTER);

        jbExchangeRateSystem.setText("...");
        jbExchangeRateSystem.setToolTipText("Seleccionar t. cambio sistema");
        jbExchangeRateSystem.setFocusable(false);
        jbExchangeRateSystem.setPreferredSize(new java.awt.Dimension(23, 23));
        jbExchangeRateSystem.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_action.gif"))); // NOI18N
        jPanel15.add(jbExchangeRateSystem, java.awt.BorderLayout.EAST);

        jPanel73.add(jPanel15, java.awt.BorderLayout.CENTER);

        jPanel72.add(jPanel73, java.awt.BorderLayout.CENTER);

        jPanel12.add(jPanel72, java.awt.BorderLayout.CENTER);

        jPanel69.add(jPanel12, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel69);

        jPanel67.setLayout(new java.awt.BorderLayout(5, 5));

        jPanel77.setLayout(new java.awt.BorderLayout(5, 0));

        jlValue.setText("Valor moneda local: *");
        jlValue.setPreferredSize(new java.awt.Dimension(130, 14));
        jlValue.setRequestFocusEnabled(false);
        jPanel77.add(jlValue, java.awt.BorderLayout.WEST);

        jPanel16.setLayout(new java.awt.BorderLayout(5, 0));

        jtfValue.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfValue.setText("00,000,000.0000");
        jtfValue.setPreferredSize(new java.awt.Dimension(100, 20));
        jtfValue.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfValueFocusLost(evt);
            }
        });
        jPanel16.add(jtfValue, java.awt.BorderLayout.WEST);

        jPanel78.setLayout(new java.awt.BorderLayout(15, 0));

        jbValue.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_action.gif"))); // NOI18N
        jbValue.setToolTipText("Calcular valor de la moneda");
        jbValue.setFocusable(false);
        jbValue.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel78.add(jbValue, java.awt.BorderLayout.WEST);

        jPanel79.setLayout(new java.awt.BorderLayout(5, 0));

        jlExchangeRate.setText("T. cambio: *");
        jlExchangeRate.setPreferredSize(new java.awt.Dimension(75, 14));
        jPanel79.add(jlExchangeRate, java.awt.BorderLayout.WEST);

        jPanel17.setLayout(new java.awt.BorderLayout(5, 0));

        jtfExchangeRate.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfExchangeRate.setText("00.0000");
        jtfExchangeRate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfExchangeRateFocusLost(evt);
            }
        });
        jPanel17.add(jtfExchangeRate, java.awt.BorderLayout.CENTER);

        jbExchangeRate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_action.gif"))); // NOI18N
        jbExchangeRate.setToolTipText("calcular t. cambio");
        jbExchangeRate.setFocusable(false);
        jbExchangeRate.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel17.add(jbExchangeRate, java.awt.BorderLayout.EAST);

        jPanel79.add(jPanel17, java.awt.BorderLayout.CENTER);

        jPanel78.add(jPanel79, java.awt.BorderLayout.CENTER);

        jPanel16.add(jPanel78, java.awt.BorderLayout.CENTER);

        jPanel77.add(jPanel16, java.awt.BorderLayout.CENTER);

        jPanel67.add(jPanel77, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel67);

        add(jPanel1, java.awt.BorderLayout.PAGE_START);
    }// </editor-fold>//GEN-END:initComponents

    private void jcbFkDpsIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbFkDpsIdItemStateChanged
        itemStateChangedFkDpsId();
}//GEN-LAST:event_jcbFkDpsIdItemStateChanged

    private void jcbFkCurrencyIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbFkCurrencyIdItemStateChanged
        renderCurrencySettings();
}//GEN-LAST:event_jcbFkCurrencyIdItemStateChanged

    private void jtfValueFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfValueFocusLost
        actionValueFocusLost();
    }//GEN-LAST:event_jtfValueFocusLost

    private void jtfValueCyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfValueCyFocusLost
        actionValueCyFocusLost();
    }//GEN-LAST:event_jtfValueCyFocusLost

    private void jtfExchangeRateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfExchangeRateFocusLost
        actionExchangeRateFocusLost();
    }//GEN-LAST:event_jtfExchangeRateFocusLost

    private void initComponentsExtra() {
        mvFields = new Vector<SFormField>();

        moFieldFkDpsId = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkDpsId, jlFkDpsId);
        moFieldFkDpsId.setPickerButton(jbFkDpsId);
        moFieldValueDps = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfValueDps, jlValueDps);
        moFieldValueDps.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsValueFormat());
        moFieldBalance = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfBalance, jlBalance);
        moFieldBalance.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsValueFormat());

        moFieldFkCurrencyId = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkCurrencyId, jlFkCurrencyId);
        moFieldValue = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfValue, jlValue);
        moFieldValue.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsValueFormat());
        moFieldValue.setMinInclusive(true);
        moFieldValueCy = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfValueCy, jlValueCy);
        moFieldValueCy.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsValueFormat());
        moFieldValueCy.setMinInclusive(true);
        moFieldExchangeRate = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfExchangeRate, jlExchangeRate);
        moFieldExchangeRate.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsExchangeRateFormat());
        moFieldExchangeRate.setMinInclusive(true);
        moFieldExchangeRateSystem = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfExchangeRateSystem, jlExchangeRateSystem);
        moFieldExchangeRateSystem.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsExchangeRateFormat());

        mvFields.add(moFieldFkDpsId);
        mvFields.add(moFieldValueDps);
        mvFields.add(moFieldBalance);
        mvFields.add(moFieldFkCurrencyId);
        mvFields.add(moFieldValue);
        mvFields.add(moFieldExchangeRate);
        mvFields.add(moFieldExchangeRateSystem);
        mvFields.add(moFieldValueCy);

        jbFkCurrencyId.addActionListener(this);
        jbValueCy.addActionListener(this);
        jbValue.addActionListener(this);
        jbExchangeRateSystem.addActionListener(this);
        jbExchangeRate.addActionListener(this);
        jbFkDpsId.addActionListener(this);
    }

    private void itemStateChangedFkDpsId() {
        if (jcbFkDpsId.getSelectedIndex() >  0) {
            renderDps(moFieldFkDpsId.getKey());
        }
        else {
            resetValues(true);
            enableFields(false);
        }
    }

    private void actionFkDpsId() {
        SFormOptionPickerDpsBalance picker = new SFormOptionPickerDpsBalance(miClient, SDataConstants.TRNX_DPS_BAL);

        if (mnParamFkBizPartnerId > 0) {
            picker.setFilterKey(new Object[] { mnParamTpSysMovId, mnParamFkBizPartnerId, SDataConstantsSys.TRNX_DPS_BAL_PAY_PEND });
            picker.formRefreshOptionPane();
            picker.formReset();
            picker.setSelectedPrimaryKey(moFieldFkDpsId.getKey());
            picker.setFormVisible(true);

            if (picker.getFormResult() == SLibConstants.FORM_RESULT_OK) {
                moFieldFkDpsId.setKey(picker.getSelectedPrimaryKey());
                renderDps(moFieldFkDpsId.getKey());
                jcbFkDpsId.requestFocus();
            }
        }
        else {
            miClient.showMsgBoxWarning("No ha seleccionado un asociado de negocios.");
        }
    }

    private void renderDps(java.lang.Object pk) {
        DecimalFormat format = miClient.getSessionXXX().getFormatters().getDecimalsValueFormat();
        SDataDps oDps = null;
        SDataBizPartner oBizPartner = null;
        SDataBizPartnerBranch bizPartnerBranch = null;
        Vector<Object> mvParams = new Vector<Object>();

        if (jcbFkDpsId.getSelectedIndex() > 0) {
            oDps = (SDataDps) SDataUtilities.readRegistry(miClient, SDataConstants.TRN_DPS, new int[] { ((int []) pk)[0], ((int []) pk)[1] }, SLibConstants.EXEC_MODE_SILENT);

            if (oDps != null) {
                oBizPartner = (SDataBizPartner) SDataUtilities.readRegistry(miClient, SDataConstants.BPSU_BP, new int[] { mnParamFkBizPartnerId }, SLibConstants.EXEC_MODE_VERBOSE);

                if (oBizPartner.getDbmsBizPartnerBranches().size() > 0) {
                    bizPartnerBranch = oBizPartner.getDbmsBizPartnerBranches().get(0);

                    if (bizPartnerBranch != null) {
                        jtfBranch.setText(bizPartnerBranch.getBizPartnerBranch());
                    }
                }

                moFieldFkCurrencyId.setKey(new int[] { oDps.getFkCurrencyId() });
                renderCurrencySettings();
                mnParamFkDpsCategoryId = oDps.getFkDpsCategoryId();
                jtfValueDps.setText(format.format(oDps.getTotalCy_r()));
                msNumberDps = (oDps.getDpsNumber());
                renderGetValueCyPanels(moFieldFkCurrencyId.getKey());

                mvParams.removeAllElements();
                mvParams.add(((int []) pk)[0]);
                mvParams.add(((int []) pk)[1]);
                mvParams.add(mnParamTpSysMovId);
                mvParams = SDataUtilities.callProcedure(miClient, SProcConstants.TRN_DPS_BAL_GET, mvParams, SLibConstants.EXEC_MODE_SILENT);

                if (mvParams.size() > 0) {
                    jtfBalance.setText(format.format(SLibUtilities.parseDouble(mvParams.get(1).toString())));
                }
                else {
                    moFieldBalance.setDouble(0.0);
                }
            }

            jcbFkDpsId.requestFocus();
        }
    }

    private void renderSetValueCyPanelDps(erp.mtrn.form.SPanelDpsBalance oPanel, java.lang.Object oKey, double dValueCy, double dValue, double dExchangeRate, double dExchangeRateSystem) {
        if (oPanel.getFieldFkCurrencyId().getKeyAsIntArray()[0] > 0) {

            if (SLibUtilities.compareKeys(oKey, oPanel.getFieldFkCurrencyId().getKey())) {
                oPanel.renderSetValueCurrency(dValueCy, dValue, dExchangeRate, dExchangeRateSystem, false);
            }
            else {
                oPanel.renderSetValueCurrency(dValueCy, dValue, dExchangeRate, dExchangeRateSystem, true);
            }
        }
    }

    private void renderSetValueCyPanelReference(erp.mtrn.form.SPanelReference oPanel, java.lang.Object oKey, double dValueCy, double dValue, double dExchangeRate, double dExchangeRateSystem) {
        if (oPanel.getFieldFkCurrencyId().getKeyAsIntArray()[0] > 0) {

            if (SLibUtilities.compareKeys(oKey, oPanel.getFieldFkCurrencyId().getKey())) {
                oPanel.renderSetValueCurrency(dValueCy, dValue, dExchangeRate, dExchangeRateSystem, false);
            }
            else {
                oPanel.renderSetValueCurrency(dValueCy, dValue, dExchangeRate, dExchangeRateSystem, true);
            }
        }
    }

    private void renderSetValueCyPanelCurrency(erp.mtrn.form.SPanelCurrency oPanel, java.lang.Object oKey, double dValueCy, double dValue, double dExchangeRate, double dExchangeRateSystem) {
        if (oPanel.getFieldFkCurrencyId().getKeyAsIntArray()[0] > 0) {

            if (SLibUtilities.compareKeys(oKey, oPanel.getFieldFkCurrencyId().getKey())) {
                oPanel.renderSetValueCurrency(dValueCy, dValue, dExchangeRate, dExchangeRateSystem, false);
            }
            else {
                oPanel.renderSetValueCurrency(dValueCy, dValue, dExchangeRate, dExchangeRateSystem, true);
            }
        }
    }

    private void renderGetValueCyPanelDps(erp.mtrn.form.SPanelDpsBalance oPanel, java.lang.Object oKey) {
        if (SLibUtilities.compareKeys(oKey, oPanel.getFieldFkCurrencyId().getKey())) {
            renderSetValueCurrency(oPanel.getFieldValueCy().getDouble(), oPanel.getFieldValue().getDouble(), oPanel.getFieldExchangeRate().getDouble(), oPanel.getFieldExchangeRateSystem().getDouble(), false);
        }
    }

    private void renderGetValueCyPanelReference(erp.mtrn.form.SPanelReference oPanel, java.lang.Object oKey) {
        if (SLibUtilities.compareKeys(oKey, oPanel.getFieldFkCurrencyId().getKey())) {
            renderSetValueCurrency(oPanel.getFieldValueCy().getDouble(), oPanel.getFieldValue().getDouble(), oPanel.getFieldExchangeRate().getDouble(), oPanel.getFieldExchangeRateSystem().getDouble(), false);
        }
    }

    private void renderGetValueCyPanelCurrency(erp.mtrn.form.SPanelCurrency oPanel, java.lang.Object oKey) {
        if (SLibUtilities.compareKeys(oKey, oPanel.getFieldFkCurrencyId().getKey())) {
            renderSetValueCurrency(oPanel.getFieldValueCy().getDouble(), oPanel.getFieldValue().getDouble(), oPanel.getFieldExchangeRate().getDouble(), oPanel.getFieldExchangeRateSystem().getDouble(), false);
        }
    }

    private void enableFieldsDps(boolean b) {
        jcbFkDpsId.setEnabled(b);
        jbFkDpsId.setEnabled(b);
    }

    private void enableFieldsCurrency(boolean b) {
        jtfBranch.setEnabled(b);
        jtfValueCy.setEnabled(b);
        jbValueCy.setEnabled(b);
        jtfExchangeRate.setEnabled(b);
        jbExchangeRate.setEnabled(b);
        jtfExchangeRateSystem.setEnabled(b);
        jbExchangeRateSystem.setEnabled(b);

        jtfValueDps.setEnabled(b);
        jtfBalance.setEnabled(b);

        if (mnParamDsmEtyType != SDataConstants.TRNX_DSM_ETY_DESTINY) {
            jtfValue.setEnabled(b);
            jbValue.setEnabled(b);
        }
    }

    private void enableFieldsPanelsCurrency(boolean b) {
        if (SLibUtilities.compareKeys(moFieldFkCurrencyId.getKey(), new int[] { miClient.getSessionXXX().getParamsErp().getFkCurrencyId() })) {

            jbValueCy.setEnabled(false);

            jtfExchangeRateSystem.setEnabled(false);
            jbExchangeRateSystem.setEnabled(false);

            jtfExchangeRate.setEnabled(false);
            jbExchangeRate.setEnabled(false);
        } else {
            jbValueCy.setEnabled(b);

            jtfExchangeRateSystem.setEnabled(b);
            jbExchangeRateSystem.setEnabled(b);

            jtfExchangeRate.setEnabled(b);
            jbExchangeRate.setEnabled(b);
        }

        jtfValueCy.setEnabled(b);
    }

    private void actionFkCurrencyId() {
        miClient.pickOption(SDataConstants.CFGU_CUR, moFieldFkCurrencyId, null);
    }

    private void renderCurrencySettings() {
        double rate = 0;

        if (jcbFkDpsId.getSelectedIndex() > 0) {
            if (jcbFkCurrencyId.getItemCount() > 1) {
                if (SLibUtilities.compareKeys(moFieldFkCurrencyId.getKey(), new int[] { miClient.getSessionXXX().getParamsErp().getFkCurrencyId() })) {
                    // Local currency:

                    jtfExchangeRateSystem.setEnabled(false);
                    jbExchangeRateSystem.setEnabled(false);

                    jtfExchangeRate.setEnabled(false);
                    jbExchangeRate.setEnabled(false);

                    jtfValue.setEnabled(false);
                    jbValue.setEnabled(false);

                    jtfValueCy.setEnabled(true);
                    jbValueCy.setEnabled(false);

                    moFieldExchangeRate.setFieldValue(1.0);
                }
                else {
                    // Foreign currency:

                    jtfExchangeRateSystem.setEnabled(true);
                    jbExchangeRateSystem.setEnabled(true);

                    jtfExchangeRate.setEnabled(true);
                    jbExchangeRate.setEnabled(true);

                    jtfValueCy.setEnabled(true);
                    jbValueCy.setEnabled(true);

                    // Check if panel is destiny to keep disabled the field value:

                    if (mnParamDsmEtyType != SDataConstants.TRNX_DSM_ETY_DESTINY) {
                        jtfValue.setEnabled(true);
                        jbValue.setEnabled(true);
                    }

                    // Check if valueCy or value is cero to initialize the field exchangeRate:

                    if (moFieldValueCy.getDouble() == 0 || moFieldValue.getDouble() == 0) {
                        moFieldExchangeRate.setFieldValue(0.0);
                    }

                    if (moFieldExchangeRate.getDouble() == 0) {
                        try {
                            rate = SDataUtilities.obtainExchangeRate(miClient, moFieldFkCurrencyId.getKeyAsIntArray()[0], mtParamDate);
                        }
                        catch (Exception e) {
                            SLibUtilities.renderException(this, e);
                        }

                        if (rate != 0) {
                            moFieldExchangeRateSystem.setFieldValue(rate);
                            moFieldExchangeRate.setFieldValue(rate);
                        }
                    }
                }
            }
        }
        else {
            enableFields(false);
        }
    }

    private void actionExchangeRateSystem() {
        double rate = miClient.pickExchangeRate(moFieldFkCurrencyId.getKeyAsIntArray()[0], miClient.getSessionXXX().getWorkingDate());

        if (rate != 0d) {
            moFieldExchangeRateSystem.setFieldValue(rate);
            if (moFieldExchangeRate.getDouble() == 0) {
                moFieldExchangeRate.setFieldValue(rate);
            }
            jtfExchangeRate.requestFocus();
        }
    }

    private void actionExchangeRate() {
        if (moFieldValueCy.getDouble() != 0) {
            if (moFieldValue.getDouble() == 0) {
                jtfValueCy.requestFocus();
            }
            else {
                moFieldExchangeRate.setFieldValue(moFieldValue.getDouble() / moFieldValueCy.getDouble());
                jtfExchangeRate.requestFocus();
            }
        }
        else if (moFieldValue.getDouble() != 0) {
            jtfValue.requestFocus();
        }
        else {
            jtfExchangeRate.requestFocus();
        }
    }

    private void actionValueCy() {
        if (moFieldExchangeRate.getDouble() == 0) {
            jtfExchangeRate.requestFocus();
        }
        else {
            moFieldValueCy.setFieldValue(SLibUtilities.round(moFieldValue.getDouble() / moFieldExchangeRate.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
            jtfValueCy.requestFocus();
        }
    }

    private void actionValue() {
        if (moFieldExchangeRate.getDouble() == 0) {
            jtfExchangeRate.requestFocus();
        }
        else {
            moFieldValue.setFieldValue(SLibUtilities.round(moFieldValueCy.getDouble() * moFieldExchangeRate.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
            jtfValue.requestFocus();
        }
    }

    private void actionValueCyFocusLost() {
        if (moFieldValueCy.getDouble() != 0) {

            if (!jtfValue.isEnabled() || moFieldValue.getDouble() == 0) {
                moFieldValue.setFieldValue(SLibUtilities.round(moFieldValueCy.getDouble() * moFieldExchangeRate.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
            }
            else if (moFieldExchangeRate.getDouble() == 0) {
                moFieldExchangeRate.setFieldValue(SLibUtilities.round(moFieldValue.getDouble() / moFieldValueCy.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsExchangeRate()));
            }

            renderSetValueCyPanels(moFieldFkCurrencyId.getKey(), moFieldValueCy.getDouble(), moFieldValue.getDouble(), moFieldExchangeRate.getDouble(), moFieldExchangeRateSystem.getDouble());
        }
    }

    private void actionValueFocusLost() {
        if (moFieldValue.getDouble() != 0) {

            if (moFieldValueCy.getDouble() == 0 && moFieldExchangeRate.getDouble() != 0) {
                moFieldValueCy.setFieldValue(SLibUtilities.round(moFieldValue.getDouble() / moFieldExchangeRate.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
            }
            else if (moFieldValueCy.getDouble() != 0 && moFieldExchangeRate.getDouble() == 0) {
                moFieldExchangeRate.setFieldValue(SLibUtilities.round(moFieldValue.getDouble() / moFieldValueCy.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsExchangeRate()));
            }

            renderSetValueCyPanels(moFieldFkCurrencyId.getKey(), moFieldValueCy.getDouble(), moFieldValue.getDouble(), moFieldExchangeRate.getDouble(), moFieldExchangeRateSystem.getDouble());
        }
    }

    private void actionExchangeRateFocusLost() {

        if (!jtfValue.isEnabled()) {
            moFieldValue.setFieldValue(SLibUtilities.round(moFieldValueCy.getDouble() * moFieldExchangeRate.getDouble(),
                miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
        }
        else if (moFieldValueCy.getDouble() != 0 && moFieldValue.getDouble() == 0) {
            moFieldValue.setFieldValue(SLibUtilities.round(moFieldValueCy.getDouble() * moFieldExchangeRate.getDouble(),
                miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
        }

        renderSetValueCyPanels(moFieldFkCurrencyId.getKey(), moFieldValueCy.getDouble(), moFieldValue.getDouble(), moFieldExchangeRate.getDouble(), moFieldExchangeRateSystem.getDouble());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel46;
    private javax.swing.JPanel jPanel47;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel60;
    private javax.swing.JPanel jPanel62;
    private javax.swing.JPanel jPanel63;
    private javax.swing.JPanel jPanel66;
    private javax.swing.JPanel jPanel67;
    private javax.swing.JPanel jPanel68;
    private javax.swing.JPanel jPanel69;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel70;
    private javax.swing.JPanel jPanel71;
    private javax.swing.JPanel jPanel72;
    private javax.swing.JPanel jPanel73;
    private javax.swing.JPanel jPanel75;
    private javax.swing.JPanel jPanel76;
    private javax.swing.JPanel jPanel77;
    private javax.swing.JPanel jPanel78;
    private javax.swing.JPanel jPanel79;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JButton jbExchangeRate;
    private javax.swing.JButton jbExchangeRateSystem;
    private javax.swing.JButton jbFkCurrencyId;
    private javax.swing.JButton jbFkDpsId;
    private javax.swing.JButton jbValue;
    private javax.swing.JButton jbValueCy;
    private javax.swing.JComboBox jcbFkCurrencyId;
    private javax.swing.JComboBox jcbFkDpsId;
    private javax.swing.JLabel jlBalance;
    private javax.swing.JLabel jlBranch;
    private javax.swing.JLabel jlExchangeRate;
    private javax.swing.JLabel jlExchangeRateSystem;
    private javax.swing.JLabel jlFkCurrencyId;
    private javax.swing.JLabel jlFkDpsId;
    private javax.swing.JLabel jlValue;
    private javax.swing.JLabel jlValueCy;
    private javax.swing.JLabel jlValueDps;
    private javax.swing.JTextField jtfBalance;
    private javax.swing.JTextField jtfBranch;
    private javax.swing.JTextField jtfExchangeRate;
    private javax.swing.JTextField jtfExchangeRateSystem;
    private javax.swing.JTextField jtfValue;
    private javax.swing.JTextField jtfValueCy;
    private javax.swing.JTextField jtfValueDps;
    // End of variables declaration//GEN-END:variables

    public erp.lib.form.SFormField getFieldFkCurrencyId() { return moFieldFkCurrencyId; }
    public erp.lib.form.SFormField getFieldValue() { return moFieldValue; }
    public erp.lib.form.SFormField getFieldExchangeRate() { return moFieldExchangeRate; }
    public erp.lib.form.SFormField getFieldExchangeRateSystem() { return moFieldExchangeRateSystem; }
    public erp.lib.form.SFormField getFieldValueCy() { return moFieldValueCy; }

    public erp.lib.form.SFormField getFieldFkDpsId() { return moFieldFkDpsId; }
    public erp.lib.form.SFormField getFieldBalance() { return moFieldBalance; }
    public java.lang.String getFieldNumberDps() { return msNumberDps; }
    public int getParamFkDpsCategoryId() { return mnParamFkDpsCategoryId; }
    public int getParamDsmEtyType() { return mnParamDsmEtyType; }

    public void resetPanel() {
        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        if (mnParamDsmEtyType == SDataConstants.TRNX_DSM_ETY_DESTINY) {
            jtfValue.setEnabled(false);
            jbValue.setEnabled(false);
        }

        jtfBranch.setText("");
        jtfValueDps.setText("0.00");
        jtfBalance.setText("0.00");

        msNumberDps = "";
    }

    public void refreshPanel() {
        renderCurrencySettings();
    }

    public void formRefreshCatalogues() {
        SFormUtilities.populateComboBox(miClient, jcbFkDpsId, SDataConstants.TRNX_DPS_BAL, (mnParamFkBizPartnerId == 0 ? null : new Object[] { mnParamTpSysMovId, mnParamFkBizPartnerId, SDataConstantsSys.TRNX_DPS_BAL_PAY_PEND }));
        SFormUtilities.populateComboBox(miClient, jcbFkCurrencyId, SDataConstants.CFGU_CUR);
    }

    public void setValue (int type, java.lang.Object value) {
        switch (type) {
            case 1:
                mnParamFkBizPartnerId = (Integer) value;
                break;
            case 2:
                //moFieldFkCurrencyId.setKey(new int[] { (Integer) value });
                mdParamValueCyPanel = (Double) value;
                break;
            case 3:
                moParamPanelFkDpsId = (SPanelDpsBalance) value;
                break;
            case 4:
                moParamPanelFkReferenceId = (SPanelReference) value;
                break;
            case 5:
                moParamPanelFkCurrencyId = (SPanelCurrency) value;
                break;
            case 6:
                actionValue();
                break;
            case 7:
                mtParamDate = (java.util.Date) value;
                break;
        }
    }

    public void enableFields(boolean b) {

        if (b) {
            if (mnParamFkBizPartnerId > 0) {
                enableFieldsDps(b);
            }
            else {
                enableFieldsDps(!b);
            }

            if (mnParamFkBizPartnerId > 0 && jcbFkDpsId.getSelectedIndex() > 0) {
                enableFieldsCurrency(b);
            }
            else {
                enableFieldsCurrency(!b);
            }
        }
        else {
            if (mnParamFkBizPartnerId > 0) {
                enableFieldsDps(!b);
            }
            else {
                enableFieldsDps(b);
            }

            if (mnParamFkBizPartnerId > 0 && jcbFkDpsId.getSelectedIndex() > 0) {
                enableFieldsCurrency(!b);
            }
            else {
                enableFieldsCurrency(b);
            }
        }
    }

    public void resetValues(boolean bDocto) {
        if (!bDocto) {
            jcbFkDpsId.setSelectedIndex(0);
        }

        jtfBranch.setText("");
        moFieldValueDps.setDouble(0.0);
        moFieldBalance.setDouble(0.0);
        jcbFkCurrencyId.setSelectedIndex(0);
        moFieldValueCy.setDouble(0.0);
        moFieldValue.setDouble(0.0);
        moFieldExchangeRate.setDouble(0.0);
        moFieldExchangeRateSystem.setDouble(0.0);
    }

    public void renderSetValueCurrency(double dValueCy, double dValue, double dExchangeRate, double dExchangeRateSystem, boolean b) {

        if (!b) {
            moFieldValueCy.setDouble(dValueCy);
            moFieldValue.setDouble(dValue);
            moFieldExchangeRateSystem.setDouble(dExchangeRateSystem);
            moFieldExchangeRate.setDouble(dExchangeRate);
        }

        enableFieldsPanelsCurrency(b);
    }

    public void renderSetValueCyPanels(java.lang.Object oKey, double dValueCy, double dValue, double dExchangeRate, double dExchangeRateSystem) {
        if (mnParamDsmEtyType == SDataConstants.TRNX_DSM_ETY_SOURCE) {

            if (moParamPanelFkDpsId != null) {
                renderSetValueCyPanelDps(moParamPanelFkDpsId, oKey, dValueCy, dValue, dExchangeRate, dExchangeRateSystem);
            }

            if (moParamPanelFkReferenceId != null) {
                renderSetValueCyPanelReference(moParamPanelFkReferenceId, oKey, dValueCy, dValue, dExchangeRate, dExchangeRateSystem);
            }

            if (moParamPanelFkCurrencyId != null) {
                renderSetValueCyPanelCurrency(moParamPanelFkCurrencyId, oKey, dValueCy, dValue, dExchangeRate, dExchangeRateSystem);
            }
        }
    }

    public void renderGetValueCyPanels(java.lang.Object oKey) {
        if (mnParamDsmEtyType == SDataConstants.TRNX_DSM_ETY_DESTINY) {

            if (moParamPanelFkDpsId != null) {
                renderGetValueCyPanelDps(moParamPanelFkDpsId, oKey);
            }

            if (moParamPanelFkReferenceId != null) {
                renderGetValueCyPanelReference(moParamPanelFkReferenceId, oKey);
            }

            if (moParamPanelFkCurrencyId != null) {
                renderGetValueCyPanelCurrency(moParamPanelFkCurrencyId, oKey);
            }
        }
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbFkDpsId) {
                actionFkDpsId();
            }
            else if (button == jbFkCurrencyId) {
                actionFkCurrencyId();
            }
            else if (button == jbValue) {
                actionValue();
            }
            else if (button == jbValueCy) {
                actionValueCy();
            }
            else if (button == jbExchangeRateSystem) {
                actionExchangeRateSystem();
            }
            else if (button == jbExchangeRate) {
                actionExchangeRate();
            }
        }
    }
}
