package erp.mtrn.form;

import cfd.DCfdConsts;
import cfd.ver33.DCfdi33Catalogs;
import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.mtrn.data.SCfdUtils;
import erp.mtrn.data.SDataDps;
import erp.mtrn.data.STrnUtilities;
import erp.mtrn.data.cfd.SCfdPaymentEntry;
import erp.mtrn.data.cfd.SCfdPaymentEntryDoc;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import sa.lib.SLibUtils;

/**
 *
 * @author Sergio Flores
 */
public class SDialogCfdPaymentFactoringFees extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener, java.awt.event.FocusListener {
    
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    
    private int mnParamYear;
    private int mnParamBizPartnerId;
    private int mnParamCfdId;
    private SCfdPaymentEntry moParamPaymentEntry;
    
    private erp.client.SClientInterface miClient;
    private erp.mtrn.form.SFormCfdPayment moFormCfdPayment;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.lib.form.SFormField moFieldDocInstallment;
    private erp.lib.form.SFormField moFieldDocExchangeRate;
    private erp.lib.form.SFormField moFieldDocBalancePrev;
    private erp.lib.form.SFormField moFieldDocPaymentInt;
    private erp.lib.form.SFormField moFieldDocPaymentFee;
    private erp.lib.form.SFormField moFieldDocPaymentFeeVat;
    
    private erp.mtrn.form.SDialogPickerDps moDialogDocDpsRelatedPicker;
    private erp.mtrn.data.SDataDps moDataDocDpsRelated;
    
    /** Creates new form SDialogCfdPaymentFactoringFees */
    public SDialogCfdPaymentFactoringFees(erp.client.SClientInterface client, erp.mtrn.form.SFormCfdPayment formCfdPayment) {
        super(client.getFrame(), true);
        miClient = client;
        moFormCfdPayment = formCfdPayment;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpData = new javax.swing.JPanel();
        jPanel29 = new javax.swing.JPanel();
        jlPayAmount = new javax.swing.JLabel();
        jtfPayAmount = new javax.swing.JTextField();
        jtfPayAmountCurRo = new javax.swing.JTextField();
        jtfPayExchangeRate = new javax.swing.JTextField();
        jbPayExchangeRatePick = new javax.swing.JButton();
        jtfPayAmountLocalRo = new javax.swing.JTextField();
        jtfPayAmountLocalCurRo = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jlDocDpsRelated = new javax.swing.JLabel();
        jtfDocDpsRelatedNumberRo = new javax.swing.JTextField();
        jtfDocDpsRelatedUuid = new javax.swing.JTextField();
        jtfDocDpsRelatedVersionRo = new javax.swing.JTextField();
        jbDocDpsRelatedPick = new javax.swing.JButton();
        jPanel21 = new javax.swing.JPanel();
        jlDocPaymentMethod = new javax.swing.JLabel();
        jtfDocPaymentMethodRo = new javax.swing.JTextField();
        jPanel22 = new javax.swing.JPanel();
        jlDocCurrency = new javax.swing.JLabel();
        jtfDocCurrencyRo = new javax.swing.JTextField();
        jPanel34 = new javax.swing.JPanel();
        jlDocInstallment = new javax.swing.JLabel();
        jtfDocInstallment = new javax.swing.JTextField();
        jPanel35 = new javax.swing.JPanel();
        jlDocExchangeRate = new javax.swing.JLabel();
        jtfDocExchangeRate = new javax.swing.JTextField();
        jtfDocExchangeRateCurRo = new javax.swing.JTextField();
        jbDocExchangeRateInvert = new javax.swing.JButton();
        jPanel36 = new javax.swing.JPanel();
        jlDocBalancePrev = new javax.swing.JLabel();
        jtfDocDocBalancePrev = new javax.swing.JTextField();
        jtfDocDocBalancePrevCurRo = new javax.swing.JTextField();
        jtfDocPayBalancePrevRo = new javax.swing.JTextField();
        jtfDocPayBalancePrevCurRo = new javax.swing.JTextField();
        jPanel39 = new javax.swing.JPanel();
        jlDocPaymentInt = new javax.swing.JLabel();
        jtfDocDocPaymentInt = new javax.swing.JTextField();
        jtfDocDocPaymentIntCurRo = new javax.swing.JTextField();
        jtfDocPayPaymentIntRo = new javax.swing.JTextField();
        jtfDocPayPaymentIntCurRo = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jtfDocInstallmentPaymentInt = new javax.swing.JTextField();
        jPanel40 = new javax.swing.JPanel();
        jlDocPaymentFee = new javax.swing.JLabel();
        jtfDocDocPaymentFee = new javax.swing.JTextField();
        jtfDocDocPaymentFeeCurRo = new javax.swing.JTextField();
        jtfDocPayPaymentFeeRo = new javax.swing.JTextField();
        jtfDocPayPaymentFeeCurRo = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jtfDocInstallmentPaymentFee = new javax.swing.JTextField();
        jPanel41 = new javax.swing.JPanel();
        jlDocPaymentFeeVat = new javax.swing.JLabel();
        jtfDocDocPaymentFeeVat = new javax.swing.JTextField();
        jtfDocDocPaymentFeeVatCurRo = new javax.swing.JTextField();
        jtfDocPayPaymentFeeVatRo = new javax.swing.JTextField();
        jtfDocPayPaymentFeeVatCurRo = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jtfDocInstallmentPaymentFeeVat = new javax.swing.JTextField();
        jPanel44 = new javax.swing.JPanel();
        jlDocBalancePend = new javax.swing.JLabel();
        jtfDocDocBalancePend = new javax.swing.JTextField();
        jtfDocDocBalancePendCurRo = new javax.swing.JTextField();
        jtfDocPayBalancePendRo = new javax.swing.JTextField();
        jtfDocPayBalancePendCurRo = new javax.swing.JTextField();
        jPanel42 = new javax.swing.JPanel();
        jlPayTotal = new javax.swing.JLabel();
        jtfPayTotalPaymentRo = new javax.swing.JTextField();
        jtfPayTotalPaymentCurRo = new javax.swing.JTextField();
        jtfPayTotalAmountRo = new javax.swing.JTextField();
        jtfPayTotalAmountCurRo = new javax.swing.JTextField();
        jtfPayTotalAmountLocalRo = new javax.swing.JTextField();
        jtfPayTotalAmountLocalCurRo = new javax.swing.JTextField();
        jpControls = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Documento relacionado del pago con factoraje"); // NOI18N
        setModal(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpData.setLayout(new java.awt.BorderLayout());

        jPanel29.setBorder(javax.swing.BorderFactory.createTitledBorder("Pago:"));
        jPanel29.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlPayAmount.setText("Monto pago:*");
        jlPayAmount.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel29.add(jlPayAmount);

        jtfPayAmount.setEditable(false);
        jtfPayAmount.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfPayAmount.setText("999,999,999.99");
        jtfPayAmount.setToolTipText("Monto de pago");
        jtfPayAmount.setFocusable(false);
        jtfPayAmount.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel29.add(jtfPayAmount);

        jtfPayAmountCurRo.setEditable(false);
        jtfPayAmountCurRo.setBackground(new java.awt.Color(204, 255, 204));
        jtfPayAmountCurRo.setText("PAY");
        jtfPayAmountCurRo.setFocusable(false);
        jtfPayAmountCurRo.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel29.add(jtfPayAmountCurRo);

        jtfPayExchangeRate.setEditable(false);
        jtfPayExchangeRate.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfPayExchangeRate.setText("999,999.99");
        jtfPayExchangeRate.setToolTipText("Tipo de cambio");
        jtfPayExchangeRate.setFocusable(false);
        jtfPayExchangeRate.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel29.add(jtfPayExchangeRate);

        jbPayExchangeRatePick.setText("...");
        jbPayExchangeRatePick.setToolTipText("Seleccionar tipo de cambio");
        jbPayExchangeRatePick.setEnabled(false);
        jbPayExchangeRatePick.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel29.add(jbPayExchangeRatePick);

        jtfPayAmountLocalRo.setEditable(false);
        jtfPayAmountLocalRo.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfPayAmountLocalRo.setText("999,999,999.99");
        jtfPayAmountLocalRo.setToolTipText("Monto de pago");
        jtfPayAmountLocalRo.setFocusable(false);
        jtfPayAmountLocalRo.setPreferredSize(new java.awt.Dimension(102, 23));
        jPanel29.add(jtfPayAmountLocalRo);

        jtfPayAmountLocalCurRo.setEditable(false);
        jtfPayAmountLocalCurRo.setBackground(new java.awt.Color(255, 204, 204));
        jtfPayAmountLocalCurRo.setText("LOC");
        jtfPayAmountLocalCurRo.setFocusable(false);
        jtfPayAmountLocalCurRo.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel29.add(jtfPayAmountLocalCurRo);

        jpData.add(jPanel29, java.awt.BorderLayout.NORTH);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Documento relacionado del pago:"));
        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel6.setLayout(new java.awt.GridLayout(10, 1, 0, 5));

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDocDpsRelated.setText("Doc. relacionado:*");
        jlDocDpsRelated.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jlDocDpsRelated);

        jtfDocDpsRelatedNumberRo.setEditable(false);
        jtfDocDpsRelatedNumberRo.setText("A-999999");
        jtfDocDpsRelatedNumberRo.setToolTipText("Serie y folio");
        jtfDocDpsRelatedNumberRo.setFocusable(false);
        jtfDocDpsRelatedNumberRo.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jtfDocDpsRelatedNumberRo);

        jtfDocDpsRelatedUuid.setEditable(false);
        jtfDocDpsRelatedUuid.setText("402A8A38-B980-412A-9485-29222D7095C4");
        jtfDocDpsRelatedUuid.setToolTipText("UUID");
        jtfDocDpsRelatedUuid.setFocusable(false);
        jtfDocDpsRelatedUuid.setPreferredSize(new java.awt.Dimension(225, 23));
        jPanel14.add(jtfDocDpsRelatedUuid);

        jtfDocDpsRelatedVersionRo.setEditable(false);
        jtfDocDpsRelatedVersionRo.setText("0.0");
        jtfDocDpsRelatedVersionRo.setToolTipText("Versión del CFD");
        jtfDocDpsRelatedVersionRo.setFocusable(false);
        jtfDocDpsRelatedVersionRo.setPreferredSize(new java.awt.Dimension(25, 23));
        jPanel14.add(jtfDocDpsRelatedVersionRo);

        jbDocDpsRelatedPick.setText("...");
        jbDocDpsRelatedPick.setToolTipText("Seleccionar doc. relacionado");
        jbDocDpsRelatedPick.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel14.add(jbDocDpsRelatedPick);

        jPanel6.add(jPanel14);

        jPanel21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDocPaymentMethod.setText("Método pago:");
        jlDocPaymentMethod.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel21.add(jlDocPaymentMethod);

        jtfDocPaymentMethodRo.setEditable(false);
        jtfDocPaymentMethodRo.setText("TEXT");
        jtfDocPaymentMethodRo.setFocusable(false);
        jtfDocPaymentMethodRo.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel21.add(jtfDocPaymentMethodRo);

        jPanel6.add(jPanel21);

        jPanel22.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDocCurrency.setBackground(new java.awt.Color(255, 255, 204));
        jlDocCurrency.setText("Moneda doc.:");
        jlDocCurrency.setOpaque(true);
        jlDocCurrency.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel22.add(jlDocCurrency);

        jtfDocCurrencyRo.setEditable(false);
        jtfDocCurrencyRo.setText("TEXT");
        jtfDocCurrencyRo.setFocusable(false);
        jtfDocCurrencyRo.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel22.add(jtfDocCurrencyRo);

        jPanel6.add(jPanel22);

        jPanel34.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDocInstallment.setText("Parcialidad:*");
        jlDocInstallment.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel34.add(jlDocInstallment);

        jtfDocInstallment.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfDocInstallment.setText("0");
        jtfDocInstallment.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel34.add(jtfDocInstallment);

        jPanel6.add(jPanel34);

        jPanel35.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDocExchangeRate.setText("Tipo cambio:*");
        jlDocExchangeRate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel35.add(jlDocExchangeRate);

        jtfDocExchangeRate.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfDocExchangeRate.setText("999,999.99");
        jtfDocExchangeRate.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel35.add(jtfDocExchangeRate);

        jtfDocExchangeRateCurRo.setEditable(false);
        jtfDocExchangeRateCurRo.setText("DOC/PAY");
        jtfDocExchangeRateCurRo.setToolTipText("Sucursal de la empresa");
        jtfDocExchangeRateCurRo.setFocusable(false);
        jtfDocExchangeRateCurRo.setPreferredSize(new java.awt.Dimension(55, 23));
        jPanel35.add(jtfDocExchangeRateCurRo);

        jbDocExchangeRateInvert.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_exc_rate.gif"))); // NOI18N
        jbDocExchangeRateInvert.setToolTipText("Invertir tipo de cambio (1/x)");
        jbDocExchangeRateInvert.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel35.add(jbDocExchangeRateInvert);

        jPanel6.add(jPanel35);

        jPanel36.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDocBalancePrev.setText("Saldo anterior:*");
        jlDocBalancePrev.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel36.add(jlDocBalancePrev);

        jtfDocDocBalancePrev.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfDocDocBalancePrev.setText("999,999,999.99");
        jtfDocDocBalancePrev.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel36.add(jtfDocDocBalancePrev);

        jtfDocDocBalancePrevCurRo.setEditable(false);
        jtfDocDocBalancePrevCurRo.setBackground(new java.awt.Color(255, 255, 204));
        jtfDocDocBalancePrevCurRo.setText("DOC");
        jtfDocDocBalancePrevCurRo.setFocusable(false);
        jtfDocDocBalancePrevCurRo.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel36.add(jtfDocDocBalancePrevCurRo);

        jtfDocPayBalancePrevRo.setEditable(false);
        jtfDocPayBalancePrevRo.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfDocPayBalancePrevRo.setText("999,999,999.99");
        jtfDocPayBalancePrevRo.setFocusable(false);
        jtfDocPayBalancePrevRo.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel36.add(jtfDocPayBalancePrevRo);

        jtfDocPayBalancePrevCurRo.setEditable(false);
        jtfDocPayBalancePrevCurRo.setBackground(new java.awt.Color(204, 255, 204));
        jtfDocPayBalancePrevCurRo.setText("PAY");
        jtfDocPayBalancePrevCurRo.setFocusable(false);
        jtfDocPayBalancePrevCurRo.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel36.add(jtfDocPayBalancePrevCurRo);

        jPanel6.add(jPanel36);

        jPanel39.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDocPaymentInt.setText("Intereses:");
        jlDocPaymentInt.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel39.add(jlDocPaymentInt);

        jtfDocDocPaymentInt.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfDocDocPaymentInt.setText("999,999,999.99");
        jtfDocDocPaymentInt.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel39.add(jtfDocDocPaymentInt);

        jtfDocDocPaymentIntCurRo.setEditable(false);
        jtfDocDocPaymentIntCurRo.setBackground(new java.awt.Color(255, 255, 204));
        jtfDocDocPaymentIntCurRo.setText("DOC");
        jtfDocDocPaymentIntCurRo.setFocusable(false);
        jtfDocDocPaymentIntCurRo.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel39.add(jtfDocDocPaymentIntCurRo);

        jtfDocPayPaymentIntRo.setEditable(false);
        jtfDocPayPaymentIntRo.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfDocPayPaymentIntRo.setText("999,999,999.99");
        jtfDocPayPaymentIntRo.setFocusable(false);
        jtfDocPayPaymentIntRo.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel39.add(jtfDocPayPaymentIntRo);

        jtfDocPayPaymentIntCurRo.setEditable(false);
        jtfDocPayPaymentIntCurRo.setBackground(new java.awt.Color(204, 255, 204));
        jtfDocPayPaymentIntCurRo.setText("PAY");
        jtfDocPayPaymentIntCurRo.setFocusable(false);
        jtfDocPayPaymentIntCurRo.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel39.add(jtfDocPayPaymentIntCurRo);

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Parcialidad:");
        jLabel8.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel39.add(jLabel8);

        jtfDocInstallmentPaymentInt.setEditable(false);
        jtfDocInstallmentPaymentInt.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfDocInstallmentPaymentInt.setText("0");
        jtfDocInstallmentPaymentInt.setFocusable(false);
        jtfDocInstallmentPaymentInt.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel39.add(jtfDocInstallmentPaymentInt);

        jPanel6.add(jPanel39);

        jPanel40.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDocPaymentFee.setText("Comisiones:");
        jlDocPaymentFee.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel40.add(jlDocPaymentFee);

        jtfDocDocPaymentFee.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfDocDocPaymentFee.setText("999,999,999.99");
        jtfDocDocPaymentFee.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel40.add(jtfDocDocPaymentFee);

        jtfDocDocPaymentFeeCurRo.setEditable(false);
        jtfDocDocPaymentFeeCurRo.setBackground(new java.awt.Color(255, 255, 204));
        jtfDocDocPaymentFeeCurRo.setText("DOC");
        jtfDocDocPaymentFeeCurRo.setFocusable(false);
        jtfDocDocPaymentFeeCurRo.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel40.add(jtfDocDocPaymentFeeCurRo);

        jtfDocPayPaymentFeeRo.setEditable(false);
        jtfDocPayPaymentFeeRo.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfDocPayPaymentFeeRo.setText("999,999,999.99");
        jtfDocPayPaymentFeeRo.setFocusable(false);
        jtfDocPayPaymentFeeRo.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel40.add(jtfDocPayPaymentFeeRo);

        jtfDocPayPaymentFeeCurRo.setEditable(false);
        jtfDocPayPaymentFeeCurRo.setBackground(new java.awt.Color(204, 255, 204));
        jtfDocPayPaymentFeeCurRo.setText("PAY");
        jtfDocPayPaymentFeeCurRo.setFocusable(false);
        jtfDocPayPaymentFeeCurRo.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel40.add(jtfDocPayPaymentFeeCurRo);

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Parcialidad:");
        jLabel9.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel40.add(jLabel9);

        jtfDocInstallmentPaymentFee.setEditable(false);
        jtfDocInstallmentPaymentFee.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfDocInstallmentPaymentFee.setText("0");
        jtfDocInstallmentPaymentFee.setFocusable(false);
        jtfDocInstallmentPaymentFee.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel40.add(jtfDocInstallmentPaymentFee);

        jPanel6.add(jPanel40);

        jPanel41.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDocPaymentFeeVat.setText("IVA comisiones:");
        jlDocPaymentFeeVat.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel41.add(jlDocPaymentFeeVat);

        jtfDocDocPaymentFeeVat.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfDocDocPaymentFeeVat.setText("999,999,999.99");
        jtfDocDocPaymentFeeVat.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel41.add(jtfDocDocPaymentFeeVat);

        jtfDocDocPaymentFeeVatCurRo.setEditable(false);
        jtfDocDocPaymentFeeVatCurRo.setBackground(new java.awt.Color(255, 255, 204));
        jtfDocDocPaymentFeeVatCurRo.setText("DOC");
        jtfDocDocPaymentFeeVatCurRo.setFocusable(false);
        jtfDocDocPaymentFeeVatCurRo.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel41.add(jtfDocDocPaymentFeeVatCurRo);

        jtfDocPayPaymentFeeVatRo.setEditable(false);
        jtfDocPayPaymentFeeVatRo.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfDocPayPaymentFeeVatRo.setText("999,999,999.99");
        jtfDocPayPaymentFeeVatRo.setFocusable(false);
        jtfDocPayPaymentFeeVatRo.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel41.add(jtfDocPayPaymentFeeVatRo);

        jtfDocPayPaymentFeeVatCurRo.setEditable(false);
        jtfDocPayPaymentFeeVatCurRo.setBackground(new java.awt.Color(204, 255, 204));
        jtfDocPayPaymentFeeVatCurRo.setText("PAY");
        jtfDocPayPaymentFeeVatCurRo.setFocusable(false);
        jtfDocPayPaymentFeeVatCurRo.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel41.add(jtfDocPayPaymentFeeVatCurRo);

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Parcialidad:");
        jLabel10.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel41.add(jLabel10);

        jtfDocInstallmentPaymentFeeVat.setEditable(false);
        jtfDocInstallmentPaymentFeeVat.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfDocInstallmentPaymentFeeVat.setText("0");
        jtfDocInstallmentPaymentFeeVat.setFocusable(false);
        jtfDocInstallmentPaymentFeeVat.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel41.add(jtfDocInstallmentPaymentFeeVat);

        jPanel6.add(jPanel41);

        jPanel44.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDocBalancePend.setText("Saldo insoluto:");
        jlDocBalancePend.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel44.add(jlDocBalancePend);

        jtfDocDocBalancePend.setEditable(false);
        jtfDocDocBalancePend.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfDocDocBalancePend.setText("999,999,999.99");
        jtfDocDocBalancePend.setFocusable(false);
        jtfDocDocBalancePend.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel44.add(jtfDocDocBalancePend);

        jtfDocDocBalancePendCurRo.setEditable(false);
        jtfDocDocBalancePendCurRo.setBackground(new java.awt.Color(255, 255, 204));
        jtfDocDocBalancePendCurRo.setText("DOC");
        jtfDocDocBalancePendCurRo.setFocusable(false);
        jtfDocDocBalancePendCurRo.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel44.add(jtfDocDocBalancePendCurRo);

        jtfDocPayBalancePendRo.setEditable(false);
        jtfDocPayBalancePendRo.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfDocPayBalancePendRo.setText("999,999,999.99");
        jtfDocPayBalancePendRo.setFocusable(false);
        jtfDocPayBalancePendRo.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel44.add(jtfDocPayBalancePendRo);

        jtfDocPayBalancePendCurRo.setEditable(false);
        jtfDocPayBalancePendCurRo.setBackground(new java.awt.Color(204, 255, 204));
        jtfDocPayBalancePendCurRo.setText("PAY");
        jtfDocPayBalancePendCurRo.setFocusable(false);
        jtfDocPayBalancePendCurRo.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel44.add(jtfDocPayBalancePendCurRo);

        jPanel6.add(jPanel44);

        jPanel3.add(jPanel6, java.awt.BorderLayout.NORTH);

        jpData.add(jPanel3, java.awt.BorderLayout.CENTER);

        jPanel42.setBorder(javax.swing.BorderFactory.createTitledBorder("Total pagos:"));
        jPanel42.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlPayTotal.setText("Total pagos:");
        jlPayTotal.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel42.add(jlPayTotal);

        jtfPayTotalPaymentRo.setEditable(false);
        jtfPayTotalPaymentRo.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfPayTotalPaymentRo.setText("999,999,999.99");
        jtfPayTotalPaymentRo.setFocusable(false);
        jtfPayTotalPaymentRo.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel42.add(jtfPayTotalPaymentRo);

        jtfPayTotalPaymentCurRo.setEditable(false);
        jtfPayTotalPaymentCurRo.setBackground(new java.awt.Color(255, 255, 204));
        jtfPayTotalPaymentCurRo.setText("DOC");
        jtfPayTotalPaymentCurRo.setFocusable(false);
        jtfPayTotalPaymentCurRo.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel42.add(jtfPayTotalPaymentCurRo);

        jtfPayTotalAmountRo.setEditable(false);
        jtfPayTotalAmountRo.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfPayTotalAmountRo.setText("999,999,999.99");
        jtfPayTotalAmountRo.setFocusable(false);
        jtfPayTotalAmountRo.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel42.add(jtfPayTotalAmountRo);

        jtfPayTotalAmountCurRo.setEditable(false);
        jtfPayTotalAmountCurRo.setBackground(new java.awt.Color(204, 255, 204));
        jtfPayTotalAmountCurRo.setText("PAY");
        jtfPayTotalAmountCurRo.setFocusable(false);
        jtfPayTotalAmountCurRo.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel42.add(jtfPayTotalAmountCurRo);

        jtfPayTotalAmountLocalRo.setEditable(false);
        jtfPayTotalAmountLocalRo.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfPayTotalAmountLocalRo.setText("999,999,999.99");
        jtfPayTotalAmountLocalRo.setToolTipText("Monto de pago");
        jtfPayTotalAmountLocalRo.setFocusable(false);
        jtfPayTotalAmountLocalRo.setPreferredSize(new java.awt.Dimension(102, 23));
        jPanel42.add(jtfPayTotalAmountLocalRo);

        jtfPayTotalAmountLocalCurRo.setEditable(false);
        jtfPayTotalAmountLocalCurRo.setBackground(new java.awt.Color(255, 204, 204));
        jtfPayTotalAmountLocalCurRo.setText("LOC");
        jtfPayTotalAmountLocalCurRo.setFocusable(false);
        jtfPayTotalAmountLocalCurRo.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel42.add(jtfPayTotalAmountLocalCurRo);

        jpData.add(jPanel42, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jpData, java.awt.BorderLayout.CENTER);

        jpControls.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jpControls.add(jbOk);

        jbCancel.setText("Cancelar"); // NOI18N
        jbCancel.setToolTipText("[Escape]");
        jpControls.add(jbCancel);

        getContentPane().add(jpControls, java.awt.BorderLayout.PAGE_END);

        setSize(new java.awt.Dimension(736, 489));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        moFieldDocInstallment = new SFormField(miClient, SLibConstants.DATA_TYPE_INTEGER, true, jtfDocInstallment, jlDocInstallment);
        moFieldDocExchangeRate = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfDocExchangeRate, jlDocExchangeRate);
        moFieldDocExchangeRate.setDecimalFormat(SLibUtils.getDecimalFormatExchangeRate());
        moFieldDocBalancePrev = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfDocDocBalancePrev, jlDocBalancePrev);
        moFieldDocBalancePrev.setDecimalFormat(SLibUtils.getDecimalFormatAmount());
        moFieldDocPaymentInt = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfDocDocPaymentInt, jlDocPaymentInt);
        moFieldDocPaymentInt.setDecimalFormat(SLibUtils.getDecimalFormatAmount());
        moFieldDocPaymentFee = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfDocDocPaymentFee, jlDocPaymentFee);
        moFieldDocPaymentFee.setDecimalFormat(SLibUtils.getDecimalFormatAmount());
        moFieldDocPaymentFeeVat = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfDocDocPaymentFeeVat, jlDocPaymentFeeVat);
        moFieldDocPaymentFeeVat.setDecimalFormat(SLibUtils.getDecimalFormatAmount());
        
        mvFields = new Vector<>();
        mvFields.add(moFieldDocInstallment);
        mvFields.add(moFieldDocExchangeRate);
        mvFields.add(moFieldDocBalancePrev);
        mvFields.add(moFieldDocPaymentInt);
        mvFields.add(moFieldDocPaymentFee);
        mvFields.add(moFieldDocPaymentFeeVat);

        jbCancel.addActionListener(this);
        jbOk.addActionListener(this);
        jbDocDpsRelatedPick.addActionListener(this);
        jbDocExchangeRateInvert.addActionListener(this);

        jtfDocExchangeRate.addFocusListener(this);
        jtfDocDocBalancePrev.addFocusListener(this);
        jtfDocDocPaymentInt.addFocusListener(this);
        jtfDocDocPaymentFee.addFocusListener(this);
        jtfDocDocPaymentFeeVat.addFocusListener(this);
        
        moDialogDocDpsRelatedPicker = new SDialogPickerDps(miClient, SDataConstants.TRNX_DPS_PAY_PEND);
        
        jtfPayAmountLocalCurRo.setText(miClient.getSession().getSessionCustom().getLocalCurrencyCode());
        jtfPayTotalAmountLocalCurRo.setText(miClient.getSession().getSessionCustom().getLocalCurrencyCode());
        
        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };
        
        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            
            if (moDataDocDpsRelated == null) {
                jbDocDpsRelatedPick.doClick();
            }
            else {
                jbDocDpsRelatedPick.requestFocus();
            }
        }
    }
    
    private void renderPaymentEntry() {
        if (moParamPaymentEntry == null) {
            jtfPayAmount.setText("");
            jtfPayExchangeRate.setText("");
            jtfPayAmountLocalRo.setText("");
            
            jtfPayAmountCurRo.setText("");
            jtfDocPayBalancePrevCurRo.setText("");
            jtfDocPayPaymentIntCurRo.setText("");
            jtfDocPayPaymentFeeCurRo.setText("");
            jtfDocPayPaymentFeeVatCurRo.setText("");
            jtfDocPayBalancePendCurRo.setText("");
            jtfPayTotalAmountCurRo.setText("");
        }
        else {
            jtfPayAmount.setText(SLibUtils.getDecimalFormatAmount().format(moParamPaymentEntry.Amount));
            jtfPayExchangeRate.setText(SLibUtils.getDecimalFormatExchangeRate().format(moParamPaymentEntry.ExchangeRate));
            jtfPayAmountLocalRo.setText(SLibUtils.getDecimalFormatAmount().format(moParamPaymentEntry.AmountLocal));
            
            jtfPayAmountCurRo.setText(moParamPaymentEntry.CurrencyKey);
            jtfDocPayBalancePrevCurRo.setText(moParamPaymentEntry.CurrencyKey);
            jtfDocPayPaymentIntCurRo.setText(moParamPaymentEntry.CurrencyKey);
            jtfDocPayPaymentFeeCurRo.setText(moParamPaymentEntry.CurrencyKey);
            jtfDocPayPaymentFeeVatCurRo.setText(moParamPaymentEntry.CurrencyKey);
            jtfDocPayBalancePendCurRo.setText(moParamPaymentEntry.CurrencyKey);
            jtfPayTotalAmountCurRo.setText(moParamPaymentEntry.CurrencyKey);
        }
        
        computeDocBalancePend();
    }

    private void renderDocDpsRelated() throws Exception {
        if (moDataDocDpsRelated == null) {
            jtfDocDpsRelatedNumberRo.setText("");
            jtfDocDpsRelatedUuid.setText("");
            jtfDocDpsRelatedVersionRo.setText("");
            jtfDocCurrencyRo.setText("");
            
            jtfDocDocBalancePrevCurRo.setText("");
            jtfDocDocPaymentIntCurRo.setText("");
            jtfDocDocPaymentFeeCurRo.setText("");
            jtfDocDocPaymentFeeVatCurRo.setText("");
            jtfDocDocBalancePendCurRo.setText("");
            jtfPayTotalPaymentCurRo.setText("");
            
            jtfDocExchangeRateCurRo.setText("");
            
            jtfDocExchangeRate.setEditable(false);
            jtfDocExchangeRate.setFocusable(false);
            jbDocExchangeRateInvert.setEnabled(false);
        }
        else {
            if (moDataDocDpsRelated.getDbmsDataCfd().getFkXmlTypeId() != SDataConstantsSys.TRNS_TP_XML_CFDI_33) {
                throw new Exception("El documento relacionado debe ser CFDI versión " + DCfdConsts.CFDI_VER_33 + ".");
            }
            
            jtfDocDpsRelatedNumberRo.setText(moDataDocDpsRelated.getDpsNumber());
            jtfDocDpsRelatedUuid.setText(moDataDocDpsRelated.getDbmsDataCfd().getUuid());
            jtfDocDpsRelatedVersionRo.setText("" + SCfdUtils.getCfdVersion(moDataDocDpsRelated.getDbmsDataCfd().getFkXmlTypeId()));
            jtfDocCurrencyRo.setText(moDataDocDpsRelated.getDbmsCurrency());
            
            jtfDocDpsRelatedNumberRo.setCaretPosition(0);
            jtfDocDpsRelatedUuid.setCaretPosition(0);
            jtfDocDpsRelatedVersionRo.setCaretPosition(0);
            jtfDocCurrencyRo.setCaretPosition(0);
            
            jtfDocDocBalancePrevCurRo.setText(moDataDocDpsRelated.getDbmsCurrencyKey());
            jtfDocDocPaymentIntCurRo.setText(moDataDocDpsRelated.getDbmsCurrencyKey());
            jtfDocDocPaymentFeeCurRo.setText(moDataDocDpsRelated.getDbmsCurrencyKey());
            jtfDocDocPaymentFeeVatCurRo.setText(moDataDocDpsRelated.getDbmsCurrencyKey());
            jtfDocDocBalancePendCurRo.setText(moDataDocDpsRelated.getDbmsCurrencyKey());
            jtfPayTotalPaymentCurRo.setText(moDataDocDpsRelated.getDbmsCurrencyKey());
            
            jtfDocExchangeRateCurRo.setText(moDataDocDpsRelated.getDbmsCurrencyKey() + "/" + moParamPaymentEntry.CurrencyKey);
            
            if (moParamPaymentEntry.CurrencyId == moDataDocDpsRelated.getFkCurrencyId()) {
                jtfDocExchangeRate.setEditable(false);
                jtfDocExchangeRate.setFocusable(false);
                jbDocExchangeRateInvert.setEnabled(false);
            }
            else {
                jtfDocExchangeRate.setEditable(true);
                jtfDocExchangeRate.setFocusable(true);
                jbDocExchangeRateInvert.setEnabled(true);
            }
        }
    }
    
    private void computeDocBalancePend() {
        double balancePend = 0;
        
        balancePend = SLibUtils.roundAmount(moFieldDocBalancePrev.getDouble() - moFieldDocPaymentInt.getDouble());
        balancePend = SLibUtils.roundAmount(balancePend - moFieldDocPaymentFee.getDouble());
        balancePend = SLibUtils.roundAmount(balancePend - moFieldDocPaymentFeeVat.getDouble());
        jtfDocDocBalancePend.setText(SLibUtils.getDecimalFormatAmount().format(balancePend));
        
        int installment = moFieldDocInstallment.getInteger();
        jtfDocInstallmentPaymentInt.setText(moFieldDocPaymentInt.getDouble() == 0 ? "" : "" + ++installment);
        jtfDocInstallmentPaymentFee.setText(moFieldDocPaymentFee.getDouble() == 0 ? "" : "" + ++installment);
        jtfDocInstallmentPaymentFeeVat.setText(moFieldDocPaymentFeeVat.getDouble() == 0 ? "" : "" + ++installment);
        
        computeDocPaymentAmounts();
    }

    private void computeDocPaymentAmounts() {
        double totalPayment = 0;
        double totalAmount = 0;
        double totalAmountLocal = 0;
        
        if (moFieldDocExchangeRate.getDouble() == 0) {
            jtfDocPayBalancePrevRo.setText(SLibUtils.getDecimalFormatAmount().format(0));
            jtfDocPayPaymentIntRo.setText(SLibUtils.getDecimalFormatAmount().format(0));
            jtfDocPayPaymentFeeRo.setText(SLibUtils.getDecimalFormatAmount().format(0));
            jtfDocPayPaymentFeeVatRo.setText(SLibUtils.getDecimalFormatAmount().format(0));
            jtfDocPayBalancePendRo.setText(SLibUtils.getDecimalFormatAmount().format(0));
        }
        else {
            double balancePrev = SLibUtils.roundAmount(moFieldDocBalancePrev.getDouble() / moFieldDocExchangeRate.getDouble());
            double paymentInt = SLibUtils.roundAmount(moFieldDocPaymentInt.getDouble() / moFieldDocExchangeRate.getDouble());
            double paymentFee = SLibUtils.roundAmount(moFieldDocPaymentFee.getDouble() / moFieldDocExchangeRate.getDouble());
            double paymentFeeVat = SLibUtils.roundAmount(moFieldDocPaymentFeeVat.getDouble() / moFieldDocExchangeRate.getDouble());
            double paymentPend = SLibUtils.roundAmount(SLibUtils.parseDouble(jtfDocDocBalancePend.getText()) / moFieldDocExchangeRate.getDouble());
            
            jtfDocPayBalancePrevRo.setText(SLibUtils.getDecimalFormatAmount().format(balancePrev));
            jtfDocPayPaymentIntRo.setText(SLibUtils.getDecimalFormatAmount().format(paymentInt));
            jtfDocPayPaymentFeeRo.setText(SLibUtils.getDecimalFormatAmount().format(paymentFee));
            jtfDocPayPaymentFeeVatRo.setText(SLibUtils.getDecimalFormatAmount().format(paymentFeeVat));
            jtfDocPayBalancePendRo.setText(SLibUtils.getDecimalFormatAmount().format(paymentPend));
            
            totalPayment = SLibUtils.roundAmount(moFieldDocPaymentInt.getDouble() + moFieldDocPaymentFee.getDouble());
            totalPayment = SLibUtils.roundAmount(totalPayment + moFieldDocPaymentFeeVat.getDouble());
            
            totalAmount = SLibUtils.roundAmount(paymentInt + paymentFee);
            totalAmount = SLibUtils.roundAmount(totalAmount + paymentFeeVat);
            
            totalAmountLocal = SLibUtils.roundAmount(SLibUtils.roundAmount(paymentInt * moParamPaymentEntry.ExchangeRate));
            totalAmountLocal = SLibUtils.roundAmount(totalAmountLocal + SLibUtils.roundAmount(paymentFee * moParamPaymentEntry.ExchangeRate));
            totalAmountLocal = SLibUtils.roundAmount(totalAmountLocal + SLibUtils.roundAmount(paymentFeeVat * moParamPaymentEntry.ExchangeRate));
        }
        
        jtfPayTotalPaymentRo.setText(SLibUtils.getDecimalFormatAmount().format(totalPayment));
        jtfPayTotalAmountRo.setText(SLibUtils.getDecimalFormatAmount().format(totalAmount));
        jtfPayTotalAmountLocalRo.setText(SLibUtils.getDecimalFormatAmount().format(totalAmountLocal));
    }
    
    private int getTotalPayPaymentsCount() {
        int count = 0;
        
        if (moFieldDocPaymentInt.getDouble() != 0) {
            count++;
        }
        if (moFieldDocPaymentFee.getDouble() != 0) {
            count++;
        }
        if (moFieldDocPaymentFeeVat.getDouble() != 0) {
            count++;
        }
        
        return count;
    }
    
    /*
     * Private event handlers methods:
     */
    
    private void actionPerformedDocDpsRelatedPick() {
        Object[] filterKey = new Object[] { mnParamYear, SDataConstantsSys.TRNS_CL_DPS_SAL_DOC, new int[] { mnParamBizPartnerId }, mnParamCfdId };
        
        moDialogDocDpsRelatedPicker.formReset();
        moDialogDocDpsRelatedPicker.setFilterKey(filterKey);
        moDialogDocDpsRelatedPicker.formRefreshOptionPane();
        moDialogDocDpsRelatedPicker.setFormVisible(true);

        if (moDialogDocDpsRelatedPicker.getFormResult() == SLibConstants.FORM_RESULT_OK) {
            double[] balance = new double[] { 0, 0 };
            SFormCfdPayment.DpsRelatedInfo dpsRelatedInfo = null;
            
            moDataDocDpsRelated = (SDataDps) SDataUtilities.readRegistry(miClient, SDataConstants.TRN_DPS, moDialogDocDpsRelatedPicker.getSelectedPrimaryKey(), SLibConstants.EXEC_MODE_VERBOSE);

            try {
                renderDocDpsRelated();
                balance = SDataUtilities.obtainDpsBalance(miClient, (int[]) moDataDocDpsRelated.getPrimaryKey(), mnParamYear);
                dpsRelatedInfo = moFormCfdPayment.getDpsRelatedInfo(moDataDocDpsRelated.getDbmsDataCfd().getUuid());

            }
            catch (Exception e) {
                SLibUtils.showException(this, e);
            }

            // set default doc values:

            int installment;
            if (dpsRelatedInfo.LastInstallment != 0) {
                installment = dpsRelatedInfo.LastInstallment;
            }
            else {
                installment = STrnUtilities.countDpsPayments(miClient.getSession().getStatement(), (int[]) moDataDocDpsRelated.getPrimaryKey(), mnParamCfdId) + 1;
            }
            moFieldDocInstallment.setFieldValue(installment + 1);

            if (moParamPaymentEntry.CurrencyId == moDataDocDpsRelated.getFkCurrencyId()) {
                moFieldDocExchangeRate.setFieldValue(1d);
            }
            else {
                moFieldDocExchangeRate.setFieldValue(0d);
            }

            moFieldDocBalancePrev.setFieldValue(balance[1] - dpsRelatedInfo.Payments);

            moFieldDocPaymentInt.resetField();
            moFieldDocPaymentFee.resetField();
            moFieldDocPaymentFeeVat.resetField();
            computeDocBalancePend();

            jtfDocInstallment.requestFocusInWindow();
        }
    }
    
    private void actionPerformedDocExchangeRateInvert() {
        moFieldDocExchangeRate.setDouble(moFieldDocExchangeRate.getDouble() == 0 ? 0 : SLibUtils.round(1d / moFieldDocExchangeRate.getDouble(), SLibUtils.getDecimalFormatExchangeRate().getMaximumFractionDigits()));
        jtfDocExchangeRate.requestFocusInWindow();
        computeDocPaymentAmounts();
    }
    
    private void actionOk() {
        SFormValidation validation = null;

        if (jbOk.isEnabled()) {
            if (this.getFocusOwner() != null) {
                focusLost(new FocusEvent(this.getFocusOwner(), FocusEvent.FOCUS_LOST));
            }

            jbOk.requestFocusInWindow();    // this forces all pending focus lost function to be called

            validation = formValidate();

            if (validation.getIsError()) {
                if (validation.getComponent() != null) {
                    validation.getComponent().requestFocusInWindow();
                }
                if (validation.getMessage().length() > 0) {
                    miClient.showMsgBoxWarning(validation.getMessage());
                }
            }
            else {
                 mnFormResult = SLibConstants.FORM_RESULT_OK;
                 setVisible(false);
            }
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }
    
    private void focusLostDocExchangeRate() {
        computeDocPaymentAmounts();
    }

    private void focusLostDocPayment() {
        computeDocBalancePend();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel34;
    private javax.swing.JPanel jPanel35;
    private javax.swing.JPanel jPanel36;
    private javax.swing.JPanel jPanel39;
    private javax.swing.JPanel jPanel40;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JPanel jPanel42;
    private javax.swing.JPanel jPanel44;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbDocDpsRelatedPick;
    private javax.swing.JButton jbDocExchangeRateInvert;
    private javax.swing.JButton jbOk;
    private javax.swing.JButton jbPayExchangeRatePick;
    private javax.swing.JLabel jlDocBalancePend;
    private javax.swing.JLabel jlDocBalancePrev;
    private javax.swing.JLabel jlDocCurrency;
    private javax.swing.JLabel jlDocDpsRelated;
    private javax.swing.JLabel jlDocExchangeRate;
    private javax.swing.JLabel jlDocInstallment;
    private javax.swing.JLabel jlDocPaymentFee;
    private javax.swing.JLabel jlDocPaymentFeeVat;
    private javax.swing.JLabel jlDocPaymentInt;
    private javax.swing.JLabel jlDocPaymentMethod;
    private javax.swing.JLabel jlPayAmount;
    private javax.swing.JLabel jlPayTotal;
    private javax.swing.JPanel jpControls;
    private javax.swing.JPanel jpData;
    private javax.swing.JTextField jtfDocCurrencyRo;
    private javax.swing.JTextField jtfDocDocBalancePend;
    private javax.swing.JTextField jtfDocDocBalancePendCurRo;
    private javax.swing.JTextField jtfDocDocBalancePrev;
    private javax.swing.JTextField jtfDocDocBalancePrevCurRo;
    private javax.swing.JTextField jtfDocDocPaymentFee;
    private javax.swing.JTextField jtfDocDocPaymentFeeCurRo;
    private javax.swing.JTextField jtfDocDocPaymentFeeVat;
    private javax.swing.JTextField jtfDocDocPaymentFeeVatCurRo;
    private javax.swing.JTextField jtfDocDocPaymentInt;
    private javax.swing.JTextField jtfDocDocPaymentIntCurRo;
    private javax.swing.JTextField jtfDocDpsRelatedNumberRo;
    private javax.swing.JTextField jtfDocDpsRelatedUuid;
    private javax.swing.JTextField jtfDocDpsRelatedVersionRo;
    private javax.swing.JTextField jtfDocExchangeRate;
    private javax.swing.JTextField jtfDocExchangeRateCurRo;
    private javax.swing.JTextField jtfDocInstallment;
    private javax.swing.JTextField jtfDocInstallmentPaymentFee;
    private javax.swing.JTextField jtfDocInstallmentPaymentFeeVat;
    private javax.swing.JTextField jtfDocInstallmentPaymentInt;
    private javax.swing.JTextField jtfDocPayBalancePendCurRo;
    private javax.swing.JTextField jtfDocPayBalancePendRo;
    private javax.swing.JTextField jtfDocPayBalancePrevCurRo;
    private javax.swing.JTextField jtfDocPayBalancePrevRo;
    private javax.swing.JTextField jtfDocPayPaymentFeeCurRo;
    private javax.swing.JTextField jtfDocPayPaymentFeeRo;
    private javax.swing.JTextField jtfDocPayPaymentFeeVatCurRo;
    private javax.swing.JTextField jtfDocPayPaymentFeeVatRo;
    private javax.swing.JTextField jtfDocPayPaymentIntCurRo;
    private javax.swing.JTextField jtfDocPayPaymentIntRo;
    private javax.swing.JTextField jtfDocPaymentMethodRo;
    private javax.swing.JTextField jtfPayAmount;
    private javax.swing.JTextField jtfPayAmountCurRo;
    private javax.swing.JTextField jtfPayAmountLocalCurRo;
    private javax.swing.JTextField jtfPayAmountLocalRo;
    private javax.swing.JTextField jtfPayExchangeRate;
    private javax.swing.JTextField jtfPayTotalAmountCurRo;
    private javax.swing.JTextField jtfPayTotalAmountLocalCurRo;
    private javax.swing.JTextField jtfPayTotalAmountLocalRo;
    private javax.swing.JTextField jtfPayTotalAmountRo;
    private javax.swing.JTextField jtfPayTotalPaymentCurRo;
    private javax.swing.JTextField jtfPayTotalPaymentRo;
    // End of variables declaration//GEN-END:variables
    
    /*
     * Public methods:
     */
    
    public void setParams(final int year, final int bizPartnerId, final int cfdId, final SCfdPaymentEntry paymentEntry) {
        mnParamYear = year;
        mnParamBizPartnerId = bizPartnerId;
        mnParamCfdId = cfdId;
        moParamPaymentEntry = paymentEntry;
        
        renderPaymentEntry();
    }

    public ArrayList<SCfdPaymentEntryDoc> getPaymentEntryDocs() {
        ArrayList<SCfdPaymentEntryDoc> paymentEntryDocs = new ArrayList<>();
        int number = 1;
        int installment = moFieldDocInstallment.getInteger();
        double balancePrev = moFieldDocBalancePrev.getDouble();
        
        // create array of payment amounts:
        ArrayList<SFormField> payments = new ArrayList<>();
        payments.add(moFieldDocPaymentInt);
        payments.add(moFieldDocPaymentFee);
        payments.add(moFieldDocPaymentFeeVat);
        
        HashMap<SFormField, Integer> paymentTypes = new HashMap<>();
        paymentTypes.put(moFieldDocPaymentInt, SCfdPaymentEntryDoc.TYPE_INT);
        paymentTypes.put(moFieldDocPaymentFee, SCfdPaymentEntryDoc.TYPE_FEE);
        paymentTypes.put(moFieldDocPaymentFeeVat, SCfdPaymentEntryDoc.TYPE_FEE_VAT);
        
        // create document payment only for payment with payment amounts greater than zero:
        for (SFormField payment : payments) {
            if (payment.getDouble() > 0) {
                SCfdPaymentEntryDoc paymentEntryDoc = new SCfdPaymentEntryDoc(
                        moParamPaymentEntry, 
                        moDataDocDpsRelated, 
                        number++, 
                        paymentTypes.get(payment), 
                        installment++, 
                        balancePrev, 
                        payment.getDouble(), 
                        moFieldDocExchangeRate.getDouble());
                paymentEntryDocs.add(paymentEntryDoc);
                
                balancePrev = SLibUtils.roundAmount(balancePrev - payment.getDouble());
            }
        }
        
        return paymentEntryDocs;
    }
    
    /*
     * Public overriden methods:
     */
    
    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }
        
        mnParamYear = 0;
        mnParamBizPartnerId = 0;
        mnParamCfdId = 0;
        moParamPaymentEntry = null;
        moDataDocDpsRelated = null;
        
        try {
            renderPaymentEntry();
            renderDocDpsRelated();
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }

    @Override
    public void formRefreshCatalogues() {
        
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }
        
        if (!validation.getIsError()) {
            if (moDataDocDpsRelated == null) {
                validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_EMPTY + "'" + jlDocDpsRelated.getText() + "'.");
                validation.setComponent(jbDocDpsRelatedPick);
            }
            else if (moDataDocDpsRelated.getDbmsDataCfd().getUuid().isEmpty()) {
                validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_EMPTY + "'" + jlDocDpsRelated.getText() + ": " + jtfDocDpsRelatedUuid.getToolTipText() + "'.");
                validation.setComponent(jbDocDpsRelatedPick);
            }
            else if (!moDataDocDpsRelated.getDbmsDataDpsCfd().getPaymentMethod().equals(DCfdi33Catalogs.MDP_PPD)) {
                validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_VALUE_DIF + "'método pago'.");
                validation.setComponent(jbDocDpsRelatedPick);
            }

            if (!validation.getIsError()) {
                // validate payment remainder:
                
                if (getTotalPayPaymentsCount() == 0) {
                    validation.setMessage("Se debe especificar al menos un pago.");
                    validation.setComponent(jtfDocDocPaymentInt);
                }
                else {
                    double totalPayment = SLibUtils.parseDouble(jtfPayTotalPaymentRo.getText());
                    double totalAmount = SLibUtils.parseDouble(jtfPayTotalAmountRo.getText());
                    double totalAmountLocal = SLibUtils.parseDouble(jtfPayTotalAmountLocalRo.getText());
                    
                    if (totalPayment > moFieldDocBalancePrev.getDouble()) {
                        validation.setMessage("El monto total pagado "
                                + "$" + SLibUtils.getDecimalFormatAmount().format(totalPayment) + " " + moDataDocDpsRelated.getDbmsCurrencyKey() + " "
                                + "no puede ser mayor que el saldo anterior del documento relacionado "
                                + "$" + SLibUtils.getDecimalFormatAmount().format(moFieldDocBalancePrev.getDouble()) + " " + moDataDocDpsRelated.getDbmsCurrencyKey() + ".");
                        validation.setComponent(jtfDocDocPaymentInt);
                    }
                    else if (totalAmount > moParamPaymentEntry.Amount) {
                        validation.setMessage("El monto total pagado "
                                + "$" + SLibUtils.getDecimalFormatAmount().format(totalAmount) + " " + moParamPaymentEntry.CurrencyKey + " "
                                + "no puede ser mayor que el monto del pago "
                                + "$" + SLibUtils.getDecimalFormatAmount().format(moParamPaymentEntry.Amount) + " " + moParamPaymentEntry.CurrencyKey + ".");
                        validation.setComponent(jtfDocDocPaymentInt);
                    }
                    else if (totalAmount < moParamPaymentEntry.Amount && miClient.showMsgBoxConfirm(
                            "El monto total pagado "
                            + "$" + SLibUtils.getDecimalFormatAmount().format(totalAmount) + " " + moParamPaymentEntry.CurrencyKey + " "
                            + "es menor que el monto del pago "
                            + "$" + SLibUtils.getDecimalFormatAmount().format(moParamPaymentEntry.Amount) + " " + moParamPaymentEntry.CurrencyKey + ".\n"
                            + SLibConstants.MSG_CNF_MSG_CONT) != JOptionPane.YES_OPTION) {
                        validation.setMessage("Ajustar los pagos.");
                        validation.setComponent(jtfDocDocPaymentInt);
                    }
                    else if (totalAmountLocal > moParamPaymentEntry.AmountLocal) {
                        validation.setMessage("El monto total pagado en moneda local "
                                + "$" + SLibUtils.getDecimalFormatAmount().format(totalAmountLocal) + " " + miClient.getSession().getSessionCustom().getLocalCurrencyCode() + " "
                                + "no puede ser mayor que el monto del pago en moneda local "
                                + "$" + SLibUtils.getDecimalFormatAmount().format(moParamPaymentEntry.AmountLocal) + " " + miClient.getSession().getSessionCustom().getLocalCurrencyCode() + ".");
                        validation.setComponent(jtfDocDocPaymentInt);
                    }
                    else if (totalAmountLocal < moParamPaymentEntry.Amount && miClient.showMsgBoxConfirm(
                            "El monto total pagado en moneda local "
                            + "$" + SLibUtils.getDecimalFormatAmount().format(totalAmountLocal) + " " + miClient.getSession().getSessionCustom().getLocalCurrencyCode() + " "
                            + "es menor que el monto del pago en moneda local "
                            + "$" + SLibUtils.getDecimalFormatAmount().format(moParamPaymentEntry.AmountLocal) + " " + miClient.getSession().getSessionCustom().getLocalCurrencyCode() + ".\n"
                            + "¡IMPORTANTE: Será necesario realizar manualmente un ajuste contable para corregir la diferencia!\n"
                            + SLibConstants.MSG_CNF_MSG_CONT) != JOptionPane.YES_OPTION) {
                        validation.setMessage("Ajustar los pagos.");
                        validation.setComponent(jtfDocDocPaymentInt);
                    }
                }
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbDocDpsRelatedPick) {
                actionPerformedDocDpsRelatedPick();
            }
            else if (button == jbDocExchangeRateInvert) {
                actionPerformedDocExchangeRateInvert();
            }
            else if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
        }
    }

    @Override
    public void focusGained(FocusEvent e) {
        
    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof JTextField) {
            JTextField textField = (JTextField) e.getSource();
            
            if (textField == jtfDocExchangeRate) {
                focusLostDocExchangeRate();
            }
            else if (textField == jtfDocDocBalancePrev || textField == jtfDocDocPaymentInt || textField == jtfDocDocPaymentFee || textField == jtfDocDocPaymentFeeVat) {
                focusLostDocPayment();
            }
        }
    }
}
