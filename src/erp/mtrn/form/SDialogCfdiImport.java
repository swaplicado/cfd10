/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SDialogCfdiImport.java
 *
 * Created on 14/05/2020, 04:40:00 PM
 */

package erp.mtrn.form;

import cfd.ver33.DCfdi33Catalogs;
import cfd.ver33.DElementConceptoImpuestoRetencion;
import cfd.ver33.DElementConceptoImpuestoTraslado;
import cfd.ver33.DElementConceptoImpuestos;
import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataUtilities;
import erp.form.SFormOptionPicker;
import erp.form.SFormOptionPickerItems;
import erp.lib.SLibConstants;
import erp.lib.SLibTimeUtilities;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STableConstants;
import erp.lib.table.STablePane;
import erp.mbps.data.SDataBizPartner;
import erp.mfin.data.SDataCostCenter;
import erp.mfin.data.SDataTax;
import erp.mfin.data.SDataTaxRegion;
import erp.mitm.data.SDataItem;
import erp.mitm.data.SDataMatchingItemBizPartnerConcept;
import erp.mitm.data.SDataUnit;
import erp.mitm.data.SItemUtilities;
import erp.mod.SModSysConsts;
import erp.mod.bps.db.SBpsUtils;
import erp.mtrn.data.SCfdUtils;
import erp.mtrn.data.SDataDps;
import erp.mtrn.data.SDataDpsCfd;
import erp.mtrn.data.SDataDpsEntryTax;
import erp.mtrn.data.SDataDpsEntryTaxRow;
import erp.mtrn.data.SDataEntryDpsDpsLink;
import erp.mtrn.data.SRowCfdiImport;
import erp.mtrn.data.SRowCfdiTaxImport;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.util.ArrayList;
import javax.swing.AbstractAction;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.grid.SGridUtils;

/**
 *
 * @author Isabel Servín
 */
public class SDialogCfdiImport extends javax.swing.JDialog implements java.awt.event.ActionListener, javax.swing.event.ListSelectionListener {
    
    private static final int ITEM_MAIN = 1;
    private static final int ITEM_REF = 2;

    private final erp.client.SClientInterface miClient;
    private int mnIdCur;
    private int mnFormResult;
    private boolean mbFirstTime;
    private final boolean mbPurchaseOrder;
    private erp.lib.table.STablePane moConceptTablePane; 
    private erp.lib.table.STablePane moCfdiTaxesTablePane; 
    private erp.lib.table.STablePane moSiieTaxesTablePane; 

    private cfd.ver33.DElementComprobante moComprobante;
    private final SDataDps moDps;
    private SDataDps moDpsNew;
    private SDataBizPartner moBizPartnerEmisor;
    private SDataBizPartner moBizPartnerReceptor;
    private SFormOptionPickerItems moPickerItems;
    private SFormOptionPicker moPickerUnit;
    private SFormOptionPicker moPickerTaxRegion;
    private SFormOptionPicker moPickerCostCenter;
    
    private SFormField moFieldTaxRegionDps; 
    private SFormOptionPicker moPickerOpsType;

    /** Creates new form SDialogDpsLink
     * @param client
     * @param dps */
    public SDialogCfdiImport(erp.client.SClientInterface client, SDataDps dps) {
        super(client.getFrame(), true);
        miClient =  client;
        moDps = dps;
        mbPurchaseOrder = moDps != null;
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpImport = new javax.swing.JPanel();
        jpCfdiData = new javax.swing.JPanel();
        jpDps = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jlNameEmisor = new javax.swing.JLabel();
        jtfNameEmisor = new javax.swing.JTextField();
        jlRfcEmisor = new javax.swing.JLabel();
        jtfRfcEmisor = new javax.swing.JTextField();
        jPanel12 = new javax.swing.JPanel();
        jlInvoiceCfdi = new javax.swing.JLabel();
        jtfInvoiceCfdi = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jlDateCfdi = new javax.swing.JLabel();
        jtfDateCfdi = new javax.swing.JTextField();
        jpDps1 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jlTaxesRegion = new javax.swing.JLabel();
        jcbTaxesRegion = new javax.swing.JComboBox();
        jbTaxesRegion = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        jlInvoiceDps = new javax.swing.JLabel();
        jtfInvoiceDps = new javax.swing.JTextField();
        jlDateDps = new javax.swing.JLabel();
        jtfDateDps = new javax.swing.JTextField();
        jpOptions = new javax.swing.JPanel();
        jpTables = new javax.swing.JPanel();
        jpConcept = new javax.swing.JPanel();
        jpButtons = new javax.swing.JPanel();
        jPanel = new javax.swing.JPanel();
        jbSelectItem = new javax.swing.JButton();
        jbChangeUnit = new javax.swing.JButton();
        jbChangeTaxesRegion = new javax.swing.JButton();
        jbSelectPurchaseOrder = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jbOpsType = new javax.swing.JButton();
        jbCostCenter = new javax.swing.JButton();
        jbSelectReferenceItem = new javax.swing.JButton();
        jlCfdiTaxes = new javax.swing.JLabel();
        jlSiieTaxes = new javax.swing.JLabel();
        jpCfdiTaxes = new javax.swing.JPanel();
        jpSiieTaxes = new javax.swing.JPanel();
        jpPurchaseOrder = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jlNoPartida = new javax.swing.JLabel();
        jtfNoPartida = new javax.swing.JTextField();
        jlOriginalQuantity = new javax.swing.JLabel();
        jtfOriginalQuantity = new javax.swing.JTextField();
        jPanel14 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jlProcessQuantity = new javax.swing.JLabel();
        jtfProcessQuantity = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        jlSurplusPercentage = new javax.swing.JLabel();
        jtfSurplusPercentage = new javax.swing.JTextField();
        jlPendingQuantity = new javax.swing.JLabel();
        jtfPendingQuantity = new javax.swing.JTextField();
        jPanel10 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jlRemainingQuantity = new javax.swing.JLabel();
        jtfRemaining = new javax.swing.JTextField();
        jpControls = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Vinculación de documento de compras-ventas");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpImport.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpImport.setLayout(new java.awt.BorderLayout());

        jpCfdiData.setLayout(new java.awt.BorderLayout());

        jpDps.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos generales del CFDI:"));
        jpDps.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNameEmisor.setText("Emisor:");
        jlNameEmisor.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel6.add(jlNameEmisor);

        jtfNameEmisor.setEditable(false);
        jtfNameEmisor.setFocusable(false);
        jtfNameEmisor.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel6.add(jtfNameEmisor);

        jlRfcEmisor.setText("  RFC:");
        jlRfcEmisor.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel6.add(jlRfcEmisor);

        jtfRfcEmisor.setEditable(false);
        jtfRfcEmisor.setFocusable(false);
        jtfRfcEmisor.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel6.add(jtfRfcEmisor);

        jpDps.add(jPanel6);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlInvoiceCfdi.setText("Folio CFDI:");
        jlInvoiceCfdi.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel12.add(jlInvoiceCfdi);

        jtfInvoiceCfdi.setEditable(false);
        jtfInvoiceCfdi.setFocusable(false);
        jtfInvoiceCfdi.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel12.add(jtfInvoiceCfdi);

        jLabel1.setPreferredSize(new java.awt.Dimension(95, 23));
        jPanel12.add(jLabel1);

        jlDateCfdi.setText("  Fecha CFDI:");
        jlDateCfdi.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel12.add(jlDateCfdi);

        jtfDateCfdi.setEditable(false);
        jtfDateCfdi.setFocusable(false);
        jtfDateCfdi.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel12.add(jtfDateCfdi);

        jpDps.add(jPanel12);

        jpCfdiData.add(jpDps, java.awt.BorderLayout.CENTER);

        jpDps1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos adicionales de empate:"));
        jpDps1.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTaxesRegion.setText("Región imptos.*:");
        jlTaxesRegion.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlTaxesRegion);

        jcbTaxesRegion.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel8.add(jcbTaxesRegion);

        jbTaxesRegion.setText("...");
        jbTaxesRegion.setToolTipText("Seleccionar región de impuestos");
        jbTaxesRegion.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel8.add(jbTaxesRegion);

        jpDps1.add(jPanel8);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlInvoiceDps.setText("Folio OC:");
        jlInvoiceDps.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jlInvoiceDps);

        jtfInvoiceDps.setEditable(false);
        jtfInvoiceDps.setEnabled(false);
        jtfInvoiceDps.setFocusable(false);
        jtfInvoiceDps.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel13.add(jtfInvoiceDps);

        jlDateDps.setText("  Fecha OC:");
        jlDateDps.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel13.add(jlDateDps);

        jtfDateDps.setEditable(false);
        jtfDateDps.setText("2001-01-01T00:00:00");
        jtfDateDps.setEnabled(false);
        jtfDateDps.setFocusable(false);
        jtfDateDps.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel13.add(jtfDateDps);

        jpDps1.add(jPanel13);

        jpCfdiData.add(jpDps1, java.awt.BorderLayout.EAST);

        jpImport.add(jpCfdiData, java.awt.BorderLayout.PAGE_START);

        jpOptions.setBorder(javax.swing.BorderFactory.createTitledBorder("Conceptos del CFDI:"));
        jpOptions.setLayout(new java.awt.BorderLayout(0, 2));

        jpConcept.setLayout(new java.awt.BorderLayout());

        jpButtons.setLayout(new java.awt.GridLayout(2, 1, 0, 1));

        jPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jbSelectItem.setText("Seleccionar ítem");
        jbSelectItem.setPreferredSize(new java.awt.Dimension(170, 25));
        jPanel.add(jbSelectItem);

        jbChangeUnit.setText("Cambiar unidad");
        jbChangeUnit.setPreferredSize(new java.awt.Dimension(170, 25));
        jPanel.add(jbChangeUnit);

        jbChangeTaxesRegion.setText("Cambiar región impuestos");
        jbChangeTaxesRegion.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbChangeTaxesRegion.setPreferredSize(new java.awt.Dimension(170, 25));
        jPanel.add(jbChangeTaxesRegion);

        jbSelectPurchaseOrder.setText("Seleccionar partida OC");
        jbSelectPurchaseOrder.setPreferredSize(new java.awt.Dimension(170, 25));
        jPanel.add(jbSelectPurchaseOrder);

        jpButtons.add(jPanel);

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jbOpsType.setText("Seleccionar tipo operación");
        jbOpsType.setPreferredSize(new java.awt.Dimension(170, 25));
        jPanel1.add(jbOpsType);

        jbCostCenter.setText("Seleccionar centro costo");
        jbCostCenter.setPreferredSize(new java.awt.Dimension(170, 25));
        jPanel1.add(jbCostCenter);

        jbSelectReferenceItem.setText("Seleccionar ítem referencia");
        jbSelectReferenceItem.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbSelectReferenceItem.setPreferredSize(new java.awt.Dimension(170, 25));
        jPanel1.add(jbSelectReferenceItem);

        jpButtons.add(jPanel1);

        jlCfdiTaxes.setText("Impuestos del CFDI:");
        jlCfdiTaxes.setPreferredSize(new java.awt.Dimension(200, 23));

        jlSiieTaxes.setText("Impuestos del SIIE:");
        jlSiieTaxes.setPreferredSize(new java.awt.Dimension(200, 23));

        jpCfdiTaxes.setLayout(new java.awt.BorderLayout());

        jpSiieTaxes.setLayout(new java.awt.BorderLayout());

        jpPurchaseOrder.setBorder(javax.swing.BorderFactory.createTitledBorder("Partida de la OC:"));
        jpPurchaseOrder.setLayout(new java.awt.GridLayout(4, 1, 0, 1));

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlNoPartida.setText("No. de partida:");
        jlNoPartida.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlNoPartida);

        jtfNoPartida.setEditable(false);
        jtfNoPartida.setFocusable(false);
        jtfNoPartida.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel7.add(jtfNoPartida);

        jlOriginalQuantity.setText(" Cantidad original:");
        jlOriginalQuantity.setMinimumSize(new java.awt.Dimension(125, 16));
        jlOriginalQuantity.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel7.add(jlOriginalQuantity);

        jtfOriginalQuantity.setEditable(false);
        jtfOriginalQuantity.setFocusable(false);
        jtfOriginalQuantity.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel7.add(jtfOriginalQuantity);

        jpPurchaseOrder.add(jPanel7);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jLabel2.setPreferredSize(new java.awt.Dimension(226, 23));
        jPanel14.add(jLabel2);

        jlProcessQuantity.setText(" Cantidad procesada:");
        jlProcessQuantity.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel14.add(jlProcessQuantity);

        jtfProcessQuantity.setEditable(false);
        jtfProcessQuantity.setFocusable(false);
        jtfProcessQuantity.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel14.add(jtfProcessQuantity);

        jpPurchaseOrder.add(jPanel14);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlSurplusPercentage.setText("% excedente:");
        jlSurplusPercentage.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlSurplusPercentage);

        jtfSurplusPercentage.setEditable(false);
        jtfSurplusPercentage.setFocusable(false);
        jtfSurplusPercentage.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel9.add(jtfSurplusPercentage);

        jlPendingQuantity.setText(" Cantidad pendiente:");
        jlPendingQuantity.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel9.add(jlPendingQuantity);

        jtfPendingQuantity.setEditable(false);
        jtfPendingQuantity.setFocusable(false);
        jtfPendingQuantity.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel9.add(jtfPendingQuantity);

        jpPurchaseOrder.add(jPanel9);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jLabel3.setPreferredSize(new java.awt.Dimension(226, 23));
        jPanel10.add(jLabel3);

        jlRemainingQuantity.setText(" Cantidad remanente:");
        jlRemainingQuantity.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel10.add(jlRemainingQuantity);

        jtfRemaining.setEditable(false);
        jtfRemaining.setFocusable(false);
        jtfRemaining.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel10.add(jtfRemaining);

        jpPurchaseOrder.add(jPanel10);

        javax.swing.GroupLayout jpTablesLayout = new javax.swing.GroupLayout(jpTables);
        jpTables.setLayout(jpTablesLayout);
        jpTablesLayout.setHorizontalGroup(
            jpTablesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpTablesLayout.createSequentialGroup()
                .addGroup(jpTablesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jpConcept, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jpTablesLayout.createSequentialGroup()
                        .addGroup(jpTablesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jpCfdiTaxes, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jpTablesLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jlCfdiTaxes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpTablesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlSiieTaxes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jpSiieTaxes, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addComponent(jpPurchaseOrder, javax.swing.GroupLayout.DEFAULT_SIZE, 520, Short.MAX_VALUE))
                    .addComponent(jpButtons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jpTablesLayout.setVerticalGroup(
            jpTablesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpTablesLayout.createSequentialGroup()
                .addComponent(jpConcept, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpButtons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpTablesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpTablesLayout.createSequentialGroup()
                        .addGroup(jpTablesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlCfdiTaxes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlSiieTaxes, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpTablesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jpCfdiTaxes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jpSiieTaxes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jpPurchaseOrder, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE))
                .addContainerGap())
        );

        jpOptions.add(jpTables, java.awt.BorderLayout.CENTER);

        jpImport.add(jpOptions, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpImport, java.awt.BorderLayout.CENTER);

        jpControls.setPreferredSize(new java.awt.Dimension(392, 33));
        jpControls.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jpControls.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jpControls.add(jbCancel);

        getContentPane().add(jpControls, java.awt.BorderLayout.PAGE_END);

        setSize(new java.awt.Dimension(1040, 708));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            moConceptTablePane.getTable().requestFocus();
        }
    }
    
    private void initComponentsExtra() {
        // Tabla general (conceptos):
        int i = 0;
        STableColumnForm[] columns;
        
        moConceptTablePane = new STablePane(miClient);
        jpConcept.add(moConceptTablePane, BorderLayout.CENTER);

        columns = new STableColumnForm[18];
        // CFDI:
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "No. Identificación", STableConstants.WIDTH_ITEM_KEY);
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Descripción", 250);
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "ProdServ SAT", STableConstants.WIDTH_ITEM_KEY);
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Unidad", STableConstants.WIDTH_UNIT_SYMBOL);
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Unidad SAT", STableConstants.WIDTH_UNIT_SYMBOL);
        columns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Cantidad", STableConstants.WIDTH_QUANTITY);
        columns[i++].setCellRenderer(SGridUtils.getCellRendererNumberQuantity());
        // SIIE:
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Código ítem", STableConstants.WIDTH_ITEM_KEY);
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Nombre ítem", 250);
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "ProdServ SAT", STableConstants.WIDTH_ITEM_KEY);
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Unidad", STableConstants.WIDTH_UNIT_SYMBOL);
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Unidad SAT", STableConstants.WIDTH_ITEM);
        columns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Factor de conversión", STableConstants.WIDTH_NUM_INTEGER);
        columns[i].setCellRenderer(SGridUtils.CellRendererValue4D);
        columns[i++].setEditable(true);
        columns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Cantidad equivalente", STableConstants.WIDTH_NUM_INTEGER);
        columns[i++].setCellRenderer(SGridUtils.CellRendererValue4D);
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Región impuestos", 150);
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo operación", STableConstants.WIDTH_ITEM);
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Centro costo", STableConstants.WIDTH_ACCOUNT);
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Código ítem referencia", STableConstants.WIDTH_ITEM_KEY);
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Nombre ítem referencia", 250);
        
        for (i = 0; i < columns.length; i++) {
            moConceptTablePane.addTableColumn(columns[i]);
        }
        
        // Tabla impuestos CFDI
        
        int j = 0;
        STableColumnForm[] taxColumns;
        
        moCfdiTaxesTablePane = new STablePane(miClient);
        jpCfdiTaxes.add(moCfdiTaxesTablePane, BorderLayout.CENTER);

        taxColumns = new STableColumnForm[3];
        taxColumns[j++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo impuesto", STableConstants.WIDTH_VALUE);
        taxColumns[j++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo impuesto (SAT)", STableConstants.WIDTH_VALUE);
        taxColumns[j] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tasa o cuota", STableConstants.WIDTH_NUM_INTEGER);
        
        for (j = 0; j < taxColumns.length; j++) {
            moCfdiTaxesTablePane.addTableColumn(taxColumns[j]);
        }
        
        // Tabla impuestos SIIE:
        
        int k = 0;
        STableColumnForm[] taxSiieColumns;
        
        moSiieTaxesTablePane = new STablePane(miClient);
        jpSiieTaxes.add(moSiieTaxesTablePane, BorderLayout.CENTER);

        taxSiieColumns = new STableColumnForm[9];
        taxSiieColumns[k++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Impuesto", 200);
        taxSiieColumns[k] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Tasa", STableConstants.WIDTH_PERCENTAGE);
        taxSiieColumns[k++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererPercentage());
        taxSiieColumns[k] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Valor u.", STableConstants.WIDTH_VALUE_UNITARY);
        taxSiieColumns[k++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererValueUnitary());
        taxSiieColumns[k++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Valor", STableConstants.WIDTH_VALUE);
        taxSiieColumns[k++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Monto $", STableConstants.WIDTH_VALUE);
        taxSiieColumns[k++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Monto mon $", STableConstants.WIDTH_VALUE);
        taxSiieColumns[k++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo impuesto", 150);
        taxSiieColumns[k++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Cálculo impuesto", 150);
        taxSiieColumns[k++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Aplicación impuesto", 150);
        for (k = 0; k < taxSiieColumns.length; k++) {
            moSiieTaxesTablePane.addTableColumn(taxSiieColumns[k]);
        }
        
        // Listeners:
        
        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);
        jbSelectItem.addActionListener(this);
        jbChangeUnit.addActionListener(this);
        jbTaxesRegion.addActionListener(this); 
        jbChangeTaxesRegion.addActionListener(this);
        jbSelectPurchaseOrder.addActionListener(this);
        jbOpsType.addActionListener(this); 
        jbCostCenter.addActionListener(this);
        jbSelectReferenceItem.addActionListener(this);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
        SFormUtilities.populateComboBox(miClient, jcbTaxesRegion, SDataConstants.FINU_TAX_REG);
        
        // Activar o desactivar componentes:
        
        jcbTaxesRegion.setEnabled(!mbPurchaseOrder);
        jbTaxesRegion.setEnabled(!mbPurchaseOrder);
        jbSelectItem.setEnabled(!mbPurchaseOrder);
        jbChangeUnit.setEnabled(false);
        jbChangeTaxesRegion.setEnabled(false);
        jbOpsType.setEnabled(false);
        jbCostCenter.setEnabled(false);
        jbSelectReferenceItem.setEnabled(false); 
        jbSelectPurchaseOrder.setEnabled(mbPurchaseOrder);
        jtfInvoiceDps.setEditable(!mbPurchaseOrder);
        jtfDateDps.setEditable(!mbPurchaseOrder);
        jlInvoiceDps.setEnabled(!mbPurchaseOrder);
        jlDateDps.setEnabled(!mbPurchaseOrder);
        jlNoPartida.setEnabled(!mbPurchaseOrder);
        jlSurplusPercentage.setEnabled(!mbPurchaseOrder);
        jlOriginalQuantity.setEnabled(!mbPurchaseOrder);
        jlProcessQuantity.setEnabled(!mbPurchaseOrder);
        jlPendingQuantity.setEnabled(!mbPurchaseOrder);
        jlRemainingQuantity.setEnabled(!mbPurchaseOrder);
        
        // Field con la información de la región de impuestos
        
        moFieldTaxRegionDps = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbTaxesRegion, jlTaxesRegion);
        moFieldTaxRegionDps.setPickerButton(jbTaxesRegion);
    }
    
    /**
     * Asigna los valores del comprobante CFDI a la forma para realizar el empate de los conceptos con los conceptos del CFDI.
     * @param comprobante CFDI.
     */
    public void setComprobante(cfd.ver33.DElementComprobante comprobante) {
        moComprobante = comprobante;
        
        jtfRfcEmisor.setText(comprobante.getEltEmisor().getAttRfc().getString());
        jtfNameEmisor.setText(comprobante.getEltEmisor().getAttNombre().getString());
        jtfInvoiceCfdi.setText(comprobante.getAttSerie() != null ? 
                comprobante.getAttSerie().getString() + "-" + comprobante.getAttFolio().getString() :
                comprobante.getAttFolio().getString());
        jtfDateCfdi.setText(SLibUtils.DbmsDateFormatDatetime.format(comprobante.getAttFecha().getDatetime()));

        jtfRfcEmisor.setCaretPosition(0); 
        jtfNameEmisor.setCaretPosition(0);
        jtfInvoiceCfdi.setCaretPosition(0);
        jtfDateCfdi.setCaretPosition(0);
        
        int bizPartnerIdEmisor = SBpsUtils.getBizParterIdByFiscalId(miClient.getSession().getStatement(), comprobante.getEltEmisor().getAttRfc().getString(), "", SDataConstantsSys.BPSS_CT_BP_SUP);
        moBizPartnerEmisor = (SDataBizPartner) SDataUtilities.readRegistry(miClient, 
                SDataConstants.BPSU_BP, new int[] { bizPartnerIdEmisor }, SLibConstants.EXEC_MODE_SILENT);
        
        if (moBizPartnerEmisor.getDbmsBizPartnerBranches() != null) {
            SFormUtilities.locateComboBoxItem(jcbTaxesRegion, new int[] { moBizPartnerEmisor.getDbmsBizPartnerBranches().get(0).getFkTaxRegionId_n() != 0 ? 
                    moBizPartnerEmisor.getDbmsBizPartnerBranches().get(0).getFkTaxRegionId_n() : miClient.getSessionXXX().getParamsCompany().getFkDefaultTaxRegionId_n() });          
        } 
        
        if (mbPurchaseOrder) {
            // Ya existe una orden de compra:
            
            moBizPartnerReceptor = (SDataBizPartner) SDataUtilities.readRegistry(miClient, 
                SDataConstants.BPSU_BP, new int[] { moDps.getFkBizPartnerId_r() }, SLibConstants.EXEC_MODE_SILENT);
            
            jtfInvoiceDps.setText(moDps.getComprobanteFolio());
            jtfDateDps.setText(SLibUtils.DbmsDateFormatDatetime.format(moDps.getComprobanteFecha()));

            jtfInvoiceDps.setCaretPosition(0);
            jtfDateDps.setCaretPosition(0);
        }
        else {
            // No existe una orden de compra:
            
            int bizPartnerIdReceptor = SBpsUtils.getBizParterIdByFiscalId(miClient.getSession().getStatement(), comprobante.getEltReceptor().getAttRfc().getString(), "", 0); 
            
            moBizPartnerReceptor = (SDataBizPartner) SDataUtilities.readRegistry(miClient, 
                SDataConstants.BPSU_BP, new int[] { bizPartnerIdReceptor }, SLibConstants.EXEC_MODE_SILENT);
            
            try {
                String sql = "SELECT id_cur FROM erp.cfgu_cur WHERE cur_key = '" + moComprobante.getAttMoneda().getString() + "'";
                try (ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql)) {
                    if (resultSet.next()) {
                        mnIdCur = resultSet.getInt(1);
                    }
                }
            }
            catch (Exception e){
                SLibUtils.printException(this, e);
            }
        }
        
        populateTables();        
    }

    private void populateTables() {
        moConceptTablePane.createTable();
        moConceptTablePane.clearTableRows();
        
        for (int i = 0; i < moComprobante.getEltConceptos().getEltConceptos().size(); i++) {
            SRowCfdiImport row = new SRowCfdiImport(miClient, moComprobante.getEltConceptos().getEltConceptos().get(i));
            loadPredefinedMatchedData(row, i);
            moConceptTablePane.addTableRow(row);
        }
        
        moConceptTablePane.renderTableRows();
        moConceptTablePane.setTableRowSelection(0);
        ListSelectionModel selectionModel = moConceptTablePane.getTable().getSelectionModel();
        selectionModel.addListSelectionListener(this);
        moConceptTablePane.getTable().setSelectionModel(selectionModel); 
        setCfdiTaxesTableValues(0);
    }
    
    private void loadPredefinedMatchedData(SRowCfdiImport rowCfdiImport, int sortingPosition) { // Carga los datos empatados con anterioridad.
        /*
        Se busca si ya hay datos de empate para el No. de identificación y el ID. del emisor,
        si se obtiene un 0 significa que no hay datos de empate anteriores.
        */
        
        int matchId = SItemUtilities.getMatchItemBizPartnerId(miClient, rowCfdiImport.getConcepto().getAttNoIdentificacion().getString(), moBizPartnerEmisor.getPkBizPartnerId());
        
        if (matchId != 0) {
            // Se cargan los datos del empate anterior:
            
            SDataMatchingItemBizPartnerConcept match = new SDataMatchingItemBizPartnerConcept();
            match.read(matchId, miClient.getSession().getStatement());
            
            SDataItem item = (SDataItem) SDataUtilities.readRegistry(miClient,
                SDataConstants.ITMU_ITEM, new int[] { match.getFkItemId() }, SLibConstants.EXEC_MODE_SILENT);
            SDataTaxRegion taxRegion = new SDataTaxRegion();
            taxRegion.read(new int [] { match.getFkTaxRegionId() }, miClient.getSession().getStatement());
            
            // Se asignan los valores:
            rowCfdiImport.setItem(item);
            rowCfdiImport.setUnit(item.getDbmsDataUnit());
            rowCfdiImport.setTaxRegion(taxRegion);
            rowCfdiImport.setOperationTypePk(SDataConstantsSys.TRNX_OPS_TYPE_OPS_OPS);
            rowCfdiImport.setCostCenter(getCostCenterByItem(item));
            
            // En caso de que se requiera, se asigna un item de referencia:
            if (item.getDbmsDataItemGeneric().getIsItemReferenceRequired()) {
                SDataItem refItem = (SDataItem) SDataUtilities.readRegistry(miClient,
                        SDataConstants.ITMU_ITEM, new int[] { item.getDbmsFkDefaultItemRefId_n() }, SLibConstants.EXEC_MODE_SILENT);
                rowCfdiImport.setReferenceItem(refItem);
            }
            
            rowCfdiImport.prepareTableRow();
            setSiieTaxes(rowCfdiImport, sortingPosition);
        }
    }
       
    private void actionOk() {
        formValidate();
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbChangeTaxesRegion;
    private javax.swing.JButton jbChangeUnit;
    private javax.swing.JButton jbCostCenter;
    private javax.swing.JButton jbOk;
    private javax.swing.JButton jbOpsType;
    private javax.swing.JButton jbSelectItem;
    private javax.swing.JButton jbSelectPurchaseOrder;
    private javax.swing.JButton jbSelectReferenceItem;
    private javax.swing.JButton jbTaxesRegion;
    private javax.swing.JComboBox jcbTaxesRegion;
    private javax.swing.JLabel jlCfdiTaxes;
    private javax.swing.JLabel jlDateCfdi;
    private javax.swing.JLabel jlDateDps;
    private javax.swing.JLabel jlInvoiceCfdi;
    private javax.swing.JLabel jlInvoiceDps;
    private javax.swing.JLabel jlNameEmisor;
    private javax.swing.JLabel jlNoPartida;
    private javax.swing.JLabel jlOriginalQuantity;
    private javax.swing.JLabel jlPendingQuantity;
    private javax.swing.JLabel jlProcessQuantity;
    private javax.swing.JLabel jlRemainingQuantity;
    private javax.swing.JLabel jlRfcEmisor;
    private javax.swing.JLabel jlSiieTaxes;
    private javax.swing.JLabel jlSurplusPercentage;
    private javax.swing.JLabel jlTaxesRegion;
    private javax.swing.JPanel jpButtons;
    private javax.swing.JPanel jpCfdiData;
    private javax.swing.JPanel jpCfdiTaxes;
    private javax.swing.JPanel jpConcept;
    private javax.swing.JPanel jpControls;
    private javax.swing.JPanel jpDps;
    private javax.swing.JPanel jpDps1;
    private javax.swing.JPanel jpImport;
    private javax.swing.JPanel jpOptions;
    private javax.swing.JPanel jpPurchaseOrder;
    private javax.swing.JPanel jpSiieTaxes;
    private javax.swing.JPanel jpTables;
    private javax.swing.JTextField jtfDateCfdi;
    private javax.swing.JTextField jtfDateDps;
    private javax.swing.JTextField jtfInvoiceCfdi;
    private javax.swing.JTextField jtfInvoiceDps;
    private javax.swing.JTextField jtfNameEmisor;
    private javax.swing.JTextField jtfNoPartida;
    private javax.swing.JTextField jtfOriginalQuantity;
    private javax.swing.JTextField jtfPendingQuantity;
    private javax.swing.JTextField jtfProcessQuantity;
    private javax.swing.JTextField jtfRemaining;
    private javax.swing.JTextField jtfRfcEmisor;
    private javax.swing.JTextField jtfSurplusPercentage;
    // End of variables declaration//GEN-END:variables

    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    private void setCfdiTaxesTableValues(int selectedRow) { 
        moCfdiTaxesTablePane.createTable();
        moCfdiTaxesTablePane.clearTableRows();
        
        cfd.ver33.DElementConceptoImpuestos oImpuestos = moComprobante.getEltConceptos().getEltConceptos().get(selectedRow).getEltOpcConceptoImpuestos();
        if (oImpuestos != null) {
            if (oImpuestos.getEltOpcImpuestosTrasladados() != null) {
                for (int i = 0; i < oImpuestos.getEltOpcImpuestosTrasladados().getEltImpuestoTrasladados().size(); i++) {
                    moCfdiTaxesTablePane.addTableRow(new SRowCfdiTaxImport(oImpuestos, SModSysConsts.FINS_TP_TAX_CHARGED, i));
                }
            }
            if (oImpuestos.getEltOpcImpuestosRetenciones() != null) {
                for (int i = 0; i < oImpuestos.getEltOpcImpuestosRetenciones().getEltImpuestoRetenciones().size(); i++) {
                    moCfdiTaxesTablePane.addTableRow(new SRowCfdiTaxImport(oImpuestos, SModSysConsts.FINS_TP_TAX_RETAINED, i));
                }
            }
            
            moCfdiTaxesTablePane.renderTableRows();
            moCfdiTaxesTablePane.setTableRowSelection(0);
        }
    }
    
    private void setEnabledButtons(SRowCfdiImport rowCfdiImport) { 
        if (rowCfdiImport != null) {
            jbChangeUnit.setEnabled(rowCfdiImport.getItem() != null);
            jbChangeTaxesRegion.setEnabled(rowCfdiImport.getItem() != null); 
            jbOpsType.setEnabled(rowCfdiImport.getItem() != null); 
            jbCostCenter.setEnabled(rowCfdiImport.getItem() != null);
            jbSelectReferenceItem.setEnabled(rowCfdiImport.getItem()!= null && rowCfdiImport.getItem().getDbmsDataItemGeneric().getIsItemReferenceRequired());
        }
        else {
            jbChangeUnit.setEnabled(false);
            jbChangeTaxesRegion.setEnabled(false); 
            jbOpsType.setEnabled(false); 
            jbCostCenter.setEnabled(false);
            jbSelectReferenceItem.setEnabled(false);
        }    
    }
    
    private void setSiieTaxes(SRowCfdiImport rowCfdiImport, int sortingPosition) {
        try {
            rowCfdiImport.setDpsEntry(sortingPosition + 1);
            calculateTotalDpsEntry(rowCfdiImport); 
            setSiieTaxesTableValues(rowCfdiImport);
            
            DElementConceptoImpuestos impuestos = rowCfdiImport.getConcepto().getEltOpcConceptoImpuestos();
            if (impuestos != null) {
                if (impuestos.getEltOpcImpuestosTrasladados() != null) {
                    ArrayList<cfd.ver33.DElementConceptoImpuestoTraslado> trasladado = impuestos.getEltOpcImpuestosTrasladados().getEltImpuestoTrasladados();
                    for (int i = 0; trasladado.size() > i; i++){ 
                        SDataTax tax = SCfdUtils.obtainTaxCharged(miClient, trasladado.get(i));
                        if (tax != null){
                            for(int j = 0; j < rowCfdiImport.getDpsEntry().getDbmsEntryTaxes().size(); j++){
                                SDataDpsEntryTax dpsEntryTax = rowCfdiImport.getDpsEntry().getDbmsEntryTaxes().get(j);
                                if (dpsEntryTax.getPkTaxBasicId() == tax.getPkTaxBasicId() &&
                                        dpsEntryTax.getPkTaxId() == tax.getPkTaxId() &&
                                        SLibUtils.DecimalFormatPercentage4D.format(dpsEntryTax.getPercentage()).equals(
                                                SLibUtils.DecimalFormatPercentage4D.format(trasladado.get(i).getAttTasaOCuota().getDouble())) &&
                                        dpsEntryTax.getFkTaxTypeId() == SModSysConsts.FINS_TP_TAX_CHARGED && 
                                        dpsEntryTax.getFkTaxCalculationTypeId() == SModSysConsts.FINS_TP_TAX_CAL_RATE) {
                                    rowCfdiImport.getDpsEntry().getDbmsEntryTaxes().get(j).setTaxCy(trasladado.get(i).getAttImporte().getDouble());
                                    rowCfdiImport.addTaxChargedMatched(trasladado.get(i)); 
                                }
                            }
                        }
                    }
                }
                
                if (impuestos.getEltOpcImpuestosRetenciones() != null) {
                    ArrayList<cfd.ver33.DElementConceptoImpuestoRetencion> retencion = impuestos.getEltOpcImpuestosRetenciones().getEltImpuestoRetenciones();
                    for (int i = 0; retencion.size() > i ; i++) {                
                        SDataTax tax = SCfdUtils.obtainTaxRetained(miClient, retencion.get(i));
                        if (tax != null){
                            for (int j = 0; j < rowCfdiImport.getDpsEntry().getDbmsEntryTaxes().size(); j++){
                                SDataDpsEntryTax dpsEntryTax = rowCfdiImport.getDpsEntry().getDbmsEntryTaxes().get(j);
                                if (dpsEntryTax.getPkTaxBasicId() == tax.getPkTaxBasicId() &&
                                        dpsEntryTax.getPkTaxId() == tax.getPkTaxId() &&
                                        SLibUtils.DecimalFormatPercentage4D.format(dpsEntryTax.getPercentage()).equals(
                                                SLibUtils.DecimalFormatPercentage4D.format(retencion.get(i).getAttTasaOCuota().getDouble())) &&
                                        dpsEntryTax.getFkTaxTypeId() == SModSysConsts.FINS_TP_TAX_RETAINED && 
                                        dpsEntryTax.getFkTaxCalculationTypeId() == SModSysConsts.FINS_TP_TAX_CAL_RATE) {
                                    rowCfdiImport.getDpsEntry().getDbmsEntryTaxes().get(j).setTaxCy(retencion.get(i).getAttImporte().getDouble());
                                    rowCfdiImport.addTaxRetainedMatched(retencion.get(i));
                                }
                            }
                        }
                    }
                }
            }
        }
        catch (Exception e) {
            SLibUtils.printException(this, e);
        }
    }
    
    private void calculateTotalDpsEntry(SRowCfdiImport rowCfdiImport){
        rowCfdiImport.calculateTotalDpsEntry(moComprobante.getAttFecha().getDatetime(), moBizPartnerEmisor.getFkBizPartnerIdentityTypeId(),
                moBizPartnerReceptor.getFkBizPartnerIdentityTypeId(), miClient.getSession().getSessionCustom().isLocalCurrency(
                new int[] { mnIdCur }) ? 1 : moComprobante.getAttTipoCambio().getDouble());
    }
    
    private void setSiieTaxesTableValues(SRowCfdiImport rowCfdiImport) { 
        moSiieTaxesTablePane.createTable();
        moSiieTaxesTablePane.clearTableRows();
        
        if (rowCfdiImport.getDpsEntry() != null && rowCfdiImport.getDpsEntry().getDbmsEntryTaxes() != null) {
            for (int i = 0; i < rowCfdiImport.getDpsEntry().getDbmsEntryTaxes().size(); i++) {
                moSiieTaxesTablePane.addTableRow(new SDataDpsEntryTaxRow(rowCfdiImport.getDpsEntry().getDbmsEntryTaxes().get(i)));
            }
        }
        
        moSiieTaxesTablePane.renderTableRows();
        moSiieTaxesTablePane.setTableRowSelection(0);
    }
    
    private void setPurchaseOrderPanelValues() {
        SRowCfdiImport row = (SRowCfdiImport) moConceptTablePane.getSelectedTableRow();
        SDataEntryDpsDpsLink entryDpsLink = row.getEntryDpsDpsLink(); 
        if (entryDpsLink != null) {
            entryDpsLink.getConcept();
            entryDpsLink.getConceptKey();
            jtfNoPartida.setText(SLibUtils.DecimalFormatValue0D.format(moConceptTablePane.getTable().getSelectedRow() + 1));
            jtfOriginalQuantity.setText(SLibUtils.DecimalFormatValue2D.format(entryDpsLink.getQuantity()));
            jtfProcessQuantity.setText(SLibUtils.DecimalFormatValue2D.format(entryDpsLink.getQuantity() - entryDpsLink.getQuantityToBeLinked()));
            jtfPendingQuantity.setText(SLibUtils.DecimalFormatValue2D.format(entryDpsLink.getQuantityToBeLinked()));
            jtfRemaining.setText("");
            jtfSurplusPercentage.setText(SLibUtils.DecimalFormatPercentage2D.format(entryDpsLink.getSurplusPercentage()));
            entryDpsLink.getQuantityToLink();
        }
        else {
            jtfOriginalQuantity.setText("");
            jtfProcessQuantity.setText("");
            jtfPendingQuantity.setText("");
            jtfRemaining.setText("");
            jtfSurplusPercentage.setText("");
        }
    }
    
    private void actionTaxesRegion() {
        miClient.pickOption(SDataConstants.FINU_TAX_REG, moFieldTaxRegionDps, null);
    }

    /**
     * 
     * @param choiceOfItem Indica el ítem deseado: ITEM_MAIN o ITEM_REF.
     */
    private void actionSelectItem(int choiceOfItem) { 
        if (jbSelectItem.isEnabled()) {
            if (jcbTaxesRegion.getSelectedIndex() > 0) {
                int selectedRow = moConceptTablePane.getTable().getSelectedRow();
                if (selectedRow > -1) {
                    SRowCfdiImport rowCfdiImport = (SRowCfdiImport) moConceptTablePane.getSelectedTableRow();        
                    if (moPickerItems == null) {
                        moPickerItems = SFormOptionPickerItems.createOptionPicker(miClient, SDataConstants.ITMX_ITEM_IOG, moPickerItems);
                    }
                    moPickerItems.formReset();
                    if (choiceOfItem == ITEM_MAIN) {
                        moPickerItems.setFilterKey(SDataConstantsSys.ITMS_CL_ITEM_PUR_CON);
                    }
                    moPickerItems.formRefreshOptionPane();

                    moPickerItems.setSelectedPrimaryKey(rowCfdiImport.getItem() != null ? new int [] { rowCfdiImport.getItem().getPkItemId() } : null);
                    moPickerItems.setFormVisible(true); 

                    int[] key;
                    if (moPickerItems.getFormResult() == SLibConstants.FORM_RESULT_OK) {
                        key = (int[]) moPickerItems.getSelectedPrimaryKey();

                        SDataItem item = (SDataItem) SDataUtilities.readRegistry(miClient,
                                SDataConstants.ITMU_ITEM, key, SLibConstants.EXEC_MODE_SILENT);
                        if (choiceOfItem == ITEM_MAIN) {
                            rowCfdiImport.setItem(item);
                            // Se busca si el ítem principal requiere un ítem de refefencia, de ser así, se asigna.
                            if (rowCfdiImport.getItem().getDbmsDataItemGeneric().getIsItemReferenceRequired()) {
                                SDataItem refItem = (SDataItem) SDataUtilities.readRegistry(miClient,
                                    SDataConstants.ITMU_ITEM, new int[] { rowCfdiImport.getItem().getDbmsFkDefaultItemRefId_n() }, SLibConstants.EXEC_MODE_SILENT);
                                rowCfdiImport.setReferenceItem(refItem);
                            }
                            // Se asigna la unidad del ítem principal.
                            rowCfdiImport.setUnit(item.getDbmsDataUnit());
                            // Si hay una región de impuestos seleccionada en el combobox, se le asigna esa región de impuestos.
                            if (jcbTaxesRegion.getSelectedIndex() > 0) {
                                SDataTaxRegion taxRegion = new SDataTaxRegion();
                                taxRegion.read(((SFormComponentItem) jcbTaxesRegion.getSelectedItem()).getPrimaryKey(), miClient.getSession().getStatement());
                                rowCfdiImport.setTaxRegion(taxRegion);
                            }
                            // Se asigna tipo de operación por defecto.
                            if (rowCfdiImport.getOperationTypePk() == 0){
                                rowCfdiImport.setOperationTypePk(SDataConstantsSys.TRNX_OPS_TYPE_OPS_OPS);
                            }
                            // Se obtiene y se asigna el centro de costo definido para el ítem principal.
                            rowCfdiImport.setCostCenter(getCostCenterByItem(item));
                        }
                        else { // Es ítem de referencia.
                            rowCfdiImport.setReferenceItem(item);
                        }
                        rowCfdiImport.prepareTableRow();
                        moConceptTablePane.renderTableRows();
                    }                
                    setSiieTaxes(rowCfdiImport, selectedRow);
                }
                else {
                    miClient.showMsgBoxWarning("No hay ninguna fila seleccionada."); 
                }
            }
            else {
                miClient.showMsgBoxWarning("No hay ninguna región de impuestos seleccionada.");
            }
        }
    }

    private void actionChangeUnit() {
        if (jbChangeUnit.isEnabled()) {
            int selectedRow = moConceptTablePane.getTable().getSelectedRow();
            if (selectedRow > -1) {
                SRowCfdiImport rowCfdiImport = (SRowCfdiImport) moConceptTablePane.getSelectedTableRow();
                SDataItem item = rowCfdiImport.getItem();
                if (moPickerUnit == null) {
                    moPickerUnit = SFormOptionPicker.createOptionPicker(miClient, SDataConstants.ITMU_UNIT, moPickerUnit);
                }
                moPickerUnit.formReset();
                moPickerUnit.setFilterKey(new int[] { item.getDbmsDataItemGeneric().getFkUnitTypeId() });
                moPickerUnit.formRefreshOptionPane();
                moPickerUnit.setSelectedPrimaryKey(rowCfdiImport.getUnit() != null ? new int [] { rowCfdiImport.getUnit().getPkUnitId() } : null);
                moPickerUnit.setFormVisible(true); 

                int[] key;
                if (moPickerUnit.getFormResult() == SLibConstants.FORM_RESULT_OK) {
                    key = (int[]) moPickerUnit.getSelectedPrimaryKey();
                    SDataUnit unit = (SDataUnit) SDataUtilities.readRegistry(miClient,
                        SDataConstants.ITMU_UNIT, key, SLibConstants.EXEC_MODE_SILENT);

                    rowCfdiImport.setUnit(unit);
                    rowCfdiImport.prepareTableRow();
                    moConceptTablePane.renderTableRows();
                }
                setSiieTaxes(rowCfdiImport, selectedRow);
            }
            else { 
                miClient.showMsgBoxWarning("No hay ninguna fila seleccionada.");
            }
        }
    }

    private void actionChangeTaxesRegion() {
        if (jbChangeTaxesRegion.isEnabled()) {
            int selectedRow = moConceptTablePane.getTable().getSelectedRow();
            if (selectedRow > -1) {
                SRowCfdiImport rowCfdiImport = (SRowCfdiImport) moConceptTablePane.getSelectedTableRow();
                if (moPickerTaxRegion == null) {
                    moPickerTaxRegion = SFormOptionPicker.createOptionPicker(miClient, SDataConstants.FINU_TAX_REG, moPickerTaxRegion);
                }
                moPickerTaxRegion.formReset();
                moPickerTaxRegion.formRefreshOptionPane();
                moPickerTaxRegion.setSelectedPrimaryKey(moFieldTaxRegionDps.getKey());
                moPickerTaxRegion.setFormVisible(true); 

                int[] key;
                if (moPickerTaxRegion.getFormResult() == SLibConstants.FORM_RESULT_OK) {
                    key = (int[]) moPickerTaxRegion.getSelectedPrimaryKey();
                    SDataTaxRegion taxRegion = new SDataTaxRegion();
                    taxRegion.read(key, miClient.getSession().getStatement());

                    rowCfdiImport.setTaxRegion(taxRegion);
                    rowCfdiImport.prepareTableRow();
                    moConceptTablePane.renderTableRows();
                }
                setSiieTaxes(rowCfdiImport, selectedRow);
            }
            else { 
                miClient.showMsgBoxWarning("No hay ninguna fila seleccionada.");
            }
        }
    }
    
    private void actionOpsType() {
        if (jbOpsType.isEnabled()) {
            if (moConceptTablePane.getTable().getSelectedRow() > -1) {
                SRowCfdiImport rowCfdiImport = (SRowCfdiImport) moConceptTablePane.getSelectedTableRow();
                if (moPickerOpsType == null) {
                    moPickerOpsType = SFormOptionPicker.createOptionPicker(miClient, SDataConstants.TRNX_OPE_TYPE, moPickerOpsType);
                }
                moPickerOpsType.formReset();
                moPickerOpsType.setFilterKey(SDataConstantsSys.TRNX_TP_DPS_DOC);
                moPickerOpsType.formRefreshOptionPane();
                moPickerOpsType.setFormVisible(true);
                Object[] keyObject;
                if (moPickerOpsType.getFormResult() == SLibConstants.FORM_RESULT_OK) {
                    keyObject = (Object[]) moPickerOpsType.getSelectedPrimaryKey();
                    Long key = (Long) keyObject[0];
                    rowCfdiImport.setOperationTypePk(key.intValue());
                    rowCfdiImport.prepareTableRow();
                    moConceptTablePane.renderTableRows();
                } 
            }
            else { 
                miClient.showMsgBoxWarning("No hay ninguna fila seleccionada.");
            }
        }
    }
    
    private void actionCostCenter() {
        if (jbCostCenter.isEnabled()) {
            if (moConceptTablePane.getTable().getSelectedRow() > -1) {
                SRowCfdiImport rowCfdiImport = (SRowCfdiImport) moConceptTablePane.getSelectedTableRow();
                if (moPickerCostCenter == null) {        
                    moPickerCostCenter = SFormOptionPicker.createOptionPicker(miClient, SDataConstants.FIN_CC, moPickerCostCenter);
                }
                moPickerCostCenter.formReset();
                moPickerCostCenter.formRefreshOptionPane();
                try {
                    moPickerCostCenter.setSelectedPrimaryKey(SDataUtilities.obtainCostCenterItem(miClient, rowCfdiImport.getItem().getPkItemId()));
                }
                catch (Exception e){
                    SLibUtils.printException(this, e);
                }
                moPickerCostCenter.setFormVisible(true); 

                Object key;
                if (moPickerCostCenter.getFormResult() == SLibConstants.FORM_RESULT_OK) {
                    key = moPickerCostCenter.getSelectedPrimaryKey();
                    SDataCostCenter costCenter = (SDataCostCenter) SDataUtilities.readRegistry(miClient,
                            SDataConstants.FIN_CC, key, SLibConstants.EXEC_MODE_SILENT);
                    rowCfdiImport.setCostCenter(costCenter);
                    rowCfdiImport.prepareTableRow();
                    moConceptTablePane.renderTableRows();
                }
            }
            else { 
                miClient.showMsgBoxWarning("No hay ninguna fila seleccionada.");
            }
        }
    }
    
    private void actionSelectPurchaseOrder() {
        if (jbSelectPurchaseOrder.isEnabled()) {
            int selectedRow = moConceptTablePane.getTable().getSelectedRow();
            if ( selectedRow > -1 ) {
                SDialogCfdiPurchaseOrder cfdiPurchaseOrder = new SDialogCfdiPurchaseOrder(miClient);
                cfdiPurchaseOrder.setValue(SDataConstants.TRN_DPS, moDps);
                cfdiPurchaseOrder.setValue(1, 
                        moComprobante.getEltConceptos().getEltConceptos().get(selectedRow));
                cfdiPurchaseOrder.setFormVisible(true);  
                if (cfdiPurchaseOrder.getFormResult() == SLibConstants.FORM_RESULT_OK) {
                    SDataEntryDpsDpsLink entries = (SDataEntryDpsDpsLink) cfdiPurchaseOrder.getValue(SDataConstants.TRN_DPS_ETY);
                    SRowCfdiImport row = (SRowCfdiImport) moConceptTablePane.getSelectedTableRow();
                    row.setEntryDpsDpsLink(entries);
                    row.setConvFactor((Double)cfdiPurchaseOrder.getValue(2));
                    setPurchaseOrderPanelValues();
                }
            }
            else { 
                miClient.showMsgBoxWarning("No hay ninguna fila seleccionada.");
            }
        }
    }
    
    private SDataCostCenter getCostCenterByItem(SDataItem item){
        SDataCostCenter costCenter = null;
        
        try {
            String[] pkcc = { SDataUtilities.obtainCostCenterItem(miClient, item.getPkItemId()) };
            if (!pkcc[0].equals("")) {
                costCenter = (SDataCostCenter) SDataUtilities.readRegistry(miClient,
                    SDataConstants.FIN_CC, pkcc , SLibConstants.EXEC_MODE_SILENT);
            }
        }
        catch (Exception e) {
            SLibUtils.printException(this, e);
        }
        
        return costCenter;
    }
    
    private void formValidate() { 
        int selectRow = 0;
        SFormValidation validation = new SFormValidation();
        
        for (int i = 0; i < moConceptTablePane.getTableGuiRowCount(); i++) {
            selectRow = i;
            SRowCfdiImport row = (SRowCfdiImport) moConceptTablePane.getTableRow(i);
            String descripcion = row.getConcepto().getAttNoIdentificacion().getString() + " - " +
                row.getConcepto().getAttDescripcion().getString();
            if (mbPurchaseOrder) { 
                if (row.getEntryDpsDpsLink() == null) {
                    validation.setMessage("El concepto \"" + descripcion + "\" del renglón " + (i+1) + " no tiene asignada una partida.");
                }
            }
            else {
                if (row.getItem() == null) {
                    validation.setMessage("El concepto \"" + descripcion + "\" del renglón " + (i+1) + " no tiene un ítem asignado.");
                    break;
                }
                else if (row.getUnit() == null) {
                    validation.setMessage("El concepto \"" + descripcion + "\" del renglón " + (i+1) + " no tiene una unidad asignada.");
                }
                else if (row.getTaxRegion() == null) {
                    validation.setMessage("El concepto \"" + descripcion + "\" del renglón " + (i+1) + " no tiene region de impuestos asignado.");
                }
                else if (row.getOperationTypePk() == 0) {
                    validation.setMessage("El concepto \"" + descripcion + "\" del renglón " + (i+1) + " no tiene un tipo de operación asignado.");
                }
                else if (row.getCostCenter() == null) {
                    validation.setMessage("El concepto \"" + descripcion + "\" del renglón " + (i+1) + " no tiene centro de costo asignado.");
                }
                else if (row.getItem().getDbmsDataItemGeneric().getIsItemReferenceRequired() && row.getReferenceItem() == null) {
                    validation.setMessage("El concepto \"" + descripcion + "\" del renglón " + (i+1) + " no tiene ítem de referencia asignado.");
                }
                else if (row.getConvFactor() == 0.0) {
                    validation.setMessage("El concepto \"" + descripcion + "\"  del renglón " + (i+1) + " no tiene factor de conversión especificado.");
                }
                else {
                    if (row.getConcepto().getEltOpcConceptoImpuestos() != null) {
                        if (row.getConcepto().getEltOpcConceptoImpuestos().getEltOpcImpuestosTrasladados() != null) {
                            ArrayList<cfd.ver33.DElementConceptoImpuestoTraslado> trasladado = row.getConcepto().getEltOpcConceptoImpuestos().getEltOpcImpuestosTrasladados().getEltImpuestoTrasladados();
                            for (DElementConceptoImpuestoTraslado trasladado1 : trasladado) {
                                if (!row.getTaxChargedMatched().contains(trasladado1)) {
                                    String impuesto = trasladado1.getAttImpuesto().getString().equals(DCfdi33Catalogs.IMP_ISR) ? "ISR" :
                                        trasladado1.getAttImpuesto().getString().equals(DCfdi33Catalogs.IMP_IVA) ? "IVA" :
                                        trasladado1.getAttImpuesto().getString().equals(DCfdi33Catalogs.IMP_IEPS) ? "IEPS" : "";
                                    validation.setMessage("Al concepto \"" + descripcion + "\" del renglón " + (i+1) + " le falta empatar el impuesto:\n" 
                                            + "     Impuesto: " + impuesto + ".\n"
                                            + "     Tipo: trasladado. \n"
                                            + "     Factor: " +trasladado1.getAttTipoFactor().getString() + " de "
                                            + SLibUtils.DecimalFormatPercentage2D.format(trasladado1.getAttTasaOCuota().getDouble()) + ".");
                                    break;
                                }
                            }
                        }
                        if (!validation.getIsError()) {
                            if (row.getConcepto().getEltOpcConceptoImpuestos().getEltOpcImpuestosRetenciones() != null) {
                                ArrayList<cfd.ver33.DElementConceptoImpuestoRetencion> retencion = row.getConcepto().getEltOpcConceptoImpuestos().getEltOpcImpuestosRetenciones().getEltImpuestoRetenciones();
                                for (DElementConceptoImpuestoRetencion retencion1 : retencion) {
                                    if (!row.getTaxRetainedMatched().contains(retencion1)) { 
                                        String impuesto = retencion1.getAttImpuesto().getString().equals(DCfdi33Catalogs.IMP_ISR) ? "ISR" :
                                        retencion1.getAttImpuesto().getString().equals(DCfdi33Catalogs.IMP_IVA) ? "IVA" :
                                        retencion1.getAttImpuesto().getString().equals(DCfdi33Catalogs.IMP_IEPS) ? "IEPS" : "";
                                    validation.setMessage("Al concepto \"" + descripcion + "\" del renglón " + (i+1) + " le falta empatar el impuesto:\n" 
                                            + "     Impuesto: " + impuesto + ".\n"
                                            + "     Tipo: retenido. \n"
                                            + "     Factor: " +retencion1.getAttTipoFactor().getString() + " de "
                                            + SLibUtils.DecimalFormatPercentage2D.format(retencion1.getAttTasaOCuota().getDouble()) + ".");
                                    break;
                                    }
                                }
                            }
                        }
                        else {
                            break;
                        }
                    }
                }
            }
        }
        if (!validation.getIsError()) {
            if (!mbPurchaseOrder) {
                moDpsNew = createNewDps();
                getRegistry();
            }
        }
        else { 
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                moConceptTablePane.setTableRowSelection(selectRow);
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
    }

    private SDataDps createNewDps() {
        SDataDps dps = new SDataDps();

        dps.setPkYearId(miClient.getSessionXXX().getWorkingYear());
        dps.setPkDocId(0);
        dps.setDate(miClient.getSessionXXX().getWorkingDate());
        dps.setDateDoc(miClient.getSessionXXX().getWorkingDate());
        dps.setDateStartCredit(miClient.getSessionXXX().getWorkingDate());
        dps.setNumberSeries("");
        dps.setNumber("");
        dps.setApprovalYear(0);
        dps.setApprovalNumber(0);
        dps.setIsRegistryNew(true);
        dps.setIsLinked(false);
        dps.setIsClosed(false);
        dps.setIsClosedCommissions(false);
        dps.setIsAudited(false);
        dps.setIsAuthorized(false);
        dps.setIsSystem(false);
        dps.setIsDeleted(false);
        dps.setFkDpsStatusId(SDataConstantsSys.TRNS_ST_DPS_EMITED);
        dps.setFkDpsValidityStatusId(SDataConstantsSys.TRNS_ST_DPS_VAL_EFF);
        dps.setFkDpsAuthorizationStatusId(SDataConstantsSys.TRNS_ST_DPS_AUTHORN_NA);
        dps.setFkDpsAnnulationTypeId(SModSysConsts.TRNU_TP_DPS_ANN_NA);
        dps.setFkUserLinkedId(SDataConstantsSys.USRX_USER_NA);
        dps.setFkUserClosedId(SDataConstantsSys.USRX_USER_NA);
        dps.setFkUserClosedCommissionsId(SDataConstantsSys.USRX_USER_NA);
        dps.setFkUserShippedId(SDataConstantsSys.USRX_USER_NA);
        dps.setFkUserDpsDeliveryAckId(SDataConstantsSys.USRX_USER_NA);
        dps.setFkUserAuditedId(SDataConstantsSys.USRX_USER_NA);
        dps.setFkUserAuthorizedId(SDataConstantsSys.USRX_USER_NA);
        dps.setFkCompanyBranchId(miClient.getSessionXXX().getCurrentCompanyBranchId());

        dps.resetRecord();

        dps.setFkPaymentTypeId(SLibConstants.UNDEFINED);
        dps.setFkPaymentSystemTypeId(SDataConstantsSys.TRNU_TP_PAY_SYS_NA);
        dps.setDateDocDelivery_n(null);
        dps.setDateDocLapsing_n(null);
        dps.setDateShipment_n(null);
        dps.setDateDelivery_n(null);
        dps.setShipments(0);
        dps.setFkIncotermId(SModSysConsts.LOGS_INC_NA);
        dps.setFkSpotSourceId_n(0);
        dps.setFkSpotDestinyId_n(0);
        dps.setFkModeOfTransportationTypeId(SModSysConsts.LOGS_TP_MOT_NA);
        dps.setFkCarrierTypeId(SModSysConsts.LOGS_TP_CAR_NA);
        dps.setFkCarrierId_n(0);
        dps.setFkVehicleTypeId_n(0);
        dps.setFkVehicleId_n(0);
        dps.setDriver("");
        dps.setPlate("");
        dps.setTicket("");
        
        SDataDpsCfd dpsCfd = dps.getDbmsDataDpsCfd();

        if (dpsCfd == null) {
            dpsCfd = new SDataDpsCfd();
            dps.setDbmsDataDpsCfd(dpsCfd);
        }

        dpsCfd.setIsRegistryNew(true); // force entries to be treated as new

        return dps;
    }

    private void getRegistry() {
        if (moDpsNew.getIsRegistryNew()) {
            moDpsNew.setPkYearId(SLibTimeUtilities.digestYear(moComprobante.getAttFecha().getDatetime())[0]);
            moDpsNew.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
        }
        else {
            moDpsNew.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
        }

        moDpsNew.setDate(moComprobante.getAttFecha().getDatetime());
        moDpsNew.setDateDoc(moComprobante.getAttFecha().getDatetime());
        moDpsNew.setDateStartCredit(moComprobante.getAttFecha().getDatetime());
        moDpsNew.setDateShipment_n(null);
        moDpsNew.setDateDelivery_n(null);
        moDpsNew.setDateDocLapsing_n(null);
        moDpsNew.setDateDocDelivery_n(null);
        moDpsNew.setNumberSeries(moComprobante.getAttSerie() != null ? moComprobante.getAttSerie().getString() : "");
        moDpsNew.setNumber(moComprobante.getAttFolio() != null ? moComprobante.getAttFolio().getString() : "");
        moDpsNew.setNumberReference("");
        moDpsNew.setCommissionsReference("");
        moDpsNew.setApprovalYear(0);
        moDpsNew.setApprovalNumber(0);
        moDpsNew.setDaysOfCredit(moBizPartnerReceptor.getDbmsCategorySettingsSup().getDaysOfCredit());
        moDpsNew.setIsDiscountDocApplying(moComprobante.getAttDescuento().getDouble() != 0);
        moDpsNew.setIsDiscountDocPercentage(false);
        moDpsNew.setDiscountDocPercentage(0);
        
        /*
        moDpsNew.setSubtotalProvisional_r(...);
        moDpsNew.setDiscountDoc_r(...);
        moDpsNew.setSubtotal_r(...);
        moDpsNew.setTaxCharged_r(...);
        moDpsNew.setTaxRetained_r(...);
        moDpsNew.setTotal_r(...);
        moDpsNew.setCommissions_r(...);
        */
        
        moDpsNew.setExchangeRate(miClient.getSession().getSessionCustom().isLocalCurrency(
                new int[] { mnIdCur }) ? 1 : moComprobante.getAttTipoCambio().getDouble());
        moDpsNew.setExchangeRateSystem(miClient.getSession().getSessionCustom().isLocalCurrency(
                new int[] { mnIdCur }) ? 1 : 0);
        
        moDpsNew.setSubtotalProvisionalCy_r(moComprobante.getAttSubTotal().getDouble());
        moDpsNew.setDiscountDocCy_r(moComprobante.getAttDescuento() == null ? 0 : moComprobante.getAttDescuento().getDouble());
        moDpsNew.setSubtotalCy_r(moDpsNew.getSubtotalProvisionalCy_r() - moDpsNew.getDiscountDocCy_r());
        moDpsNew.setTaxChargedCy_r(moComprobante.getEltOpcImpuestos() == null ? 0 : moComprobante.getEltOpcImpuestos().getAttTotalImpuestosTraslados() == null ? 0 : moComprobante.getEltOpcImpuestos().getAttTotalImpuestosTraslados().getDouble()); 
        moDpsNew.setTaxRetainedCy_r(moComprobante.getEltOpcImpuestos() == null ? 0 : moComprobante.getEltOpcImpuestos().getAttTotalImpuestosRetenidos() == null ? 0 : moComprobante.getEltOpcImpuestos().getAttTotalImpuestosRetenidos().getDouble());
        moDpsNew.setTotalCy_r(moComprobante.getAttTotal().getDouble());
        
        moDpsNew.setCommissionsCy_r(0);

        moDpsNew.setDriver("");
        moDpsNew.setPlate("");
        moDpsNew.setTicket("");
        moDpsNew.setShipments(0);
        moDpsNew.setPayments(0);
        moDpsNew.setPaymentMethod("");
        moDpsNew.setPaymentAccount("");
        moDpsNew.setAutomaticAuthorizationRejection(0);
        
        moDpsNew.setIsPublic(false);
        moDpsNew.setIsLinked(false);
        moDpsNew.setIsClosed(false);
        moDpsNew.setIsClosedCommissions(false);
        moDpsNew.setIsShipped(false);
        moDpsNew.setIsDpsDeliveryAck(false);
        moDpsNew.setIsRebill(false);
        moDpsNew.setIsAudited(false);
        moDpsNew.setIsAuthorized(false);
        moDpsNew.setIsRecordAutomatic(true);
        moDpsNew.setIsCopy(false);
        moDpsNew.setIsCopied(false);
        moDpsNew.setIsSystem(false);
        moDpsNew.setIsDeleted(false);  // when document was deleted, user can reactivate it on save

        moDpsNew.setFkDpsCategoryId(SDataConstantsSys.TRNU_TP_DPS_PUR_INV[0]);
        moDpsNew.setFkDpsClassId(SDataConstantsSys.TRNU_TP_DPS_PUR_INV[1]);
        moDpsNew.setFkDpsTypeId(SDataConstantsSys.TRNU_TP_DPS_PUR_INV[2]);
        moDpsNew.setFkPaymentTypeId(moComprobante.getAttMetodoPago().getString().equals(
                SDataConstantsSys.TRNS_CFD_CAT_PAY_MET_PUE) ? SDataConstantsSys.TRNS_TP_PAY_CASH : SDataConstantsSys.TRNS_TP_PAY_CREDIT);
        moDpsNew.setFkPaymentSystemTypeId(SDataConstantsSys.TRNU_TP_PAY_SYS_NA);   // XXX remove ASAP (Sergio Flores, 2017-08-09)!
        moDpsNew.setFkDpsStatusId(SDataConstantsSys.TRNS_ST_DPS_EMITED);   // all saved documents have "emited" status
        moDpsNew.setFkDpsValidityStatusId(SDataConstantsSys.TRNS_ST_DPS_VAL_EFF);
        moDpsNew.setFkDpsAuthorizationStatusId(SDataConstantsSys.TRNS_ST_DPS_AUTHORN_NA);
        moDpsNew.setFkDpsAnnulationTypeId(SDataConstantsSys.TRNU_TP_DPS_ANN_NA);
        moDpsNew.setFkDpsNatureId(SDataConstantsSys.TRNU_DPS_NAT_DEF);   // all saved documents have "default" nature
        
        moDpsNew.setFkCompanyBranchId(miClient.getSessionXXX().getCurrentCompanyBranchId());
        moDpsNew.setFkFunctionalAreaId(SModSysConsts.CFGU_FUNC_NON);
        moDpsNew.setFkBizPartnerId_r(moBizPartnerReceptor.getPkBizPartnerId());
        moDpsNew.setFkBizPartnerBranchId(moBizPartnerReceptor.getDbmsBizPartnerBranches().get(0).getPkBizPartnerBranchId());
        moDpsNew.setFkBizPartnerBranchAddressId(moBizPartnerReceptor.getDbmsBizPartnerBranches().get(0).getDbmsBizPartnerBranchAddresses().get(0).getPkAddressId());
        
        moDpsNew.setFkBizPartnerAltId_r(moBizPartnerReceptor.getPkBizPartnerId()); 
        moDpsNew.setFkBizPartnerBranchAltId(moBizPartnerReceptor.getDbmsBizPartnerBranches().get(0).getPkBizPartnerBranchId());
        moDpsNew.setFkBizPartnerBranchAddressAltId(moBizPartnerReceptor.getDbmsBizPartnerBranches().get(0).getDbmsBizPartnerBranchAddresses().get(0).getPkAddressId());
        
        moDpsNew.setFkBizPartnerAddresseeId_n(0);
        moDpsNew.setFkAddresseeBizPartnerId_nr(0);
        moDpsNew.setFkAddresseeBizPartnerBranchId_n(0);
        moDpsNew.setFkAddresseeBizPartnerBranchAddressId_n(0);
        moDpsNew.setFkContactBizPartnerBranchId_n(0);
        moDpsNew.setFkContactContactId_n(0);
        
        moDpsNew.setFkTaxIdentityEmisorTypeId(moBizPartnerEmisor.getFkTaxIdentityId());
        moDpsNew.setFkTaxIdentityReceptorTypeId(moBizPartnerReceptor.getFkTaxIdentityId());
        moDpsNew.setFkLanguajeId(moBizPartnerEmisor.getDbmsCategorySettingsSup().getFkLanguageId_n() == SLibConsts.UNDEFINED ? 
                miClient.getSessionXXX().getParamsErp().getFkLanguageId() : moBizPartnerEmisor.getDbmsCategorySettingsSup().getFkLanguageId_n());
        moDpsNew.setFkCurrencyId(mnIdCur);
        
        moDpsNew.setFkSalesAgentId_n(0);
        moDpsNew.setFkSalesAgentBizPartnerId_n(0);
        moDpsNew.setFkSalesSupervisorId_n(0);
        moDpsNew.setFkSalesSupervisorBizPartnerId_n(0);
        
        moDpsNew.setFkIncotermId(SModSysConsts.LOGS_INC_NA); //NA
        moDpsNew.setFkSpotSourceId_n(0);
        moDpsNew.setFkSpotDestinyId_n(0);
        moDpsNew.setFkModeOfTransportationTypeId(0);
        moDpsNew.setFkCarrierTypeId(SModSysConsts.LOGS_TP_CAR_NA); //NA
        moDpsNew.setFkCarrierId_n(0);
        moDpsNew.setFkVehicleTypeId_n(0);
        moDpsNew.setFkVehicleId_n(0);
        moDpsNew.setFkSourceYearId_n(0);
        moDpsNew.setFkSourceDocId_n(0);
        moDpsNew.setFkMfgYearId_n(0);
        moDpsNew.setFkMfgOrderId_n(0);
        
        moDpsNew.setFkUserLinkedId(SDataConstantsSys.USRX_USER_NA);
        moDpsNew.setFkUserClosedId(SDataConstantsSys.USRX_USER_NA);
        moDpsNew.setFkUserClosedCommissionsId(SDataConstantsSys.USRX_USER_NA);
        moDpsNew.setFkUserShippedId(SDataConstantsSys.USRX_USER_NA);
        moDpsNew.setFkUserDpsDeliveryAckId(SDataConstantsSys.USRX_USER_NA);
        moDpsNew.setFkUserAuditedId(SDataConstantsSys.USRX_USER_NA);
        moDpsNew.setFkUserAuthorizedId(SDataConstantsSys.USRX_USER_NA);
        
        moDpsNew.getDbmsDpsEntries().clear();
        for (int i = 0; i < moConceptTablePane.getTableGuiRowCount(); i++) {
            SRowCfdiImport row = (SRowCfdiImport) moConceptTablePane.getTableRow(i);
            moDpsNew.getDbmsDpsEntries().add(row.getDpsEntry());
            saveItemMatchBizPartner(row);
        }
        
        setFormVisible(false);
    }
    
    private void saveItemMatchBizPartner(SRowCfdiImport rowCfdiImport) {
        try {
            SDataMatchingItemBizPartnerConcept match = new SDataMatchingItemBizPartnerConcept();
            int key = SItemUtilities.getMatchItemBizPartnerId(miClient, 
                rowCfdiImport.getConcepto().getAttNoIdentificacion().getString(), 
                moBizPartnerEmisor.getPkBizPartnerId(), 
                rowCfdiImport.getItem().getPkItemId(), 
                rowCfdiImport.getUnit().getPkUnitId(), 
                rowCfdiImport.getTaxRegion().getPkTaxRegionId());
            if (key == 0) {
                match.setConceptKey(rowCfdiImport.getConcepto().getAttNoIdentificacion().getString());
                match.setFactorConversion(rowCfdiImport.getConvFactor());
                match.setUses(1);
                match.setUseFirst(miClient.getSession().getSystemDate());
                match.setUseLast(miClient.getSession().getSystemDate());
                match.setIsDeleted(false);
                match.setFkBizPartnerId(moBizPartnerEmisor.getPkBizPartnerId());
                match.setFkItemId(rowCfdiImport.getItem().getPkItemId());
                match.setFkUnitId(rowCfdiImport.getUnit().getPkUnitId());
                match.setFkTaxRegionId(rowCfdiImport.getTaxRegion().getPkTaxRegionId());
                match.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
            }
            else {
                match.read(key, miClient.getSession().getStatement());
                match.setUses(match.getUses() + 1);
                match.setUseLast(miClient.getSession().getSystemDate());
                match.setFactorConversion(rowCfdiImport.getConvFactor());
                match.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
            }
            match.save(miClient.getSession().getStatement().getConnection());
        }
        catch (Exception e){
            SLibUtils.printException(this, e);
        }
    }
    
    /**
     * Devuelve el dps renderizado.
     * @return 
     */
    public SDataDps getDps() { return moDpsNew; }
    
    @Override
    public void valueChanged(ListSelectionEvent e) { 
        if (!e.getValueIsAdjusting()) {
            if (moConceptTablePane.getTable().getSelectedRow() > -1) {
                setCfdiTaxesTableValues(moConceptTablePane.getTable().getSelectedRow());
                setSiieTaxesTableValues((SRowCfdiImport) moConceptTablePane.getSelectedTableRow());
                setPurchaseOrderPanelValues();
                if (!mbPurchaseOrder) {
                    setEnabledButtons((SRowCfdiImport) moConceptTablePane.getSelectedTableRow());
                }
            }
            else {
                setEnabledButtons(null);
            }
        }
    }
    
    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbTaxesRegion) {
                actionTaxesRegion();
            }
            else if (button == jbSelectItem) {
                actionSelectItem(ITEM_MAIN);
            }
            else if (button == jbChangeUnit) {
                actionChangeUnit();
            }
            else if (button == jbChangeTaxesRegion) {
                actionChangeTaxesRegion();
            }
            else if (button == jbOpsType) {
                actionOpsType();
            }
            else if (button == jbCostCenter) {
                actionCostCenter();
            }
            else if (button == jbSelectReferenceItem) {
                actionSelectItem(ITEM_REF);
            }
            else if (button == jbSelectPurchaseOrder) {
                actionSelectPurchaseOrder();
            }
        }
    }
}
