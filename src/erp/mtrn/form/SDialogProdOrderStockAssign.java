/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mtrn.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibTimeUtilities;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STableConstants;
import erp.lib.table.STablePane;
import erp.lib.table.STableRow;
import erp.mbps.data.SDataBizPartnerBranch;
import erp.mcfg.data.SDataCompanyBranchEntity;
import erp.mitm.data.SDataItem;
import erp.mitm.data.SDataUnit;
import erp.mmfg.data.SDataProductionOrder;
import erp.mtrn.data.SDataDiog;
import erp.mtrn.data.SDataDiogEntry;
import erp.mtrn.data.STrnProdOrderStockAssignRow;
import erp.mtrn.data.STrnStock;
import erp.mtrn.data.STrnStockMove;
import erp.mtrn.data.STrnStockSegregationUtils;
import erp.mtrn.data.STrnUtilities;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.util.HashSet;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author Sergio Flores, Edwin Carmona
 */
public class SDialogProdOrderStockAssign extends javax.swing.JDialog implements ActionListener, ItemListener, ListSelectionListener {

    private static final int COL_QTY = 4;
    private static final int PERC_POSITION = 3;

    private int mnFormResult;
    private int mnFormStatus;
    private int mnFormMode;
    private boolean mbFirstTime;
    private erp.client.SClientInterface miClient;
    private erp.lib.table.STablePane moPaneProdOrderEntries;
    private erp.mtrn.form.SDialogPickerStockLots moPickerStockLots;
    private java.util.Vector<erp.mtrn.data.STrnProdOrderStockAssignRow> mvStockAssignRows;

    private int mnYear;
    private int[] manWarehouseSourceKey;
    private int[] manWarehouseDestinyKey;
    private erp.mbps.data.SDataBizPartnerBranch moCompanyBranchSource;
    private erp.mbps.data.SDataBizPartnerBranch moCompanyBranchDestiny;
    private erp.mcfg.data.SDataCompanyBranchEntity moWarehouseSource;
    private erp.mcfg.data.SDataCompanyBranchEntity moWarehouseDestiny;
    private erp.mtrn.data.SDataDiog moParamDiog;
    private erp.mmfg.data.SDataProductionOrder moParamProdOrder;

    /** Creates new form SDialogProdOrderStockAssign
     * @param client GUI client interface.
     * @param mode Dialog mode (item assignations or returns). Constants defined in SLibConstants (i.e. MODE_STK_ASD, MODE_STK_RET).
     */
    public SDialogProdOrderStockAssign(erp.client.SClientInterface client, int mode) {
        super(client.getFrame(), true);

        miClient = client;
        mnFormMode = mode;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpProductionOrder = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jlProdOrder = new javax.swing.JLabel();
        jtfProdOrderNumber = new javax.swing.JTextField();
        jtfProdOrderType = new javax.swing.JTextField();
        jlProdOrderDate = new javax.swing.JLabel();
        jtfProdOrderDate = new javax.swing.JTextField();
        jlProdOrderDateDelivery = new javax.swing.JLabel();
        jtfProdOrderDateDelivery = new javax.swing.JTextField();
        jPanel10 = new javax.swing.JPanel();
        jlItem = new javax.swing.JLabel();
        jtfItemCode = new javax.swing.JTextField();
        jtfItem = new javax.swing.JTextField();
        jlQuantity = new javax.swing.JLabel();
        jtfQuantity = new javax.swing.JTextField();
        jtfQuantityUnit = new javax.swing.JTextField();
        jPanel11 = new javax.swing.JPanel();
        jlCurrentCharge = new javax.swing.JLabel();
        jtfCurrentCharge = new javax.swing.JTextField();
        jPanel12 = new javax.swing.JPanel();
        jlCharges = new javax.swing.JLabel();
        jcbCharges = new javax.swing.JComboBox();
        jbShowCharge = new javax.swing.JButton();
        jpProductionOrderEntries = new javax.swing.JPanel();
        jpWarehouses = new javax.swing.JPanel();
        jpWarehouseControls = new javax.swing.JPanel();
        jpWarehouseSource = new javax.swing.JPanel();
        jlWarehouseSource = new javax.swing.JLabel();
        jtfCompanyBranchSource = new javax.swing.JTextField();
        jtfCompanyBranchSourceCode = new javax.swing.JTextField();
        jtfWarehouseSource = new javax.swing.JTextField();
        jtfWarehouseSourceCode = new javax.swing.JTextField();
        jpDpsEntriesControls1 = new javax.swing.JPanel();
        jbAssignAll = new javax.swing.JButton();
        jbCleanAll = new javax.swing.JButton();
        jpWarehouseDestiny = new javax.swing.JPanel();
        jlWarehouseDestiny = new javax.swing.JLabel();
        jtfCompanyBranchDestiny = new javax.swing.JTextField();
        jtfCompanyBranchDestinyCode = new javax.swing.JTextField();
        jtfWarehouseDestiny = new javax.swing.JTextField();
        jtfWarehouseDestinyCode = new javax.swing.JTextField();
        jpDiogEntriesInfo = new javax.swing.JPanel();
        jpDiogEntriesInfo1 = new javax.swing.JPanel();
        jpDiogEntriesInfo11 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jlQuantityPending1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jlQuantityRequired = new javax.swing.JLabel();
        jtfQuantityRequired = new javax.swing.JTextField();
        jtfQuantityRequiredUnit = new javax.swing.JTextField();
        jtfQuantityRequiredPerc = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jlQuantityAssigned = new javax.swing.JLabel();
        jtfQuantityAssigned = new javax.swing.JTextField();
        jtfQuantityAssignedUnit = new javax.swing.JTextField();
        jtfQuantityAssignedPerc = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jlQuantityPending = new javax.swing.JLabel();
        jtfQuantityPending = new javax.swing.JTextField();
        jtfQuantityPendingUnit = new javax.swing.JTextField();
        jtfQuantityPendingPerc = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        jpDiogEntriesInfo2 = new javax.swing.JPanel();
        jpDiogEntriesInfo21 = new javax.swing.JPanel();
        jlStock = new javax.swing.JLabel();
        jtfStock = new javax.swing.JTextField();
        jtfStockUnit = new javax.swing.JTextField();
        jbViewLots = new javax.swing.JButton();
        jpDiogEntriesInfo24 = new javax.swing.JPanel();
        jlSegregated = new javax.swing.JLabel();
        jtfSegregated = new javax.swing.JTextField();
        jtfSegregatedUnit = new javax.swing.JTextField();
        jpDiogEntriesInfo22 = new javax.swing.JPanel();
        jlCurrentlyUsed = new javax.swing.JLabel();
        jtfCurrentlyUsed = new javax.swing.JTextField();
        jtfCurrentlyUsedUnit = new javax.swing.JTextField();
        jpDiogEntriesInfo23 = new javax.swing.JPanel();
        jlAvailable = new javax.swing.JLabel();
        jtfAvailable = new javax.swing.JTextField();
        jtfAvailableUnit = new javax.swing.JTextField();
        jlYear = new javax.swing.JLabel();
        jtfYear = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel15 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel16 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jtfSurplusStock = new javax.swing.JTextField();
        jtfSurplusUnit = new javax.swing.JTextField();
        jpControls = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Entrega de materiales");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpProductionOrder.setBorder(javax.swing.BorderFactory.createTitledBorder("Orden de producci√≥n:"));
        jpProductionOrder.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlProdOrder.setText("Ord. prod. origen:");
        jlProdOrder.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlProdOrder);

        jtfProdOrderNumber.setEditable(false);
        jtfProdOrderNumber.setText("TEXT");
        jtfProdOrderNumber.setFocusable(false);
        jtfProdOrderNumber.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jtfProdOrderNumber);

        jtfProdOrderType.setEditable(false);
        jtfProdOrderType.setText("TEXT");
        jtfProdOrderType.setFocusable(false);
        jtfProdOrderType.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel3.add(jtfProdOrderType);

        jlProdOrderDate.setText("Fecha orden:");
        jlProdOrderDate.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel3.add(jlProdOrderDate);

        jtfProdOrderDate.setEditable(false);
        jtfProdOrderDate.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtfProdOrderDate.setText("00/00/0000");
        jtfProdOrderDate.setFocusable(false);
        jtfProdOrderDate.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel3.add(jtfProdOrderDate);

        jlProdOrderDateDelivery.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlProdOrderDateDelivery.setText("Fecha entrega:");
        jlProdOrderDateDelivery.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlProdOrderDateDelivery);

        jtfProdOrderDateDelivery.setEditable(false);
        jtfProdOrderDateDelivery.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtfProdOrderDateDelivery.setText("00/00/0000");
        jtfProdOrderDateDelivery.setFocusable(false);
        jtfProdOrderDateDelivery.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel3.add(jtfProdOrderDateDelivery);

        jpProductionOrder.add(jPanel3);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItem.setText("Producto origen:");
        jlItem.setFocusable(false);
        jlItem.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jlItem);

        jtfItemCode.setEditable(false);
        jtfItemCode.setText("TEXT");
        jtfItemCode.setFocusable(false);
        jtfItemCode.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jtfItemCode);

        jtfItem.setEditable(false);
        jtfItem.setText("TEXT");
        jtfItem.setFocusable(false);
        jtfItem.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel10.add(jtfItem);

        jlQuantity.setText("Cant. origen:");
        jlQuantity.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel10.add(jlQuantity);

        jtfQuantity.setEditable(false);
        jtfQuantity.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfQuantity.setText("0.000");
        jtfQuantity.setFocusable(false);
        jtfQuantity.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jtfQuantity);

        jtfQuantityUnit.setEditable(false);
        jtfQuantityUnit.setText("UNIT");
        jtfQuantityUnit.setFocusable(false);
        jtfQuantityUnit.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel10.add(jtfQuantityUnit);

        jpProductionOrder.add(jPanel10);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCurrentCharge.setText("Carga actual:");
        jlCurrentCharge.setFocusable(false);
        jlCurrentCharge.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlCurrentCharge);

        jtfCurrentCharge.setEditable(false);
        jtfCurrentCharge.setText("TEXT");
        jtfCurrentCharge.setFocusable(false);
        jtfCurrentCharge.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jtfCurrentCharge);

        jpProductionOrder.add(jPanel11);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCharges.setText("Cargas:");
        jlCharges.setFocusable(false);
        jlCharges.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jlCharges);

        jcbCharges.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbCharges.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jcbCharges);

        jbShowCharge.setText("Mostrar");
        jbShowCharge.setToolTipText("Mostrar carga");
        jbShowCharge.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel12.add(jbShowCharge);

        jpProductionOrder.add(jPanel12);

        getContentPane().add(jpProductionOrder, java.awt.BorderLayout.PAGE_START);

        jpProductionOrderEntries.setBorder(javax.swing.BorderFactory.createTitledBorder("Partidas pendientes de la orden de producci√≥n:"));
        jpProductionOrderEntries.setLayout(new java.awt.BorderLayout(0, 5));

        jpWarehouses.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jpWarehouseControls.setLayout(new java.awt.BorderLayout());

        jpWarehouseSource.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWarehouseSource.setText("Almac√©n origen:");
        jlWarehouseSource.setPreferredSize(new java.awt.Dimension(100, 23));
        jpWarehouseSource.add(jlWarehouseSource);

        jtfCompanyBranchSource.setEditable(false);
        jtfCompanyBranchSource.setBackground(java.awt.Color.lightGray);
        jtfCompanyBranchSource.setText("TEXT");
        jtfCompanyBranchSource.setFocusable(false);
        jtfCompanyBranchSource.setPreferredSize(new java.awt.Dimension(100, 23));
        jpWarehouseSource.add(jtfCompanyBranchSource);

        jtfCompanyBranchSourceCode.setBackground(java.awt.Color.lightGray);
        jtfCompanyBranchSourceCode.setEditable(false);
        jtfCompanyBranchSourceCode.setText("CODE");
        jtfCompanyBranchSourceCode.setFocusable(false);
        jtfCompanyBranchSourceCode.setPreferredSize(new java.awt.Dimension(55, 23));
        jpWarehouseSource.add(jtfCompanyBranchSourceCode);

        jtfWarehouseSource.setEditable(false);
        jtfWarehouseSource.setBackground(java.awt.Color.lightGray);
        jtfWarehouseSource.setText("TEXT");
        jtfWarehouseSource.setFocusable(false);
        jtfWarehouseSource.setPreferredSize(new java.awt.Dimension(155, 23));
        jpWarehouseSource.add(jtfWarehouseSource);

        jtfWarehouseSourceCode.setBackground(java.awt.Color.lightGray);
        jtfWarehouseSourceCode.setEditable(false);
        jtfWarehouseSourceCode.setText("CODE");
        jtfWarehouseSourceCode.setFocusable(false);
        jtfWarehouseSourceCode.setPreferredSize(new java.awt.Dimension(55, 23));
        jpWarehouseSource.add(jtfWarehouseSourceCode);

        jpWarehouseControls.add(jpWarehouseSource, java.awt.BorderLayout.CENTER);

        jpDpsEntriesControls1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));

        jbAssignAll.setText("Entregar todo");
        jbAssignAll.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbAssignAll.setPreferredSize(new java.awt.Dimension(100, 23));
        jpDpsEntriesControls1.add(jbAssignAll);

        jbCleanAll.setText("Limpiar todo");
        jbCleanAll.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbCleanAll.setPreferredSize(new java.awt.Dimension(100, 23));
        jpDpsEntriesControls1.add(jbCleanAll);

        jpWarehouseControls.add(jpDpsEntriesControls1, java.awt.BorderLayout.EAST);

        jpWarehouses.add(jpWarehouseControls);

        jpWarehouseDestiny.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWarehouseDestiny.setText("Almac√©n destino:");
        jlWarehouseDestiny.setPreferredSize(new java.awt.Dimension(100, 23));
        jpWarehouseDestiny.add(jlWarehouseDestiny);

        jtfCompanyBranchDestiny.setBackground(java.awt.Color.lightGray);
        jtfCompanyBranchDestiny.setEditable(false);
        jtfCompanyBranchDestiny.setText("TEXT");
        jtfCompanyBranchDestiny.setFocusable(false);
        jtfCompanyBranchDestiny.setPreferredSize(new java.awt.Dimension(100, 23));
        jpWarehouseDestiny.add(jtfCompanyBranchDestiny);

        jtfCompanyBranchDestinyCode.setBackground(java.awt.Color.lightGray);
        jtfCompanyBranchDestinyCode.setEditable(false);
        jtfCompanyBranchDestinyCode.setText("CODE");
        jtfCompanyBranchDestinyCode.setFocusable(false);
        jtfCompanyBranchDestinyCode.setPreferredSize(new java.awt.Dimension(55, 23));
        jpWarehouseDestiny.add(jtfCompanyBranchDestinyCode);

        jtfWarehouseDestiny.setBackground(java.awt.Color.lightGray);
        jtfWarehouseDestiny.setEditable(false);
        jtfWarehouseDestiny.setText("TEXT");
        jtfWarehouseDestiny.setFocusable(false);
        jtfWarehouseDestiny.setPreferredSize(new java.awt.Dimension(155, 23));
        jpWarehouseDestiny.add(jtfWarehouseDestiny);

        jtfWarehouseDestinyCode.setBackground(java.awt.Color.lightGray);
        jtfWarehouseDestinyCode.setEditable(false);
        jtfWarehouseDestinyCode.setText("CODE");
        jtfWarehouseDestinyCode.setFocusable(false);
        jtfWarehouseDestinyCode.setPreferredSize(new java.awt.Dimension(55, 23));
        jpWarehouseDestiny.add(jtfWarehouseDestinyCode);

        jpWarehouses.add(jpWarehouseDestiny);

        jpProductionOrderEntries.add(jpWarehouses, java.awt.BorderLayout.NORTH);

        jpDiogEntriesInfo.setLayout(new java.awt.BorderLayout());

        jpDiogEntriesInfo1.setLayout(new java.awt.GridLayout(1, 2));

        jpDiogEntriesInfo11.setBorder(javax.swing.BorderFactory.createTitledBorder("Estatus partida actual:"));
        jpDiogEntriesInfo11.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlQuantityPending1.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlQuantityPending1);

        jpDiogEntriesInfo11.add(jPanel7);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlQuantityRequired.setText("+ Cant. requerida:");
        jlQuantityRequired.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlQuantityRequired);

        jtfQuantityRequired.setEditable(false);
        jtfQuantityRequired.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfQuantityRequired.setText("0.00000000");
        jtfQuantityRequired.setFocusable(false);
        jtfQuantityRequired.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel4.add(jtfQuantityRequired);

        jtfQuantityRequiredUnit.setEditable(false);
        jtfQuantityRequiredUnit.setText("UNIT");
        jtfQuantityRequiredUnit.setFocusable(false);
        jtfQuantityRequiredUnit.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel4.add(jtfQuantityRequiredUnit);

        jtfQuantityRequiredPerc.setEditable(false);
        jtfQuantityRequiredPerc.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfQuantityRequiredPerc.setText("0.00%");
        jtfQuantityRequiredPerc.setFocusable(false);
        jtfQuantityRequiredPerc.setPreferredSize(new java.awt.Dimension(55, 23));
        jPanel4.add(jtfQuantityRequiredPerc);

        jpDiogEntriesInfo11.add(jPanel4);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlQuantityAssigned.setText("‚Äì Cant. asignada:");
        jlQuantityAssigned.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlQuantityAssigned);

        jtfQuantityAssigned.setEditable(false);
        jtfQuantityAssigned.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfQuantityAssigned.setText("0.00000000");
        jtfQuantityAssigned.setFocusable(false);
        jtfQuantityAssigned.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel5.add(jtfQuantityAssigned);

        jtfQuantityAssignedUnit.setEditable(false);
        jtfQuantityAssignedUnit.setText("UNIT");
        jtfQuantityAssignedUnit.setFocusable(false);
        jtfQuantityAssignedUnit.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel5.add(jtfQuantityAssignedUnit);

        jtfQuantityAssignedPerc.setEditable(false);
        jtfQuantityAssignedPerc.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfQuantityAssignedPerc.setText("0.00%");
        jtfQuantityAssignedPerc.setFocusable(false);
        jtfQuantityAssignedPerc.setPreferredSize(new java.awt.Dimension(55, 23));
        jPanel5.add(jtfQuantityAssignedPerc);

        jpDiogEntriesInfo11.add(jPanel5);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlQuantityPending.setText("= Cant. pendiente:");
        jlQuantityPending.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlQuantityPending);

        jtfQuantityPending.setBackground(java.awt.Color.pink);
        jtfQuantityPending.setEditable(false);
        jtfQuantityPending.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfQuantityPending.setText("0.00000000");
        jtfQuantityPending.setFocusable(false);
        jtfQuantityPending.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel6.add(jtfQuantityPending);

        jtfQuantityPendingUnit.setEditable(false);
        jtfQuantityPendingUnit.setBackground(java.awt.Color.pink);
        jtfQuantityPendingUnit.setText("UNIT");
        jtfQuantityPendingUnit.setFocusable(false);
        jtfQuantityPendingUnit.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel6.add(jtfQuantityPendingUnit);

        jtfQuantityPendingPerc.setEditable(false);
        jtfQuantityPendingPerc.setBackground(java.awt.Color.pink);
        jtfQuantityPendingPerc.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfQuantityPendingPerc.setText("0.00%");
        jtfQuantityPendingPerc.setFocusable(false);
        jtfQuantityPendingPerc.setPreferredSize(new java.awt.Dimension(55, 23));
        jPanel6.add(jtfQuantityPendingPerc);

        jpDiogEntriesInfo11.add(jPanel6);

        jpDiogEntriesInfo1.add(jpDiogEntriesInfo11);

        jpDiogEntriesInfo.add(jpDiogEntriesInfo1, java.awt.BorderLayout.WEST);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Unidades disponibles:"));
        jPanel8.setLayout(new java.awt.BorderLayout());

        jpDiogEntriesInfo2.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jpDiogEntriesInfo21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlStock.setText("+ Existencias:");
        jlStock.setPreferredSize(new java.awt.Dimension(100, 23));
        jpDiogEntriesInfo21.add(jlStock);

        jtfStock.setEditable(false);
        jtfStock.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfStock.setText("0.00000000");
        jtfStock.setFocusable(false);
        jtfStock.setPreferredSize(new java.awt.Dimension(125, 23));
        jpDiogEntriesInfo21.add(jtfStock);

        jtfStockUnit.setEditable(false);
        jtfStockUnit.setText("UNIT");
        jtfStockUnit.setFocusable(false);
        jtfStockUnit.setPreferredSize(new java.awt.Dimension(35, 23));
        jpDiogEntriesInfo21.add(jtfStockUnit);

        jbViewLots.setText("Ver lotes");
        jbViewLots.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbViewLots.setPreferredSize(new java.awt.Dimension(75, 23));
        jpDiogEntriesInfo21.add(jbViewLots);

        jpDiogEntriesInfo2.add(jpDiogEntriesInfo21);

        jpDiogEntriesInfo24.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlSegregated.setText("‚Äì Unids. segregds:");
        jlSegregated.setPreferredSize(new java.awt.Dimension(100, 23));
        jpDiogEntriesInfo24.add(jlSegregated);

        jtfSegregated.setEditable(false);
        jtfSegregated.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfSegregated.setText("0.00000000");
        jtfSegregated.setFocusable(false);
        jtfSegregated.setPreferredSize(new java.awt.Dimension(125, 23));
        jpDiogEntriesInfo24.add(jtfSegregated);

        jtfSegregatedUnit.setEditable(false);
        jtfSegregatedUnit.setText("UNIT");
        jtfSegregatedUnit.setFocusable(false);
        jtfSegregatedUnit.setPreferredSize(new java.awt.Dimension(35, 23));
        jpDiogEntriesInfo24.add(jtfSegregatedUnit);

        jpDiogEntriesInfo2.add(jpDiogEntriesInfo24);

        jpDiogEntriesInfo22.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlCurrentlyUsed.setText("‚Äì Unids. en docto.:");
        jlCurrentlyUsed.setPreferredSize(new java.awt.Dimension(100, 23));
        jpDiogEntriesInfo22.add(jlCurrentlyUsed);

        jtfCurrentlyUsed.setEditable(false);
        jtfCurrentlyUsed.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfCurrentlyUsed.setText("0.00000000");
        jtfCurrentlyUsed.setFocusable(false);
        jtfCurrentlyUsed.setPreferredSize(new java.awt.Dimension(125, 23));
        jpDiogEntriesInfo22.add(jtfCurrentlyUsed);

        jtfCurrentlyUsedUnit.setEditable(false);
        jtfCurrentlyUsedUnit.setText("UNIT");
        jtfCurrentlyUsedUnit.setFocusable(false);
        jtfCurrentlyUsedUnit.setPreferredSize(new java.awt.Dimension(35, 23));
        jpDiogEntriesInfo22.add(jtfCurrentlyUsedUnit);

        jpDiogEntriesInfo2.add(jpDiogEntriesInfo22);

        jpDiogEntriesInfo23.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlAvailable.setText("= Unids. disponibles:");
        jlAvailable.setPreferredSize(new java.awt.Dimension(100, 23));
        jpDiogEntriesInfo23.add(jlAvailable);

        jtfAvailable.setBackground(new java.awt.Color(153, 204, 255));
        jtfAvailable.setEditable(false);
        jtfAvailable.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfAvailable.setText("0.00000000");
        jtfAvailable.setFocusable(false);
        jtfAvailable.setPreferredSize(new java.awt.Dimension(125, 23));
        jpDiogEntriesInfo23.add(jtfAvailable);

        jtfAvailableUnit.setEditable(false);
        jtfAvailableUnit.setBackground(new java.awt.Color(153, 204, 255));
        jtfAvailableUnit.setText("UNIT");
        jtfAvailableUnit.setFocusable(false);
        jtfAvailableUnit.setPreferredSize(new java.awt.Dimension(35, 23));
        jpDiogEntriesInfo23.add(jtfAvailableUnit);

        jlYear.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlYear.setText("A√±o:");
        jlYear.setPreferredSize(new java.awt.Dimension(35, 23));
        jpDiogEntriesInfo23.add(jlYear);

        jtfYear.setBackground(new java.awt.Color(153, 204, 255));
        jtfYear.setEditable(false);
        jtfYear.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtfYear.setText("2000");
        jtfYear.setFocusable(false);
        jtfYear.setPreferredSize(new java.awt.Dimension(40, 23));
        jpDiogEntriesInfo23.add(jtfYear);

        jpDiogEntriesInfo2.add(jpDiogEntriesInfo23);

        jPanel8.add(jpDiogEntriesInfo2, java.awt.BorderLayout.EAST);

        jPanel9.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jLabel1.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel14.add(jLabel1);

        jPanel9.add(jPanel14);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jLabel2.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel15.add(jLabel2);

        jPanel9.add(jPanel15);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));
        jPanel9.add(jPanel16);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jLabel3.setText("Un. sobrantes:");
        jLabel3.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel13.add(jLabel3);

        jtfSurplusStock.setEditable(false);
        jtfSurplusStock.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfSurplusStock.setText("0.00000000");
        jtfSurplusStock.setFocusable(false);
        jtfSurplusStock.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel13.add(jtfSurplusStock);

        jtfSurplusUnit.setEditable(false);
        jtfSurplusUnit.setText("UNIT");
        jtfSurplusUnit.setFocusable(false);
        jtfSurplusUnit.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel13.add(jtfSurplusUnit);

        jPanel9.add(jPanel13);

        jPanel8.add(jPanel9, java.awt.BorderLayout.CENTER);

        jpDiogEntriesInfo.add(jPanel8, java.awt.BorderLayout.CENTER);

        jpProductionOrderEntries.add(jpDiogEntriesInfo, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jpProductionOrderEntries, java.awt.BorderLayout.CENTER);

        jpControls.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jPanel1.add(jbCancel);

        jpControls.add(jPanel1, java.awt.BorderLayout.EAST);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
        jpControls.add(jPanel2, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpControls, java.awt.BorderLayout.SOUTH);

        setSize(new java.awt.Dimension(976, 639));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        int col = 0;
        STableColumnForm[] columns = null;

        col = 0;
        columns = new STableColumnForm[6];
        columns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Clave", STableConstants.WIDTH_ITEM_KEY);
        columns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Concepto", STableConstants.WIDTH_ITEM_3X);
        columns[col] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Cant. requerida", STableConstants.WIDTH_QUANTITY_2X);
        columns[col++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererQuantity());
        columns[col] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Cant. pendiente", STableConstants.WIDTH_QUANTITY_2X);
        columns[col++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererQuantity());
        columns[col] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Cant. a entregar", STableConstants.WIDTH_QUANTITY_2X);
        columns[col].setEditable(true);
        columns[col++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererQuantity());
        columns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Unidad", STableConstants.WIDTH_UNIT_SYMBOL);

        switch (mnFormMode) {
            case SLibConstants.MODE_STK_ASD:
                columns[COL_QTY].setColumnTitle("Cant. a entregar");
                jbAssignAll.setText("Entregar todo");
                setTitle("Entrega de materiales");
                break;
            case SLibConstants.MODE_STK_RET:
                columns[COL_QTY].setColumnTitle("Cant. a devolver");
                jbAssignAll.setText("Devolver todo");
                setTitle("Devoluci√≥n de materiales");
                break;
            default:
                miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_UTIL_UNKNOWN_OPTION);
        }

        moPaneProdOrderEntries = new STablePane(miClient);
        jpProductionOrderEntries.add(moPaneProdOrderEntries, BorderLayout.CENTER);

        for (STableColumnForm column : columns) {
            moPaneProdOrderEntries.addTableColumn(column);
        }

        moPaneProdOrderEntries.createTable();
        moPaneProdOrderEntries.getTable().getSelectionModel().addListSelectionListener(this);
        moPaneProdOrderEntries.getTable().getTableHeader().setReorderingAllowed(false);
        moPaneProdOrderEntries.getTable().getTableHeader().setResizingAllowed(false);

        moPickerStockLots = new SDialogPickerStockLots(miClient, false);
        mvStockAssignRows = new Vector<STrnProdOrderStockAssignRow>();

        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);
        jbShowCharge.addActionListener(this);
        jbAssignAll.addActionListener(this);
        jbCleanAll.addActionListener(this);
        jbViewLots.addActionListener(this);
        jcbCharges.addItemListener(this);

        SFormUtilities.createActionMap(rootPane, this, "actionOk", "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "actionCancel", "cancel", KeyEvent.VK_ESCAPE, SLibConstants.UNDEFINED);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            moPaneProdOrderEntries.getTable().requestFocus();
        }
    }

    @SuppressWarnings("unchecked")
    private void renderProdOrder() {
        String sql = "";
        ResultSet resulSet = null;
        SDataItem item = null;
        SDataUnit unit = null;
        HashSet<Integer> charges = null;

        mvStockAssignRows.clear();
        moPaneProdOrderEntries.clearTableRows();
        jcbCharges.removeAllItems();

        try {
            if (moParamProdOrder == null) {
                jtfProdOrderNumber.setText("");
                jtfProdOrderType.setText("");
                jtfProdOrderDate.setText("");
                jtfProdOrderDateDelivery.setText("");
                jtfItemCode.setText("");
                jtfItem.setText("");
                jtfQuantity.setText("");
                jtfQuantityUnit.setText("");

                jcbCharges.setEnabled(false);
                jbShowCharge.setEnabled(false);
                jbAssignAll.setEnabled(false);
                jbCleanAll.setEnabled(false);
                jbViewLots.setEnabled(false);
            }
            else {
                item = (SDataItem) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_ITEM, new int[] { moParamProdOrder.getFkItemId_r() }, SLibConstants.EXEC_MODE_VERBOSE);
                unit = (SDataUnit) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_UNIT, new int[] { moParamProdOrder.getFkUnitId_r() }, SLibConstants.EXEC_MODE_VERBOSE);

                jtfProdOrderNumber.setText(moParamProdOrder.getDbmsNumber());
                jtfProdOrderType.setText(moParamProdOrder.getDbmsProductionOrderType());
                jtfProdOrderDate.setText(miClient.getSessionXXX().getFormatters().getDateFormat().format(moParamProdOrder.getDate()));
                jtfProdOrderDateDelivery.setText(miClient.getSessionXXX().getFormatters().getDateFormat().format(moParamProdOrder.getDateDelivery()));
                jtfItemCode.setText(item.getKey());
                jtfItem.setText(item.getItem());
                jtfQuantity.setText(miClient.getSessionXXX().getFormatters().getDecimalsQuantityFormat().format(moParamProdOrder.getQuantity()));
                jtfQuantityUnit.setText(unit.getSymbol());

                jtfProdOrderNumber.setCaretPosition(0);
                jtfProdOrderType.setCaretPosition(0);
                jtfProdOrderDate.setCaretPosition(0);
                jtfProdOrderDateDelivery.setCaretPosition(0);
                jtfItemCode.setCaretPosition(0);
                jtfItem.setCaretPosition(0);
                jtfQuantity.setCaretPosition(0);
                jtfQuantityUnit.setCaretPosition(0);

                sql = "SELECT oc.id_year, oc.id_ord, oc.id_chg, " +                                                     // 2
                        "oce.fid_item_r, oce.fid_unit_r, oce.gross_req_r AS f_qty_req, " +                              // 5
                        "ic.item_key AS f_chg_item_key, ic.item AS f_chg_item, uc.symbol AS f_chg_unit_sym, " +         // 8
                        "COALESCE(SUM(ge.qty * CASE WHEN (g.fid_ct_iog = " + SDataConstantsSys.TRNS_CT_IOG_IN + ") THEN 1 ELSE -1 END), 0) AS f_qty_asd " +     // 9
                        "FROM mfg_ord AS o " +
                        "INNER JOIN mfg_ord_chg AS oc ON o.id_year = oc.id_year AND o.id_ord = oc.id_ord AND oc.b_del = 0 AND " +
                        "o.id_year = " + moParamProdOrder.getPkYearId() + " AND o.id_ord = " + moParamProdOrder.getPkOrdId() + " " +
                        "INNER JOIN mfg_ord_chg_ety AS oce ON oc.id_year = oce.id_year AND oc.id_ord = oce.id_ord AND oc.id_chg = oce.id_chg AND oce.b_del = 0 AND oce.b_req = 1 " +
                        "INNER JOIN erp.itmu_item AS ic ON oce.fid_item_r = ic.id_item " +
                        "INNER JOIN erp.itmu_unit AS uc ON oce.fid_unit_r = uc.id_unit " +
                        "LEFT OUTER JOIN trn_diog AS g ON o.id_year = g.fid_mfg_year_n AND o.id_ord = g.fid_mfg_ord_n AND g.b_del = 0 AND (" +
                        "(g.fid_ct_iog = " + SDataConstantsSys.TRNS_TP_IOG_IN_MFG_RM_ASD[0] + " AND g.fid_cl_iog = " + SDataConstantsSys.TRNS_TP_IOG_IN_MFG_RM_ASD[1] + " AND g.fid_tp_iog = " + SDataConstantsSys.TRNS_TP_IOG_IN_MFG_RM_ASD[2] + ") OR " +
                        "(g.fid_ct_iog = " + SDataConstantsSys.TRNS_TP_IOG_OUT_MFG_RM_RET[0] + " AND g.fid_cl_iog = " + SDataConstantsSys.TRNS_TP_IOG_OUT_MFG_RM_RET[1] + " AND g.fid_tp_iog = " + SDataConstantsSys.TRNS_TP_IOG_OUT_MFG_RM_RET[2] + ") OR " +
                        "(g.fid_ct_iog = " + SDataConstantsSys.TRNS_TP_IOG_IN_MFG_WP_ASD[0] + " AND g.fid_cl_iog = " + SDataConstantsSys.TRNS_TP_IOG_IN_MFG_WP_ASD[1] + " AND g.fid_tp_iog = " + SDataConstantsSys.TRNS_TP_IOG_IN_MFG_WP_ASD[2] + ") OR " +
                        "(g.fid_ct_iog = " + SDataConstantsSys.TRNS_TP_IOG_OUT_MFG_WP_RET[0] + " AND g.fid_cl_iog = " + SDataConstantsSys.TRNS_TP_IOG_OUT_MFG_WP_RET[1] + " AND g.fid_tp_iog = " + SDataConstantsSys.TRNS_TP_IOG_OUT_MFG_WP_RET[2] + ")) AND " +
                        "NOT (g.id_year = " + moParamDiog.getPkYearId() + " AND g.id_doc = " + moParamDiog.getPkDocId() + ") " +
                        (moParamDiog.getDbmsDataCounterpartDiog() == null ? "" : "AND NOT (g.id_year = " + moParamDiog.getDbmsDataCounterpartDiog().getPkYearId() + " AND g.id_doc = " + moParamDiog.getDbmsDataCounterpartDiog().getPkDocId() + ") ") +
                        "LEFT OUTER JOIN trn_diog_ety AS ge ON oc.id_year = ge.fid_mfg_year_n AND oc.id_ord = ge.fid_mfg_ord_n AND oc.id_chg = ge.fid_mfg_chg_n AND " +
                        "g.id_year = ge.id_year AND g.id_doc = ge.id_doc AND ge.b_del = 0 AND " +
                        "oce.fid_item_r = ge.fid_item AND oce.fid_unit_r = ge.fid_unit " +
                        "GROUP BY oc.id_year, oc.id_ord, oc.id_chg, " +
                        "oce.fid_item_r, oce.fid_unit_r, oce.gross_req_r, ic.item_key, ic.item, uc.symbol " +
                        "ORDER BY oc.id_year, oc.id_ord, oc.id_chg, ic.item_key, ic.item, oce.fid_item_r, uc.symbol, oce.fid_unit_r; ";

                resulSet = miClient.getSession().getStatement().executeQuery(sql);
                while (resulSet.next()) {
                    charges = new HashSet<Integer>();

                    STrnProdOrderStockAssignRow stockAsignRow = new STrnProdOrderStockAssignRow(
                            new int[] { resulSet.getInt(1), resulSet.getInt(2), resulSet.getInt(3) });
                    stockAsignRow.setQuantityRequired(resulSet.getDouble(6));
                    stockAsignRow.setQuantityAssigned(resulSet.getDouble(10));
                    stockAsignRow.setQuantityToAssign(0);
                    stockAsignRow.setFkItemId(resulSet.getInt(4));
                    stockAsignRow.setFkUnitId(resulSet.getInt(5));
                    stockAsignRow.setAuxItem(resulSet.getString(8));
                    stockAsignRow.setAuxItemKey(resulSet.getString(7));
                    stockAsignRow.setAuxUnit("");
                    stockAsignRow.setAuxUnitSymbol(resulSet.getString(9));

                    for (SDataDiogEntry diogEntry : moParamDiog.getDbmsEntries()) {
                        if (!diogEntry.getIsDeleted()) {
                            if (SLibUtilities.compareKeys(stockAsignRow.getProdOrderChargeKey(), diogEntry.getProdOrderChargeKey_n()) &&
                                    stockAsignRow.getFkItemId() == diogEntry.getFkItemId() && stockAsignRow.getFkUnitId() == diogEntry.getFkUnitId()) {
                                stockAsignRow.setQuantityAssigned(stockAsignRow.getQuantityAssigned() + diogEntry.getQuantity());
                            }
                        }
                    }

                    stockAsignRow.prepareTableRow();
                    mvStockAssignRows.add(stockAsignRow);

                    charges.add(stockAsignRow.getPkChargeId());
                }

                for (Object o : charges.toArray()) {
                    jcbCharges.addItem(new SFormComponentItem(new int[] { moParamProdOrder.getPkYearId(), moParamProdOrder.getPkOrdId(), (Integer) o }, "" + (Integer) o + " de " + charges.size()));
                }

                if (jcbCharges.getItemCount() > 0) {
                    jcbCharges.setSelectedIndex(0);
                    actionShowCharge();
                }

                jcbCharges.setEnabled(true);
                jbShowCharge.setEnabled(false);
                jbAssignAll.setEnabled(true);
                jbCleanAll.setEnabled(true);
                jbViewLots.setEnabled(true);
            }
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }
    }

    private void computePaneEdition() {
        STrnProdOrderStockAssignRow stockAssignRow = null;

        for (STableRow row : moPaneProdOrderEntries.getTableModel().getTableRows()) {
            stockAssignRow = (STrnProdOrderStockAssignRow) row;
            stockAssignRow.setQuantityToAssign((Double) row.getValues().get(COL_QTY));
        }
    }

    private void computeClose() {
        if (moPaneProdOrderEntries.getTable().isEditing()) {
            moPaneProdOrderEntries.getTable().getCellEditor().cancelCellEditing();
        }
    }

    private void itemStateCharges() {
        jbShowCharge.setEnabled(true);
    }

    private void valueChangedPaneDpsEntries() {
        double stock = 0;
        double used = 0;
        double segregated = 0;
        double surplus = 0;
        
        STrnStockMove stockMoveParams = null;
        STrnStock objStock = null;
        STrnProdOrderStockAssignRow stockAssignRow = (STrnProdOrderStockAssignRow) moPaneProdOrderEntries.getSelectedTableRow();

        if (stockAssignRow == null) {
            jtfQuantityRequired.setText("");
            jtfQuantityRequiredUnit.setText("");
            jtfQuantityAssigned.setText("");
            jtfQuantityAssignedUnit.setText("");
            jtfQuantityPending.setText("");
            jtfQuantityPendingUnit.setText("");

            jtfQuantityRequiredPerc.setText("");
            jtfQuantityAssignedPerc.setText("");
            jtfQuantityPendingPerc.setText("");

            jtfStock.setText("");
            jtfStockUnit.setText("");
            jtfCurrentlyUsed.setText("");
            jtfCurrentlyUsedUnit.setText("");
            jtfAvailable.setText("");
            jtfAvailableUnit.setText("");

            jbViewLots.setEnabled(false);
        }
        else {
            // Document stock supply is processed in original units:

            jtfQuantityRequired.setText(miClient.getSessionXXX().getFormatters().getDecimalsValueUnitaryFormat().format(stockAssignRow.getQuantityRequired()));
            jtfQuantityRequiredUnit.setText(stockAssignRow.getAuxUnitSymbol());
            jtfQuantityAssigned.setText(miClient.getSessionXXX().getFormatters().getDecimalsValueUnitaryFormat().format(stockAssignRow.getQuantityAssigned()));
            jtfQuantityAssignedUnit.setText(stockAssignRow.getAuxUnitSymbol());
            jtfQuantityPending.setText(miClient.getSessionXXX().getFormatters().getDecimalsValueUnitaryFormat().format(stockAssignRow.getQuantityPending()));
            jtfQuantityPendingUnit.setText(stockAssignRow.getAuxUnitSymbol());
            
            String percentage1 = miClient.getSessionXXX().getFormatters().getDecimalsPercentageFormat().format(1);
            String percentage2 = miClient.getSessionXXX().getFormatters().getDecimalsPercentageFormat().format(stockAssignRow.getQuantityRequired() == 0 ? 0 : stockAssignRow.getQuantityAssigned() / stockAssignRow.getQuantityRequired());
            String percentage3 = miClient.getSessionXXX().getFormatters().getDecimalsPercentageFormat().format(stockAssignRow.getQuantityRequired() == 0 ? 0 : stockAssignRow.getQuantityPending() / stockAssignRow.getQuantityRequired());
            
            jtfQuantityRequiredPerc.setText(percentage1.substring(0, percentage1.length() - PERC_POSITION) + "%"); //When cropping text field size
            jtfQuantityAssignedPerc.setText(percentage2.substring(0, percentage2.length() - PERC_POSITION) + "%");
            jtfQuantityPendingPerc.setText(percentage3.substring(0, percentage3.length() - PERC_POSITION) + "%");

            // Available stock is processed in inventory units:

            try {
                stock = STrnUtilities.obtainStock(miClient, mnYear, stockAssignRow.getFkItemId(), stockAssignRow.getFkUnitId(), SLibConstants.UNDEFINED, manWarehouseSourceKey[0], manWarehouseSourceKey[1], SLibConstants.UNDEFINED, null, (int[]) moParamDiog.getPrimaryKey());
                
                stockMoveParams = new STrnStockMove();
                stockMoveParams.setPkCompanyBranchId(manWarehouseSourceKey[0]);
                stockMoveParams.setPkWarehouseId(manWarehouseSourceKey[1]);
                stockMoveParams.setPkYearId(mnYear); // year of document
                stockMoveParams.setPkItemId(stockAssignRow.getFkItemId());
                stockMoveParams.setPkUnitId(stockAssignRow.getFkUnitId());
                
                if (moParamProdOrder != null) {
                    stockMoveParams.setSegregationReference( new int[] { moParamProdOrder.getPkYearId(), moParamProdOrder.getPkOrdId() });
                    stockMoveParams.setSegregationType(SDataConstantsSys.TRNS_TP_STK_SEG_MFG_ORD);
                    stockMoveParams.setIsCurrentSegregationExcluded(true);
                }
                
                objStock = STrnStockSegregationUtils.getStockSegregated(miClient, stockMoveParams);
                segregated = objStock.getSegregatedStock();
                
                stockMoveParams = new STrnStockMove();
                stockMoveParams.setPkCompanyBranchId(manWarehouseSourceKey[0]);
                stockMoveParams.setPkYearId(mnYear); // year of document
                stockMoveParams.setPkItemId(stockAssignRow.getFkItemId());
                stockMoveParams.setPkUnitId(stockAssignRow.getFkUnitId());
                stockMoveParams.setWarehouseType(SDataConstantsSys.CFGS_TP_ENT_WH_MFG_MS[1]);
                
                objStock = STrnStockSegregationUtils.getStock(miClient, stockMoveParams, null);
                surplus = objStock.getAvailableStock();
            }
            catch (Exception e) {
                SLibUtilities.printOutException(this, e);
            }

            for (SDataDiogEntry entry : moParamDiog.getDbmsEntries()) {
                for (STrnStockMove move : entry.getAuxStockMoves()) {
                    if (move.getPkItemId() == stockAssignRow.getFkItemId() && move.getPkUnitId() == stockAssignRow.getFkUnitId()) {
                        if (entry.getIsDeleted()) {
                            stock += move.getQuantity();    // add quantity in deleted document entries to stock
                        }
                        else {
                            used += move.getQuantity();
                        }
                    }
                }
            }

            jtfStock.setText(miClient.getSessionXXX().getFormatters().getDecimalsValueUnitaryFormat().format(stock));
            jtfStockUnit.setText(stockAssignRow.getAuxUnitSymbol());
            jtfSegregated.setText(miClient.getSessionXXX().getFormatters().getDecimalsValueUnitaryFormat().format(segregated));
            jtfSegregatedUnit.setText(stockAssignRow.getAuxUnitSymbol());
            jtfCurrentlyUsed.setText(miClient.getSessionXXX().getFormatters().getDecimalsValueUnitaryFormat().format(used));
            jtfCurrentlyUsedUnit.setText(stockAssignRow.getAuxUnitSymbol());
            jtfAvailable.setText(miClient.getSessionXXX().getFormatters().getDecimalsValueUnitaryFormat().format(stock - segregated - used));
            jtfAvailableUnit.setText(stockAssignRow.getAuxUnitSymbol());
            jtfSurplusStock.setText(miClient.getSessionXXX().getFormatters().getDecimalsValueUnitaryFormat().format(surplus));
            jtfSurplusUnit.setText(stockAssignRow.getAuxUnitSymbol());
            
            jbViewLots.setEnabled(true);
        }
    }

    public void actionShowCharge() {
        int[] key = null;
        boolean userInput = false;
        STrnProdOrderStockAssignRow stockAssignRow = null;

        computePaneEdition();

        // Check if there is user input:

        for (STableRow row : moPaneProdOrderEntries.getTableModel().getTableRows()) {
            stockAssignRow = (STrnProdOrderStockAssignRow) row;
            if (stockAssignRow.getQuantityToAssign() > 0) {
                userInput = true;
                break;
            }
        }

        if (!userInput || miClient.showMsgBoxConfirm("Si desea continuar, se perder√° la captura actual.\n" + SLibConstants.MSG_CNF_MSG_CONT) == JOptionPane.YES_OPTION) {
            key = (int[]) ((SFormComponentItem) jcbCharges.getSelectedItem()).getPrimaryKey();

            moPaneProdOrderEntries.clearTableRows();

            for (STrnProdOrderStockAssignRow row: mvStockAssignRows) {
                if (SLibUtilities.compareKeys(key, row.getProdOrderChargeKey())) {
                    row.setQuantityToAssign(0);
                    row.prepareTableRow();
                    moPaneProdOrderEntries.addTableRow(row);
                }
            }

            moPaneProdOrderEntries.renderTableRows();
            moPaneProdOrderEntries.setTableRowSelection(0);
            moPaneProdOrderEntries.setTableColumnSelection(COL_QTY);

            jtfCurrentCharge.setText("" + key[2]);

            jbShowCharge.setEnabled(false);
        }
    }

    public void actionAssignAll() {
        STrnProdOrderStockAssignRow stockAssignRow = null;

        if (jbAssignAll.isEnabled()) {
            computeClose();

            if (mnFormMode == SLibConstants.MODE_STK_ASD) {
                for (STableRow row : moPaneProdOrderEntries.getTableModel().getTableRows()) {
                    stockAssignRow = (STrnProdOrderStockAssignRow) row;
                    stockAssignRow.setQuantityToAssign(stockAssignRow.getQuantityPending() <= 0 ? 0 : stockAssignRow.getQuantityPending());
                    stockAssignRow.prepareTableRow();
                }
            }
            else {
                for (STableRow row : moPaneProdOrderEntries.getTableModel().getTableRows()) {
                    stockAssignRow = (STrnProdOrderStockAssignRow) row;
                    stockAssignRow.setQuantityToAssign(stockAssignRow.getQuantityAssigned() <= 0 ? 0 : stockAssignRow.getQuantityAssigned());
                    stockAssignRow.prepareTableRow();
                }
            }

            moPaneProdOrderEntries.renderTableRows();
            moPaneProdOrderEntries.setTableRowSelection(0);
        }
    }

    public void actionCleanAll() {
        STrnProdOrderStockAssignRow stockAssignRow = null;

        if (jbCleanAll.isEnabled()) {
            computeClose();

            for (STableRow row : moPaneProdOrderEntries.getTableModel().getTableRows()) {
                stockAssignRow = (STrnProdOrderStockAssignRow) row;
                stockAssignRow.setQuantityToAssign(0);
                row.prepareTableRow();
            }

            moPaneProdOrderEntries.renderTableRows();
            moPaneProdOrderEntries.setTableRowSelection(0);
        }
    }

    public void actionViewLots() {
        STrnProdOrderStockAssignRow stockAssignRow = (STrnProdOrderStockAssignRow) moPaneProdOrderEntries.getSelectedTableRow();

        if (stockAssignRow == null) {
            miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_GUI_ROW_UNDEF);
        }
        else {
            moPickerStockLots.formReset();
            moPickerStockLots.setFormParams(mnYear, stockAssignRow.getFkItemId(), stockAssignRow.getFkUnitId(), manWarehouseSourceKey, (int[]) moParamDiog.getPrimaryKey());
            moPickerStockLots.setVisible(true);
        }
    }

    public void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            miClient.showMsgBoxWarning(validation.getMessage());
        }
        else {
            computeClose();
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    public void actionCancel() {
        computeClose();
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbAssignAll;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbCleanAll;
    private javax.swing.JButton jbOk;
    private javax.swing.JButton jbShowCharge;
    private javax.swing.JButton jbViewLots;
    private javax.swing.JComboBox jcbCharges;
    private javax.swing.JLabel jlAvailable;
    private javax.swing.JLabel jlCharges;
    private javax.swing.JLabel jlCurrentCharge;
    private javax.swing.JLabel jlCurrentlyUsed;
    private javax.swing.JLabel jlItem;
    private javax.swing.JLabel jlProdOrder;
    private javax.swing.JLabel jlProdOrderDate;
    private javax.swing.JLabel jlProdOrderDateDelivery;
    private javax.swing.JLabel jlQuantity;
    private javax.swing.JLabel jlQuantityAssigned;
    private javax.swing.JLabel jlQuantityPending;
    private javax.swing.JLabel jlQuantityPending1;
    private javax.swing.JLabel jlQuantityRequired;
    private javax.swing.JLabel jlSegregated;
    private javax.swing.JLabel jlStock;
    private javax.swing.JLabel jlWarehouseDestiny;
    private javax.swing.JLabel jlWarehouseSource;
    private javax.swing.JLabel jlYear;
    private javax.swing.JPanel jpControls;
    private javax.swing.JPanel jpDiogEntriesInfo;
    private javax.swing.JPanel jpDiogEntriesInfo1;
    private javax.swing.JPanel jpDiogEntriesInfo11;
    private javax.swing.JPanel jpDiogEntriesInfo2;
    private javax.swing.JPanel jpDiogEntriesInfo21;
    private javax.swing.JPanel jpDiogEntriesInfo22;
    private javax.swing.JPanel jpDiogEntriesInfo23;
    private javax.swing.JPanel jpDiogEntriesInfo24;
    private javax.swing.JPanel jpDpsEntriesControls1;
    private javax.swing.JPanel jpProductionOrder;
    private javax.swing.JPanel jpProductionOrderEntries;
    private javax.swing.JPanel jpWarehouseControls;
    private javax.swing.JPanel jpWarehouseDestiny;
    private javax.swing.JPanel jpWarehouseSource;
    private javax.swing.JPanel jpWarehouses;
    private javax.swing.JTextField jtfAvailable;
    private javax.swing.JTextField jtfAvailableUnit;
    private javax.swing.JTextField jtfCompanyBranchDestiny;
    private javax.swing.JTextField jtfCompanyBranchDestinyCode;
    private javax.swing.JTextField jtfCompanyBranchSource;
    private javax.swing.JTextField jtfCompanyBranchSourceCode;
    private javax.swing.JTextField jtfCurrentCharge;
    private javax.swing.JTextField jtfCurrentlyUsed;
    private javax.swing.JTextField jtfCurrentlyUsedUnit;
    private javax.swing.JTextField jtfItem;
    private javax.swing.JTextField jtfItemCode;
    private javax.swing.JTextField jtfProdOrderDate;
    private javax.swing.JTextField jtfProdOrderDateDelivery;
    private javax.swing.JTextField jtfProdOrderNumber;
    private javax.swing.JTextField jtfProdOrderType;
    private javax.swing.JTextField jtfQuantity;
    private javax.swing.JTextField jtfQuantityAssigned;
    private javax.swing.JTextField jtfQuantityAssignedPerc;
    private javax.swing.JTextField jtfQuantityAssignedUnit;
    private javax.swing.JTextField jtfQuantityPending;
    private javax.swing.JTextField jtfQuantityPendingPerc;
    private javax.swing.JTextField jtfQuantityPendingUnit;
    private javax.swing.JTextField jtfQuantityRequired;
    private javax.swing.JTextField jtfQuantityRequiredPerc;
    private javax.swing.JTextField jtfQuantityRequiredUnit;
    private javax.swing.JTextField jtfQuantityUnit;
    private javax.swing.JTextField jtfSegregated;
    private javax.swing.JTextField jtfSegregatedUnit;
    private javax.swing.JTextField jtfStock;
    private javax.swing.JTextField jtfStockUnit;
    private javax.swing.JTextField jtfSurplusStock;
    private javax.swing.JTextField jtfSurplusUnit;
    private javax.swing.JTextField jtfWarehouseDestiny;
    private javax.swing.JTextField jtfWarehouseDestinyCode;
    private javax.swing.JTextField jtfWarehouseSource;
    private javax.swing.JTextField jtfWarehouseSourceCode;
    private javax.swing.JTextField jtfYear;
    // End of variables declaration//GEN-END:variables

    public void setFormParams(final SDataDiog diog, final SDataProductionOrder prodOrder, final int[] warehouseSourceKey, final int[] warehouseDestinyKey) {
        if (diog == null || prodOrder == null) {
            moParamDiog = null;
            moParamProdOrder = null;

            mnYear = 0;

            manWarehouseSourceKey = null;
            moCompanyBranchSource = null;
            moWarehouseSource = null;

            manWarehouseDestinyKey = null;
            moCompanyBranchDestiny = null;
            moWarehouseDestiny = null;

            jtfYear.setText("");

            jtfCompanyBranchSource.setText("");
            jtfCompanyBranchSourceCode.setText("");
            jtfWarehouseSource.setText("");
            jtfWarehouseSourceCode.setText("");

            jtfCompanyBranchDestiny.setText("");
            jtfCompanyBranchDestinyCode.setText("");
            jtfWarehouseDestiny.setText("");
            jtfWarehouseDestinyCode.setText("");
        }
        else {
            moParamDiog = diog;
            moParamProdOrder = prodOrder;

            mnYear = SLibTimeUtilities.digestYear(moParamDiog.getDate())[0];

            manWarehouseSourceKey = warehouseSourceKey;
            moCompanyBranchSource = (SDataBizPartnerBranch) SDataUtilities.readRegistry(miClient, SDataConstants.BPSU_BPB, new int[] { manWarehouseSourceKey[0] }, SLibConstants.EXEC_MODE_VERBOSE);
            moWarehouseSource = (SDataCompanyBranchEntity) SDataUtilities.readRegistry(miClient, SDataConstants.CFGU_COB_ENT, manWarehouseSourceKey, SLibConstants.EXEC_MODE_VERBOSE);

            manWarehouseDestinyKey = warehouseDestinyKey;
            moCompanyBranchDestiny = (SDataBizPartnerBranch) SDataUtilities.readRegistry(miClient, SDataConstants.BPSU_BPB, new int[] { manWarehouseDestinyKey[0] }, SLibConstants.EXEC_MODE_VERBOSE);
            moWarehouseDestiny = (SDataCompanyBranchEntity) SDataUtilities.readRegistry(miClient, SDataConstants.CFGU_COB_ENT, manWarehouseDestinyKey, SLibConstants.EXEC_MODE_VERBOSE);

            jtfYear.setText(miClient.getSessionXXX().getFormatters().getYearFormat().format(mnYear));

            jtfCompanyBranchSource.setText(moCompanyBranchSource.getBizPartnerBranch());
            jtfCompanyBranchSourceCode.setText(moCompanyBranchSource.getCode());
            jtfWarehouseSource.setText(moWarehouseSource.getEntity());
            jtfWarehouseSourceCode.setText(moWarehouseSource.getCode());

            jtfCompanyBranchDestiny.setText(moCompanyBranchDestiny.getBizPartnerBranch());
            jtfCompanyBranchDestinyCode.setText(moCompanyBranchDestiny.getCode());
            jtfWarehouseDestiny.setText(moWarehouseDestiny.getEntity());
            jtfWarehouseDestinyCode.setText(moWarehouseDestiny.getCode());

            jtfYear.setCaretPosition(0);

            jtfCompanyBranchSource.setCaretPosition(0);
            jtfCompanyBranchSourceCode.setCaretPosition(0);
            jtfWarehouseSource.setCaretPosition(0);
            jtfWarehouseSourceCode.setCaretPosition(0);

            jtfCompanyBranchDestiny.setCaretPosition(0);
            jtfCompanyBranchDestinyCode.setCaretPosition(0);
            jtfWarehouseDestiny.setCaretPosition(0);
            jtfWarehouseDestinyCode.setCaretPosition(0);
        }

        renderProdOrder();
    }

    public java.util.Vector<erp.mtrn.data.STrnProdOrderStockAssignRow> obtainProdOrderStockAssignRows() {
        Vector<STrnProdOrderStockAssignRow> stockAsignRows = new Vector<STrnProdOrderStockAssignRow>();

        computePaneEdition();   // updates user edition into internal pane data objects

        for (STableRow row : moPaneProdOrderEntries.getTableModel().getTableRows()) {
            if (((STrnProdOrderStockAssignRow) row).getQuantityToAssign() > 0) {
                stockAsignRows.add((STrnProdOrderStockAssignRow) row);
            }
        }

        return stockAsignRows;
    }

    public int getFormResult() {
        return mnFormResult;
    }

    public int getFormStatus() {
        return mnFormStatus;
    }

    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;
    }

    public erp.lib.form.SFormValidation formValidate() {
        int moves = 0;
        STrnProdOrderStockAssignRow stockAsignRow = null;
        SFormValidation validation = new SFormValidation();

        computePaneEdition();   // updates user edition into internal pane data objects

        for (int row = 0; row < moPaneProdOrderEntries.getTableModel().getTableRows().size(); row++) {
            stockAsignRow = (STrnProdOrderStockAssignRow) moPaneProdOrderEntries.getTableRow(row);

            if (stockAsignRow.getQuantityToAssign() < 0) {
                validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_VALUE_DIF + "'" + moPaneProdOrderEntries.getTableColumn(COL_QTY).getColumnTitle() + "' en la fila " + (row + 1) + ".\n" +
                        "El valor no puede ser negativo.");
                validation.setComponent(moPaneProdOrderEntries.getTable());
                break;
            }
            else if (mnFormMode == SLibConstants.MODE_STK_ASD &&
                    stockAsignRow.getQuantityToAssign() > 0 && stockAsignRow.getQuantityToAssign() > stockAsignRow.getQuantityPending() &&
                    miClient.showMsgBoxConfirm("En la fila " + (row + 1) + ", el valor '" + moPaneProdOrderEntries.getTableColumn(COL_QTY).getColumnTitle() + "' " +
                    "(" + miClient.getSessionXXX().getFormatters().getDecimalsValueUnitaryFormat().format(stockAsignRow.getQuantityToAssign()) + ") " +
                    "es mayor a la cantidad pendiente " +
                    "(" + miClient.getSessionXXX().getFormatters().getDecimalsValueUnitaryFormat().format(stockAsignRow.getQuantityPending()) + ").\n" +
                    SLibConstants.MSG_CNF_MSG_CONT) != JOptionPane.YES_OPTION) {

                validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_VALUE_DIF + "'" + moPaneProdOrderEntries.getTableColumn(COL_QTY).getColumnTitle() + "' en la fila " + (row + 1) + ".\n" +
                        "El valor no debe ser mayor a " + miClient.getSessionXXX().getFormatters().getDecimalsValueUnitaryFormat().format(stockAsignRow.getQuantityPending()) + ".");
                validation.setComponent(moPaneProdOrderEntries.getTable());
                break;
            }
            else if (mnFormMode == SLibConstants.MODE_STK_RET &&
                    stockAsignRow.getQuantityToAssign() > 0 && stockAsignRow.getQuantityToAssign() > stockAsignRow.getQuantityAssigned() &&
                    miClient.showMsgBoxConfirm("En la fila " + (row + 1) + ", el valor '" + moPaneProdOrderEntries.getTableColumn(COL_QTY).getColumnTitle() + "' " +
                    "(" + miClient.getSessionXXX().getFormatters().getDecimalsValueUnitaryFormat().format(stockAsignRow.getQuantityToAssign()) + ") " +
                    "es mayor a la cantidad entregada " +
                    "(" + miClient.getSessionXXX().getFormatters().getDecimalsValueUnitaryFormat().format(stockAsignRow.getQuantityAssigned()) + ").\n" +
                    SLibConstants.MSG_CNF_MSG_CONT) != JOptionPane.YES_OPTION) {

                validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_VALUE_DIF + "'" + moPaneProdOrderEntries.getTableColumn(COL_QTY).getColumnTitle() + "' en la fila " + (row + 1) + ".\n" +
                        "El valor no debe ser mayor a " + miClient.getSessionXXX().getFormatters().getDecimalsValueUnitaryFormat().format(stockAsignRow.getQuantityAssigned()) + ".");
                validation.setComponent(moPaneProdOrderEntries.getTable());
                break;
            }
            else if (stockAsignRow.getQuantityToAssign() > 0) {
                moves++;
            }
        }

        if (!validation.getIsError()) {
            if (moves == 0) {
                validation.setMessage("No se ha especificado la cantidad al menos para una de las partidas.");
                validation.setComponent(moPaneProdOrderEntries.getTable());
            }
        }

        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbShowCharge) {
                actionShowCharge();
            }
            else if (button == jbAssignAll) {
                actionAssignAll();
            }
            else if (button == jbCleanAll) {
                actionCleanAll();
            }
            else if (button == jbViewLots) {
                actionViewLots();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getStateChange() == ItemEvent.SELECTED) {
            if (e.getSource() instanceof JComboBox) {
                JComboBox comboBox = (JComboBox) e.getSource();

                if (comboBox == jcbCharges) {
                    itemStateCharges();
                }
            }
        }
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        if (!e.getValueIsAdjusting()) {
            valueChangedPaneDpsEntries();
        }
    }
}
