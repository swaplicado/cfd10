/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SPanelReference.java
 *
 * Created on 11/02/2010, 04:32:56 PM
 */

package erp.mtrn.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataUtilities;
import erp.data.SProcConstants;
import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.mbps.data.SDataBizPartner;
import java.util.Vector;
import javax.swing.JButton;

/**
 *
 * @author Néstor Ávalos
 */
public class SPanelReference extends javax.swing.JPanel implements java.awt.event.ActionListener {

    private erp.client.SClientInterface miClient;

    private java.util.Vector<erp.lib.form.SFormField> mvFields;

    private erp.lib.form.SFormField moFieldReference;
    private erp.lib.form.SFormField moFieldFkCurrencyId;
    private erp.lib.form.SFormField moFieldValueCy;
    private erp.lib.form.SFormField moFieldValue;
    private erp.lib.form.SFormField moFieldExchangeRateSystem;
    private erp.lib.form.SFormField moFieldExchangeRate;

    private int mnParamFkBizPartnerId;
    private int mnParamTpSysMovId[];
    private int mnParamDsmEtyType;
    private int mnFkBpbRef;
    private int mnFkCurRef;
    private java.util.Date mtParamDate;

    private erp.mtrn.form.SPanelDpsBalance moParamPanelFkDpsId;
    private erp.mtrn.form.SPanelReference moParamPanelFkReferenceId;
    private erp.mtrn.form.SPanelCurrency moParamPanelFkCurrencyId;

    private erp.mbps.data.SDataBizPartner moBizPartner = null;

    /**
     * Creates new form SPanel
     *
     */
    public SPanelReference(erp.client.SClientInterface client, int[] nTpSysMovId, int bizPartnerId, int dsmEtyType) throws java.lang.Exception {
        miClient = client;
        mnParamTpSysMovId = nTpSysMovId;
        mnParamFkBizPartnerId = bizPartnerId;
        mnParamDsmEtyType = dsmEtyType;

        mnFkBpbRef = 0;
        mnFkCurRef = 0;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel27 = new javax.swing.JPanel();
        jlReference = new javax.swing.JLabel();
        jPanel46 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jtfReference = new javax.swing.JTextField();
        jPanel47 = new javax.swing.JPanel();
        jbReference = new javax.swing.JButton();
        jPanel60 = new javax.swing.JPanel();
        jlFkCurrencyId = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jcbFkCurrencyId = new javax.swing.JComboBox();
        jPanel63 = new javax.swing.JPanel();
        jbFkCurrencyId = new javax.swing.JButton();
        jPanel68 = new javax.swing.JPanel();
        jlValueCy = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jtfValueCy = new javax.swing.JTextField();
        jPanel70 = new javax.swing.JPanel();
        jbValueCy = new javax.swing.JButton();
        jPanel71 = new javax.swing.JPanel();
        jlExchangeRateSystem = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jtfExchangeRateSystem = new javax.swing.JTextField();
        jbExchangeRateSystem = new javax.swing.JButton();
        jPanel62 = new javax.swing.JPanel();
        jPanel69 = new javax.swing.JPanel();
        jlValue = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        jtfValue = new javax.swing.JTextField();
        jPanel72 = new javax.swing.JPanel();
        jbValue = new javax.swing.JButton();
        jPanel73 = new javax.swing.JPanel();
        jlExchangeRate = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jtfExchangeRate = new javax.swing.JTextField();
        jbExchangeRate = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.GridLayout(5, 1, 0, 1));

        jPanel27.setLayout(new java.awt.BorderLayout(5, 0));

        jlReference.setText("Repositorio contable:");
        jlReference.setPreferredSize(new java.awt.Dimension(130, 14));
        jPanel27.add(jlReference, java.awt.BorderLayout.WEST);

        jPanel46.setLayout(new java.awt.BorderLayout(5, 5));

        jPanel2.setLayout(new java.awt.BorderLayout(5, 0));

        jtfReference.setText("REFERENCE");
        jtfReference.setPreferredSize(new java.awt.Dimension(150, 20));
        jtfReference.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfReferenceFocusLost(evt);
            }
        });
        jPanel2.add(jtfReference, java.awt.BorderLayout.WEST);

        jPanel47.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel47.setLayout(new java.awt.BorderLayout(5, 0));

        jbReference.setText("...");
        jbReference.setToolTipText("Seleccionar repositorio contable");
        jbReference.setFocusable(false);
        jbReference.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel47.add(jbReference, java.awt.BorderLayout.WEST);

        jPanel2.add(jPanel47, java.awt.BorderLayout.CENTER);

        jPanel46.add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel27.add(jPanel46, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel27);

        jPanel60.setLayout(new java.awt.BorderLayout(5, 5));

        jlFkCurrencyId.setText("Moneda: *");
        jlFkCurrencyId.setPreferredSize(new java.awt.Dimension(130, 14));
        jPanel60.add(jlFkCurrencyId, java.awt.BorderLayout.WEST);

        jPanel7.setLayout(new java.awt.BorderLayout(5, 0));

        jPanel3.setLayout(new java.awt.BorderLayout(5, 0));

        jcbFkCurrencyId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbFkCurrencyId.setPreferredSize(new java.awt.Dimension(150, 20));
        jcbFkCurrencyId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbFkCurrencyIdItemStateChanged(evt);
            }
        });
        jPanel3.add(jcbFkCurrencyId, java.awt.BorderLayout.WEST);

        jPanel63.setLayout(new java.awt.BorderLayout());

        jbFkCurrencyId.setText("...");
        jbFkCurrencyId.setToolTipText("Seleccionar moneda");
        jbFkCurrencyId.setFocusable(false);
        jbFkCurrencyId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel63.add(jbFkCurrencyId, java.awt.BorderLayout.WEST);

        jPanel3.add(jPanel63, java.awt.BorderLayout.CENTER);

        jPanel7.add(jPanel3, java.awt.BorderLayout.CENTER);

        jPanel60.add(jPanel7, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel60);

        jPanel68.setLayout(new java.awt.BorderLayout(5, 0));

        jlValueCy.setText("Valor: *");
        jlValueCy.setPreferredSize(new java.awt.Dimension(130, 14));
        jPanel68.add(jlValueCy, java.awt.BorderLayout.WEST);

        jPanel11.setLayout(new java.awt.BorderLayout(5, 0));

        jtfValueCy.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfValueCy.setText("000,000,000.0000");
        jtfValueCy.setPreferredSize(new java.awt.Dimension(100, 20));
        jtfValueCy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfValueCyFocusLost(evt);
            }
        });
        jPanel11.add(jtfValueCy, java.awt.BorderLayout.WEST);

        jPanel70.setLayout(new java.awt.BorderLayout(15, 0));

        jbValueCy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_action.gif"))); // NOI18N
        jbValueCy.setToolTipText("Calcular valor del documento");
        jbValueCy.setFocusable(false);
        jbValueCy.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel70.add(jbValueCy, java.awt.BorderLayout.WEST);

        jPanel71.setLayout(new java.awt.BorderLayout(5, 0));

        jlExchangeRateSystem.setText("T. cambio sist.:");
        jlExchangeRateSystem.setMaximumSize(new java.awt.Dimension(82, 14));
        jlExchangeRateSystem.setPreferredSize(new java.awt.Dimension(75, 14));
        jPanel71.add(jlExchangeRateSystem, java.awt.BorderLayout.WEST);

        jPanel8.setLayout(new java.awt.BorderLayout(5, 0));

        jtfExchangeRateSystem.setEditable(false);
        jtfExchangeRateSystem.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfExchangeRateSystem.setText("00.0000");
        jtfExchangeRateSystem.setFocusable(false);
        jtfExchangeRateSystem.setPreferredSize(new java.awt.Dimension(75, 20));
        jPanel8.add(jtfExchangeRateSystem, java.awt.BorderLayout.CENTER);

        jbExchangeRateSystem.setText("...");
        jbExchangeRateSystem.setToolTipText("Seleccionar t. cambio sistema");
        jbExchangeRateSystem.setFocusable(false);
        jbExchangeRateSystem.setPreferredSize(new java.awt.Dimension(23, 23));
        jbExchangeRateSystem.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_action.gif"))); // NOI18N
        jPanel8.add(jbExchangeRateSystem, java.awt.BorderLayout.EAST);

        jPanel71.add(jPanel8, java.awt.BorderLayout.CENTER);

        jPanel70.add(jPanel71, java.awt.BorderLayout.CENTER);

        jPanel11.add(jPanel70, java.awt.BorderLayout.CENTER);

        jPanel68.add(jPanel11, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel68);

        jPanel62.setLayout(new java.awt.BorderLayout(5, 5));

        jPanel69.setLayout(new java.awt.BorderLayout(5, 0));

        jlValue.setText("Valor moneda local: *");
        jlValue.setPreferredSize(new java.awt.Dimension(130, 14));
        jlValue.setRequestFocusEnabled(false);
        jPanel69.add(jlValue, java.awt.BorderLayout.WEST);

        jPanel12.setLayout(new java.awt.BorderLayout(5, 0));

        jtfValue.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfValue.setText("000,000,000.0000");
        jtfValue.setPreferredSize(new java.awt.Dimension(100, 20));
        jtfValue.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfValueFocusLost(evt);
            }
        });
        jPanel12.add(jtfValue, java.awt.BorderLayout.WEST);

        jPanel72.setLayout(new java.awt.BorderLayout(15, 0));

        jbValue.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_action.gif"))); // NOI18N
        jbValue.setToolTipText("Calcular valor de la moneda");
        jbValue.setFocusable(false);
        jbValue.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel72.add(jbValue, java.awt.BorderLayout.WEST);

        jPanel73.setLayout(new java.awt.BorderLayout(5, 0));

        jlExchangeRate.setText("T. cambio: *");
        jlExchangeRate.setPreferredSize(new java.awt.Dimension(75, 14));
        jPanel73.add(jlExchangeRate, java.awt.BorderLayout.WEST);

        jPanel10.setLayout(new java.awt.BorderLayout(5, 0));

        jtfExchangeRate.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfExchangeRate.setText("00.0000");
        jtfExchangeRate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfExchangeRateFocusLost(evt);
            }
        });
        jPanel10.add(jtfExchangeRate, java.awt.BorderLayout.CENTER);

        jbExchangeRate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_action.gif"))); // NOI18N
        jbExchangeRate.setToolTipText("calcular t. cambio");
        jbExchangeRate.setFocusable(false);
        jbExchangeRate.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel10.add(jbExchangeRate, java.awt.BorderLayout.EAST);

        jPanel73.add(jPanel10, java.awt.BorderLayout.CENTER);

        jPanel72.add(jPanel73, java.awt.BorderLayout.CENTER);

        jPanel12.add(jPanel72, java.awt.BorderLayout.CENTER);

        jPanel69.add(jPanel12, java.awt.BorderLayout.CENTER);

        jPanel62.add(jPanel69, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel62);

        jPanel4.setPreferredSize(new java.awt.Dimension(15, 15));
        jPanel4.setLayout(new java.awt.BorderLayout());
        jPanel1.add(jPanel4);

        add(jPanel1, java.awt.BorderLayout.PAGE_START);
    }// </editor-fold>//GEN-END:initComponents

    private void jcbFkCurrencyIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbFkCurrencyIdItemStateChanged
        renderCurrencySettings();
}//GEN-LAST:event_jcbFkCurrencyIdItemStateChanged

    private void jtfValueFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfValueFocusLost
        actionValueFocusLost();
    }//GEN-LAST:event_jtfValueFocusLost

    private void jtfReferenceFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfReferenceFocusLost
        focusLostReference();
    }//GEN-LAST:event_jtfReferenceFocusLost

    private void jtfValueCyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfValueCyFocusLost
        actionValueCyFocusLost();
    }//GEN-LAST:event_jtfValueCyFocusLost

    private void jtfExchangeRateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfExchangeRateFocusLost
        actionExchangeRateFocusLost();
    }//GEN-LAST:event_jtfExchangeRateFocusLost

    private void initComponentsExtra() {
        mvFields = new Vector<SFormField>();

        moFieldReference = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_STRING, false, jtfReference, jlReference);
        moFieldReference.setLengthMax(15);
        moFieldReference.setPickerButton(jbReference);
        moFieldFkCurrencyId = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkCurrencyId, jlFkCurrencyId);
        moFieldFkCurrencyId.setPickerButton(jbFkCurrencyId);
        moFieldValue = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfValue, jlValue);
        moFieldValue.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsValueFormat());
        moFieldValue.setMinInclusive(true);
        moFieldValueCy = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfValueCy, jlValueCy);
        moFieldValueCy.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsValueFormat());
        moFieldValueCy.setMinInclusive(true);
        moFieldExchangeRate = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfExchangeRate, jlExchangeRate);
        moFieldExchangeRate.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsExchangeRateFormat());
        moFieldExchangeRate.setMinInclusive(true);
        moFieldExchangeRateSystem = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfExchangeRateSystem, jlExchangeRateSystem);
        moFieldExchangeRateSystem.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsExchangeRateFormat());

        mvFields.add(moFieldReference);
        mvFields.add(moFieldFkCurrencyId);
        mvFields.add(moFieldValue);
        mvFields.add(moFieldExchangeRate);
        mvFields.add(moFieldExchangeRateSystem);
        mvFields.add(moFieldValueCy);

        jbReference.addActionListener(this);
        jbFkCurrencyId.addActionListener(this);
        jbValueCy.addActionListener(this);
        jbValue.addActionListener(this);
        jbExchangeRateSystem.addActionListener(this);
        jbExchangeRate.addActionListener(this);
    }

    private void actionReference() {
        /*
        Object o = null;
        Vector<Object> mvParams = new Vector<Object>();
        SFormOptionPickerDiomReference picker = new SFormOptionPickerDiomReference(miClient);

        if (mnParamFkBizPartnerId > 0) {

            o = renderAccountBizPartner();
            if (((Object []) o)[0].toString().length() > 0) {
                miClient.showMsgBoxInformation(((String []) o)[0]);
            }
            else {
                picker.setFilterKey(new Object[] { mnParamTpSysMovId, mnParamFkBizPartnerId, ((Object []) o)[1].toString(), SLibUtilities.parseInt(((Object []) o)[2].toString()), miClient.getSessionXXX().getWorkingYear(), 0 });
                picker.formRefreshOptionPane();
                picker.formReset();
                picker.setSelectedPrimaryKey(new Object[] {moFieldReference.getString(), mnParamFkBizPartnerId, mnFkCurRef});
                picker.setValue(1, new Object[] { miClient.getSessionXXX().getWorkingYear(), moBizPartner.getBizPartner(), ((Object []) o)[1].toString() });
                picker.setFormVisible(true);

                if (picker.getFormResult() == SLibConstants.FORM_RESULT_OK) {
                    moFieldReference.setString((String)((Object[])picker.getSelectedPrimaryKey())[0]);

                    if (moFieldReference.getString().compareTo(SDataConstantsSys.REF_BLANK) == 0) {
                        moFieldReference.setString("");
                    }

                    mnFkCurRef = (Integer)((Object [])picker.getSelectedPrimaryKey())[2];
                    moFieldFkCurrencyId.setKey(new int[] { mnFkCurRef });
                    renderCurrencySettings();

                    jtfReference.requestFocus();
                }
            }
        }
        else {
            miClient.showMsgBoxWarning("No ha seleccionado un asociado de negocios.");
        }
        */
    }

    private java.lang.Object renderAccountBizPartner() {
        int nBpCategoryId = 0;
        String sMsg = "";
        String sAccountBp = "";
        Vector<Object> mvParams = new Vector<Object>();

        moBizPartner = (SDataBizPartner) SDataUtilities.readRegistry(miClient, SDataConstants.BPSU_BP, new int[] { mnParamFkBizPartnerId }, SLibConstants.EXEC_MODE_VERBOSE);

        if (moBizPartner != null) {
            mvParams.add(moBizPartner.getPkBizPartnerId());

            if (SLibUtilities.compareKeys(mnParamTpSysMovId, SDataConstantsSys.FINS_TP_SYS_MOV_BPS_SUP)) {
                nBpCategoryId = moBizPartner.getDbmsCategorySettingsSup().getPkBizPartnerCategoryId();
            }
            else if (SLibUtilities.compareKeys(mnParamTpSysMovId, SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CDR)) {
                nBpCategoryId = moBizPartner.getDbmsCategorySettingsCdr().getPkBizPartnerCategoryId();
            }
            else if (SLibUtilities.compareKeys(mnParamTpSysMovId, SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CUS)) {
                nBpCategoryId = moBizPartner.getDbmsCategorySettingsCus().getPkBizPartnerCategoryId();
            }
            else if (SLibUtilities.compareKeys(mnParamTpSysMovId, SDataConstantsSys.FINS_TP_SYS_MOV_BPS_DBR)) {
                nBpCategoryId = moBizPartner.getDbmsCategorySettingsDbr().getPkBizPartnerCategoryId();
            }
            mvParams.add(nBpCategoryId);
        }
        else {
            mvParams.add(0);
        }

        mvParams.add(miClient.getSessionXXX().getCompany().getDbmsDataCompany().getDbmsBizPartnerBranchHq().getDbmsDataCompanyBranchBkc().getPkBookkepingCenterId());
        mvParams.add(SDataConstantsSys.FINS_TP_ACC_BP_PAY);
        mvParams.add(miClient.getSessionXXX().getWorkingDate());
        mvParams = SDataUtilities.callProcedure(miClient, SProcConstants.FIN_ACC_BP_GET,  mvParams, SLibConstants.EXEC_MODE_SILENT);

        if (mvParams.size() > 0) {
            if (SLibUtilities.parseInt(mvParams.get(1).toString()) > 0) {
                sMsg = mvParams.get(2).toString();
            }
            sAccountBp = mvParams.get(0).toString();
        }
        else {
            sMsg = "No se encuentra la cuenta contable del asociado de negocio";
        }

        return new Object[] { sMsg, sAccountBp, nBpCategoryId };
    }

    private void focusLostReference() {
        //renderCurrencySettings();
    }

    private void renderSetValueCyPanelDps(erp.mtrn.form.SPanelDpsBalance oPanel, java.lang.Object oKey, double dValueCy, double dValue, double dExchangeRate, double dExchangeRateSystem) {
        if (oPanel.getFieldFkCurrencyId().getKeyAsIntArray()[0] > 0) {
            if (SLibUtilities.compareKeys(oKey, oPanel.getFieldFkCurrencyId().getKey())) {
                oPanel.renderSetValueCurrency(dValueCy, dValue, dExchangeRate, dExchangeRateSystem, false);
            }
            else {
                oPanel.renderSetValueCurrency(dValueCy, dValue, dExchangeRate, dExchangeRateSystem, true);
            }
        }
    }

    private void renderSetValueCyPanelReference(erp.mtrn.form.SPanelReference oPanel, java.lang.Object oKey, double nValueCy, double dValue, double dExchangeRate, double dExchangeRateSystem) {
        if (SLibUtilities.compareKeys(oKey, oPanel.getFieldFkCurrencyId().getKey())) {
            oPanel.renderSetValueCurrency(nValueCy, dValue, dExchangeRate, dExchangeRateSystem, false);
        }
        else {
            oPanel.renderSetValueCurrency(nValueCy, dValue, dExchangeRate, dExchangeRateSystem, true);
        }
    }

    private void renderSetValueCyPanelCurrency(erp.mtrn.form.SPanelCurrency oPanel, java.lang.Object oKey, double nValueCy, double dValue, double dExchangeRate, double dExchangeRateSystem) {
        if (SLibUtilities.compareKeys(oKey, oPanel.getFieldFkCurrencyId().getKey())) {
            oPanel.renderSetValueCurrency(nValueCy, dValue, dExchangeRate, dExchangeRateSystem, false);
        }
        else {
            oPanel.renderSetValueCurrency(nValueCy, dValue, dExchangeRate, dExchangeRateSystem, true);
        }
    }

    private void renderGetValueCyPanelDps(erp.mtrn.form.SPanelDpsBalance oPanel, java.lang.Object oKey) {
        if (SLibUtilities.compareKeys(oKey, oPanel.getFieldFkCurrencyId().getKey())) {
            renderSetValueCurrency(oPanel.getFieldValueCy().getDouble(), oPanel.getFieldValue().getDouble(), oPanel.getFieldExchangeRate().getDouble(), oPanel.getFieldExchangeRateSystem().getDouble(), false);
        }
    }

    private void renderGetValueCyPanelReference(erp.mtrn.form.SPanelReference oPanel, java.lang.Object oKey) {
        if (SLibUtilities.compareKeys(oKey, oPanel.getFieldFkCurrencyId().getKey())) {
            renderSetValueCurrency(oPanel.getFieldValueCy().getDouble(), oPanel.getFieldValue().getDouble(), oPanel.getFieldExchangeRate().getDouble(), oPanel.getFieldExchangeRateSystem().getDouble(), false);
        }
    }

    private void renderGetValueCyPanelCurrency(erp.mtrn.form.SPanelCurrency oPanel, java.lang.Object oKey) {
        if (SLibUtilities.compareKeys(oKey, oPanel.getFieldFkCurrencyId().getKey())) {
            renderSetValueCurrency(oPanel.getFieldValueCy().getDouble(), oPanel.getFieldValue().getDouble(), oPanel.getFieldExchangeRate().getDouble(), oPanel.getFieldExchangeRateSystem().getDouble(), false);
        }
    }

    private void enableFieldsPanelsCurrency(boolean b) {
        if (SLibUtilities.compareKeys(moFieldFkCurrencyId.getKey(), new int[] { miClient.getSessionXXX().getParamsErp().getFkCurrencyId() })) {

            jbValueCy.setEnabled(false);

            jtfExchangeRateSystem.setEnabled(false);
            jbExchangeRateSystem.setEnabled(false);

            jtfExchangeRate.setEnabled(false);
            jbExchangeRate.setEnabled(false);
        } else {
            jbValueCy.setEnabled(b);

            jtfExchangeRateSystem.setEnabled(b);
            jbExchangeRateSystem.setEnabled(b);

            jtfExchangeRate.setEnabled(b);
            jbExchangeRate.setEnabled(b);
        }

        jtfValueCy.setEnabled(b);
    }

    private void actionFkCurrencyId() {
        miClient.pickOption(SDataConstants.CFGU_CUR, moFieldFkCurrencyId, null);
    }

    private void renderCurrencySettings() {
        double rate = 0;

        if (mnParamFkBizPartnerId > 0) {
            if (jcbFkCurrencyId.getItemCount() > 1) {
                if (SLibUtilities.compareKeys(moFieldFkCurrencyId.getKey(), new int[] { miClient.getSessionXXX().getParamsErp().getFkCurrencyId() })) {
                    // Local currency:

                    jtfExchangeRateSystem.setEnabled(false);
                    jbExchangeRateSystem.setEnabled(false);

                    jtfExchangeRate.setEnabled(false);
                    jbExchangeRate.setEnabled(false);

                    jtfValueCy.setEnabled(true);
                    jbValueCy.setEnabled(false);

                    jtfValue.setEnabled(false);
                    jbValue.setEnabled(false);

                    moFieldExchangeRate.setFieldValue(1.0);
                }
                else {
                    // Foreign currency:

                    jtfExchangeRateSystem.setEnabled(true);
                    jbExchangeRateSystem.setEnabled(true);

                    jtfExchangeRate.setEnabled(true);
                    jbExchangeRate.setEnabled(true);

                    jtfValueCy.setEnabled(true);
                    jbValueCy.setEnabled(true);

                    // Check if panel is destiny to keep disabled the field value:

                    if (mnParamDsmEtyType != SDataConstants.TRNX_DSM_ETY_DESTINY) {
                        jtfValue.setEnabled(true);
                        jbValue.setEnabled(true);
                    }

                    // Check if valueCy or value is cero to initialize the field exchangeRate:

                    if (moFieldValueCy.getDouble() == 0 || moFieldValue.getDouble() == 0) {
                        moFieldExchangeRate.setFieldValue(0.0);
                    }

                    if (moFieldExchangeRate.getDouble() == 0) {
                        try {
                            rate = SDataUtilities.obtainExchangeRate(miClient, moFieldFkCurrencyId.getKeyAsIntArray()[0], mtParamDate);
                        }
                        catch (Exception e) {
                            SLibUtilities.renderException(this, e);
                        }

                        if (rate != 0) {
                            moFieldExchangeRateSystem.setFieldValue(rate);
                            moFieldExchangeRate.setFieldValue(rate);
                        }
                    }
                }
                // Disable fields of destiny panel if apply:

                renderSetValueCyPanels(moFieldFkCurrencyId.getKey(), moFieldValueCy.getDouble(), moFieldValue.getDouble(), moFieldExchangeRate.getDouble(), moFieldExchangeRateSystem.getDouble());

                // Get value of source panel if apply:

                renderGetValueCyPanels(moFieldFkCurrencyId.getKey());
            }
        }
    }

    private void actionExchangeRateSystem() {
        double rate = miClient.pickExchangeRate(moFieldFkCurrencyId.getKeyAsIntArray()[0], miClient.getSessionXXX().getWorkingDate());

        if (rate != 0d) {
            moFieldExchangeRateSystem.setFieldValue(rate);
            if (moFieldExchangeRate.getDouble() == 0) {
                moFieldExchangeRate.setFieldValue(rate);
            }
            jtfExchangeRate.requestFocus();
        }
    }

    private void actionExchangeRate() {
        if (moFieldValueCy.getDouble() != 0) {
            if (moFieldValue.getDouble() == 0) {
                jtfValueCy.requestFocus();
            }
            else {
                moFieldExchangeRate.setFieldValue(moFieldValue.getDouble() / moFieldValueCy.getDouble());
                jtfExchangeRate.requestFocus();
            }
        }
        else if (moFieldValue.getDouble() != 0) {
            jtfValue.requestFocus();
        }
        else {
            jtfExchangeRate.requestFocus();
        }
    }

    private void actionValueCy() {
        if (moFieldExchangeRate.getDouble() == 0) {
            jtfExchangeRate.requestFocus();
        }
        else {
            moFieldValueCy.setFieldValue(SLibUtilities.round(moFieldValue.getDouble() / moFieldExchangeRate.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
            jtfValueCy.requestFocus();
        }
    }

    private void actionValue() {
        if (moFieldExchangeRate.getDouble() == 0) {
            jtfExchangeRate.requestFocus();
        }
        else {
            moFieldValue.setFieldValue(SLibUtilities.round(moFieldValueCy.getDouble() * moFieldExchangeRate.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
            jtfValue.requestFocus();
        }
    }

    private void actionValueCyFocusLost() {
        if (moFieldValueCy.getDouble() != 0) {

            if (!jtfValue.isEnabled() || moFieldValue.getDouble() == 0) {
                moFieldValue.setFieldValue(SLibUtilities.round(moFieldValueCy.getDouble() * moFieldExchangeRate.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
            }
            else if (moFieldExchangeRate.getDouble() == 0) {
                moFieldExchangeRate.setFieldValue(SLibUtilities.round(moFieldValue.getDouble() / moFieldValueCy.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsExchangeRate()));
            }

            renderSetValueCyPanels(moFieldFkCurrencyId.getKey(), moFieldValueCy.getDouble(), moFieldValue.getDouble(), moFieldExchangeRate.getDouble(), moFieldExchangeRateSystem.getDouble());
        }
    }

    private void actionValueFocusLost() {
        if (moFieldValue.getDouble() != 0) {

            if (moFieldValueCy.getDouble() == 0 && moFieldExchangeRate.getDouble() != 0) {
                moFieldValueCy.setFieldValue(SLibUtilities.round(moFieldValue.getDouble() / moFieldExchangeRate.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
            }
            else if (moFieldValueCy.getDouble() != 0 && moFieldExchangeRate.getDouble() == 0) {
                moFieldExchangeRate.setFieldValue(SLibUtilities.round(moFieldValue.getDouble() / moFieldValueCy.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsExchangeRate()));
            }

            renderSetValueCyPanels(moFieldFkCurrencyId.getKey(), moFieldValueCy.getDouble(), moFieldValue.getDouble(), moFieldExchangeRate.getDouble(), moFieldExchangeRateSystem.getDouble());
        }
    }

    private void actionExchangeRateFocusLost() {
        if (!jtfValue.isEnabled()) {
            moFieldValue.setFieldValue(SLibUtilities.round(moFieldValueCy.getDouble() * moFieldExchangeRate.getDouble(),
                miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
        }
        else if (moFieldValueCy.getDouble() != 0 && moFieldValue.getDouble() == 0) {
            moFieldValue.setFieldValue(SLibUtilities.round(moFieldValueCy.getDouble() * moFieldExchangeRate.getDouble(),
                miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
        }

        renderSetValueCyPanels(moFieldFkCurrencyId.getKey(), moFieldValueCy.getDouble(), moFieldValue.getDouble(), moFieldExchangeRate.getDouble(), moFieldExchangeRateSystem.getDouble());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel46;
    private javax.swing.JPanel jPanel47;
    private javax.swing.JPanel jPanel60;
    private javax.swing.JPanel jPanel62;
    private javax.swing.JPanel jPanel63;
    private javax.swing.JPanel jPanel68;
    private javax.swing.JPanel jPanel69;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel70;
    private javax.swing.JPanel jPanel71;
    private javax.swing.JPanel jPanel72;
    private javax.swing.JPanel jPanel73;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JButton jbExchangeRate;
    private javax.swing.JButton jbExchangeRateSystem;
    private javax.swing.JButton jbFkCurrencyId;
    private javax.swing.JButton jbReference;
    private javax.swing.JButton jbValue;
    private javax.swing.JButton jbValueCy;
    private javax.swing.JComboBox jcbFkCurrencyId;
    private javax.swing.JLabel jlExchangeRate;
    private javax.swing.JLabel jlExchangeRateSystem;
    private javax.swing.JLabel jlFkCurrencyId;
    private javax.swing.JLabel jlReference;
    private javax.swing.JLabel jlValue;
    private javax.swing.JLabel jlValueCy;
    private javax.swing.JTextField jtfExchangeRate;
    private javax.swing.JTextField jtfExchangeRateSystem;
    private javax.swing.JTextField jtfReference;
    private javax.swing.JTextField jtfValue;
    private javax.swing.JTextField jtfValueCy;
    // End of variables declaration//GEN-END:variables

    public erp.lib.form.SFormField getFieldReference() { return moFieldReference; }
    public erp.lib.form.SFormField getFieldFkCurrencyId() { return moFieldFkCurrencyId; }
    public erp.lib.form.SFormField getFieldValue() { return moFieldValue; }
    public erp.lib.form.SFormField getFieldExchangeRate() { return moFieldExchangeRate; }
    public erp.lib.form.SFormField getFieldExchangeRateSystem() { return moFieldExchangeRateSystem; }
    public erp.lib.form.SFormField getFieldValueCy() { return moFieldValueCy; }

    public int getParamDsmEtyType() { return mnParamDsmEtyType; }

    public void resetPanel() {
        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        if (mnParamDsmEtyType == SDataConstants.TRNX_DSM_ETY_DESTINY) {
            jtfValue.setEnabled(false);
            jbValue.setEnabled(false);
        }
    }

    public void refreshPanel() {
        renderCurrencySettings();
    }

    @SuppressWarnings("unchecked")
    public void formRefreshCatalogues() {
        SFormUtilities.populateComboBox(miClient, jcbFkCurrencyId, SDataConstants.CFGU_CUR);
    }

    public void resetValues() {
        moFieldReference.setString("");
        jcbFkCurrencyId.setSelectedIndex(0);
        moFieldValueCy.setDouble(0.0);
        moFieldValue.setDouble(0.0);
        moFieldExchangeRate.setDouble(0.0);
        moFieldExchangeRateSystem.setDouble(0.0);
    }

    public void enableFields(boolean b) {
        jtfReference.setEnabled(b);
        jbReference.setEnabled(b);
        jcbFkCurrencyId.setEnabled(b);
        jbFkCurrencyId.setEnabled(b);
        jtfValueCy.setEnabled(b);
        jbValueCy.setEnabled(b);
        jtfExchangeRate.setEnabled(b);
        jbExchangeRate.setEnabled(b);
        jtfExchangeRateSystem.setEnabled(b);
        jbExchangeRateSystem.setEnabled(b);

        if (mnParamDsmEtyType != SDataConstants.TRNX_DSM_ETY_DESTINY) {
            jtfValue.setEnabled(b);
            jbValue.setEnabled(b);
        }
    }

    public void setValue (int type, java.lang.Object value) {
        switch (type) {
            case 1:
                mnParamFkBizPartnerId = (Integer) value;
                break;
            case 2:
                moFieldFkCurrencyId.setKey(new int[] { (Integer) value });
                break;
            case 3:
                moParamPanelFkDpsId = (SPanelDpsBalance) value;
                break;
            case 4:
                moParamPanelFkReferenceId = (SPanelReference) value;
                break;
            case 5:
                moParamPanelFkCurrencyId = (SPanelCurrency) value;
                break;
            case 6:
                actionValue();
                break;
            case 7:
                mtParamDate = (java.util.Date) value;
                break;
        }
    }

    public void renderSetValueCurrency(double dValueCy, double dValue, double dExchangeRate, double dExchangeRateSystem, boolean b) {

        if (!b) {
            moFieldValueCy.setDouble(dValueCy);
            moFieldValue.setDouble(dValue);
            moFieldExchangeRateSystem.setDouble(dExchangeRateSystem);
            moFieldExchangeRate.setDouble(dExchangeRate);
        }

        enableFieldsPanelsCurrency(b);
    }

    public void renderSetValueCyPanels(java.lang.Object oKey, double dValueCy, double dValue, double dExchangeRate, double dExchangeRateSystem) {
        if (mnParamDsmEtyType == SDataConstants.TRNX_DSM_ETY_SOURCE) {

            if (moParamPanelFkDpsId != null) {
                renderSetValueCyPanelDps(moParamPanelFkDpsId, oKey, dValueCy, dValue, dExchangeRate, dExchangeRateSystem);
            }

            if (moParamPanelFkReferenceId != null) {
                renderSetValueCyPanelReference(moParamPanelFkReferenceId, oKey, dValueCy, dValue, dExchangeRate, dExchangeRateSystem);
            }

            if (moParamPanelFkCurrencyId != null) {
                renderSetValueCyPanelCurrency(moParamPanelFkCurrencyId, oKey, dValueCy, dValue, dExchangeRate, dExchangeRateSystem);
            }
        }
    }

    public void renderGetValueCyPanels(java.lang.Object oKey) {
        if (mnParamDsmEtyType == SDataConstants.TRNX_DSM_ETY_DESTINY) {

            if (moParamPanelFkDpsId != null) {
                renderGetValueCyPanelDps(moParamPanelFkDpsId, oKey);
            }

            if (moParamPanelFkReferenceId != null) {
                renderGetValueCyPanelReference(moParamPanelFkReferenceId, oKey);
            }

            if (moParamPanelFkCurrencyId != null) {
                renderGetValueCyPanelCurrency(moParamPanelFkCurrencyId, oKey);
            }
        }
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbReference) {
                //actionReference();
            }
            else if (button == jbFkCurrencyId) {
                actionFkCurrencyId();
            }
            else if (button == jbValue) {
                actionValue();
            }
            else if (button == jbValueCy) {
                actionValueCy();
            }
            else if (button == jbExchangeRateSystem) {
                actionExchangeRateSystem();
            }
            else if (button == jbExchangeRate) {
                actionExchangeRate();
            }

        }
    }
}
