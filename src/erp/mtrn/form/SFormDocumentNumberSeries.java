/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SFormDocumentNumberSeries.java
 *
 * Created on 7/07/2010, 09:32:42 AM
 */

package erp.mtrn.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataUtilities;
import erp.data.SProcConstants;
import erp.lib.SLibConstants;
import erp.lib.form.SFormComboBoxGroup;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.mtrn.data.SDataDiogDocumentNumberSeries;
import erp.mtrn.data.SDataDpsDocumentNumberSeries;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;

/**
 *
 * @author Alfonso Flores
 */
public class SFormDocumentNumberSeries extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mtrn.data.SDataDpsDocumentNumberSeries moDpsDocumentNumberSeries;
    private erp.mtrn.data.SDataDiogDocumentNumberSeries moDiogDocumentNumberSeries;
    private erp.lib.form.SFormComboBoxGroup moComboBoxGroup;
    private erp.lib.form.SFormField moFieldDocNumberSeries;
    private erp.lib.form.SFormField moFieldFkCategoryId;
    private erp.lib.form.SFormField moFieldFkClassId;
    private erp.lib.form.SFormField moFieldFkTypeId;
    private erp.lib.form.SFormField moFieldIsDeleted;

    private int mnParamDocumentType;

    /** Creates new form SFormDocumentNumberSeries */
    public SFormDocumentNumberSeries(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jlFkCategoryId = new javax.swing.JLabel();
        jcbFkCategoryId = new javax.swing.JComboBox();
        jlFkClassId = new javax.swing.JLabel();
        jcbFkClassId = new javax.swing.JComboBox();
        jlFkTypeId = new javax.swing.JLabel();
        jcbFkTypeId = new javax.swing.JComboBox();
        jlDocNumberSeries = new javax.swing.JLabel();
        jtfDocNumberSeries = new javax.swing.JTextField();
        jckIsDeleted = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Serie de folios de documentos");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setPreferredSize(new java.awt.Dimension(392, 33));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jPanel1.add(jbCancel);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.GridLayout(5, 2, 0, 1));

        jlFkCategoryId.setText("Categor√≠a de documento: *");
        jPanel3.add(jlFkCategoryId);

        jcbFkCategoryId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel3.add(jcbFkCategoryId);

        jlFkClassId.setText("Clase de documento: *");
        jPanel3.add(jlFkClassId);

        jcbFkClassId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel3.add(jcbFkClassId);

        jlFkTypeId.setText("Tipo de documento: *");
        jPanel3.add(jlFkTypeId);

        jcbFkTypeId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel3.add(jcbFkTypeId);

        jlDocNumberSeries.setText("Serie para folios de documentos:");
        jPanel3.add(jlDocNumberSeries);

        jtfDocNumberSeries.setText("DOC NUMBER SERIE");
        jPanel3.add(jtfDocNumberSeries);

        jckIsDeleted.setText("Registro eliminado");
        jPanel3.add(jckIsDeleted);

        jPanel2.add(jPanel3, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-400)/2, (screenSize.height-300)/2, 400, 300);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        mvFields = new Vector<SFormField>();

        moComboBoxGroup = new SFormComboBoxGroup(miClient);

        moFieldDocNumberSeries = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, false, jtfDocNumberSeries, jlDocNumberSeries);
        moFieldDocNumberSeries.setLengthMax(15);
        moFieldFkCategoryId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkCategoryId, jlFkCategoryId);
        moFieldFkClassId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkClassId, jlFkClassId);
        moFieldFkTypeId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkTypeId, jlFkTypeId);
        moFieldIsDeleted = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsDeleted);

        mvFields.add(moFieldDocNumberSeries);
        mvFields.add(moFieldFkCategoryId);
        mvFields.add(moFieldFkClassId);
        mvFields.add(moFieldFkTypeId);
        mvFields.add(moFieldIsDeleted);

        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction action = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), action, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            jcbFkCategoryId.requestFocus();
        }
    }

    private void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbOk;
    private javax.swing.JComboBox jcbFkCategoryId;
    private javax.swing.JComboBox jcbFkClassId;
    private javax.swing.JComboBox jcbFkTypeId;
    private javax.swing.JCheckBox jckIsDeleted;
    private javax.swing.JLabel jlDocNumberSeries;
    private javax.swing.JLabel jlFkCategoryId;
    private javax.swing.JLabel jlFkClassId;
    private javax.swing.JLabel jlFkTypeId;
    private javax.swing.JTextField jtfDocNumberSeries;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moDpsDocumentNumberSeries = null;
        moDiogDocumentNumberSeries = null;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        jckIsDeleted.setEnabled(false);
        jcbFkTypeId.setEnabled(mnParamDocumentType == SDataConstants.TRN_DNS_DPS || mnParamDocumentType == SDataConstants.TRN_DNS_DPS);
        moComboBoxGroup.reset();
    }

    @Override
    public void formRefreshCatalogues() {
        moComboBoxGroup.clear();

        switch (mnParamDocumentType) {
            case SDataConstants.TRN_DNS_DPS:
                moComboBoxGroup.addComboBox(SDataConstants.TRNS_CT_DPS, jcbFkCategoryId);
                moComboBoxGroup.addComboBox(SDataConstants.TRNS_CL_DPS, jcbFkClassId);
                moComboBoxGroup.addComboBox(SDataConstants.TRNU_TP_DPS, jcbFkTypeId);
                break;
            case SDataConstants.TRN_DNS_DIOG:
                moComboBoxGroup.addComboBox(SDataConstants.TRNS_CT_IOG, jcbFkCategoryId);
                moComboBoxGroup.addComboBox(SDataConstants.TRNS_CL_IOG, jcbFkClassId);
                jcbFkTypeId.removeAllItems();
                break;
            default:
        }
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();
        Object[] oParamsIn = null;

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        if (!validation.getIsError()) {
            switch (mnParamDocumentType) {
                case SDataConstants.TRN_DNS_DPS:
                    oParamsIn = new Object[] { moDpsDocumentNumberSeries == null ? 0 : moDpsDocumentNumberSeries.getPkDocNumberSeriesId(),
                    moFieldDocNumberSeries.getString(), moFieldFkTypeId.getKeyAsIntArray()[0], moFieldFkTypeId.getKeyAsIntArray()[1], moFieldFkTypeId.getKeyAsIntArray()[2] };
                    break;
                case SDataConstants.TRN_DNS_DIOG:
                    oParamsIn = new Object[] { moDiogDocumentNumberSeries == null ? 0 : moDiogDocumentNumberSeries.getPkDocNumberSeriesId(),
                    moFieldDocNumberSeries.getString(), moFieldFkClassId.getKeyAsIntArray()[0], moFieldFkClassId.getKeyAsIntArray()[1] };
                    break;
                default:
            }

            if (SDataUtilities.callProcedureVal(miClient, mnParamDocumentType == SDataConstants.TRN_DNS_DPS ? SProcConstants.TRN_DNS_DPS_VAL : SProcConstants.TRN_DNS_DIOG_VAL, oParamsIn, SLibConstants.EXEC_MODE_VERBOSE) > 0 ) {
                validation.setMessage("El valor del campo '" + jlDocNumberSeries.getText() + "' ya existe para el tipo de documento.");
                validation.setComponent(jtfDocNumberSeries);
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        switch (mnParamDocumentType) {
            case SDataConstants.TRN_DNS_DPS:
                moDpsDocumentNumberSeries = (SDataDpsDocumentNumberSeries) registry;
                moFieldDocNumberSeries.setFieldValue(moDpsDocumentNumberSeries.getDocNumberSeries());
                moFieldFkCategoryId.setFieldValue(new int[] { moDpsDocumentNumberSeries.getFkDpsCategoryId() });
                moFieldFkClassId.setFieldValue(new int[] { moDpsDocumentNumberSeries.getFkDpsCategoryId(), moDpsDocumentNumberSeries.getFkDpsClassId() });
                moFieldFkTypeId.setFieldValue(new int[] { moDpsDocumentNumberSeries.getFkDpsCategoryId(), moDpsDocumentNumberSeries.getFkDpsClassId(), moDpsDocumentNumberSeries.getFkDpsTypeId() });
                moFieldIsDeleted.setFieldValue(moDpsDocumentNumberSeries.getIsDeleted());

                jckIsDeleted.setEnabled(true);
                break;
            case SDataConstants.TRN_DNS_DIOG:
                moDiogDocumentNumberSeries = (SDataDiogDocumentNumberSeries) registry;
                moFieldDocNumberSeries.setFieldValue(moDiogDocumentNumberSeries.getDocNumberSeries());
                moFieldFkCategoryId.setFieldValue(new int[] { moDiogDocumentNumberSeries.getFkIogCategoryId() });
                moFieldFkClassId.setFieldValue(new int[] { moDiogDocumentNumberSeries.getFkIogCategoryId(), moDiogDocumentNumberSeries.getFkIogClassId() });
                moFieldIsDeleted.setFieldValue(moDiogDocumentNumberSeries.getIsDeleted());

                jckIsDeleted.setEnabled(true);
                break;
            default:
        }
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        switch (mnParamDocumentType) {
            case SDataConstants.TRN_DNS_DPS:
                if (moDpsDocumentNumberSeries == null) {
                    moDpsDocumentNumberSeries = new SDataDpsDocumentNumberSeries();
                    moDpsDocumentNumberSeries.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
                }
                else {
                    moDpsDocumentNumberSeries.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
                }

                moDpsDocumentNumberSeries.setDocNumberSeries(moFieldDocNumberSeries.getString());
                moDpsDocumentNumberSeries.setFkDpsCategoryId(moFieldFkTypeId.getKeyAsIntArray()[0]);
                moDpsDocumentNumberSeries.setFkDpsClassId(moFieldFkTypeId.getKeyAsIntArray()[1]);
                moDpsDocumentNumberSeries.setFkDpsTypeId(moFieldFkTypeId.getKeyAsIntArray()[2]);
                moDpsDocumentNumberSeries.setIsDeleted(moFieldIsDeleted.getBoolean());
                break;
            case SDataConstants.TRN_DNS_DIOG:
                if (moDiogDocumentNumberSeries == null) {
                    moDiogDocumentNumberSeries = new SDataDiogDocumentNumberSeries();
                    moDiogDocumentNumberSeries.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
                }
                else {
                    moDiogDocumentNumberSeries.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
                }

                moDiogDocumentNumberSeries.setDocNumberSeries(moFieldDocNumberSeries.getString());
                moDiogDocumentNumberSeries.setFkIogCategoryId(moFieldFkClassId.getKeyAsIntArray()[0]);
                moDiogDocumentNumberSeries.setFkIogClassId(moFieldFkClassId.getKeyAsIntArray()[1]);
                moDiogDocumentNumberSeries.setIsDeleted(moFieldIsDeleted.getBoolean());
                break;
            default:
        }

        return moDpsDocumentNumberSeries == null ? moDiogDocumentNumberSeries : moDpsDocumentNumberSeries;
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        if (type == SDataConstantsSys.VALUE_TYPE_DOC) {
            mnParamDocumentType = ((int[]) value)[0];
            switch (mnParamDocumentType) {
                case SDataConstants.TRN_DNS_DPS:
                    setTitle("Serie de docs. de C/V");
                    break;
                case SDataConstants.TRN_DNS_DIOG:
                    setTitle("Serie de docs. de inventarios");
                    break;
                default:
            }
        }
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
        }
    }
}
