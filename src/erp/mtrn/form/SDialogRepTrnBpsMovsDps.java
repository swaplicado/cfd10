/*
 * DFormCompany.java
 *
 * Created on 19 de agosto de 2008, 11:10 AM
 */

package erp.mtrn.form;

import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Map;
import java.util.Vector;
import javax.swing.AbstractAction;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataUtilities;
import erp.lib.form.SFormField;
import erp.lib.form.SFormOptionPickerInterface;
import erp.lib.form.SFormValidation;
import erp.lib.form.SFormUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibTimeUtilities;
import erp.mbps.data.SDataBizPartner;
import erp.lib.SLibUtilities;

import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author  Néstor Ávalos
 */
public class SDialogRepTrnBpsMovsDps extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.lib.form.SFormField moFieldFkBizPartnerId;
    private erp.lib.form.SFormField moFieldFkCobId;
    private erp.lib.form.SFormField moFieldDateCut;

    private erp.mbps.data.SDataBizPartner moBizPartner;

    private int mnParamFkBizPartnerId;
    private int mnParamCategoryBp;
    private int mnParamTpSysMov;
    private int mnParamCtSysMov;

    /** Creates new form DFormCompany */
    public SDialogRepTrnBpsMovsDps(erp.client.SClientInterface client, int nType) {
        super(client.getFrame(), true);
        miClient = client;

        initComponents();
        initComponentsExtra();

        setModalityType(ModalityType.MODELESS);
        formReset();
        setValue(1, nType);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgCurrency = new javax.swing.ButtonGroup();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jpData = new javax.swing.JPanel();
        jpReg = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlDateStart = new javax.swing.JLabel();
        jPanel38 = new javax.swing.JPanel();
        jtfDateStart = new javax.swing.JFormattedTextField();
        jpStartDate = new javax.swing.JPanel();
        jbDateCut = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jPanel42 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jlFkCobId = new javax.swing.JLabel();
        jPanel99 = new javax.swing.JPanel();
        jcbFkCobId = new javax.swing.JComboBox();
        jPanel9 = new javax.swing.JPanel();
        jbFkCobId = new javax.swing.JButton();
        jPanel98 = new javax.swing.JPanel();
        jlFkBizPartnerId = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jbFkBizPartnerId = new javax.swing.JButton();
        jcbFkBizPartnerId = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jbReport = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Movimientos contables de "); // NOI18N
        setModal(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpData.setLayout(new java.awt.BorderLayout());

        jpReg.setBorder(javax.swing.BorderFactory.createTitledBorder("Configuración del reporte:"));
        jpReg.setLayout(new java.awt.BorderLayout(5, 5));

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Período:"));
        jPanel8.setLayout(new java.awt.GridLayout(1, 1, 5, 2));

        jPanel4.setLayout(new java.awt.BorderLayout(0, 2));

        jlDateStart.setText("Fecha de corte: *");
        jlDateStart.setPreferredSize(new java.awt.Dimension(100, 14));
        jPanel4.add(jlDateStart, java.awt.BorderLayout.WEST);

        jPanel38.setLayout(new java.awt.BorderLayout(2, 0));

        jtfDateStart.setText("dd/mm/yyyy");
        jtfDateStart.setPreferredSize(new java.awt.Dimension(75, 20));
        jPanel38.add(jtfDateStart, java.awt.BorderLayout.WEST);

        jpStartDate.setLayout(new java.awt.BorderLayout(2, 0));

        jbDateCut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbDateCut.setToolTipText("Seleccionar fecha de corte");
        jbDateCut.setPreferredSize(new java.awt.Dimension(23, 23));
        jpStartDate.add(jbDateCut, java.awt.BorderLayout.WEST);

        jPanel38.add(jpStartDate, java.awt.BorderLayout.CENTER);

        jPanel4.add(jPanel38, java.awt.BorderLayout.CENTER);

        jPanel8.add(jPanel4);

        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel42.setLayout(new java.awt.BorderLayout(2, 0));
        jPanel5.add(jPanel42, java.awt.BorderLayout.CENTER);

        jPanel8.add(jPanel5);

        jpReg.add(jPanel8, java.awt.BorderLayout.PAGE_START);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Filtro:"));
        jPanel3.setLayout(new java.awt.GridLayout(6, 1, 0, 2));

        jPanel7.setLayout(new java.awt.BorderLayout());

        jlFkCobId.setText("Sucursal: *");
        jlFkCobId.setPreferredSize(new java.awt.Dimension(100, 14));
        jPanel7.add(jlFkCobId, java.awt.BorderLayout.WEST);

        jPanel99.setLayout(new java.awt.BorderLayout(2, 5));

        jcbFkCobId.setPreferredSize(new java.awt.Dimension(350, 23));
        jPanel99.add(jcbFkCobId, java.awt.BorderLayout.WEST);

        jPanel9.setLayout(new java.awt.BorderLayout(5, 5));

        jbFkCobId.setText("...");
        jbFkCobId.setToolTipText("Seleccionar sucursal");
        jbFkCobId.setFocusable(false);
        jbFkCobId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel9.add(jbFkCobId, java.awt.BorderLayout.WEST);

        jPanel99.add(jPanel9, java.awt.BorderLayout.CENTER);

        jPanel7.add(jPanel99, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel7);

        jPanel98.setLayout(new java.awt.BorderLayout(0, 5));

        jlFkBizPartnerId.setText("[Asoc. de neg.:]");
        jlFkBizPartnerId.setPreferredSize(new java.awt.Dimension(100, 14));
        jPanel98.add(jlFkBizPartnerId, java.awt.BorderLayout.WEST);

        jPanel10.setLayout(new java.awt.BorderLayout(2, 0));

        jPanel6.setLayout(new java.awt.BorderLayout(5, 5));

        jbFkBizPartnerId.setText("...");
        jbFkBizPartnerId.setToolTipText("Seleccionar proveedor");
        jbFkBizPartnerId.setFocusable(false);
        jbFkBizPartnerId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel6.add(jbFkBizPartnerId, java.awt.BorderLayout.WEST);

        jPanel10.add(jPanel6, java.awt.BorderLayout.CENTER);

        jcbFkBizPartnerId.setPreferredSize(new java.awt.Dimension(350, 23));
        jcbFkBizPartnerId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbFkBizPartnerIdItemStateChanged(evt);
            }
        });
        jPanel10.add(jcbFkBizPartnerId, java.awt.BorderLayout.WEST);

        jPanel98.add(jPanel10, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel98);

        jpReg.add(jPanel3, java.awt.BorderLayout.PAGE_END);

        jpData.add(jpReg, java.awt.BorderLayout.PAGE_START);

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jpData.add(jPanel1, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jpData, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbReport.setText("Imprimir");
        jbReport.setToolTipText("[Ctrl + Enter]");
        jbReport.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel2.add(jbReport);

        jbCancel.setText("Cerrar"); // NOI18N
        jbCancel.setToolTipText("[Escape]");
        jbCancel.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel2.add(jbCancel);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        setSize(new java.awt.Dimension(522, 344));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void jcbFkBizPartnerIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbFkBizPartnerIdItemStateChanged
        itemStateChangedFkBizPartnerId();
}//GEN-LAST:event_jcbFkBizPartnerIdItemStateChanged

    private void initComponentsExtra() {
        mvFields = new Vector<SFormField>();

        moFieldDateCut = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jtfDateStart, jlDateStart);
        moFieldDateCut.setPickerButton(jbDateCut);
        moFieldFkCobId = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkCobId, jlFkCobId);
        moFieldFkCobId.setPickerButton(jbFkCobId);
        moFieldFkBizPartnerId = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkBizPartnerId, jlFkBizPartnerId);
        moFieldFkBizPartnerId.setPickerButton(jbFkBizPartnerId);

        mvFields.add(moFieldDateCut);
        mvFields.add(moFieldFkCobId);
        mvFields.add(moFieldFkBizPartnerId);

        jbCancel.addActionListener(this);
        jbDateCut.addActionListener(this);
        jbFkBizPartnerId.addActionListener(this);
        jbFkCobId.addActionListener(this);
        jbReport.addActionListener(this);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionReport(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);

        setModalityType(ModalityType.MODELESS);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            jtfDateStart.requestFocus();
        }
    }

    private void itemStateChangedFkBizPartnerId() {
        if (jcbFkBizPartnerId.getSelectedIndex() > 0) {
            mnParamFkBizPartnerId = moFieldFkBizPartnerId.getKeyAsIntArray()[0];
            moBizPartner = (SDataBizPartner) SDataUtilities.readRegistry(miClient, SDataConstants.BPSU_BP, moFieldFkBizPartnerId.getKey(), SLibConstants.EXEC_MODE_VERBOSE);
        }
    }

    private void actionFkBizPartnerId() {
        SFormOptionPickerInterface picker = null;

        switch (mnParamCategoryBp) {
            case SDataConstantsSys.BPSS_CT_BP_SUP:
                picker = miClient.getOptionPicker(SDataConstants.BPSX_BP_SUP);
                break;
            case SDataConstantsSys.BPSS_CT_BP_CUS:
                picker = miClient.getOptionPicker(SDataConstants.BPSX_BP_CUS);
                break;
        }

        if (picker != null) {
            picker.formRefreshOptionPane();
            picker.formReset();
            picker.setSelectedPrimaryKey(new int[] { mnParamFkBizPartnerId });
            picker.setFormVisible(true);

            if (picker.getFormResult() == SLibConstants.FORM_RESULT_OK) {
                moFieldFkBizPartnerId.setKey(picker.getSelectedPrimaryKey());
                mnParamFkBizPartnerId = ((int [])picker.getSelectedPrimaryKey())[0];

                if (moBizPartner != null) {
                    moBizPartner = (SDataBizPartner) SDataUtilities.readRegistry(miClient, SDataConstants.BPSU_BP, new int[] { mnParamFkBizPartnerId }, SLibConstants.EXEC_MODE_VERBOSE);
                }

                jcbFkBizPartnerId.requestFocus();
            }
        }
    }

    private void actionFkCobId() {
        miClient.pickOption(SDataConstants.BPSU_BPB, moFieldFkCobId, new int[] { miClient.getSessionXXX().getCompany().getPkCompanyId() });
    }

    private void actionDateCut() {
        miClient.getGuiDatePickerXXX().formReset();
        miClient.getGuiDatePickerXXX().setDate(moFieldDateCut.getDate());
        miClient.getGuiDatePickerXXX().setVisible(true);

        if (miClient.getGuiDatePickerXXX().getFormResult() == SLibConstants.FORM_RESULT_OK) {
            moFieldDateCut.setDate(miClient.getGuiDatePickerXXX().getGuiDate());
            jtfDateStart.requestFocus();
        }
    }

    @SuppressWarnings("unchecked")
    private void actionReport() {
        Cursor oCursor = getCursor();
        JasperPrint oPrint = null;
        JasperViewer oViewer = null;
        Map<String, Object> oMap = null;

        SFormValidation validation = new SFormValidation();

        validation = formValidate();
        if (!validation.getIsError()) {

            try {
                setCursor(new Cursor(Cursor.WAIT_CURSOR));

                // Report params:

                oMap = miClient.createReportParams();
                oMap.put("sReportTitle", this.getTitle().toUpperCase());
                oMap.put("sCob", jcbFkCobId.getSelectedItem().toString());
                oMap.put("sBp", jcbFkBizPartnerId.getSelectedItem().toString());
                oMap.put("sBpTitle", mnParamCategoryBp == SDataConstantsSys.BPSS_CT_BP_SUP ? "PROVEEDOR: " : "CLIENTE: ");
                oMap.put("nFkYearId", SLibTimeUtilities.digestYear(moFieldDateCut.getDate())[0]);
                oMap.put("tDateCut", moFieldDateCut.getDate());
                oMap.put("nFkCtSysMovId", mnParamCtSysMov);
                oMap.put("nFkTpSysMovId", mnParamTpSysMov);
                oMap.put("nFkCobId", moFieldFkCobId.getKeyAsIntArray()[0]);
                oMap.put("nFkBpId", moFieldFkBizPartnerId.getKeyAsIntArray()[0]);
                oMap.put("nFkCtBpId", mnParamCategoryBp);
                oMap.put("nNumRecordLength", SDataConstantsSys.NUM_LEN_FIN_REC);
                oMap.put("sCurrency", miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getCurrency());
                oMap.put("sKey", miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getKey());
                oMap.put("nErpCurId", miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getPkCurrencyId());

                // Report view:

                oPrint = SDataUtilities.fillReport(miClient, SDataConstantsSys.REP_TRN_BPS_MOV_DPS, oMap);
                oViewer = new JasperViewer(oPrint, false);
                oViewer.setTitle("Reporte de " + this.getTitle().toLowerCase());
                oViewer.setVisible(true);
            }
            catch(Exception e) {
                SLibUtilities.renderException(this, e);
            }
            finally {
                setCursor(oCursor);
            }
        }
    }

    private void actionEdit(boolean edit) {

    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgCurrency;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel38;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel42;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPanel jPanel98;
    private javax.swing.JPanel jPanel99;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbDateCut;
    private javax.swing.JButton jbFkBizPartnerId;
    private javax.swing.JButton jbFkCobId;
    private javax.swing.JButton jbReport;
    private javax.swing.JComboBox jcbFkBizPartnerId;
    private javax.swing.JComboBox jcbFkCobId;
    private javax.swing.JLabel jlDateStart;
    private javax.swing.JLabel jlFkBizPartnerId;
    private javax.swing.JLabel jlFkCobId;
    private javax.swing.JPanel jpData;
    private javax.swing.JPanel jpReg;
    private javax.swing.JPanel jpStartDate;
    private javax.swing.JFormattedTextField jtfDateStart;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        moFieldDateCut.setDate(miClient.getSessionXXX().getWorkingDate());
    }

    @Override
    @SuppressWarnings("unchecked")
    public void formRefreshCatalogues() {
        SFormUtilities.populateComboBox(miClient, jcbFkCobId, SDataConstants.BPSU_BPB, new int[] { miClient.getSessionXXX().getCompany().getPkCompanyId() });

        switch (mnParamCategoryBp) {
            case SDataConstantsSys.BPSS_CT_BP_SUP:
                SFormUtilities.populateComboBox(miClient, jcbFkBizPartnerId, SDataConstants.BPSX_BP_SUP);
                break;
            case SDataConstantsSys.BPSS_CT_BP_CUS:
                SFormUtilities.populateComboBox(miClient, jcbFkBizPartnerId, SDataConstants.BPSX_BP_CUS);
                break;
        }
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {

    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {

        return null;
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        switch (type) {
            case 1:
                mnParamCategoryBp = (Integer) value;
                switch (mnParamCategoryBp) {
                    case SDataConstantsSys.BPSS_CT_BP_SUP:
                        jlFkBizPartnerId.setText("Proveedor: *");
                        this.setTitle(this.getTitle() + "proveedores");
                        jbFkBizPartnerId.setToolTipText("Seleccionar proveedor");
                        mnParamCtSysMov = SDataConstantsSys.FINS_TP_SYS_MOV_BPS_SUP[0];
                        mnParamTpSysMov = SDataConstantsSys.FINS_TP_SYS_MOV_BPS_SUP[1];
                        break;
                    case SDataConstantsSys.BPSS_CT_BP_CUS:
                        jlFkBizPartnerId.setText("Cliente: *");
                        this.setTitle(this.getTitle() + "clientes");
                        jbFkBizPartnerId.setToolTipText("Seleccionar cliente");
                        mnParamCtSysMov = SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CUS[0];
                        mnParamTpSysMov = SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CUS[1];
                        break;
                }
                mvFields.get(2).setFieldName(jlFkBizPartnerId.getText());
                formRefreshCatalogues();

                if (miClient.getSessionXXX().getCurrentCompanyBranch() != null)
                    moFieldFkCobId.setKey(miClient.getSessionXXX().getCurrentCompanyBranch().getPrimaryKey());
                break;
        }
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbDateCut) {
                actionDateCut();
            }
            else if (button == jbReport) {
                actionReport();
            }
            else if (button == jbFkBizPartnerId) {
                actionFkBizPartnerId();
            }
            else if (button == jbFkCobId) {
                actionFkCobId();
            }
        }
    }
}
