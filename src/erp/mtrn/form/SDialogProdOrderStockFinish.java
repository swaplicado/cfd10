/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mtrn.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibTimeUtilities;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STableConstants;
import erp.lib.table.STablePane;
import erp.lib.table.STableRow;
import erp.mbps.data.SDataBizPartnerBranch;
import erp.mcfg.data.SDataCompanyBranchEntity;
import erp.mitm.data.SDataItem;
import erp.mitm.data.SDataUnit;
import erp.mmfg.data.SDataProductionOrder;
import erp.mtrn.data.SDataDiog;
import erp.mtrn.data.SDataDiogEntry;
import erp.mtrn.data.SDataStockLot;
import erp.mtrn.data.STrnProdOrderStockFinishRow;
import erp.mtrn.data.STrnStockMove;
import erp.mtrn.data.STrnUtilities;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;

/**
 *
 * @author Sergio Flores
 */
public class SDialogProdOrderStockFinish extends javax.swing.JDialog implements ActionListener, CellEditorListener {

    private static final int COL_QTY = 4;

    private int mnFormResult;
    private int mnFormStatus;
    private int mnFormMode;
    private boolean mbFirstTime;
    private erp.client.SClientInterface miClient;
    private erp.lib.table.STablePane moPaneProdOrderDestinyEntries;
    private erp.mtrn.form.SDialogPickerStockLots moPickerStockLots;
    private erp.lib.form.SFormField moFieldQuantityToFinish;

    private int mnYear;
    private int[] manWarehouseSourceKey;
    private int[] manWarehouseDestinyKey;
    private double mdQuantityFinished;
    private double mdQuantityPending;
    private double mdQuantityToFinish;
    private erp.mbps.data.SDataBizPartnerBranch moCompanyBranchSource;
    private erp.mbps.data.SDataBizPartnerBranch moCompanyBranchDestiny;
    private erp.mcfg.data.SDataCompanyBranchEntity moWarehouseSource;
    private erp.mcfg.data.SDataCompanyBranchEntity moWarehouseDestiny;
    private erp.mtrn.data.SDataDiog moParamDiog;
    private erp.mmfg.data.SDataProductionOrder moParamProdOrderSource;
    private erp.mmfg.data.SDataProductionOrder moParamProdOrderDestiny;

    /** Creates new form SDialogProdOrderStockFinish
     * @param client GUI client interface.
     * @param mode Dialog mode (item assignations or returns). Constants defined in SLibConstants (i.e. MODE_STK_ASD, MODE_STK_RET).
     */
    public SDialogProdOrderStockFinish(erp.client.SClientInterface client, int mode) {
        super(client.getFrame(), true);

        miClient = client;
        mnFormMode = mode;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpProductionOrderSource = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jlProdOrderSource = new javax.swing.JLabel();
        jtfProdOrderSourceNumber = new javax.swing.JTextField();
        jtfProdOrderSourceType = new javax.swing.JTextField();
        jlProdOrderSourceDate = new javax.swing.JLabel();
        jtfProdOrderSourceDate = new javax.swing.JTextField();
        jlProdOrderSourceDateDelivery = new javax.swing.JLabel();
        jtfProdOrderSourceDateDelivery = new javax.swing.JTextField();
        jPanel10 = new javax.swing.JPanel();
        jlItemSource = new javax.swing.JLabel();
        jtfItemSourceCode = new javax.swing.JTextField();
        jtfItemSource = new javax.swing.JTextField();
        jlQuantitySource = new javax.swing.JLabel();
        jtfQuantitySource = new javax.swing.JTextField();
        jtfQuantitySourceUnit = new javax.swing.JTextField();
        jPanel11 = new javax.swing.JPanel();
        jlStockLotSource = new javax.swing.JLabel();
        jtfStockLotSource = new javax.swing.JTextField();
        jtfStockLotSourceDateExpiration = new javax.swing.JTextField();
        jpProductionOrderDestiny = new javax.swing.JPanel();
        jpWarehouses = new javax.swing.JPanel();
        jpWarehouseControls = new javax.swing.JPanel();
        jpWarehouseSource = new javax.swing.JPanel();
        jlWarehouseSource = new javax.swing.JLabel();
        jtfCompanyBranchSource = new javax.swing.JTextField();
        jtfCompanyBranchSourceCode = new javax.swing.JTextField();
        jtfWarehouseSource = new javax.swing.JTextField();
        jtfWarehouseSourceCode = new javax.swing.JTextField();
        jpDpsEntriesControls1 = new javax.swing.JPanel();
        jbFinishAll = new javax.swing.JButton();
        jbCleanAll = new javax.swing.JButton();
        jpWarehouseDestiny = new javax.swing.JPanel();
        jlWarehouseDestiny = new javax.swing.JLabel();
        jtfCompanyBranchDestiny = new javax.swing.JTextField();
        jtfCompanyBranchDestinyCode = new javax.swing.JTextField();
        jtfWarehouseDestiny = new javax.swing.JTextField();
        jtfWarehouseDestinyCode = new javax.swing.JTextField();
        jpWarehouseDestiny1 = new javax.swing.JPanel();
        jlQuantityToFinish = new javax.swing.JLabel();
        jtfQuantityToFinish = new javax.swing.JTextField();
        jtfQuantityToFinishUnit = new javax.swing.JTextField();
        jpWarehouseDestiny2 = new javax.swing.JPanel();
        jlProdOrderDestiny = new javax.swing.JLabel();
        jtfProdOrderDestinyNumber = new javax.swing.JTextField();
        jtfProdOrderDestinyType = new javax.swing.JTextField();
        jlProdOrderDestinyDate = new javax.swing.JLabel();
        jtfProdOrderDestinyDate = new javax.swing.JTextField();
        jlProdOrderDestinyDateDelivery = new javax.swing.JLabel();
        jtfProdOrderDestinyDateDelivery = new javax.swing.JTextField();
        jPanel12 = new javax.swing.JPanel();
        jlItemDestiny = new javax.swing.JLabel();
        jtfItemDestinyCode = new javax.swing.JTextField();
        jtfItemDestiny = new javax.swing.JTextField();
        jlQuantityDestiny = new javax.swing.JLabel();
        jtfQuantityDestiny = new javax.swing.JTextField();
        jtfQuantityDestinyUnit = new javax.swing.JTextField();
        jpDiogEntriesInfo = new javax.swing.JPanel();
        jpDiogEntriesInfo1 = new javax.swing.JPanel();
        jpDiogEntriesInfo11 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlQuantityRequired = new javax.swing.JLabel();
        jtfQuantityRequired = new javax.swing.JTextField();
        jtfQuantityRequiredUnit = new javax.swing.JTextField();
        jtfQuantityRequiredPerc = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jlQuantityFinished = new javax.swing.JLabel();
        jtfQuantityFinished = new javax.swing.JTextField();
        jtfQuantityFinishedUnit = new javax.swing.JTextField();
        jtfQuantityFinishedPerc = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jlQuantityPending = new javax.swing.JLabel();
        jtfQuantityPending = new javax.swing.JTextField();
        jtfQuantityPendingUnit = new javax.swing.JTextField();
        jtfQuantityPendingPerc = new javax.swing.JTextField();
        jpDiogEntriesInfo2 = new javax.swing.JPanel();
        jpDiogEntriesInfo21 = new javax.swing.JPanel();
        jlStock = new javax.swing.JLabel();
        jtfStock = new javax.swing.JTextField();
        jtfStockUnit = new javax.swing.JTextField();
        jbViewLots = new javax.swing.JButton();
        jpDiogEntriesInfo22 = new javax.swing.JPanel();
        jlCurrentlyUsed = new javax.swing.JLabel();
        jtfCurrentlyUsed = new javax.swing.JTextField();
        jtfCurrentlyUsedUnit = new javax.swing.JTextField();
        jpDiogEntriesInfo23 = new javax.swing.JPanel();
        jlAvailable = new javax.swing.JLabel();
        jtfAvailable = new javax.swing.JTextField();
        jtfAvailableUnit = new javax.swing.JTextField();
        jlYear = new javax.swing.JLabel();
        jtfYear = new javax.swing.JTextField();
        jpControls = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Entrega de materiales");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpProductionOrderSource.setBorder(javax.swing.BorderFactory.createTitledBorder("Orden de producci√≥n:"));
        jpProductionOrderSource.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlProdOrderSource.setText("Ord. prod. origen:");
        jlProdOrderSource.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlProdOrderSource);

        jtfProdOrderSourceNumber.setEditable(false);
        jtfProdOrderSourceNumber.setText("TEXT");
        jtfProdOrderSourceNumber.setFocusable(false);
        jtfProdOrderSourceNumber.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jtfProdOrderSourceNumber);

        jtfProdOrderSourceType.setEditable(false);
        jtfProdOrderSourceType.setText("TEXT");
        jtfProdOrderSourceType.setFocusable(false);
        jtfProdOrderSourceType.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel3.add(jtfProdOrderSourceType);

        jlProdOrderSourceDate.setText("Fecha orden:");
        jlProdOrderSourceDate.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel3.add(jlProdOrderSourceDate);

        jtfProdOrderSourceDate.setEditable(false);
        jtfProdOrderSourceDate.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtfProdOrderSourceDate.setText("00/00/0000");
        jtfProdOrderSourceDate.setFocusable(false);
        jtfProdOrderSourceDate.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel3.add(jtfProdOrderSourceDate);

        jlProdOrderSourceDateDelivery.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlProdOrderSourceDateDelivery.setText("Fecha entrega:");
        jlProdOrderSourceDateDelivery.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlProdOrderSourceDateDelivery);

        jtfProdOrderSourceDateDelivery.setEditable(false);
        jtfProdOrderSourceDateDelivery.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtfProdOrderSourceDateDelivery.setText("00/00/0000");
        jtfProdOrderSourceDateDelivery.setFocusable(false);
        jtfProdOrderSourceDateDelivery.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel3.add(jtfProdOrderSourceDateDelivery);

        jpProductionOrderSource.add(jPanel3);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItemSource.setText("Producto origen:");
        jlItemSource.setFocusable(false);
        jlItemSource.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jlItemSource);

        jtfItemSourceCode.setEditable(false);
        jtfItemSourceCode.setText("TEXT");
        jtfItemSourceCode.setFocusable(false);
        jtfItemSourceCode.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jtfItemSourceCode);

        jtfItemSource.setEditable(false);
        jtfItemSource.setText("TEXT");
        jtfItemSource.setFocusable(false);
        jtfItemSource.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel10.add(jtfItemSource);

        jlQuantitySource.setText("Cant. origen:");
        jlQuantitySource.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel10.add(jlQuantitySource);

        jtfQuantitySource.setEditable(false);
        jtfQuantitySource.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfQuantitySource.setText("0.000");
        jtfQuantitySource.setFocusable(false);
        jtfQuantitySource.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jtfQuantitySource);

        jtfQuantitySourceUnit.setEditable(false);
        jtfQuantitySourceUnit.setText("UNIT");
        jtfQuantitySourceUnit.setFocusable(false);
        jtfQuantitySourceUnit.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel10.add(jtfQuantitySourceUnit);

        jpProductionOrderSource.add(jPanel10);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlStockLotSource.setText("Lote / caducidad:");
        jlStockLotSource.setFocusable(false);
        jlStockLotSource.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlStockLotSource);

        jtfStockLotSource.setEditable(false);
        jtfStockLotSource.setText("TEXT");
        jtfStockLotSource.setFocusable(false);
        jtfStockLotSource.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jtfStockLotSource);

        jtfStockLotSourceDateExpiration.setEditable(false);
        jtfStockLotSourceDateExpiration.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtfStockLotSourceDateExpiration.setText("00/00/0000");
        jtfStockLotSourceDateExpiration.setFocusable(false);
        jtfStockLotSourceDateExpiration.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel11.add(jtfStockLotSourceDateExpiration);

        jpProductionOrderSource.add(jPanel11);

        getContentPane().add(jpProductionOrderSource, java.awt.BorderLayout.PAGE_START);

        jpProductionOrderDestiny.setBorder(javax.swing.BorderFactory.createTitledBorder("Unidades pendientes de la orden de producci√≥n:"));
        jpProductionOrderDestiny.setLayout(new java.awt.BorderLayout(0, 5));

        jpWarehouses.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        jpWarehouseControls.setLayout(new java.awt.BorderLayout());

        jpWarehouseSource.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWarehouseSource.setText("Almac√©n origen:");
        jlWarehouseSource.setPreferredSize(new java.awt.Dimension(100, 23));
        jpWarehouseSource.add(jlWarehouseSource);

        jtfCompanyBranchSource.setBackground(java.awt.Color.lightGray);
        jtfCompanyBranchSource.setEditable(false);
        jtfCompanyBranchSource.setText("TEXT");
        jtfCompanyBranchSource.setFocusable(false);
        jtfCompanyBranchSource.setPreferredSize(new java.awt.Dimension(100, 23));
        jpWarehouseSource.add(jtfCompanyBranchSource);

        jtfCompanyBranchSourceCode.setBackground(java.awt.Color.lightGray);
        jtfCompanyBranchSourceCode.setEditable(false);
        jtfCompanyBranchSourceCode.setText("CODE");
        jtfCompanyBranchSourceCode.setFocusable(false);
        jtfCompanyBranchSourceCode.setPreferredSize(new java.awt.Dimension(55, 23));
        jpWarehouseSource.add(jtfCompanyBranchSourceCode);

        jtfWarehouseSource.setBackground(java.awt.Color.lightGray);
        jtfWarehouseSource.setEditable(false);
        jtfWarehouseSource.setText("TEXT");
        jtfWarehouseSource.setFocusable(false);
        jtfWarehouseSource.setPreferredSize(new java.awt.Dimension(155, 23));
        jpWarehouseSource.add(jtfWarehouseSource);

        jtfWarehouseSourceCode.setBackground(java.awt.Color.lightGray);
        jtfWarehouseSourceCode.setEditable(false);
        jtfWarehouseSourceCode.setText("CODE");
        jtfWarehouseSourceCode.setFocusable(false);
        jtfWarehouseSourceCode.setPreferredSize(new java.awt.Dimension(55, 23));
        jpWarehouseSource.add(jtfWarehouseSourceCode);

        jpWarehouseControls.add(jpWarehouseSource, java.awt.BorderLayout.CENTER);

        jpDpsEntriesControls1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));

        jbFinishAll.setText("Entregar todo");
        jbFinishAll.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbFinishAll.setPreferredSize(new java.awt.Dimension(100, 23));
        jpDpsEntriesControls1.add(jbFinishAll);

        jbCleanAll.setText("Limpiar todo");
        jbCleanAll.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbCleanAll.setPreferredSize(new java.awt.Dimension(100, 23));
        jpDpsEntriesControls1.add(jbCleanAll);

        jpWarehouseControls.add(jpDpsEntriesControls1, java.awt.BorderLayout.EAST);

        jpWarehouses.add(jpWarehouseControls);

        jpWarehouseDestiny.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWarehouseDestiny.setText("Almac√©n destino:");
        jlWarehouseDestiny.setPreferredSize(new java.awt.Dimension(100, 23));
        jpWarehouseDestiny.add(jlWarehouseDestiny);

        jtfCompanyBranchDestiny.setBackground(java.awt.Color.lightGray);
        jtfCompanyBranchDestiny.setEditable(false);
        jtfCompanyBranchDestiny.setText("TEXT");
        jtfCompanyBranchDestiny.setFocusable(false);
        jtfCompanyBranchDestiny.setPreferredSize(new java.awt.Dimension(100, 23));
        jpWarehouseDestiny.add(jtfCompanyBranchDestiny);

        jtfCompanyBranchDestinyCode.setBackground(java.awt.Color.lightGray);
        jtfCompanyBranchDestinyCode.setEditable(false);
        jtfCompanyBranchDestinyCode.setText("CODE");
        jtfCompanyBranchDestinyCode.setFocusable(false);
        jtfCompanyBranchDestinyCode.setPreferredSize(new java.awt.Dimension(55, 23));
        jpWarehouseDestiny.add(jtfCompanyBranchDestinyCode);

        jtfWarehouseDestiny.setBackground(java.awt.Color.lightGray);
        jtfWarehouseDestiny.setEditable(false);
        jtfWarehouseDestiny.setText("TEXT");
        jtfWarehouseDestiny.setFocusable(false);
        jtfWarehouseDestiny.setPreferredSize(new java.awt.Dimension(155, 23));
        jpWarehouseDestiny.add(jtfWarehouseDestiny);

        jtfWarehouseDestinyCode.setBackground(java.awt.Color.lightGray);
        jtfWarehouseDestinyCode.setEditable(false);
        jtfWarehouseDestinyCode.setText("CODE");
        jtfWarehouseDestinyCode.setFocusable(false);
        jtfWarehouseDestinyCode.setPreferredSize(new java.awt.Dimension(55, 23));
        jpWarehouseDestiny.add(jtfWarehouseDestinyCode);

        jpWarehouses.add(jpWarehouseDestiny);

        jpWarehouseDestiny1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlQuantityToFinish.setText("Cant. a entregar:");
        jlQuantityToFinish.setPreferredSize(new java.awt.Dimension(100, 23));
        jpWarehouseDestiny1.add(jlQuantityToFinish);

        jtfQuantityToFinish.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfQuantityToFinish.setText("0.000");
        jtfQuantityToFinish.setPreferredSize(new java.awt.Dimension(125, 23));
        jpWarehouseDestiny1.add(jtfQuantityToFinish);

        jtfQuantityToFinishUnit.setEditable(false);
        jtfQuantityToFinishUnit.setText("UNIT");
        jtfQuantityToFinishUnit.setFocusable(false);
        jtfQuantityToFinishUnit.setPreferredSize(new java.awt.Dimension(40, 23));
        jpWarehouseDestiny1.add(jtfQuantityToFinishUnit);

        jpWarehouses.add(jpWarehouseDestiny1);

        jpWarehouseDestiny2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlProdOrderDestiny.setText("Ord. prod. destino:");
        jlProdOrderDestiny.setPreferredSize(new java.awt.Dimension(100, 23));
        jpWarehouseDestiny2.add(jlProdOrderDestiny);

        jtfProdOrderDestinyNumber.setEditable(false);
        jtfProdOrderDestinyNumber.setText("TEXT");
        jtfProdOrderDestinyNumber.setFocusable(false);
        jtfProdOrderDestinyNumber.setPreferredSize(new java.awt.Dimension(100, 23));
        jpWarehouseDestiny2.add(jtfProdOrderDestinyNumber);

        jtfProdOrderDestinyType.setEditable(false);
        jtfProdOrderDestinyType.setText("TEXT");
        jtfProdOrderDestinyType.setFocusable(false);
        jtfProdOrderDestinyType.setPreferredSize(new java.awt.Dimension(300, 23));
        jpWarehouseDestiny2.add(jtfProdOrderDestinyType);

        jlProdOrderDestinyDate.setText("Fecha orden:");
        jlProdOrderDestinyDate.setPreferredSize(new java.awt.Dimension(85, 23));
        jpWarehouseDestiny2.add(jlProdOrderDestinyDate);

        jtfProdOrderDestinyDate.setEditable(false);
        jtfProdOrderDestinyDate.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtfProdOrderDestinyDate.setText("00/00/0000");
        jtfProdOrderDestinyDate.setFocusable(false);
        jtfProdOrderDestinyDate.setPreferredSize(new java.awt.Dimension(75, 23));
        jpWarehouseDestiny2.add(jtfProdOrderDestinyDate);

        jlProdOrderDestinyDateDelivery.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlProdOrderDestinyDateDelivery.setText("Fecha entrega:");
        jlProdOrderDestinyDateDelivery.setPreferredSize(new java.awt.Dimension(100, 23));
        jpWarehouseDestiny2.add(jlProdOrderDestinyDateDelivery);

        jtfProdOrderDestinyDateDelivery.setEditable(false);
        jtfProdOrderDestinyDateDelivery.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtfProdOrderDestinyDateDelivery.setText("00/00/0000");
        jtfProdOrderDestinyDateDelivery.setFocusable(false);
        jtfProdOrderDestinyDateDelivery.setPreferredSize(new java.awt.Dimension(75, 23));
        jpWarehouseDestiny2.add(jtfProdOrderDestinyDateDelivery);

        jpWarehouses.add(jpWarehouseDestiny2);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItemDestiny.setText("Producto destino:");
        jlItemDestiny.setFocusable(false);
        jlItemDestiny.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jlItemDestiny);

        jtfItemDestinyCode.setEditable(false);
        jtfItemDestinyCode.setText("TEXT");
        jtfItemDestinyCode.setFocusable(false);
        jtfItemDestinyCode.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jtfItemDestinyCode);

        jtfItemDestiny.setEditable(false);
        jtfItemDestiny.setText("TEXT");
        jtfItemDestiny.setFocusable(false);
        jtfItemDestiny.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel12.add(jtfItemDestiny);

        jlQuantityDestiny.setText("Cant. destino:");
        jlQuantityDestiny.setPreferredSize(new java.awt.Dimension(85, 23));
        jPanel12.add(jlQuantityDestiny);

        jtfQuantityDestiny.setEditable(false);
        jtfQuantityDestiny.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfQuantityDestiny.setText("0.000");
        jtfQuantityDestiny.setFocusable(false);
        jtfQuantityDestiny.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jtfQuantityDestiny);

        jtfQuantityDestinyUnit.setEditable(false);
        jtfQuantityDestinyUnit.setText("UNIT");
        jtfQuantityDestinyUnit.setFocusable(false);
        jtfQuantityDestinyUnit.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel12.add(jtfQuantityDestinyUnit);

        jpWarehouses.add(jPanel12);

        jpProductionOrderDestiny.add(jpWarehouses, java.awt.BorderLayout.NORTH);

        jpDiogEntriesInfo.setLayout(new java.awt.BorderLayout());

        jpDiogEntriesInfo1.setLayout(new java.awt.GridLayout(1, 2));

        jpDiogEntriesInfo11.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlQuantityRequired.setText("+ Cant. origen:");
        jlQuantityRequired.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlQuantityRequired);

        jtfQuantityRequired.setEditable(false);
        jtfQuantityRequired.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfQuantityRequired.setText("0.000");
        jtfQuantityRequired.setFocusable(false);
        jtfQuantityRequired.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel4.add(jtfQuantityRequired);

        jtfQuantityRequiredUnit.setEditable(false);
        jtfQuantityRequiredUnit.setText("UNIT");
        jtfQuantityRequiredUnit.setFocusable(false);
        jtfQuantityRequiredUnit.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel4.add(jtfQuantityRequiredUnit);

        jtfQuantityRequiredPerc.setEditable(false);
        jtfQuantityRequiredPerc.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfQuantityRequiredPerc.setText("0.00%");
        jtfQuantityRequiredPerc.setFocusable(false);
        jtfQuantityRequiredPerc.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel4.add(jtfQuantityRequiredPerc);

        jpDiogEntriesInfo11.add(jPanel4);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlQuantityFinished.setText("‚Äì Cant. terminada:");
        jlQuantityFinished.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlQuantityFinished);

        jtfQuantityFinished.setEditable(false);
        jtfQuantityFinished.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfQuantityFinished.setText("0.000");
        jtfQuantityFinished.setFocusable(false);
        jtfQuantityFinished.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel5.add(jtfQuantityFinished);

        jtfQuantityFinishedUnit.setEditable(false);
        jtfQuantityFinishedUnit.setText("UNIT");
        jtfQuantityFinishedUnit.setFocusable(false);
        jtfQuantityFinishedUnit.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel5.add(jtfQuantityFinishedUnit);

        jtfQuantityFinishedPerc.setEditable(false);
        jtfQuantityFinishedPerc.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfQuantityFinishedPerc.setText("0.00%");
        jtfQuantityFinishedPerc.setFocusable(false);
        jtfQuantityFinishedPerc.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel5.add(jtfQuantityFinishedPerc);

        jpDiogEntriesInfo11.add(jPanel5);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlQuantityPending.setText("= Cant. pendiente:");
        jlQuantityPending.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlQuantityPending);

        jtfQuantityPending.setBackground(java.awt.Color.pink);
        jtfQuantityPending.setEditable(false);
        jtfQuantityPending.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfQuantityPending.setText("0.000");
        jtfQuantityPending.setFocusable(false);
        jtfQuantityPending.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel6.add(jtfQuantityPending);

        jtfQuantityPendingUnit.setBackground(java.awt.Color.pink);
        jtfQuantityPendingUnit.setEditable(false);
        jtfQuantityPendingUnit.setText("UNIT");
        jtfQuantityPendingUnit.setFocusable(false);
        jtfQuantityPendingUnit.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel6.add(jtfQuantityPendingUnit);

        jtfQuantityPendingPerc.setBackground(java.awt.Color.pink);
        jtfQuantityPendingPerc.setEditable(false);
        jtfQuantityPendingPerc.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfQuantityPendingPerc.setText("0.00%");
        jtfQuantityPendingPerc.setFocusable(false);
        jtfQuantityPendingPerc.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel6.add(jtfQuantityPendingPerc);

        jpDiogEntriesInfo11.add(jPanel6);

        jpDiogEntriesInfo1.add(jpDiogEntriesInfo11);

        jpDiogEntriesInfo.add(jpDiogEntriesInfo1, java.awt.BorderLayout.WEST);

        jpDiogEntriesInfo2.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jpDiogEntriesInfo21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlStock.setText("+ Existencias (destino):");
        jlStock.setPreferredSize(new java.awt.Dimension(125, 23));
        jpDiogEntriesInfo21.add(jlStock);

        jtfStock.setEditable(false);
        jtfStock.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfStock.setText("0.000");
        jtfStock.setFocusable(false);
        jtfStock.setPreferredSize(new java.awt.Dimension(125, 23));
        jpDiogEntriesInfo21.add(jtfStock);

        jtfStockUnit.setEditable(false);
        jtfStockUnit.setText("UNIT");
        jtfStockUnit.setFocusable(false);
        jtfStockUnit.setPreferredSize(new java.awt.Dimension(40, 23));
        jpDiogEntriesInfo21.add(jtfStockUnit);

        jbViewLots.setText("Ver lotes");
        jbViewLots.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbViewLots.setPreferredSize(new java.awt.Dimension(75, 23));
        jpDiogEntriesInfo21.add(jbViewLots);

        jpDiogEntriesInfo2.add(jpDiogEntriesInfo21);

        jpDiogEntriesInfo22.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCurrentlyUsed.setText("+ Unidades en doc.:");
        jlCurrentlyUsed.setPreferredSize(new java.awt.Dimension(125, 23));
        jpDiogEntriesInfo22.add(jlCurrentlyUsed);

        jtfCurrentlyUsed.setEditable(false);
        jtfCurrentlyUsed.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfCurrentlyUsed.setText("0.000");
        jtfCurrentlyUsed.setFocusable(false);
        jtfCurrentlyUsed.setPreferredSize(new java.awt.Dimension(125, 23));
        jpDiogEntriesInfo22.add(jtfCurrentlyUsed);

        jtfCurrentlyUsedUnit.setEditable(false);
        jtfCurrentlyUsedUnit.setText("UNIT");
        jtfCurrentlyUsedUnit.setFocusable(false);
        jtfCurrentlyUsedUnit.setPreferredSize(new java.awt.Dimension(40, 23));
        jpDiogEntriesInfo22.add(jtfCurrentlyUsedUnit);

        jpDiogEntriesInfo2.add(jpDiogEntriesInfo22);

        jpDiogEntriesInfo23.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAvailable.setText("= Unidades disponibles:");
        jlAvailable.setPreferredSize(new java.awt.Dimension(125, 23));
        jpDiogEntriesInfo23.add(jlAvailable);

        jtfAvailable.setBackground(new java.awt.Color(153, 204, 255));
        jtfAvailable.setEditable(false);
        jtfAvailable.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfAvailable.setText("0.000");
        jtfAvailable.setFocusable(false);
        jtfAvailable.setPreferredSize(new java.awt.Dimension(125, 23));
        jpDiogEntriesInfo23.add(jtfAvailable);

        jtfAvailableUnit.setBackground(new java.awt.Color(153, 204, 255));
        jtfAvailableUnit.setEditable(false);
        jtfAvailableUnit.setText("UNIT");
        jtfAvailableUnit.setFocusable(false);
        jtfAvailableUnit.setPreferredSize(new java.awt.Dimension(40, 23));
        jpDiogEntriesInfo23.add(jtfAvailableUnit);

        jlYear.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlYear.setText("A√±o:");
        jlYear.setPreferredSize(new java.awt.Dimension(35, 23));
        jpDiogEntriesInfo23.add(jlYear);

        jtfYear.setBackground(new java.awt.Color(153, 204, 255));
        jtfYear.setEditable(false);
        jtfYear.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtfYear.setText("2000");
        jtfYear.setFocusable(false);
        jtfYear.setPreferredSize(new java.awt.Dimension(40, 23));
        jpDiogEntriesInfo23.add(jtfYear);

        jpDiogEntriesInfo2.add(jpDiogEntriesInfo23);

        jpDiogEntriesInfo.add(jpDiogEntriesInfo2, java.awt.BorderLayout.EAST);

        jpProductionOrderDestiny.add(jpDiogEntriesInfo, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jpProductionOrderDestiny, java.awt.BorderLayout.CENTER);

        jpControls.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jPanel1.add(jbCancel);

        jpControls.add(jPanel1, java.awt.BorderLayout.EAST);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
        jpControls.add(jPanel2, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpControls, java.awt.BorderLayout.SOUTH);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-928)/2, (screenSize.height-609)/2, 928, 609);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        int col = 0;
        STableColumnForm[] columns = null;

        col = 0;
        columns = new STableColumnForm[6];
        columns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_INTEGER, "Carga", STableConstants.WIDTH_NUM_SMALLINT);
        columns[col] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Cant. requerida", STableConstants.WIDTH_QUANTITY_2X);
        columns[col++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererQuantity());
        columns[col] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Cant. terminada", STableConstants.WIDTH_QUANTITY_2X);
        columns[col++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererQuantity());
        columns[col] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Cant. pendiente", STableConstants.WIDTH_QUANTITY_2X);
        columns[col++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererQuantity());
        columns[col] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Cant. a entregar", STableConstants.WIDTH_QUANTITY_2X);
        columns[col].setEditable(true);
        columns[col++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererQuantity());
        columns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Unidad", STableConstants.WIDTH_UNIT_SYMBOL);

        switch (mnFormMode) {
            case SLibConstants.MODE_STK_ASD:
                columns[COL_QTY].setColumnTitle("Cant. a entregar");
                jbFinishAll.setText("Entregar todo");
                jlQuantityToFinish.setText("Cant. a entregar:");
                setTitle("Entrega de productos");
                break;
            case SLibConstants.MODE_STK_RET:
                columns[COL_QTY].setColumnTitle("Cant. a devolver");
                jbFinishAll.setText("Devolver todo");
                jlQuantityToFinish.setText("Cant. a devolver:");
                setTitle("Devoluci√≥n de productos");
                break;
            default:
                miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_UTIL_UNKNOWN_OPTION);
        }

        moPaneProdOrderDestinyEntries = new STablePane(miClient);
        jpProductionOrderDestiny.add(moPaneProdOrderDestinyEntries, BorderLayout.CENTER);

        for (STableColumnForm column : columns) {
            moPaneProdOrderDestinyEntries.addTableColumn(column);
        }

        moPaneProdOrderDestinyEntries.createTable();
        moPaneProdOrderDestinyEntries.getTable().getDefaultEditor(Double.class).addCellEditorListener(this);
        moPaneProdOrderDestinyEntries.getTable().getTableHeader().setReorderingAllowed(false);
        moPaneProdOrderDestinyEntries.getTable().getTableHeader().setResizingAllowed(false);

        moPickerStockLots = new SDialogPickerStockLots(miClient, false);
        moFieldQuantityToFinish = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfQuantityToFinish, jlQuantityToFinish);
        moFieldQuantityToFinish.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsQuantityFormat());

        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);
        jbFinishAll.addActionListener(this);
        jbCleanAll.addActionListener(this);
        jbViewLots.addActionListener(this);

        SFormUtilities.createActionMap(rootPane, this, "actionOk", "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "actionCancel", "cancel", KeyEvent.VK_ESCAPE, SLibConstants.UNDEFINED);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;

            if (isFinishLikeMove()) {
                jtfQuantityToFinish.requestFocus();
            }
            else {
                moPaneProdOrderDestinyEntries.getTable().requestFocus();
            }
        }
    }

    private boolean isFinishLikeMove() {
        return moParamProdOrderDestiny == null || !SLibUtilities.compareKeys(moParamProdOrderSource.getPrimaryKey(), moParamProdOrderDestiny.getParentProductionOrderKey());
    }

    @SuppressWarnings("unchecked")
    private void renderProdOrderSource() {
        double used = 0;
        double stock = 0;
        String sql = "";
        ResultSet resulSet = null;
        SDataItem item = null;
        SDataUnit unit = null;
        SDataStockLot lot = null;

        try {
            if (moParamProdOrderSource == null) {
                jtfProdOrderSourceNumber.setText("");
                jtfProdOrderSourceType.setText("");
                jtfProdOrderSourceDate.setText("");
                jtfProdOrderSourceDateDelivery.setText("");
                jtfItemSourceCode.setText("");
                jtfItemSource.setText("");
                jtfQuantitySource.setText("");
                jtfQuantitySourceUnit.setText("");
                jtfStockLotSource.setText("");
                jtfStockLotSourceDateExpiration.setText("");

                mdQuantityFinished = 0;
                mdQuantityPending = 0;

                jtfQuantityToFinish.setText("");
                jtfQuantityToFinishUnit.setText("");

                jtfQuantityRequired.setText("");
                jtfQuantityRequiredUnit.setText("");
                jtfQuantityFinished.setText("");
                jtfQuantityFinishedUnit.setText("");
                jtfQuantityPending.setText("");
                jtfQuantityPendingUnit.setText("");

                jtfQuantityRequiredPerc.setText("");
                jtfQuantityFinishedPerc.setText("");
                jtfQuantityPendingPerc.setText("");

                jtfStock.setText("");
                jtfStockUnit.setText("");
                jtfCurrentlyUsed.setText("");
                jtfCurrentlyUsedUnit.setText("");
                jtfAvailable.setText("");
                jtfAvailableUnit.setText("");

                jbFinishAll.setEnabled(false);
                jbCleanAll.setEnabled(false);
                jbViewLots.setEnabled(false);
            }
            else {
                item = (SDataItem) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_ITEM, new int[] { moParamProdOrderSource.getFkItemId_r() }, SLibConstants.EXEC_MODE_VERBOSE);
                unit = (SDataUnit) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_UNIT, new int[] { moParamProdOrderSource.getFkUnitId_r() }, SLibConstants.EXEC_MODE_VERBOSE);
                lot = (SDataStockLot) SDataUtilities.readRegistry(miClient, SDataConstants.TRN_LOT, new int[] { moParamProdOrderSource.getFkLotItemId_nr(), moParamProdOrderSource.getFkLotUnitId_nr(), moParamProdOrderSource.getFkLotId_n() }, SLibConstants.EXEC_MODE_VERBOSE);

                jtfProdOrderSourceNumber.setText(moParamProdOrderSource.getDbmsNumber());
                jtfProdOrderSourceType.setText(moParamProdOrderSource.getDbmsProductionOrderType());
                jtfProdOrderSourceDate.setText(miClient.getSessionXXX().getFormatters().getDateFormat().format(moParamProdOrderSource.getDate()));
                jtfProdOrderSourceDateDelivery.setText(miClient.getSessionXXX().getFormatters().getDateFormat().format(moParamProdOrderSource.getDateDelivery()));
                jtfItemSourceCode.setText(item.getKey());
                jtfItemSource.setText(item.getItem());
                jtfQuantitySource.setText(miClient.getSessionXXX().getFormatters().getDecimalsQuantityFormat().format(moParamProdOrderSource.getQuantity()));
                jtfQuantitySourceUnit.setText(unit.getSymbol());
                jtfStockLotSource.setText(lot.getLot());
                jtfStockLotSourceDateExpiration.setText(lot.getDateExpiration_n() == null ? "" : miClient.getSessionXXX().getFormatters().getDateFormat().format(lot.getDateExpiration_n()));

                jtfProdOrderSourceNumber.setCaretPosition(0);
                jtfProdOrderSourceType.setCaretPosition(0);
                jtfProdOrderSourceDate.setCaretPosition(0);
                jtfProdOrderSourceDateDelivery.setCaretPosition(0);
                jtfItemSourceCode.setCaretPosition(0);
                jtfItemSource.setCaretPosition(0);
                jtfQuantitySource.setCaretPosition(0);
                jtfQuantitySourceUnit.setCaretPosition(0);
                jtfStockLotSource.setCaretPosition(0);
                jtfStockLotSourceDateExpiration.setCaretPosition(0);

                mdQuantityFinished = 0;
                mdQuantityPending = 0;

                sql = "SELECT COALESCE(SUM(ge.qty * CASE WHEN (g.fid_ct_iog = " + SDataConstantsSys.TRNS_CT_IOG_OUT + ") THEN 1 ELSE -1 END), 0) AS f_qty_fin " +
                        "FROM mfg_ord AS o " +
                        "INNER JOIN trn_diog AS g ON o.id_year = " + moParamProdOrderSource.getPkYearId() + " AND o.id_ord = " + moParamProdOrderSource.getPkOrdId() + " AND " +
                        "o.id_year = g.fid_mfg_year_n AND o.id_ord = g.fid_mfg_ord_n AND g.b_del = 0 AND (" +
                        "(g.fid_ct_iog = " + SDataConstantsSys.TRNS_TP_IOG_OUT_MFG_WP_ASD[0] + " AND g.fid_cl_iog = " + SDataConstantsSys.TRNS_TP_IOG_OUT_MFG_WP_ASD[1] + " AND g.fid_tp_iog = " + SDataConstantsSys.TRNS_TP_IOG_OUT_MFG_WP_ASD[2] + ") OR " +
                        "(g.fid_ct_iog = " + SDataConstantsSys.TRNS_TP_IOG_IN_MFG_WP_RET[0] + " AND g.fid_cl_iog = " + SDataConstantsSys.TRNS_TP_IOG_IN_MFG_WP_RET[1] + " AND g.fid_tp_iog = " + SDataConstantsSys.TRNS_TP_IOG_IN_MFG_WP_RET[2] + ") OR " +
                        "(g.fid_ct_iog = " + SDataConstantsSys.TRNS_TP_IOG_OUT_MFG_FG_ASD[0] + " AND g.fid_cl_iog = " + SDataConstantsSys.TRNS_TP_IOG_OUT_MFG_FG_ASD[1] + " AND g.fid_tp_iog = " + SDataConstantsSys.TRNS_TP_IOG_OUT_MFG_FG_ASD[2] + ") OR " +
                        "(g.fid_ct_iog = " + SDataConstantsSys.TRNS_TP_IOG_IN_MFG_FG_RET[0] + " AND g.fid_cl_iog = " + SDataConstantsSys.TRNS_TP_IOG_IN_MFG_FG_RET[1] + " AND g.fid_tp_iog = " + SDataConstantsSys.TRNS_TP_IOG_IN_MFG_FG_RET[2] + ")) AND " +
                        "NOT (g.id_year = " + moParamDiog.getPkYearId() + " AND g.id_doc = " + moParamDiog.getPkDocId() + ") " +
                        (moParamDiog.getDbmsDataCounterpartDiog() == null ? "" : "AND NOT (g.id_year = " + moParamDiog.getDbmsDataCounterpartDiog().getPkYearId() + " AND g.id_doc = " + moParamDiog.getDbmsDataCounterpartDiog().getPkDocId() + ") ") +
                        "INNER JOIN trn_diog_ety AS ge ON g.id_year = ge.id_year AND g.id_doc = ge.id_doc AND ge.b_del = 0 AND " +
                        "o.fid_item_r = ge.fid_item AND o.fid_unit_r = ge.fid_unit; ";

                resulSet = miClient.getSession().getStatement().executeQuery(sql);
                while (resulSet.next()) {
                    mdQuantityFinished = resulSet.getDouble("f_qty_fin");

                    for (SDataDiogEntry diogEntry : moParamDiog.getDbmsEntries()) {
                        if (!diogEntry.getIsDeleted()) {
                            if (diogEntry.getFkItemId() == moParamProdOrderSource.getFkItemId_r() && diogEntry.getFkUnitId() == moParamProdOrderSource.getFkUnitId_r()) {
                                mdQuantityFinished += diogEntry.getQuantity();
                            }
                        }
                    }

                    mdQuantityPending = moParamProdOrderSource.getQuantity() - mdQuantityFinished;
                }

                // Document stock supply is processed in original units:

                jtfQuantityToFinish.setText(miClient.getSessionXXX().getFormatters().getDecimalsQuantityFormat().format(0));
                jtfQuantityToFinishUnit.setText(unit.getSymbol());

                jtfQuantityRequired.setText(miClient.getSessionXXX().getFormatters().getDecimalsValueUnitaryFormat().format(moParamProdOrderSource.getQuantity()));
                jtfQuantityRequiredUnit.setText(unit.getSymbol());
                jtfQuantityFinished.setText(miClient.getSessionXXX().getFormatters().getDecimalsValueUnitaryFormat().format(mdQuantityFinished));
                jtfQuantityFinishedUnit.setText(unit.getSymbol());
                jtfQuantityPending.setText(miClient.getSessionXXX().getFormatters().getDecimalsValueUnitaryFormat().format(mdQuantityPending));
                jtfQuantityPendingUnit.setText(unit.getSymbol());

                jtfQuantityRequiredPerc.setText(miClient.getSessionXXX().getFormatters().getDecimalsPercentageFormat().format(1));
                jtfQuantityFinishedPerc.setText(miClient.getSessionXXX().getFormatters().getDecimalsPercentageFormat().format(moParamProdOrderSource.getQuantity() == 0 ? 0 : mdQuantityFinished / moParamProdOrderSource.getQuantity()));
                jtfQuantityPendingPerc.setText(miClient.getSessionXXX().getFormatters().getDecimalsPercentageFormat().format(moParamProdOrderSource.getQuantity() == 0 ? 0 : mdQuantityPending / moParamProdOrderSource.getQuantity()));

                // Available stock is processed in inventory units:

                try {
                    stock = STrnUtilities.obtainStock(miClient, mnYear, moParamProdOrderSource.getFkItemId_r(), moParamProdOrderSource.getFkUnitId_r(), SLibConstants.UNDEFINED,
                            manWarehouseDestinyKey[0], manWarehouseDestinyKey[1], SLibConstants.UNDEFINED, null, (int[]) (moParamDiog.getDbmsDataCounterpartDiog() != null ? moParamDiog.getDbmsDataCounterpartDiog().getPrimaryKey() : moParamDiog.getPrimaryKey()));
                }
                catch (Exception e) {
                    SLibUtilities.printOutException(this, e);
                }

                for (SDataDiogEntry entry : moParamDiog.getDbmsEntries()) {
                    for (STrnStockMove move : entry.getAuxStockMoves()) {
                        if (move.getPkItemId() == moParamProdOrderSource.getFkItemId_r() && move.getPkUnitId() == moParamProdOrderSource.getFkUnitId_r()) {
                            if (entry.getIsDeleted()) {
                                stock += move.getQuantity();    // add quantity in deleted document entries to stock
                            }
                            else {
                                used += move.getQuantity();
                            }
                        }
                    }
                }

                jtfStock.setText(miClient.getSessionXXX().getFormatters().getDecimalsValueUnitaryFormat().format(stock));
                jtfStockUnit.setText(unit.getSymbol());
                jtfCurrentlyUsed.setText(miClient.getSessionXXX().getFormatters().getDecimalsValueUnitaryFormat().format(used));
                jtfCurrentlyUsedUnit.setText(unit.getSymbol());
                jtfAvailable.setText(miClient.getSessionXXX().getFormatters().getDecimalsValueUnitaryFormat().format(stock + used));
                jtfAvailableUnit.setText(unit.getSymbol());

                jbFinishAll.setEnabled(true);
                jbCleanAll.setEnabled(true);
                jbViewLots.setEnabled(true);
            }
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }
    }

    @SuppressWarnings("unchecked")
    private void renderProdOrderDestiny() {
        String sql = "";
        ResultSet resulSet = null;
        SDataItem item = null;
        SDataUnit unit = null;

        moPaneProdOrderDestinyEntries.clearTableRows();

        try {
            if (isFinishLikeMove()) {
                jtfProdOrderDestinyNumber.setText("");
                jtfProdOrderDestinyType.setText("");
                jtfProdOrderDestinyDate.setText("");
                jtfProdOrderDestinyDateDelivery.setText("");
                jtfItemDestinyCode.setText("");
                jtfItemDestiny.setText("");
                jtfQuantityDestiny.setText("");
                jtfQuantityDestinyUnit.setText("");

                jtfQuantityToFinish.setEditable(true);
                jtfQuantityToFinish.setFocusable(true);
            }
            else {
                item = (SDataItem) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_ITEM, new int[] { moParamProdOrderDestiny.getFkItemId_r() }, SLibConstants.EXEC_MODE_VERBOSE);
                unit = (SDataUnit) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_UNIT, new int[] { moParamProdOrderDestiny.getFkUnitId_r() }, SLibConstants.EXEC_MODE_VERBOSE);

                jtfProdOrderDestinyNumber.setText(moParamProdOrderDestiny.getDbmsNumber());
                jtfProdOrderDestinyType.setText(moParamProdOrderDestiny.getDbmsProductionOrderType());
                jtfProdOrderDestinyDate.setText(miClient.getSessionXXX().getFormatters().getDateFormat().format(moParamProdOrderDestiny.getDate()));
                jtfProdOrderDestinyDateDelivery.setText(miClient.getSessionXXX().getFormatters().getDateFormat().format(moParamProdOrderDestiny.getDateDelivery()));
                jtfItemDestinyCode.setText(item.getKey());
                jtfItemDestiny.setText(item.getItem());
                jtfQuantityDestiny.setText(miClient.getSessionXXX().getFormatters().getDecimalsQuantityFormat().format(moParamProdOrderDestiny.getQuantity()));
                jtfQuantityDestinyUnit.setText(unit.getSymbol());

                jtfProdOrderDestinyNumber.setCaretPosition(0);
                jtfProdOrderDestinyType.setCaretPosition(0);
                jtfProdOrderDestinyDate.setCaretPosition(0);
                jtfProdOrderDestinyDateDelivery.setCaretPosition(0);
                jtfItemDestinyCode.setCaretPosition(0);
                jtfItemDestiny.setCaretPosition(0);
                jtfQuantityDestiny.setCaretPosition(0);
                jtfQuantityDestinyUnit.setCaretPosition(0);

                jtfQuantityToFinish.setEditable(false);
                jtfQuantityToFinish.setFocusable(false);

                sql = "SELECT oc.id_year, oc.id_ord, oc.id_chg, " +                             // 2
                        "oce.fid_item_r, oce.fid_unit_r, oce.gross_req_r AS f_qty_req, " +      // 5
                        "ic.item_key AS f_chg_item_key, ic.item AS f_chg_item, uc.symbol AS f_chg_unit_sym, " +                                                 // 8
                        "COALESCE(SUM(ge.qty * CASE WHEN (g.fid_ct_iog = " + SDataConstantsSys.TRNS_CT_IOG_IN + ") THEN 1 ELSE -1 END), 0) AS f_qty_fin " +     // 9
                        "FROM mfg_ord AS o " +
                        "INNER JOIN mfg_ord_chg AS oc ON o.id_year = oc.id_year AND o.id_ord = oc.id_ord AND oc.b_del = 0 AND " +
                        "o.id_year = " + moParamProdOrderDestiny.getPkYearId() + " AND o.id_ord = " + moParamProdOrderDestiny.getPkOrdId() + " " +
                        "INNER JOIN mfg_ord_chg_ety AS oce ON oc.id_year = oce.id_year AND oc.id_ord = oce.id_ord AND oc.id_chg = oce.id_chg AND oce.b_del = 0 " +
                        "INNER JOIN erp.itmu_item AS ic ON oce.fid_item_r = " + moParamProdOrderSource.getFkItemId_r() + " AND oce.fid_item_r = ic.id_item " +
                        "INNER JOIN erp.itmu_unit AS uc ON oce.fid_unit_r = " + moParamProdOrderSource.getFkUnitId_r() + " AND oce.fid_unit_r = uc.id_unit " +
                        "LEFT OUTER JOIN trn_diog AS g ON o.id_year = g.fid_mfg_year_n AND o.id_ord = g.fid_mfg_ord_n AND g.b_del = 0 AND (" +
                        "(g.fid_ct_iog = " + SDataConstantsSys.TRNS_TP_IOG_IN_MFG_WP_ASD[0] + " AND g.fid_cl_iog = " + SDataConstantsSys.TRNS_TP_IOG_IN_MFG_WP_ASD[1] + " AND g.fid_tp_iog = " + SDataConstantsSys.TRNS_TP_IOG_IN_MFG_WP_ASD[2] + ") OR " +
                        "(g.fid_ct_iog = " + SDataConstantsSys.TRNS_TP_IOG_OUT_MFG_WP_RET[0] + " AND g.fid_cl_iog = " + SDataConstantsSys.TRNS_TP_IOG_OUT_MFG_WP_RET[1] + " AND g.fid_tp_iog = " + SDataConstantsSys.TRNS_TP_IOG_OUT_MFG_WP_RET[2] + ") OR " +
                        "(g.fid_ct_iog = " + SDataConstantsSys.TRNS_TP_IOG_IN_MFG_FG_ASD[0] + " AND g.fid_cl_iog = " + SDataConstantsSys.TRNS_TP_IOG_IN_MFG_FG_ASD[1] + " AND g.fid_tp_iog = " + SDataConstantsSys.TRNS_TP_IOG_IN_MFG_FG_ASD[2] + ") OR " +
                        "(g.fid_ct_iog = " + SDataConstantsSys.TRNS_TP_IOG_OUT_MFG_FG_RET[0] + " AND g.fid_cl_iog = " + SDataConstantsSys.TRNS_TP_IOG_OUT_MFG_FG_RET[1] + " AND g.fid_tp_iog = " + SDataConstantsSys.TRNS_TP_IOG_OUT_MFG_FG_RET[2] + ")) AND " +
                        "NOT (g.id_year = " + moParamDiog.getPkYearId() + " AND g.id_doc = " + moParamDiog.getPkDocId() + ") " +
                        (moParamDiog.getDbmsDataCounterpartDiog() == null ? "" : "AND NOT (g.id_year = " + moParamDiog.getDbmsDataCounterpartDiog().getPkYearId() + " AND g.id_doc = " + moParamDiog.getDbmsDataCounterpartDiog().getPkDocId() + ") ") +
                        "LEFT OUTER JOIN trn_diog_ety AS ge ON oc.id_year = ge.fid_mfg_year_n AND oc.id_ord = ge.fid_mfg_ord_n AND oc.id_chg = ge.fid_mfg_chg_n AND " +
                        "g.id_year = ge.id_year AND g.id_doc = ge.id_doc AND ge.b_del = 0 AND " +
                        "oce.fid_item_r = ge.fid_item AND oce.fid_unit_r = ge.fid_unit " +
                        "GROUP BY oc.id_year, oc.id_ord, oc.id_chg, " +
                        "oce.fid_item_r, oce.fid_unit_r, oce.gross_req_r, " +
                        "ic.item_key, ic.item, uc.symbol " +
                        "ORDER BY oc.id_year, oc.id_ord, oc.id_chg; ";

                resulSet = miClient.getSession().getStatement().executeQuery(sql);
                while (resulSet.next()) {
                    STrnProdOrderStockFinishRow stockFinishRow = new STrnProdOrderStockFinishRow((int[]) moParamProdOrderSource.getPrimaryKey(),
                            new int[] { resulSet.getInt(1), resulSet.getInt(2), resulSet.getInt(3) });
                    stockFinishRow.setQuantityRequired(resulSet.getDouble(6));
                    stockFinishRow.setQuantityFinished(resulSet.getDouble(10));
                    stockFinishRow.setQuantityToFinish(0);
                    stockFinishRow.setFkUnitId(resulSet.getInt(5));
                    stockFinishRow.setAuxUnit("");
                    stockFinishRow.setAuxUnitSymbol(resulSet.getString(9));

                    if (moParamDiog.getDbmsDataCounterpartDiog() != null) {
                        for (SDataDiogEntry diogEntry : moParamDiog.getDbmsDataCounterpartDiog().getDbmsEntries()) {
                            if (!diogEntry.getIsDeleted()) {
                                if (SLibUtilities.compareKeys(stockFinishRow.getProdOrderDestinyChargeKey(), diogEntry.getProdOrderChargeKey_n()) &&
                                        stockFinishRow.getFkItemId() == diogEntry.getFkItemId() && stockFinishRow.getFkUnitId() == diogEntry.getFkUnitId()) {
                                    stockFinishRow.setQuantityFinished(stockFinishRow.getQuantityFinished() + diogEntry.getQuantity());
                                }
                            }
                        }
                    }

                    stockFinishRow.prepareTableRow();
                    moPaneProdOrderDestinyEntries.addTableRow(stockFinishRow);
                }

                if (moPaneProdOrderDestinyEntries.getTableGuiRowCount() > 0) {
                    moPaneProdOrderDestinyEntries.renderTableRows();
                    moPaneProdOrderDestinyEntries.setTableRowSelection(0);
                    moPaneProdOrderDestinyEntries.setTableColumnSelection(COL_QTY);
                }
                else {
                    miClient.showMsgBoxWarning("No hay ning√∫n insumo en la OP de destino que corresponda al producto a terminar en la OP de origen.");
                }
            }
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }
    }

    private void computeQuantity() {
        mdQuantityToFinish = 0;

        for (STableRow row : moPaneProdOrderDestinyEntries.getTableModel().getTableRows()) {
            mdQuantityToFinish += ((Double) row.getValues().get(COL_QTY));
        }

        jtfQuantityToFinish.setText(miClient.getSessionXXX().getFormatters().getDecimalsQuantityFormat().format(mdQuantityToFinish));
        jtfQuantityToFinish.setCaretPosition(0);
    }

    private void computePaneEdition() {
        STrnProdOrderStockFinishRow stockFinishRow = null;

        for (STableRow row : moPaneProdOrderDestinyEntries.getTableModel().getTableRows()) {
            stockFinishRow = (STrnProdOrderStockFinishRow) row;
            stockFinishRow.setQuantityToFinish((Double) row.getValues().get(COL_QTY));
        }
    }

    private void computeCancelCellEditing() {
        if (moPaneProdOrderDestinyEntries.getTable().isEditing()) {
            moPaneProdOrderDestinyEntries.getTable().getCellEditor().cancelCellEditing();
        }
    }

    private void processEditingStoppedQuantity() {
        computeQuantity();
    }

    public void actionFinishAll() {
        STrnProdOrderStockFinishRow stockFinishRow = null;

        if (jbFinishAll.isEnabled()) {
            if (isFinishLikeMove()) {
                if (mnFormMode == SLibConstants.MODE_STK_ASD) {
                    jtfQuantityToFinish.setText(miClient.getSessionXXX().getFormatters().getDecimalsQuantityFormat().format(mdQuantityPending <= 0 ? 0 : mdQuantityPending));
                }
                else {
                    jtfQuantityToFinish.setText(miClient.getSessionXXX().getFormatters().getDecimalsQuantityFormat().format(mdQuantityFinished <= 0 ? 0 : mdQuantityFinished));
                }
                jtfQuantityToFinish.requestFocus();
            }
            else {
                computeCancelCellEditing();

                if (mnFormMode == SLibConstants.MODE_STK_ASD) {
                    for (STableRow row : moPaneProdOrderDestinyEntries.getTableModel().getTableRows()) {
                        stockFinishRow = (STrnProdOrderStockFinishRow) row;
                        stockFinishRow.setQuantityToFinish(stockFinishRow.getQuantityPending() <= 0 ? 0 : stockFinishRow.getQuantityPending());
                        stockFinishRow.prepareTableRow();
                    }
                }
                else {
                    for (STableRow row : moPaneProdOrderDestinyEntries.getTableModel().getTableRows()) {
                        stockFinishRow = (STrnProdOrderStockFinishRow) row;
                        stockFinishRow.setQuantityToFinish(stockFinishRow.getQuantityFinished() <= 0 ? 0 : stockFinishRow.getQuantityFinished());
                        stockFinishRow.prepareTableRow();
                    }
                }

                moPaneProdOrderDestinyEntries.renderTableRows();
                moPaneProdOrderDestinyEntries.setTableRowSelection(0);

                computeQuantity();
            }
        }

    }

    public void actionCleanAll() {
        STrnProdOrderStockFinishRow stockFinishRow = null;

        if (jbCleanAll.isEnabled()) {
            if (isFinishLikeMove()) {
                jtfQuantityToFinish.setText(miClient.getSessionXXX().getFormatters().getDecimalsQuantityFormat().format(0));
                jtfQuantityToFinish.requestFocus();
            }
            else {
                computeCancelCellEditing();

                for (STableRow row : moPaneProdOrderDestinyEntries.getTableModel().getTableRows()) {
                    stockFinishRow = (STrnProdOrderStockFinishRow) row;
                    stockFinishRow.setQuantityToFinish(0);
                    row.prepareTableRow();
                }

                moPaneProdOrderDestinyEntries.renderTableRows();
                moPaneProdOrderDestinyEntries.setTableRowSelection(0);

                computeQuantity();
            }
        }
    }

    public void actionViewLots() {
        moPickerStockLots.formReset();
        moPickerStockLots.setFormParams(mnYear, moParamProdOrderSource.getFkItemId_r(), moParamProdOrderSource.getFkUnitId_r(), manWarehouseDestinyKey, (int[]) (moParamDiog.getDbmsDataCounterpartDiog() != null ? moParamDiog.getDbmsDataCounterpartDiog().getPrimaryKey() : moParamDiog.getPrimaryKey()));
        moPickerStockLots.setVisible(true);
    }

    public void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            miClient.showMsgBoxWarning(validation.getMessage());
        }
        else {
            computeCancelCellEditing();

            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    public void actionCancel() {
        computeCancelCellEditing();

        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbCleanAll;
    private javax.swing.JButton jbFinishAll;
    private javax.swing.JButton jbOk;
    private javax.swing.JButton jbViewLots;
    private javax.swing.JLabel jlAvailable;
    private javax.swing.JLabel jlCurrentlyUsed;
    private javax.swing.JLabel jlItemDestiny;
    private javax.swing.JLabel jlItemSource;
    private javax.swing.JLabel jlProdOrderDestiny;
    private javax.swing.JLabel jlProdOrderDestinyDate;
    private javax.swing.JLabel jlProdOrderDestinyDateDelivery;
    private javax.swing.JLabel jlProdOrderSource;
    private javax.swing.JLabel jlProdOrderSourceDate;
    private javax.swing.JLabel jlProdOrderSourceDateDelivery;
    private javax.swing.JLabel jlQuantityDestiny;
    private javax.swing.JLabel jlQuantityFinished;
    private javax.swing.JLabel jlQuantityPending;
    private javax.swing.JLabel jlQuantityRequired;
    private javax.swing.JLabel jlQuantitySource;
    private javax.swing.JLabel jlQuantityToFinish;
    private javax.swing.JLabel jlStock;
    private javax.swing.JLabel jlStockLotSource;
    private javax.swing.JLabel jlWarehouseDestiny;
    private javax.swing.JLabel jlWarehouseSource;
    private javax.swing.JLabel jlYear;
    private javax.swing.JPanel jpControls;
    private javax.swing.JPanel jpDiogEntriesInfo;
    private javax.swing.JPanel jpDiogEntriesInfo1;
    private javax.swing.JPanel jpDiogEntriesInfo11;
    private javax.swing.JPanel jpDiogEntriesInfo2;
    private javax.swing.JPanel jpDiogEntriesInfo21;
    private javax.swing.JPanel jpDiogEntriesInfo22;
    private javax.swing.JPanel jpDiogEntriesInfo23;
    private javax.swing.JPanel jpDpsEntriesControls1;
    private javax.swing.JPanel jpProductionOrderDestiny;
    private javax.swing.JPanel jpProductionOrderSource;
    private javax.swing.JPanel jpWarehouseControls;
    private javax.swing.JPanel jpWarehouseDestiny;
    private javax.swing.JPanel jpWarehouseDestiny1;
    private javax.swing.JPanel jpWarehouseDestiny2;
    private javax.swing.JPanel jpWarehouseSource;
    private javax.swing.JPanel jpWarehouses;
    private javax.swing.JTextField jtfAvailable;
    private javax.swing.JTextField jtfAvailableUnit;
    private javax.swing.JTextField jtfCompanyBranchDestiny;
    private javax.swing.JTextField jtfCompanyBranchDestinyCode;
    private javax.swing.JTextField jtfCompanyBranchSource;
    private javax.swing.JTextField jtfCompanyBranchSourceCode;
    private javax.swing.JTextField jtfCurrentlyUsed;
    private javax.swing.JTextField jtfCurrentlyUsedUnit;
    private javax.swing.JTextField jtfItemDestiny;
    private javax.swing.JTextField jtfItemDestinyCode;
    private javax.swing.JTextField jtfItemSource;
    private javax.swing.JTextField jtfItemSourceCode;
    private javax.swing.JTextField jtfProdOrderDestinyDate;
    private javax.swing.JTextField jtfProdOrderDestinyDateDelivery;
    private javax.swing.JTextField jtfProdOrderDestinyNumber;
    private javax.swing.JTextField jtfProdOrderDestinyType;
    private javax.swing.JTextField jtfProdOrderSourceDate;
    private javax.swing.JTextField jtfProdOrderSourceDateDelivery;
    private javax.swing.JTextField jtfProdOrderSourceNumber;
    private javax.swing.JTextField jtfProdOrderSourceType;
    private javax.swing.JTextField jtfQuantityDestiny;
    private javax.swing.JTextField jtfQuantityDestinyUnit;
    private javax.swing.JTextField jtfQuantityFinished;
    private javax.swing.JTextField jtfQuantityFinishedPerc;
    private javax.swing.JTextField jtfQuantityFinishedUnit;
    private javax.swing.JTextField jtfQuantityPending;
    private javax.swing.JTextField jtfQuantityPendingPerc;
    private javax.swing.JTextField jtfQuantityPendingUnit;
    private javax.swing.JTextField jtfQuantityRequired;
    private javax.swing.JTextField jtfQuantityRequiredPerc;
    private javax.swing.JTextField jtfQuantityRequiredUnit;
    private javax.swing.JTextField jtfQuantitySource;
    private javax.swing.JTextField jtfQuantitySourceUnit;
    private javax.swing.JTextField jtfQuantityToFinish;
    private javax.swing.JTextField jtfQuantityToFinishUnit;
    private javax.swing.JTextField jtfStock;
    private javax.swing.JTextField jtfStockLotSource;
    private javax.swing.JTextField jtfStockLotSourceDateExpiration;
    private javax.swing.JTextField jtfStockUnit;
    private javax.swing.JTextField jtfWarehouseDestiny;
    private javax.swing.JTextField jtfWarehouseDestinyCode;
    private javax.swing.JTextField jtfWarehouseSource;
    private javax.swing.JTextField jtfWarehouseSourceCode;
    private javax.swing.JTextField jtfYear;
    // End of variables declaration//GEN-END:variables

    public void setFormParams(final SDataDiog diog, final SDataProductionOrder prodOrderSource, final SDataProductionOrder prodOrderDestiny, final int[] warehouseSourceKey, final int[] warehouseDestinyKey) {
        if (diog == null || prodOrderSource == null) {
            moParamDiog = null;
            moParamProdOrderSource = null;
            moParamProdOrderDestiny = null;

            mnYear = 0;

            manWarehouseSourceKey = null;
            moCompanyBranchSource = null;
            moWarehouseSource = null;

            manWarehouseDestinyKey = null;
            moCompanyBranchDestiny = null;
            moWarehouseDestiny = null;

            jtfYear.setText("");

            jtfCompanyBranchSource.setText("");
            jtfCompanyBranchSourceCode.setText("");
            jtfWarehouseSource.setText("");
            jtfWarehouseSourceCode.setText("");

            jtfCompanyBranchDestiny.setText("");
            jtfCompanyBranchDestinyCode.setText("");
            jtfWarehouseDestiny.setText("");
            jtfWarehouseDestinyCode.setText("");
        }
        else {
            moParamDiog = diog;
            moParamProdOrderSource = prodOrderSource;
            moParamProdOrderDestiny = prodOrderDestiny;

            mnYear = SLibTimeUtilities.digestYear(moParamDiog.getDate())[0];

            manWarehouseSourceKey = warehouseSourceKey;
            moCompanyBranchSource = (SDataBizPartnerBranch) SDataUtilities.readRegistry(miClient, SDataConstants.BPSU_BPB, new int[] { manWarehouseSourceKey[0] }, SLibConstants.EXEC_MODE_VERBOSE);
            moWarehouseSource = (SDataCompanyBranchEntity) SDataUtilities.readRegistry(miClient, SDataConstants.CFGU_COB_ENT, manWarehouseSourceKey, SLibConstants.EXEC_MODE_VERBOSE);

            manWarehouseDestinyKey = warehouseDestinyKey;
            moCompanyBranchDestiny = (SDataBizPartnerBranch) SDataUtilities.readRegistry(miClient, SDataConstants.BPSU_BPB, new int[] { manWarehouseDestinyKey[0] }, SLibConstants.EXEC_MODE_VERBOSE);
            moWarehouseDestiny = (SDataCompanyBranchEntity) SDataUtilities.readRegistry(miClient, SDataConstants.CFGU_COB_ENT, manWarehouseDestinyKey, SLibConstants.EXEC_MODE_VERBOSE);

            jtfYear.setText(miClient.getSessionXXX().getFormatters().getYearFormat().format(mnYear));

            jtfCompanyBranchSource.setText(moCompanyBranchSource.getBizPartnerBranch());
            jtfCompanyBranchSourceCode.setText(moCompanyBranchSource.getCode());
            jtfWarehouseSource.setText(moWarehouseSource.getEntity());
            jtfWarehouseSourceCode.setText(moWarehouseSource.getCode());

            jtfCompanyBranchDestiny.setText(moCompanyBranchDestiny.getBizPartnerBranch());
            jtfCompanyBranchDestinyCode.setText(moCompanyBranchDestiny.getCode());
            jtfWarehouseDestiny.setText(moWarehouseDestiny.getEntity());
            jtfWarehouseDestinyCode.setText(moWarehouseDestiny.getCode());

            jtfYear.setCaretPosition(0);

            jtfCompanyBranchSource.setCaretPosition(0);
            jtfCompanyBranchSourceCode.setCaretPosition(0);
            jtfWarehouseSource.setCaretPosition(0);
            jtfWarehouseSourceCode.setCaretPosition(0);

            jtfCompanyBranchDestiny.setCaretPosition(0);
            jtfCompanyBranchDestinyCode.setCaretPosition(0);
            jtfWarehouseDestiny.setCaretPosition(0);
            jtfWarehouseDestinyCode.setCaretPosition(0);
        }

        renderProdOrderSource();
        renderProdOrderDestiny();
    }

    public java.util.Vector<erp.mtrn.data.STrnProdOrderStockFinishRow> obtainProdOrderStockFinishRows() {
        STrnProdOrderStockFinishRow stockFinishRow = null;
        Vector<STrnProdOrderStockFinishRow> stockFinishRows = new Vector<STrnProdOrderStockFinishRow>();

        if (isFinishLikeMove()) {
            stockFinishRow = new STrnProdOrderStockFinishRow((int []) moParamProdOrderSource.getPrimaryKey());
            stockFinishRow.setQuantityToFinish(moFieldQuantityToFinish.getDouble());
            stockFinishRow.setFkItemId(moParamProdOrderSource.getFkItemId_r());
            stockFinishRow.setFkUnitId(moParamProdOrderSource.getFkUnitId_r());
            stockFinishRows.add(stockFinishRow);
        }
        else {
            computePaneEdition();   // updates user edition into internal pane data objects

            for (STableRow row : moPaneProdOrderDestinyEntries.getTableModel().getTableRows()) {
                if (((STrnProdOrderStockFinishRow) row).getQuantityToFinish() > 0) {
                    stockFinishRows.add((STrnProdOrderStockFinishRow) row);
                }
            }
        }

        return stockFinishRows;
    }

    public int getFormResult() {
        return mnFormResult;
    }

    public int getFormStatus() {
        return mnFormStatus;
    }

    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;
    }

    public erp.lib.form.SFormValidation formValidate() {
        int moves = 0;
        STrnProdOrderStockFinishRow stockFinishRow = null;
        SFormValidation validation = new SFormValidation();

        if (moFieldQuantityToFinish.getDouble() <= 0) {
            validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_EMPTY + "'" + jlQuantityToFinish.getText() + "'.\n" +
                    "El valor debe ser mayor a " + miClient.getSessionXXX().getFormatters().getDecimalsQuantityFormat().format(0) + ".");
        }
        else if (mnFormMode == SLibConstants.MODE_STK_ASD && mdQuantityPending <= 0 &&
                miClient.showMsgBoxConfirm("No hay cantidad pendiente por entregar.\n" +
                "Por ello el movimiento actual ocasionar√° un excedente en las entregas.\n" + SLibConstants.MSG_CNF_MSG_CONT) != JOptionPane.YES_OPTION) {
            validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_VALUE_NOT_REQ + "'" + jlQuantityToFinish.getText() + "'.");
        }
        else if (mnFormMode == SLibConstants.MODE_STK_ASD && mdQuantityPending > 0 && moFieldQuantityToFinish.getDouble() > mdQuantityPending &&
                miClient.showMsgBoxConfirm("El valor del campo " +
                "'" + jlQuantityToFinish.getText() + "', " + miClient.getSessionXXX().getFormatters().getDecimalsQuantityFormat().format(moFieldQuantityToFinish.getDouble()) + ", " +
                "de la ord. prod. destino es mayor al del campo " +
                "'" + jlQuantityPending.getText() + "', " + miClient.getSessionXXX().getFormatters().getDecimalsQuantityFormat().format(mdQuantityPending) + ", " +
                "de la ord. prod. origen.\n" +
                "No est√° permitido que el movimiento actual genere un excedente en las entregas.\n" + SLibConstants.MSG_CNF_MSG_CONT) != JOptionPane.YES_OPTION) {
            validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_VALUE_DIF + "'" + jlQuantityToFinish.getText() + "', " +
                "el valor debe ser menor o igual a " + miClient.getSessionXXX().getFormatters().getDecimalsQuantityFormat().format(mdQuantityPending) + ".");
        }
        else if (mnFormMode == SLibConstants.MODE_STK_RET && mdQuantityFinished <= 0 &&
                miClient.showMsgBoxConfirm("No hay cantidad pendiente por devolver.\n" +
                "Por ello el movimiento actual ocasionar√° un excedente en las devoluciones.\n" + SLibConstants.MSG_CNF_MSG_CONT) != JOptionPane.YES_OPTION) {
            validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_VALUE_NOT_REQ + "'" + jlQuantityToFinish.getText() + "'.");
        }
        else if (mnFormMode == SLibConstants.MODE_STK_RET && mdQuantityFinished > 0 && moFieldQuantityToFinish.getDouble() > mdQuantityFinished &&
                miClient.showMsgBoxConfirm("El valor del campo " +
                "'" + jlQuantityToFinish.getText() + "', " + miClient.getSessionXXX().getFormatters().getDecimalsQuantityFormat().format(moFieldQuantityToFinish.getDouble()) + " " +
                "de la ord. prod. destino es mayor al del campo " +
                "'" + jlQuantityFinished.getText() + "' " + miClient.getSessionXXX().getFormatters().getDecimalsQuantityFormat().format(mdQuantityFinished) + ", " +
                "de la ord. prod. origen.\n" +
                "No est√° permitido que el movimiento actual genere un excedente en las devoluciones.\n" + SLibConstants.MSG_CNF_MSG_CONT) != JOptionPane.YES_OPTION) {
            validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_VALUE_DIF + "'" + jlQuantityToFinish.getText() + "', " +
                    "el valor debe ser menor o igual a " + miClient.getSessionXXX().getFormatters().getDecimalsQuantityFormat().format(mdQuantityFinished) + ".");
        }

        if (validation.getIsError()) {
            validation.setComponent(isFinishLikeMove() ? jtfQuantityToFinish : moPaneProdOrderDestinyEntries.getTable());
        }
        else {
            if (!isFinishLikeMove()) {
                computePaneEdition();   // updates user edition into internal pane data objects

                for (int row = 0; row < moPaneProdOrderDestinyEntries.getTableModel().getTableRows().size(); row++) {
                    stockFinishRow = (STrnProdOrderStockFinishRow) moPaneProdOrderDestinyEntries.getTableRow(row);

                    if (stockFinishRow.getQuantityToFinish() < 0) {
                        validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_VALUE_DIF + "'" + moPaneProdOrderDestinyEntries.getTableColumn(COL_QTY).getColumnTitle() + "' en la fila " + (row + 1) + ".\n" +
                                "El valor no puede ser negativo.");
                        validation.setComponent(moPaneProdOrderDestinyEntries.getTable());
                        break;
                    }
                    else if (mnFormMode == SLibConstants.MODE_STK_ASD && stockFinishRow.getQuantityToFinish() > stockFinishRow.getQuantityPending() &&
                            miClient.showMsgBoxConfirm("En la fila " + (row + 1) + ", el valor '" + moPaneProdOrderDestinyEntries.getTableColumn(COL_QTY).getColumnTitle() + "' " +
                            "(" + miClient.getSessionXXX().getFormatters().getDecimalsValueUnitaryFormat().format(stockFinishRow.getQuantityToFinish()) + ") " +
                            "es mayor a la cantidad pendiente " +
                            "(" + miClient.getSessionXXX().getFormatters().getDecimalsValueUnitaryFormat().format(stockFinishRow.getQuantityPending()) + ").\n" +
                            SLibConstants.MSG_CNF_MSG_CONT) != JOptionPane.YES_OPTION) {

                        validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_VALUE_DIF + "'" + moPaneProdOrderDestinyEntries.getTableColumn(COL_QTY).getColumnTitle() + "' en la fila " + (row + 1) + ".\n" +
                                "El valor no debe ser mayor a " + miClient.getSessionXXX().getFormatters().getDecimalsValueUnitaryFormat().format(stockFinishRow.getQuantityPending()) + ".");
                        validation.setComponent(moPaneProdOrderDestinyEntries.getTable());
                        break;
                    }
                    else if (mnFormMode == SLibConstants.MODE_STK_RET && stockFinishRow.getQuantityToFinish() > stockFinishRow.getQuantityFinished() &&
                            miClient.showMsgBoxConfirm("En la fila " + (row + 1) + ", el valor '" + moPaneProdOrderDestinyEntries.getTableColumn(COL_QTY).getColumnTitle() + "' " +
                            "(" + miClient.getSessionXXX().getFormatters().getDecimalsValueUnitaryFormat().format(stockFinishRow.getQuantityToFinish()) + ") " +
                            "es mayor a la cantidad entregada " +
                            "(" + miClient.getSessionXXX().getFormatters().getDecimalsValueUnitaryFormat().format(stockFinishRow.getQuantityFinished()) + ").\n" +
                            SLibConstants.MSG_CNF_MSG_CONT) != JOptionPane.YES_OPTION) {

                        validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_VALUE_DIF + "'" + moPaneProdOrderDestinyEntries.getTableColumn(COL_QTY).getColumnTitle() + "' en la fila " + (row + 1) + ".\n" +
                                "El valor no debe ser mayor a " + miClient.getSessionXXX().getFormatters().getDecimalsValueUnitaryFormat().format(stockFinishRow.getQuantityFinished()) + ".");
                        validation.setComponent(moPaneProdOrderDestinyEntries.getTable());
                        break;
                    }
                    else if (stockFinishRow.getQuantityToFinish() > 0) {
                        moves++;
                    }
                }

                if (!validation.getIsError()) {
                    if (moves == 0) {
                        validation.setMessage("No se ha especificado la cantidad al menos para una de las partidas.");
                        validation.setComponent(moPaneProdOrderDestinyEntries.getTable());
                    }
                }
            }
        }

        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbFinishAll) {
                actionFinishAll();
            }
            else if (button == jbCleanAll) {
                actionCleanAll();
            }
            else if (button == jbViewLots) {
                actionViewLots();
            }
        }
    }

    @Override
    public void editingStopped(ChangeEvent e) {
        switch (moPaneProdOrderDestinyEntries.getTable().getSelectedColumn()) {
            case COL_QTY:
                processEditingStoppedQuantity();
            default:
        }
    }

    @Override
    public void editingCanceled(ChangeEvent e) {

    }
}
