/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SDialogUpdateDpsLogistics.java
 *
 * Created on 22/09/2009, 04:24:20 PM
 */

package erp.mtrn.form;

import erp.data.SDataConstants;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.lib.table.STableRow;
import erp.mtrn.data.SDataDps;
import erp.mtrn.data.STrnUtilities;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import javax.swing.AbstractAction;
import javax.swing.JButton;

/**
 *
 * @author Edwin Carmona
 */
public class SDialogUpdateDpsDeliveryAddress extends javax.swing.JDialog implements erp.lib.form.SFormInterface, erp.lib.form.SFormOptionPickerInterface, java.awt.event.ActionListener, java.awt.event.ItemListener {

    private erp.client.SClientInterface miClient;
    private int mnFormResult;
    private int mnFormStatus;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;

    private erp.lib.form.SFormField moFieldNewDeliveryAddress;
    private erp.mtrn.data.SDataDps moDps;
    private erp.mtrn.form.SPanelDps moPanelDps;

    /** Creates new form SDialogDpsLink */
    public SDialogUpdateDpsDeliveryAddress(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpDps = new javax.swing.JPanel();
        jlPanelDps = new javax.swing.JLabel();
        jpDpsLogistics = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jlCurrentOperationAddress = new javax.swing.JLabel();
        jtfCurrentOperationAddress = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jlNewOperationAddress = new javax.swing.JLabel();
        jcbNewOperationAddress = new javax.swing.JComboBox();
        jpControls = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Actualización de domicilio de operación del documento");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpDps.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpDps.setLayout(new java.awt.BorderLayout());

        jlPanelDps.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jlPanelDps.setText("[Panel de documento de compras-ventas]");
        jlPanelDps.setPreferredSize(new java.awt.Dimension(100, 200));
        jpDps.add(jlPanelDps, java.awt.BorderLayout.NORTH);

        jpDpsLogistics.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del domicilio de entrega:"));
        jpDpsLogistics.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlCurrentOperationAddress.setText("Domicilio operación actual:");
        jlCurrentOperationAddress.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel11.add(jlCurrentOperationAddress);

        jtfCurrentOperationAddress.setEditable(false);
        jtfCurrentOperationAddress.setText("DOMICILIO OPERACIÓN");
        jtfCurrentOperationAddress.setFocusable(false);
        jtfCurrentOperationAddress.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel11.add(jtfCurrentOperationAddress);

        jPanel1.add(jPanel11);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlNewOperationAddress.setText("Domicilio operación nuevo:");
        jlNewOperationAddress.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel3.add(jlNewOperationAddress);

        jcbNewOperationAddress.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbNewOperationAddress.setSelectedIndex(-1);
        jcbNewOperationAddress.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel3.add(jcbNewOperationAddress);

        jPanel1.add(jPanel3);

        jpDpsLogistics.add(jPanel1, java.awt.BorderLayout.NORTH);

        jpDps.add(jpDpsLogistics, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpDps, java.awt.BorderLayout.CENTER);

        jpControls.setPreferredSize(new java.awt.Dimension(392, 33));
        jpControls.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jpControls.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jpControls.add(jbCancel);

        getContentPane().add(jpControls, java.awt.BorderLayout.PAGE_END);

        setSize(new java.awt.Dimension(900, 500));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        formRefreshOptionPane();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {        
        
        moFieldNewDeliveryAddress = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbNewOperationAddress, jlNewOperationAddress);
        
        mvFields = new java.util.Vector<erp.lib.form.SFormField>();
        mvFields.add(moFieldNewDeliveryAddress);

        moPanelDps = new SPanelDps(miClient, "entregado");
        jpDps.remove(jlPanelDps);
        jpDps.add(moPanelDps, BorderLayout.NORTH);

        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);
        jcbNewOperationAddress.addActionListener(this);
        jcbNewOperationAddress.addItemListener(this);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);        
    }

    private void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            STrnUtilities.updateDeliveryAddress(miClient, (int [])((SFormComponentItem) jcbNewOperationAddress.getSelectedItem()).getPrimaryKey(), (int [])moDps.getPrimaryKey());
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
            
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }
    
    @SuppressWarnings("unchecked")
    private void populateElements() {
        int [] primaryKey = null;
        int idBranch = moDps.getFkBizPartnerBranchId();
        SFormUtilities.populateComboBox(miClient, jcbNewOperationAddress, SDataConstants.BPSU_BPB_ADD, new int [] { idBranch });
        
        for (int i = 0; i < jcbNewOperationAddress.getItemCount(); i++) {
            primaryKey = (int []) ((SFormComponentItem) jcbNewOperationAddress.getItemAt(i)).getPrimaryKey();
            
            if (primaryKey[0] == moDps.getFkBizPartnerBranchId() && primaryKey[1] == moDps.getFkBizPartnerBranchAddressId()) {
                jtfCurrentOperationAddress.setText(((SFormComponentItem) jcbNewOperationAddress.getItemAt(i)).getItem());
                jtfCurrentOperationAddress.setCaretPosition(0);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbOk;
    private javax.swing.JComboBox jcbNewOperationAddress;
    private javax.swing.JLabel jlCurrentOperationAddress;
    private javax.swing.JLabel jlNewOperationAddress;
    private javax.swing.JLabel jlPanelDps;
    private javax.swing.JPanel jpControls;
    private javax.swing.JPanel jpDps;
    private javax.swing.JPanel jpDpsLogistics;
    private javax.swing.JTextField jtfCurrentOperationAddress;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;

        moDps = null;
        moPanelDps.setDps(null, null);

    }

    @Override
    public void formRefreshCatalogues() {
        
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (SFormField field : mvFields) {
            if (!field.validateField()) {
                validation.setIsError(true);
                validation.setComponent(field.getComponent());
            }
        }
        
        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        switch (type) {
            case SDataConstants.TRN_DPS:
                moDps = (SDataDps) SDataUtilities.readRegistry(miClient, SDataConstants.TRN_DPS, value, SLibConstants.EXEC_MODE_VERBOSE);
                moPanelDps.setDps(moDps, null);
                populateElements();
                break;

            default:
        }
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
        }
    }

    @Override
    public void formRefreshOptionPane() {
        
    }

    @Override
    public int getOptionType() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setFilterKey(Object filterKey) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setSelectedPrimaryKey(Object pk) {
        SFormUtilities.locateComboBoxItem(jcbNewOperationAddress, new int[] { ((int[]) pk)[1], ((int[]) pk)[2] });
    }

    @Override
    public Object getSelectedPrimaryKey() {
        int[] pk = new int[] {
            ((int[]) ((SFormComponentItem) jcbNewOperationAddress.getSelectedItem()).getPrimaryKey())[1] };
        return pk;
    }

    @Override
    public STableRow getSelectedOption() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        
    }
}
