/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SFormDpsNotes.java
 *
 * Created on 22/09/2009, 04:24:20 PM
 */

package erp.mtrn.form;

import erp.data.SDataConstants;
import erp.lib.SLibConstants;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.mtrn.data.SDataDpsNotes;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;

/**
 *
 * @author Sergio Flores
 */
public class SFormDpsNotes extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener, java.awt.event.ItemListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mtrn.data.SDataDpsNotes moDpsNotes;
    private erp.lib.form.SFormField moFieldNotes;
    private erp.lib.form.SFormField moFieldIsDeleted;
    private erp.lib.form.SFormField moFieldIsAllDocs;
    private erp.lib.form.SFormField moFieldIsPrintable;
    private erp.lib.form.SFormField moFieldIsCfdComplement;
    private erp.lib.form.SFormField moFieldCfdComplementDisposition;
    private erp.lib.form.SFormField moFieldCfdComplementRule;

    /** Creates new form SFormDpsNotes
     * @param client GUI client.
     */
    public SFormDpsNotes(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient =  client;
        mnFormType = SDataConstants.TRN_DPS_NTS;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpRegistry = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlNotes = new javax.swing.JLabel();
        jckIsDeleted = new javax.swing.JCheckBox();
        jspNotes = new javax.swing.JScrollPane();
        jtaNotes = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jckIsAllDocs = new javax.swing.JCheckBox();
        jckIsPrintable = new javax.swing.JCheckBox();
        jPanel5 = new javax.swing.JPanel();
        jckIsCfdComplement = new javax.swing.JCheckBox();
        jPanel7 = new javax.swing.JPanel();
        jlCfdComplementDisposition = new javax.swing.JLabel();
        jtfCfdComplementDisposition = new javax.swing.JTextField();
        jlCfdComplementDispositionHint = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jlCfdComplementRule = new javax.swing.JLabel();
        jtfCfdComplementRule = new javax.swing.JTextField();
        jlCfdComplementRuleHint = new javax.swing.JLabel();
        jpControls = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Notas del documento");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpRegistry.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpRegistry.setLayout(new java.awt.BorderLayout());

        jPanel6.setLayout(new java.awt.BorderLayout(0, 3));

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel4.setLayout(new java.awt.BorderLayout());

        jlNotes.setForeground(new java.awt.Color(0, 102, 102));
        jlNotes.setText("Notas: *");
        jlNotes.setPreferredSize(new java.awt.Dimension(32, 23));
        jPanel4.add(jlNotes, java.awt.BorderLayout.CENTER);

        jckIsDeleted.setForeground(java.awt.Color.red);
        jckIsDeleted.setText("Registro eliminado");
        jckIsDeleted.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jckIsDeleted.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel4.add(jckIsDeleted, java.awt.BorderLayout.EAST);

        jPanel1.add(jPanel4, java.awt.BorderLayout.NORTH);

        jspNotes.setPreferredSize(new java.awt.Dimension(100, 175));

        jtaNotes.setColumns(20);
        jtaNotes.setRows(5);
        jspNotes.setViewportView(jtaNotes);

        jPanel1.add(jspNotes, java.awt.BorderLayout.CENTER);

        jPanel6.add(jPanel1, java.awt.BorderLayout.NORTH);

        jPanel2.setLayout(new java.awt.GridLayout(4, 1, 0, 3));

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jckIsAllDocs.setText("Heredable a todos los documentos dependientes");
        jckIsAllDocs.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel3.add(jckIsAllDocs);

        jckIsPrintable.setText("Visible al imprimir");
        jckIsPrintable.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel3.add(jckIsPrintable);

        jPanel2.add(jPanel3);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jckIsCfdComplement.setText("Se integra como complemento CFDI Leyendas Fiscales");
        jckIsCfdComplement.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel5.add(jckIsCfdComplement);

        jPanel2.add(jPanel5);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCfdComplementDisposition.setForeground(new java.awt.Color(0, 102, 102));
        jlCfdComplementDisposition.setText("Disposición fiscal:");
        jlCfdComplementDisposition.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlCfdComplementDisposition);

        jtfCfdComplementDisposition.setPreferredSize(new java.awt.Dimension(450, 23));
        jPanel7.add(jtfCfdComplementDisposition);

        jlCfdComplementDispositionHint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_view_help.png"))); // NOI18N
        jlCfdComplementDispositionHint.setToolTipText("Ley, resolución o disposición fiscal que regula la leyenda, en siglas en mayúsculas y sin puntuación, p. ej., ISR");
        jlCfdComplementDispositionHint.setPreferredSize(new java.awt.Dimension(18, 23));
        jPanel7.add(jlCfdComplementDispositionHint);

        jPanel2.add(jPanel7);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCfdComplementRule.setForeground(new java.awt.Color(0, 102, 102));
        jlCfdComplementRule.setText("Norma:");
        jlCfdComplementRule.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlCfdComplementRule);

        jtfCfdComplementRule.setPreferredSize(new java.awt.Dimension(450, 23));
        jPanel8.add(jtfCfdComplementRule);

        jlCfdComplementRuleHint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_view_help.png"))); // NOI18N
        jlCfdComplementRuleHint.setToolTipText("Artículo o regla que regula la obligación de la leyenda");
        jlCfdComplementRuleHint.setPreferredSize(new java.awt.Dimension(18, 23));
        jPanel8.add(jlCfdComplementRuleHint);

        jPanel2.add(jPanel8);

        jPanel6.add(jPanel2, java.awt.BorderLayout.CENTER);

        jpRegistry.add(jPanel6, java.awt.BorderLayout.NORTH);

        getContentPane().add(jpRegistry, java.awt.BorderLayout.CENTER);

        jpControls.setPreferredSize(new java.awt.Dimension(392, 33));
        jpControls.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jpControls.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jpControls.add(jbCancel);

        getContentPane().add(jpControls, java.awt.BorderLayout.PAGE_END);

        setSize(new java.awt.Dimension(656, 439));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {

        moFieldNotes = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtaNotes, jlNotes);
        moFieldNotes.setLengthMax(1023);
        moFieldNotes.setAutoCaseType(0);
        moFieldIsDeleted = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, true, jckIsDeleted);
        moFieldIsAllDocs = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, true, jckIsAllDocs);
        moFieldIsPrintable = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, true, jckIsPrintable);
        moFieldIsCfdComplement = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsCfdComplement);
        moFieldCfdComplementDisposition = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, false, jtfCfdComplementDisposition, jlCfdComplementDisposition);
        moFieldCfdComplementDisposition.setLengthMax(255);
        moFieldCfdComplementDisposition.setAutoCaseType(0);
        moFieldCfdComplementRule = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, false, jtfCfdComplementRule, jlCfdComplementRule);
        moFieldCfdComplementRule.setLengthMax(255);
        moFieldCfdComplementRule.setAutoCaseType(0);

        mvFields = new Vector<>();
        mvFields.add(moFieldNotes);
        mvFields.add(moFieldIsDeleted);
        mvFields.add(moFieldIsAllDocs);
        mvFields.add(moFieldIsPrintable);
        mvFields.add(moFieldIsCfdComplement);
        mvFields.add(moFieldCfdComplementDisposition);
        mvFields.add(moFieldCfdComplementRule);

        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);
        jckIsCfdComplement.addItemListener(this);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            jtaNotes.requestFocus();
        }
    }

    private void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }
    
    private void itemStateChangedCfdComplement() {
        if (jckIsCfdComplement.isSelected()) {
            jtfCfdComplementDisposition.setEditable(true);
            jtfCfdComplementDisposition.setFocusable(true);
            jtfCfdComplementRule.setEditable(true);
            jtfCfdComplementRule.setFocusable(true);
            
            jtfCfdComplementDisposition.requestFocusInWindow();
        }
        else {
            jtfCfdComplementDisposition.setEditable(false);
            jtfCfdComplementDisposition.setFocusable(false);
            jtfCfdComplementRule.setEditable(false);
            jtfCfdComplementRule.setFocusable(false);
            
            moFieldCfdComplementDisposition.resetField();
            moFieldCfdComplementRule.resetField();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbOk;
    private javax.swing.JCheckBox jckIsAllDocs;
    private javax.swing.JCheckBox jckIsCfdComplement;
    private javax.swing.JCheckBox jckIsDeleted;
    private javax.swing.JCheckBox jckIsPrintable;
    private javax.swing.JLabel jlCfdComplementDisposition;
    private javax.swing.JLabel jlCfdComplementDispositionHint;
    private javax.swing.JLabel jlCfdComplementRule;
    private javax.swing.JLabel jlCfdComplementRuleHint;
    private javax.swing.JLabel jlNotes;
    private javax.swing.JPanel jpControls;
    private javax.swing.JPanel jpRegistry;
    private javax.swing.JScrollPane jspNotes;
    private javax.swing.JTextArea jtaNotes;
    private javax.swing.JTextField jtfCfdComplementDisposition;
    private javax.swing.JTextField jtfCfdComplementRule;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moDpsNotes = null;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        moFieldIsAllDocs.setFieldValue(true);
        moFieldIsPrintable.setFieldValue(true);
        moFieldIsCfdComplement.setFieldValue(false);
        itemStateChangedCfdComplement();

        jckIsDeleted.setEnabled(false);
    }

    @Override
    public void formRefreshCatalogues() {

    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        moDpsNotes = (SDataDpsNotes) registry;

        moFieldNotes.setFieldValue(moDpsNotes.getNotes());
        moFieldIsDeleted.setFieldValue(moDpsNotes.getIsDeleted());
        moFieldIsAllDocs.setFieldValue(moDpsNotes.getIsAllDocs());
        moFieldIsPrintable.setFieldValue(moDpsNotes.getIsPrintable());
        moFieldIsCfdComplement.setFieldValue(moDpsNotes.getIsCfdComplement());
        moFieldCfdComplementDisposition.setFieldValue(moDpsNotes.getCfdComplementDisposition());
        moFieldCfdComplementRule.setFieldValue(moDpsNotes.getCfdComplementRule());

        jckIsDeleted.setEnabled(true);
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        if (moDpsNotes == null) {
            moDpsNotes = new SDataDpsNotes();
            moDpsNotes.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
        }
        else {
            moDpsNotes.setIsRegistryEdited(true);
            moDpsNotes.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
        }

        moDpsNotes.setNotes(moFieldNotes.getString());
        moDpsNotes.setCfdComplementDisposition(moFieldCfdComplementDisposition.getString());
        moDpsNotes.setCfdComplementRule(moFieldCfdComplementRule.getString());
        moDpsNotes.setIsAllDocs(moFieldIsAllDocs.getBoolean());
        moDpsNotes.setIsPrintable(moFieldIsPrintable.getBoolean());
        moDpsNotes.setIsCfdComplement(moFieldIsCfdComplement.getBoolean());
        moDpsNotes.setIsDeleted(moFieldIsDeleted.getBoolean());

        return moDpsNotes;
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof javax.swing.JCheckBox) {
            javax.swing.JCheckBox checkBox = (javax.swing.JCheckBox) e.getSource();
            if (checkBox == jckIsCfdComplement) {
                itemStateChangedCfdComplement();
            }
        }
    }
}
