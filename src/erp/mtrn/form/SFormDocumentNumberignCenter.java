/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SFormDocumentNumberignCenter.java
 *
 * Created on 6/07/2010, 02:29:25 PM
 */

package erp.mtrn.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataUtilities;
import erp.data.SProcConstants;
import erp.lib.SLibConstants;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.mtrn.data.SDataDiogDocumentNumberingCenter;
import erp.mtrn.data.SDataDpsDocumentNumberingCenter;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JOptionPane;

/**
 *
 * @author Alfonso Flores
 */
public class SFormDocumentNumberignCenter extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mtrn.data.SDataDpsDocumentNumberingCenter moDpsDocumentNumberingCenter;
    private erp.mtrn.data.SDataDiogDocumentNumberingCenter moDiogDocumentNumberingCenter;
    private erp.lib.form.SFormField moFieldDocNumberingCenter;
    private erp.lib.form.SFormField moFieldIsDeleted;

    private int mnParamDocumentType;

    /** Creates new form SFormDocumentNumberignCenter */
    public SFormDocumentNumberignCenter(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jlDocNumberingCenter = new javax.swing.JLabel();
        jtfDocNumberingCenter = new javax.swing.JTextField();
        jckIsDeleted = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Centro de foliado de docs. de");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setPreferredSize(new java.awt.Dimension(392, 33));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jPanel1.add(jbCancel);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.GridLayout(2, 2, 0, 1));

        jlDocNumberingCenter.setText("Centro de foliado: *");
        jPanel3.add(jlDocNumberingCenter);

        jtfDocNumberingCenter.setText("NUMBERING CENTER");
        jPanel3.add(jtfDocNumberingCenter);

        jckIsDeleted.setText("Registro eliminado");
        jPanel3.add(jckIsDeleted);

        jPanel2.add(jPanel3, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-400)/2, (screenSize.height-300)/2, 400, 300);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        mvFields = new Vector<SFormField>();

        moFieldDocNumberingCenter = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtfDocNumberingCenter, jlDocNumberingCenter);
        moFieldDocNumberingCenter.setLengthMax(50);
        moFieldIsDeleted = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsDeleted);

        mvFields.add(moFieldDocNumberingCenter);
        mvFields.add(moFieldIsDeleted);

        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction action = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), action, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            jtfDocNumberingCenter.requestFocus();
        }
    }

    private void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbOk;
    private javax.swing.JCheckBox jckIsDeleted;
    private javax.swing.JLabel jlDocNumberingCenter;
    private javax.swing.JTextField jtfDocNumberingCenter;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moDpsDocumentNumberingCenter = null;
        moDiogDocumentNumberingCenter = null;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        jckIsDeleted.setEnabled(false);
    }

    @Override
    public void formRefreshCatalogues() {

    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();
        Object[] oParamsIn = null;

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        if (!validation.getIsError()) {
            switch (mnParamDocumentType) {
                case SDataConstants.TRN_DNC_DPS:
                    oParamsIn = new Object[] { moDpsDocumentNumberingCenter == null ? 0 : moDpsDocumentNumberingCenter.getPkDocNumberingCenterId(), moFieldDocNumberingCenter.getString() };
                    break;
                case SDataConstants.TRN_DNC_DIOG:
                    oParamsIn = new Object[] { moDiogDocumentNumberingCenter == null ? 0 : moDiogDocumentNumberingCenter.getPkDocNumberingCenterId(), moFieldDocNumberingCenter.getString() };
                    break;
                default:
            }

            if (SDataUtilities.callProcedureVal(miClient, mnParamDocumentType == SDataConstants.TRN_DNC_DPS ? SProcConstants.TRN_DNC_DPS_VAL : SProcConstants.TRN_DNC_DIOG_VAL, oParamsIn, SLibConstants.EXEC_MODE_VERBOSE) > 0 ) {
                if (miClient.showMsgBoxConfirm("El valor del campo '" + jlDocNumberingCenter.getText() + "' ya existe, Â¿desea conservalo? ") == JOptionPane.NO_OPTION) {
                    validation.setComponent(jtfDocNumberingCenter);
                    validation.setIsError(true);
                }
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        switch (mnParamDocumentType) {
            case SDataConstants.TRN_DNC_DPS:
                moDpsDocumentNumberingCenter = (SDataDpsDocumentNumberingCenter) registry;
                moFieldDocNumberingCenter.setFieldValue(moDpsDocumentNumberingCenter.getDocNumberingCenter());
                moFieldIsDeleted.setFieldValue(moDpsDocumentNumberingCenter.getIsDeleted());

                if (moDpsDocumentNumberingCenter.getIsCanDelete()) {
                    jckIsDeleted.setEnabled(true);
                }
                break;
            case SDataConstants.TRN_DNC_DIOG:
                moDiogDocumentNumberingCenter = (SDataDiogDocumentNumberingCenter) registry;
                moFieldDocNumberingCenter.setFieldValue(moDiogDocumentNumberingCenter.getDocNumberingCenter());
                moFieldIsDeleted.setFieldValue(moDiogDocumentNumberingCenter.getIsDeleted());

                if (moDiogDocumentNumberingCenter.getIsCanDelete()) {
                    jckIsDeleted.setEnabled(true);
                }
                break;
            default:
        }
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        switch (mnParamDocumentType) {
            case SDataConstants.TRN_DNC_DPS:
                if (moDpsDocumentNumberingCenter == null) {
                    moDpsDocumentNumberingCenter = new SDataDpsDocumentNumberingCenter();
                    moDpsDocumentNumberingCenter.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
                }
                else {
                    moDpsDocumentNumberingCenter.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
                }

                moDpsDocumentNumberingCenter.setDocNumberingCenter(moFieldDocNumberingCenter.getString());
                moDpsDocumentNumberingCenter.setIsCanEdit(true);
                moDpsDocumentNumberingCenter.setIsCanDelete(true);
                moDpsDocumentNumberingCenter.setIsDeleted(moFieldIsDeleted.getBoolean());
                break;
            case SDataConstants.TRN_DNC_DIOG:
                if (moDiogDocumentNumberingCenter == null) {
                    moDiogDocumentNumberingCenter = new SDataDiogDocumentNumberingCenter();
                    moDiogDocumentNumberingCenter.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
                }
                else {
                    moDiogDocumentNumberingCenter.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
                }

                moDiogDocumentNumberingCenter.setDocNumberingCenter(moFieldDocNumberingCenter.getString());
                moDiogDocumentNumberingCenter.setIsCanEdit(true);
                moDiogDocumentNumberingCenter.setIsCanDelete(true);
                moDiogDocumentNumberingCenter.setIsDeleted(moFieldIsDeleted.getBoolean());
                break;
            default:
        }

        return moDpsDocumentNumberingCenter == null ? moDiogDocumentNumberingCenter : moDpsDocumentNumberingCenter;
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        if (type == SDataConstantsSys.VALUE_TYPE_DOC) {
            mnParamDocumentType = ((int[]) value)[0];
            
            switch (mnParamDocumentType) {
                case SDataConstants.TRN_DNC_DPS:
                    setTitle("Centro de foliado de docs. de C/V");
                    break;
                case SDataConstants.TRN_DNC_DIOG:
                        setTitle("Centro de foliado de docs. de inventarios");
                    break;
                default:
            }
        }
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
        }
    }
}
