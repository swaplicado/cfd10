/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SDialogRepSalesPurchasesComparative.java
 *
 * Created on 28/05/2010, 10:43:55 AM
 */

package erp.mtrn.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibTimeUtilities;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.mitm.data.SDataUnitType;
import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Map;
import java.util.Vector;
import javax.swing.AbstractAction;
import net.sf.jasperreports.engine.*;
import net.sf.jasperreports.view.*;

/**
 *
 * @author Sergio Flores
 */
public class SDialogRepSalesPurchasesComparative extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.lib.form.SFormField moFieldDateBegin;
    private erp.lib.form.SFormField moFieldDateEnd;
    private erp.lib.form.SFormField moFieldUnitType;

    private java.util.Date mtDatePrevPerBegin;
    private java.util.Date mtDatePrevPerEnd;

    private int mnMonthRange;

    /** Creates new form SDialogRepSalesPurchasesComparative
     * @param client ERP Client interface.
     * @param formType Constants defined in SDataConstantsSys (TRNS_CT_DPS_PUR or TRNS_CT_DPS_SAL).
     */
    public SDialogRepSalesPurchasesComparative(erp.client.SClientInterface client, int formType) {
        super(client.getFrame(), true);
        miClient = client;
        mnFormType = formType;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jbPrint = new javax.swing.JButton();
        jbClose = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlDateBegin = new javax.swing.JLabel();
        jftDateBegin = new javax.swing.JFormattedTextField();
        jbDateBegin = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jlDateEnd = new javax.swing.JLabel();
        jftDateEnd = new javax.swing.JFormattedTextField();
        jbDateEnd = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jrbPrevYear = new javax.swing.JRadioButton();
        jrbPrevPeriodYear = new javax.swing.JRadioButton();
        jPanel7 = new javax.swing.JPanel();
        jlUnitType = new javax.swing.JLabel();
        jcbUnitType = new javax.swing.JComboBox();
        jckWithoutRelatedParty = new javax.swing.JCheckBox();
        jckShowDetail = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Reporte comparativo de compras/ventas netas");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setPreferredSize(new java.awt.Dimension(392, 33));
        jPanel1.setLayout(new java.awt.FlowLayout(2));

        jbPrint.setText("Imprimir");
        jbPrint.setToolTipText("[Ctrl + Enter]");
        jbPrint.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jbPrint);

        jbClose.setText("Cerrar");
        jbClose.setToolTipText("[Escape]");
        jbClose.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jbClose);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Configuración del reporte:"));
        jPanel2.setLayout(new java.awt.BorderLayout(0, 1));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Período actual:"));
        jPanel3.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jPanel4.setLayout(new java.awt.FlowLayout(0, 2, 0));

        jlDateBegin.setText("Fecha inicial: *");
        jlDateBegin.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlDateBegin);

        jftDateBegin.setText("dd/mm/yyyy");
        jftDateBegin.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel4.add(jftDateBegin);

        jbDateBegin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_date_day.gif"))); // NOI18N
        jbDateBegin.setToolTipText("Seleccionar fecha inicial");
        jbDateBegin.setFocusable(false);
        jbDateBegin.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel4.add(jbDateBegin);

        jPanel3.add(jPanel4);

        jPanel5.setLayout(new java.awt.FlowLayout(0, 2, 0));

        jlDateEnd.setText("Fecha final: *");
        jlDateEnd.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlDateEnd);

        jftDateEnd.setText("dd/mm/yyyy");
        jftDateEnd.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel5.add(jftDateEnd);

        jbDateEnd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_date_day.gif"))); // NOI18N
        jbDateEnd.setToolTipText("Seleccionar fecha final");
        jbDateEnd.setFocusable(false);
        jbDateEnd.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel5.add(jbDateEnd);

        jPanel3.add(jPanel5);

        jPanel2.add(jPanel3, java.awt.BorderLayout.NORTH);

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Opciones del reporte:"));
        jPanel9.setLayout(new java.awt.BorderLayout(0, 1));

        jPanel6.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        buttonGroup1.add(jrbPrevYear);
        jrbPrevYear.setText("Período actual vs. período actual del ejercicio anterior");
        jPanel6.add(jrbPrevYear);

        buttonGroup1.add(jrbPrevPeriodYear);
        jrbPrevPeriodYear.setText("Período actual vs. período anterior vs. período actual del ejercicio anterior");
        jPanel6.add(jrbPrevPeriodYear);

        jPanel7.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlUnitType.setText("Tipo de unidad: *");
        jlUnitType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlUnitType);

        jcbUnitType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "(Seleccionar tipo de unidad)", "CANTIDAD", "LONGITUD", "SUPERFICIE", "VOLUMEN", "MASA" }));
        jcbUnitType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel7.add(jcbUnitType);

        jPanel6.add(jPanel7);

        jckWithoutRelatedParty.setText("Sin partes relacionadas");
        jPanel6.add(jckWithoutRelatedParty);

        jckShowDetail.setText("Mostrar detalle");
        jPanel6.add(jckShowDetail);

        jPanel9.add(jPanel6, java.awt.BorderLayout.PAGE_START);

        jPanel2.add(jPanel9, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-600)/2, (screenSize.height-400)/2, 600, 400);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        mvFields = new Vector<SFormField>();

        moFieldDateBegin = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jftDateBegin, jlDateBegin);
        moFieldDateBegin.setPickerButton(jbDateBegin);
        moFieldDateEnd = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jftDateEnd, jlDateEnd);
        moFieldDateEnd.setPickerButton(jbDateEnd);
        moFieldUnitType = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbUnitType, jlUnitType);

        mvFields.add(moFieldDateBegin);
        mvFields.add(moFieldDateEnd);
        mvFields.add(moFieldUnitType);

        jbPrint.addActionListener(this);
        jbClose.addActionListener(this);
        jbDateBegin.addActionListener(this);
        jbDateEnd.addActionListener(this);

        mtDatePrevPerBegin = null;
        mtDatePrevPerEnd = null;

        mnMonthRange = 0;

        switch (mnFormType) {
            case SDataConstantsSys.TRNS_CT_DPS_PUR:
                setTitle("Reporte comparativo de compras netas");
                break;
            case SDataConstantsSys.TRNS_CT_DPS_SAL:
                setTitle("Reporte comparativo de ventas netas");
                break;
            default:
                SLibUtilities.renderException(this, new Exception(SLibConstants.MSG_ERR_UTIL_UNKNOWN_OPTION));
        }

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionPrint(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "print", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction action = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionClose(); }
        };

        SFormUtilities.putActionMap(getRootPane(), action, "exit", KeyEvent.VK_ESCAPE, 0);

        setModalityType(ModalityType.MODELESS);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            jftDateBegin.requestFocus();
        }
    }

    private void actionPrint() {
        String title = "";
        String field = "";
        SDataUnitType unitType = null;
        Cursor cursor = getCursor();
        SFormValidation validation = formValidate();
        Map<String, Object> map = null;
        JasperPrint jasperPrint = null;
        JasperViewer jasperViewer = null;

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            try {
                setCursor(new Cursor(Cursor.WAIT_CURSOR));

                switch (jcbUnitType.getSelectedIndex()) {
                    case 1:
                        field = "qty";
                        unitType = (SDataUnitType) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_TP_UNIT, new int[] { SDataConstantsSys.ITMU_TP_UNIT_QTY }, SLibConstants.EXEC_MODE_VERBOSE);
                        break;
                    case 2:
                        field = "len";
                        unitType = (SDataUnitType) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_TP_UNIT, new int[] { SDataConstantsSys.ITMU_TP_UNIT_LEN }, SLibConstants.EXEC_MODE_VERBOSE);
                        break;
                    case 3:
                        field = "surf";
                        unitType = (SDataUnitType) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_TP_UNIT, new int[] { SDataConstantsSys.ITMU_TP_UNIT_SURF }, SLibConstants.EXEC_MODE_VERBOSE);
                        break;
                    case 4:
                        field = "vol";
                        unitType = (SDataUnitType) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_TP_UNIT, new int[] { SDataConstantsSys.ITMU_TP_UNIT_VOL }, SLibConstants.EXEC_MODE_VERBOSE);
                        break;
                    case 5:
                        field = "mass";
                        unitType = (SDataUnitType) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_TP_UNIT, new int[] { SDataConstantsSys.ITMU_TP_UNIT_MASS }, SLibConstants.EXEC_MODE_VERBOSE);
                        break;
                }

                title = getTitle() + (jckShowDetail.isSelected() ? "" : " (resumen)");

                createPreviousPeriod();
                map = miClient.createReportParams();
                map.put("sTitle", title.toUpperCase());
                map.put("tDatePerBegin", moFieldDateBegin.getDate());
                map.put("tDatePerEnd", moFieldDateEnd.getDate());
                map.put("tDatePrevPerBegin", mtDatePrevPerBegin);
                map.put("tDatePrevPerEnd", mtDatePrevPerEnd);
                map.put("tDatePrevYearBegin", SLibTimeUtilities.addDate(moFieldDateBegin.getDate(), -1, 0, 0));
                map.put("tDatePrevYearEnd", SLibTimeUtilities.addDate(moFieldDateEnd.getDate(), -1, 0, 0));
                map.put("sField", field);
                map.put("sUnit", unitType.getUnitType());
                map.put("sUnitBase", unitType.getUnitBase());
                map.put("sCurrencyPlural", miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getTextPlural());
                map.put("bShowDetail", jckShowDetail.isSelected());
                map.put("sSqlWhereWithoutRelatedParty", jckWithoutRelatedParty.isSelected() ? " WHERE bp.b_att_rel_pty = 0 " : "");

                jasperPrint = SDataUtilities.fillReport(miClient, jrbPrevYear.isSelected() ? SDataConstantsSys.REP_TRN_PS_COMP_PY : SDataConstantsSys.REP_TRN_PS_COMP_PPY, map);
                jasperViewer = new JasperViewer(jasperPrint, false);
                jasperViewer.setTitle(title);
                jasperViewer.setVisible(true);
            }
            catch(Exception e) {
                SLibUtilities.renderException(this, e);
            }
            finally {
                setCursor(cursor);
            }
        }
    }

    private void actionClose() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    private void actionDateBegin() {
        miClient.getGuiDatePickerXXX().formReset();
        miClient.getGuiDatePickerXXX().setDate(moFieldDateBegin.getDate());
        miClient.getGuiDatePickerXXX().setVisible(true);

        if (miClient.getGuiDatePickerXXX().getFormResult() == SLibConstants.FORM_RESULT_OK) {
            moFieldDateBegin.setFieldValue(miClient.getGuiDatePickerXXX().getGuiDate());
            jftDateBegin.requestFocus();
        }
    }

    private void actionDateEnd() {
        miClient.getGuiDatePickerXXX().formReset();
        miClient.getGuiDatePickerXXX().setDate(moFieldDateEnd.getDate());
        miClient.getGuiDatePickerXXX().setVisible(true);

        if (miClient.getGuiDatePickerXXX().getFormResult() == SLibConstants.FORM_RESULT_OK) {
            moFieldDateEnd.setFieldValue(miClient.getGuiDatePickerXXX().getGuiDate());
            jftDateEnd.requestFocus();
        }
    }

    private void createPreviousPeriod() {
        if (moFieldDateEnd.getDate().compareTo(SLibTimeUtilities.getEndOfMonth(moFieldDateEnd.getDate())) == 0) {
            mtDatePrevPerEnd = SLibTimeUtilities.getEndOfMonth(SLibTimeUtilities.addDate(moFieldDateBegin.getDate(), 0, -1, 0));
        }
        else {
            if (SLibTimeUtilities.getMaxDayOfMonth(SLibTimeUtilities.addDate(moFieldDateBegin.getDate(), 0, -1, 0)) >= SLibTimeUtilities.digestDate(moFieldDateEnd.getDate())[2]) {
                mtDatePrevPerEnd = SLibTimeUtilities.addDate(moFieldDateBegin.getDate(), 0, -1, (SLibTimeUtilities.digestDate(moFieldDateEnd.getDate())[2] - 1));
            }
            else {
                mtDatePrevPerEnd = SLibTimeUtilities.getEndOfMonth(SLibTimeUtilities.addDate(moFieldDateBegin.getDate(), 0, -1, 0));
            }
        }

        mtDatePrevPerBegin = SLibTimeUtilities.getBeginOfMonth(SLibTimeUtilities.addDate(moFieldDateBegin.getDate(), 0, -mnMonthRange, 0));
    }

    public int getMonthRange(java.util.Date dateBegin, java.util.Date dateEnd) {
        int nMonthBegin = 0;
        int nMonthEnd = 0;

        if (SLibTimeUtilities.digestYear(moFieldDateBegin.getDate())[0] == SLibTimeUtilities.digestYear(moFieldDateEnd.getDate())[0]) {
            nMonthBegin = SLibTimeUtilities.digestDate(dateBegin)[1];
            nMonthEnd = SLibTimeUtilities.digestDate(dateEnd)[1];

            mnMonthRange = (nMonthEnd - nMonthBegin) + 1;
        }
        else {
            nMonthBegin = SLibTimeUtilities.digestDate(SLibTimeUtilities.getEndOfYear(dateBegin))[1] - SLibTimeUtilities.digestDate(dateBegin)[1] + 1;
            nMonthEnd = SLibTimeUtilities.digestDate(dateEnd)[1];

            mnMonthRange = nMonthBegin + nMonthEnd;
        }

        return mnMonthRange;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbClose;
    private javax.swing.JButton jbDateBegin;
    private javax.swing.JButton jbDateEnd;
    private javax.swing.JButton jbPrint;
    private javax.swing.JComboBox jcbUnitType;
    private javax.swing.JCheckBox jckShowDetail;
    private javax.swing.JCheckBox jckWithoutRelatedParty;
    private javax.swing.JFormattedTextField jftDateBegin;
    private javax.swing.JFormattedTextField jftDateEnd;
    private javax.swing.JLabel jlDateBegin;
    private javax.swing.JLabel jlDateEnd;
    private javax.swing.JLabel jlUnitType;
    private javax.swing.JRadioButton jrbPrevPeriodYear;
    private javax.swing.JRadioButton jrbPrevYear;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mbResetingForm = true;

        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        moFieldDateBegin.setFieldValue(SLibTimeUtilities.getBeginOfMonth(miClient.getSessionXXX().getWorkingDate()));
        moFieldDateEnd.setFieldValue(SLibTimeUtilities.getEndOfMonth(miClient.getSessionXXX().getWorkingDate()));
        jcbUnitType.setSelectedIndex(1);
        jrbPrevYear.setSelected(true);
        jckShowDetail.setSelected(true);
        jckWithoutRelatedParty.setSelected(false);

        mbResetingForm = false;
    }

    @Override
    public void formRefreshCatalogues() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        if (!validation.getIsError()) {
            if (moFieldDateEnd.getDate().compareTo(moFieldDateBegin.getDate()) < 0) {
                validation.setMessage("La fecha final debe ser mayor o igual a la fecha inicial.");
                validation.setComponent(jftDateEnd);
            }
        }

        if (!validation.getIsError()) {
            if ((SLibTimeUtilities.digestYear(moFieldDateEnd.getDate())[0] - SLibTimeUtilities.digestYear(moFieldDateBegin.getDate())[0]) > 1) {
                validation.setMessage("La fecha inicial debe pertenecer máximo al ejercicio anterior.");
                validation.setComponent(jftDateBegin);
            }
        }

        if (!validation.getIsError()) {
            if (getMonthRange(moFieldDateBegin.getDate(), moFieldDateEnd.getDate()) > 6) {
                validation.setMessage("El rango de fechas no debe ser mayor a seis meses.");
                validation.setComponent(jftDateEnd);
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbPrint) {
                actionPrint();
            }
            else if (button == jbClose) {
                actionClose();
            }
            else if (button == jbDateBegin) {
                actionDateBegin();
            }
            else if (button == jbDateEnd) {
                actionDateEnd();
            }
        }
    }
}
