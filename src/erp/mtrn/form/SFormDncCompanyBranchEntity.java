/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SFormDncCompanyBranchEntity.java
 *
 * Created on 8/07/2010, 11:28:46 AM
 */

package erp.mtrn.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataUtilities;
import erp.data.SProcConstants;
import erp.lib.SLibConstants;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.mtrn.data.SDataDiogDncCompanyBranch;
import erp.mtrn.data.SDataDiogDncCompanyBranchEntity;
import erp.mtrn.data.SDataDpsDncCompanyBranch;
import erp.mtrn.data.SDataDpsDncCompanyBranchEntity;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;

/**
 *
 * @author Alfonso Flores
 */
public class SFormDncCompanyBranchEntity extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mtrn.data.SDataDpsDncCompanyBranch moDpsDncCompanyBranch;
    private erp.mtrn.data.SDataDpsDncCompanyBranchEntity moDpsDncCompanyBranchEntity;
    private erp.mtrn.data.SDataDiogDncCompanyBranch moDiogDncCompanyBranch;
    private erp.mtrn.data.SDataDiogDncCompanyBranchEntity moDiogDncCompanyBranchEntity;
    private erp.lib.form.SFormField moFieldPkCompanyBranchId;
    private erp.lib.form.SFormField moFieldPkEntityId;
    private erp.lib.form.SFormField moFieldPkDocNumberingCenterId;
    private erp.lib.form.SFormField moFieldIsDeleted;

    private int mnParamDocumentType;

    /** Creates new form SFormDncCompanyBranchEntity */
    public SFormDncCompanyBranchEntity(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jlPkCompanyBranchId = new javax.swing.JLabel();
        jcbPkCompanyBranchId = new javax.swing.JComboBox<SFormComponentItem>();
        jlPkEntityId = new javax.swing.JLabel();
        jcbPkEntityId = new javax.swing.JComboBox<SFormComponentItem>();
        jlPkDocNumberingCenterId = new javax.swing.JLabel();
        jcbPkDocNumberingCenterId = new javax.swing.JComboBox<SFormComponentItem>();
        jckIsDeleted = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Centro de foliado de docs. de");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setPreferredSize(new java.awt.Dimension(392, 33));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jPanel1.add(jbCancel);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.GridLayout(4, 2, 0, 1));

        jlPkCompanyBranchId.setForeground(java.awt.Color.blue);
        jlPkCompanyBranchId.setText("Sucursal de la empresa: *");
        jPanel3.add(jlPkCompanyBranchId);

        jcbPkCompanyBranchId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbPkCompanyBranchId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbPkCompanyBranchIdItemStateChanged(evt);
            }
        });
        jPanel3.add(jcbPkCompanyBranchId);

        jlPkEntityId.setForeground(java.awt.Color.blue);
        jlPkEntityId.setText("Entidad: *");
        jPanel3.add(jlPkEntityId);

        jcbPkEntityId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel3.add(jcbPkEntityId);

        jlPkDocNumberingCenterId.setForeground(java.awt.Color.blue);
        jlPkDocNumberingCenterId.setText("Centro de foliado: *");
        jPanel3.add(jlPkDocNumberingCenterId);

        jcbPkDocNumberingCenterId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel3.add(jcbPkDocNumberingCenterId);

        jckIsDeleted.setText("Registro eliminado");
        jPanel3.add(jckIsDeleted);

        jPanel2.add(jPanel3, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        setSize(new java.awt.Dimension(400, 300));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void jcbPkCompanyBranchIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbPkCompanyBranchIdItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            itemStateChangedPkCompanyBranchId();
        }
    }//GEN-LAST:event_jcbPkCompanyBranchIdItemStateChanged

    private void initComponentsExtra() {
        mvFields = new Vector<SFormField>();

        moFieldPkCompanyBranchId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbPkCompanyBranchId, jlPkCompanyBranchId);
        moFieldPkEntityId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, false, jcbPkEntityId, jlPkEntityId);
        moFieldPkDocNumberingCenterId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, false, jcbPkDocNumberingCenterId, jlPkDocNumberingCenterId);
        moFieldIsDeleted = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsDeleted);

        mvFields.add(moFieldPkCompanyBranchId);
        mvFields.add(moFieldPkEntityId);
        mvFields.add(moFieldPkDocNumberingCenterId);
        mvFields.add(moFieldIsDeleted);

        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction action = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), action, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            if (moDpsDncCompanyBranch == null && moDiogDncCompanyBranch == null && moDpsDncCompanyBranchEntity == null && moDiogDncCompanyBranchEntity == null) {
                jcbPkCompanyBranchId.requestFocus();
            }
            else {
                jckIsDeleted.requestFocus();
            }
        }
    }

    private void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    private void populateComboBoxEntity() {
        int category = 0;

        switch (mnParamDocumentType) {
            case SDataConstants.TRN_DNC_DPS_COB:
            case SDataConstants.TRN_DNC_DPS_COB_ENT:
                category = SDataConstantsSys.CFGS_CT_ENT_POS;
                break;
            case SDataConstants.TRN_DNC_DIOG_COB:
            case SDataConstants.TRN_DNC_DIOG_COB_ENT:
                category = SDataConstantsSys.CFGS_CT_ENT_WH;
                break;
            default:
        }

        SFormUtilities.populateComboBox(miClient, jcbPkEntityId, SDataConstants.CFGU_COB_ENT, new int[] { moFieldPkCompanyBranchId.getKeyAsIntArray()[0], category });
    }

    private void itemStateChangedPkCompanyBranchId() {
        if (!mbResetingForm) {
            if ((mnParamDocumentType == SDataConstants.TRN_DNC_DPS_COB_ENT || mnParamDocumentType == SDataConstants.TRN_DNC_DIOG_COB_ENT) && moFieldPkCompanyBranchId.getKeyAsIntArray()[0] > 0) {
                renderComboBoxEntity(true);
                populateComboBoxEntity();
            }
        }
    }

    private void renderComboBoxEntity(boolean b) {
        jcbPkEntityId.setEnabled(b);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbOk;
    private javax.swing.JComboBox<SFormComponentItem> jcbPkCompanyBranchId;
    private javax.swing.JComboBox<SFormComponentItem> jcbPkDocNumberingCenterId;
    private javax.swing.JComboBox<SFormComponentItem> jcbPkEntityId;
    private javax.swing.JCheckBox jckIsDeleted;
    private javax.swing.JLabel jlPkCompanyBranchId;
    private javax.swing.JLabel jlPkDocNumberingCenterId;
    private javax.swing.JLabel jlPkEntityId;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moDpsDncCompanyBranch = null;
        moDiogDncCompanyBranch = null;
        moDpsDncCompanyBranchEntity = null;
        moDiogDncCompanyBranchEntity = null;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        jcbPkCompanyBranchId.setEnabled(true);
        jcbPkDocNumberingCenterId.setEnabled(true);
        jlPkEntityId.setEnabled(mnParamDocumentType == SDataConstants.TRN_DNC_DPS_COB_ENT || mnParamDocumentType == SDataConstants.TRN_DNC_DIOG_COB_ENT);
        jcbPkEntityId.removeAllItems();
        renderComboBoxEntity(false);
        jckIsDeleted.setEnabled(false);
        mbResetingForm = false;
    }

    @Override
    public void formRefreshCatalogues() {
        mbResetingForm = true;
        SFormUtilities.populateComboBox(miClient, jcbPkCompanyBranchId, SDataConstants.BPSU_BPB, new int[] { miClient.getSessionXXX().getCompany().getPkCompanyId() });

        switch (mnParamDocumentType) {
            case SDataConstants.TRN_DNC_DPS_COB:
            case SDataConstants.TRN_DNC_DPS_COB_ENT:
                SFormUtilities.populateComboBox(miClient, jcbPkDocNumberingCenterId, SDataConstants.TRN_DNC_DPS);
                break;
            case SDataConstants.TRN_DNC_DIOG_COB:
            case SDataConstants.TRN_DNC_DIOG_COB_ENT:
                SFormUtilities.populateComboBox(miClient, jcbPkDocNumberingCenterId, SDataConstants.TRN_DNC_DIOG);
                break;
            default:
        }
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();
        Object[] oParamsIn = null;

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        if (!validation.getIsError()) {
            if ((mnParamDocumentType == SDataConstants.TRN_DNC_DPS_COB_ENT || mnParamDocumentType == SDataConstants.TRN_DNC_DIOG_COB_ENT) && moFieldPkEntityId.getKeyAsIntArray()[1] == 0) {
                validation.setMessage("Se debe seleccionar una opción para el campo '" + jlPkEntityId.getText() + "'.");
                validation.setComponent(jcbPkEntityId);
            }
            else if (moFieldPkDocNumberingCenterId.getKeyAsIntArray()[0] == 0) {
                validation.setMessage("Se debe seleccionar una opción para el campo '" + jlPkDocNumberingCenterId.getText() + "'.");
                validation.setComponent(jcbPkDocNumberingCenterId);
            }
            else {
                switch (mnParamDocumentType) {
                    case SDataConstants.TRN_DNC_DPS_COB:
                        if (moDpsDncCompanyBranch == null) {
                            oParamsIn = new Object[] { moFieldPkCompanyBranchId.getKeyAsIntArray()[0], moFieldPkDocNumberingCenterId.getKeyAsIntArray()[0] };
                        }
                        break;
                    case SDataConstants.TRN_DNC_DIOG_COB:
                        if (moDiogDncCompanyBranch == null) {
                            oParamsIn = new Object[] { moFieldPkCompanyBranchId.getKeyAsIntArray()[0], moFieldPkDocNumberingCenterId.getKeyAsIntArray()[0] };
                        }
                        break;
                    case SDataConstants.TRN_DNC_DPS_COB_ENT:
                        if (moDpsDncCompanyBranchEntity == null) {
                            oParamsIn = new Object[] { moFieldPkCompanyBranchId.getKeyAsIntArray()[0], moFieldPkEntityId.getKeyAsIntArray()[1],
                            moFieldPkDocNumberingCenterId.getKeyAsIntArray()[0] };
                        }
                        break;
                    case SDataConstants.TRN_DNC_DIOG_COB_ENT:
                        if (moDiogDncCompanyBranchEntity == null) {
                            oParamsIn = new Object[] { moFieldPkCompanyBranchId.getKeyAsIntArray()[0], moFieldPkEntityId.getKeyAsIntArray()[1],
                            moFieldPkDocNumberingCenterId.getKeyAsIntArray()[0] };
                        }
                        break;
                    default:
                }

                if (oParamsIn != null) {
                    if ( SDataUtilities.callProcedureVal(miClient,
                        mnParamDocumentType == SDataConstants.TRN_DNC_DPS_COB ? SProcConstants.TRN_DNC_DPS_COB_VAL :
                        mnParamDocumentType == SDataConstants.TRN_DNC_DIOG_COB ? SProcConstants.TRN_DNC_DIOG_COB_VAL :
                        mnParamDocumentType == SDataConstants.TRN_DNC_DPS_COB_ENT ? SProcConstants.TRN_DNC_DPS_COB_ENT_VAL :
                        SProcConstants.TRN_DNC_DIOG_COB_ENT_VAL,
                        oParamsIn, SLibConstants.EXEC_MODE_VERBOSE) > 0 ) {
                        validation.setMessage("Ya existe un centro de foliado para la " +
                                (mnParamDocumentType == SDataConstants.TRN_DNC_DPS_COB || mnParamDocumentType == SDataConstants.TRN_DNC_DIOG_COB ?
                                "sucursal seleccionada" : "entidad seleccionada"));
                        validation.setComponent(jcbPkCompanyBranchId);
                    }
                }
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        switch (mnParamDocumentType) {
            case SDataConstants.TRN_DNC_DPS_COB:
                moDpsDncCompanyBranch = (SDataDpsDncCompanyBranch) registry;
                moFieldPkCompanyBranchId.setFieldValue(new int[] { moDpsDncCompanyBranch.getPkCompanyBranchId() });
                moFieldPkDocNumberingCenterId.setFieldValue(new int[] { moDpsDncCompanyBranch.getPkDocNumberingCenterId() });
                moFieldIsDeleted.setFieldValue(moDpsDncCompanyBranch.getIsDeleted());
                break;
            case SDataConstants.TRN_DNC_DPS_COB_ENT:
                moDpsDncCompanyBranchEntity = (SDataDpsDncCompanyBranchEntity) registry;
                moFieldPkCompanyBranchId.setFieldValue(new int[] { moDpsDncCompanyBranchEntity.getPkCompanyBranchId() });
                populateComboBoxEntity();
                moFieldPkEntityId.setFieldValue(new int[] { moDpsDncCompanyBranchEntity.getPkCompanyBranchId(), moDpsDncCompanyBranchEntity.getPkEntityId() });
                moFieldPkDocNumberingCenterId.setFieldValue(new int[] { moDpsDncCompanyBranchEntity.getPkDocNumberingCenterId() });
                moFieldIsDeleted.setFieldValue(moDpsDncCompanyBranchEntity.getIsDeleted());
                break;
            case SDataConstants.TRN_DNC_DIOG_COB:
                moDiogDncCompanyBranch = (SDataDiogDncCompanyBranch) registry;
                moFieldPkCompanyBranchId.setFieldValue(new int[] { moDiogDncCompanyBranch.getPkCompanyBranchId() });
                moFieldPkDocNumberingCenterId.setFieldValue(new int[] { moDiogDncCompanyBranch.getPkDocNumberingCenterId() });
                moFieldIsDeleted.setFieldValue(moDiogDncCompanyBranch.getIsDeleted());
                break;
            case SDataConstants.TRN_DNC_DIOG_COB_ENT:
                moDiogDncCompanyBranchEntity = (SDataDiogDncCompanyBranchEntity) registry;
                moFieldPkCompanyBranchId.setFieldValue(new int[] { moDiogDncCompanyBranchEntity.getPkCompanyBranchId() });
                populateComboBoxEntity();
                moFieldPkEntityId.setFieldValue(new int[] { moDiogDncCompanyBranchEntity.getPkCompanyBranchId(), moDiogDncCompanyBranchEntity.getPkEntityId() });
                moFieldPkDocNumberingCenterId.setFieldValue(new int[] { moDiogDncCompanyBranchEntity.getPkDocNumberingCenterId() });
                moFieldIsDeleted.setFieldValue(moDiogDncCompanyBranchEntity.getIsDeleted());
                break;
            default:
        }

        jcbPkCompanyBranchId.setEnabled(false);
        jcbPkDocNumberingCenterId.setEnabled(false);
        renderComboBoxEntity(false);
        jckIsDeleted.setEnabled(true);
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        switch (mnParamDocumentType) {
            case SDataConstants.TRN_DNC_DPS_COB:
                if (moDpsDncCompanyBranch == null) {
                    moDpsDncCompanyBranch = new SDataDpsDncCompanyBranch();
                    moDpsDncCompanyBranch.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
                }
                else {
                    moDpsDncCompanyBranch.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
                }

                moDpsDncCompanyBranch.setPkCompanyBranchId(moFieldPkCompanyBranchId.getKeyAsIntArray()[0]);
                moDpsDncCompanyBranch.setPkDocNumberingCenterId(moFieldPkDocNumberingCenterId.getKeyAsIntArray()[0]);
                moDpsDncCompanyBranch.setIsDeleted(moFieldIsDeleted.getBoolean());
                break;
            case SDataConstants.TRN_DNC_DPS_COB_ENT:
                if (moDpsDncCompanyBranchEntity == null) {
                    moDpsDncCompanyBranchEntity = new SDataDpsDncCompanyBranchEntity();
                    moDpsDncCompanyBranchEntity.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
                }
                else {
                    moDpsDncCompanyBranchEntity.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
                }

                moDpsDncCompanyBranchEntity.setPkCompanyBranchId(moFieldPkCompanyBranchId.getKeyAsIntArray()[0]);
                moDpsDncCompanyBranchEntity.setPkEntityId(moFieldPkEntityId.getKeyAsIntArray()[1]);
                moDpsDncCompanyBranchEntity.setPkDocNumberingCenterId(moFieldPkDocNumberingCenterId.getKeyAsIntArray()[0]);
                moDpsDncCompanyBranchEntity.setIsDeleted(moFieldIsDeleted.getBoolean());
                break;
            case SDataConstants.TRN_DNC_DIOG_COB:
                if (moDiogDncCompanyBranch == null) {
                    moDiogDncCompanyBranch = new SDataDiogDncCompanyBranch();
                    moDiogDncCompanyBranch.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
                }
                else {
                    moDiogDncCompanyBranch.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
                }

                moDiogDncCompanyBranch.setPkCompanyBranchId(moFieldPkCompanyBranchId.getKeyAsIntArray()[0]);
                moDiogDncCompanyBranch.setPkDocNumberingCenterId(moFieldPkDocNumberingCenterId.getKeyAsIntArray()[0]);
                moDiogDncCompanyBranch.setIsDeleted(moFieldIsDeleted.getBoolean());
                break;
            case SDataConstants.TRN_DNC_DIOG_COB_ENT:
                if (moDiogDncCompanyBranchEntity == null) {
                    moDiogDncCompanyBranchEntity = new SDataDiogDncCompanyBranchEntity();
                    moDiogDncCompanyBranchEntity.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
                }
                else {
                    moDiogDncCompanyBranchEntity.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
                }

                moDiogDncCompanyBranchEntity.setPkCompanyBranchId(moFieldPkCompanyBranchId.getKeyAsIntArray()[0]);
                moDiogDncCompanyBranchEntity.setPkEntityId(moFieldPkEntityId.getKeyAsIntArray()[1]);
                moDiogDncCompanyBranchEntity.setPkDocNumberingCenterId(moFieldPkDocNumberingCenterId.getKeyAsIntArray()[0]);
                moDiogDncCompanyBranchEntity.setIsDeleted(moFieldIsDeleted.getBoolean());
                break;
            default:
        }

        return  moDpsDncCompanyBranch == null ?
                moDpsDncCompanyBranchEntity == null ?
                moDiogDncCompanyBranch == null ?
                moDiogDncCompanyBranchEntity :
                moDiogDncCompanyBranch :
                moDpsDncCompanyBranchEntity :
                moDpsDncCompanyBranch;
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        if (type == SDataConstantsSys.VALUE_TYPE_DOC) {
            mnParamDocumentType = ((int[]) value)[0];
            
            switch (mnParamDocumentType) {
                case SDataConstants.TRN_DNC_DPS_COB:
                    setTitle("Centro de foliado de docs. de C/V por sucursal");
                    break;
                case SDataConstants.TRN_DNC_DPS_COB_ENT:
                        setTitle("Centro de foliado de docs. de C/V por entidad");
                    break;
                case SDataConstants.TRN_DNC_DIOG_COB:
                        setTitle("Centro de foliado de docs. de inventarios por sucursal");
                    break;
                case SDataConstants.TRN_DNC_DIOG_COB_ENT:
                        setTitle("Centro de foliado de docs. de inventarios por entidad");
                    break;
                default:
            }
        }
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
        }
    }
}
