package erp.mtrn.form;

import cfd.ver4.DCfdVer4Consts;
import erp.data.SDataConstantsSys;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibTimeUtilities;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.text.DecimalFormat;
import java.util.Date;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JOptionPane;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiItem;
import sa.lib.gui.SGuiUtils;

/**
 *
 * @author Juan Barajas, Edwin Carmona, Sergio Flores
 */
public class SDialogAnnulCfdi extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener, java.awt.event.ItemListener {
    
    public static final int PARAM_NUMBER = 1001; // arbitrary constant to avoid collisions
    public static final int PARAM_UUID = 1002; // arbitrary constant to avoid collisions
    public static final int PARAM_DATE_PAYMENT = 1003; // arbitrary constant to avoid collisions
    public static final int PARAM_ALLOW_REISSUES = 1004; // arbitrary constant to avoid collisions

    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbAdjustingFields;
    
    private erp.client.SClientInterface miClient;
    private int mnCfdiType;
    private Date mtDateCfdi;
    private Date mtDatePayment;
    private boolean mbAllowReissues;
    private DecimalFormat moAnnulReasonFormat;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.lib.form.SFormField moFieldAnnulDate;
    private erp.lib.form.SFormField moFieldDpsAnnulType;
    private erp.lib.form.SFormField moFieldAnnulSat;
    private erp.lib.form.SFormField moFieldAnnulReason;
    private erp.lib.form.SFormField moFieldAnnulRelatedUuid;
    private erp.lib.form.SFormField moFieldDateIssue;
    private erp.lib.form.SFormField moFieldDatePayment;
    private erp.lib.form.SFormField moFieldRetryCancel;
    
    /** Creates new form SDialogAnnulCfdi.
     * @param client GUI client.
     */
    public SDialogAnnulCfdi(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgCfdiRelated = new javax.swing.ButtonGroup();
        jpData = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jlNumber = new javax.swing.JLabel();
        jtfNumber = new javax.swing.JTextField();
        jtfUuid = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jlAnnulDate = new javax.swing.JLabel();
        jftAnnulDate = new javax.swing.JFormattedTextField();
        jbAnnulDate = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jlDpsAnnulType = new javax.swing.JLabel();
        moKeyDpsAnnulType = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel3 = new javax.swing.JPanel();
        jckAnnulSat = new javax.swing.JCheckBox();
        jPanel6 = new javax.swing.JPanel();
        jlAnnulReason = new javax.swing.JLabel();
        moKeyAnnulReason = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel13 = new javax.swing.JPanel();
        jrbCfdiRelatedEmited = new javax.swing.JRadioButton();
        jrbCfdiRelatedReissue = new javax.swing.JRadioButton();
        jPanel7 = new javax.swing.JPanel();
        jlAnnulRelatedUuid = new javax.swing.JLabel();
        jtfAnnulRelatedUuid = new javax.swing.JTextField();
        jPanel12 = new javax.swing.JPanel();
        jlDateOfIssue = new javax.swing.JLabel();
        jftDateOfIssue = new javax.swing.JFormattedTextField();
        jbDateOfIssue = new javax.swing.JButton();
        jPanel14 = new javax.swing.JPanel();
        jlDateOfPayment = new javax.swing.JLabel();
        jftDateOfPayment = new javax.swing.JFormattedTextField();
        jbDateOfPayment = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jckRetryCancel = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cancelación"); // NOI18N
        setModal(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpData.setLayout(new java.awt.BorderLayout());

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Cancelación del CFDI:"));
        jPanel8.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.GridLayout(10, 1, 0, 5));

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNumber.setText("Folio comprobante:");
        jlNumber.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel10.add(jlNumber);

        jtfNumber.setEditable(false);
        jtfNumber.setText("A-000001");
        jtfNumber.setToolTipText("Serie y folio");
        jtfNumber.setFocusable(false);
        jtfNumber.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel10.add(jtfNumber);

        jtfUuid.setEditable(false);
        jtfUuid.setText("D65AA99D-6BC7-4002-8087-B6EE81ED516C");
        jtfUuid.setToolTipText("UUID");
        jtfUuid.setFocusable(false);
        jtfUuid.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel10.add(jtfUuid);

        jPanel1.add(jPanel10);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAnnulDate.setText("Fecha cancelación: *");
        jlAnnulDate.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel4.add(jlAnnulDate);

        jftAnnulDate.setText("dd/mm/yyyy");
        jftAnnulDate.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel4.add(jftAnnulDate);

        jbAnnulDate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbAnnulDate.setToolTipText("Seleccionar fecha");
        jbAnnulDate.setFocusable(false);
        jbAnnulDate.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel4.add(jbAnnulDate);

        jPanel1.add(jPanel4);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDpsAnnulType.setText("Causa cancelación: *");
        jlDpsAnnulType.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel5.add(jlDpsAnnulType);

        moKeyDpsAnnulType.setPreferredSize(new java.awt.Dimension(350, 23));
        jPanel5.add(moKeyDpsAnnulType);

        jPanel1.add(jPanel5);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jckAnnulSat.setSelected(true);
        jckAnnulSat.setText("Cancelar ante el SAT");
        jckAnnulSat.setFocusable(false);
        jckAnnulSat.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jckAnnulSat.setPreferredSize(new java.awt.Dimension(500, 23));
        jPanel3.add(jckAnnulSat);

        jPanel1.add(jPanel3);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAnnulReason.setText("Motivo cancelación: *");
        jlAnnulReason.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel6.add(jlAnnulReason);

        moKeyAnnulReason.setPreferredSize(new java.awt.Dimension(350, 23));
        jPanel6.add(moKeyAnnulReason);

        jPanel1.add(jPanel6);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        bgCfdiRelated.add(jrbCfdiRelatedEmited);
        jrbCfdiRelatedEmited.setText("El CFDI sustituto ya está emitido");
        jrbCfdiRelatedEmited.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel13.add(jrbCfdiRelatedEmited);

        bgCfdiRelated.add(jrbCfdiRelatedReissue);
        jrbCfdiRelatedReissue.setText("Reexpedir el CFDI sustituto durante la cancelación");
        jrbCfdiRelatedReissue.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel13.add(jrbCfdiRelatedReissue);

        jPanel1.add(jPanel13);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAnnulRelatedUuid.setText("UUID relacionado:");
        jlAnnulRelatedUuid.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel7.add(jlAnnulRelatedUuid);

        jtfAnnulRelatedUuid.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel7.add(jtfAnnulRelatedUuid);

        jPanel1.add(jPanel7);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateOfIssue.setText("Fecha emisión:*");
        jlDateOfIssue.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel12.add(jlDateOfIssue);

        jftDateOfIssue.setText("dd/mm/yyyy");
        jftDateOfIssue.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel12.add(jftDateOfIssue);

        jbDateOfIssue.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbDateOfIssue.setToolTipText("Seleccionar fecha");
        jbDateOfIssue.setFocusable(false);
        jbDateOfIssue.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel12.add(jbDateOfIssue);

        jPanel1.add(jPanel12);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateOfPayment.setText("Fecha pago:*");
        jlDateOfPayment.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel14.add(jlDateOfPayment);

        jftDateOfPayment.setText("dd/mm/yyyy");
        jftDateOfPayment.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel14.add(jftDateOfPayment);

        jbDateOfPayment.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbDateOfPayment.setToolTipText("Seleccionar fecha");
        jbDateOfPayment.setFocusable(false);
        jbDateOfPayment.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel14.add(jbDateOfPayment);

        jPanel1.add(jPanel14);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jckRetryCancel.setText("Reintentar cancelar nuevamente aún si el receptor rechazó la solicitud de cancelación anterior");
        jckRetryCancel.setPreferredSize(new java.awt.Dimension(500, 23));
        jPanel9.add(jckRetryCancel);

        jPanel1.add(jPanel9);

        jPanel8.add(jPanel1, java.awt.BorderLayout.NORTH);

        jpData.add(jPanel8, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpData, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel2.add(jbOk);

        jbCancel.setText("Cancelar"); // NOI18N
        jbCancel.setToolTipText("[Escape]");
        jbCancel.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel2.add(jbCancel);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        setSize(new java.awt.Dimension(576, 389));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    @SuppressWarnings("unchecked")
    private void initComponentsExtra() {
        moFieldAnnulDate = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jftAnnulDate, jlAnnulDate);
        moFieldAnnulDate.setPickerButton(jbAnnulDate);
        moFieldDpsAnnulType = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, moKeyDpsAnnulType, jlDpsAnnulType);
        moKeyDpsAnnulType.setKeySettings((SGuiClient) miClient, SGuiUtils.getLabelName(jlDpsAnnulType), true); // SA-Lib-1.0 control!
        moFieldAnnulSat = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckAnnulSat, jckAnnulSat);
        moFieldAnnulReason = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, moKeyAnnulReason, jlAnnulReason);
        moKeyAnnulReason.setKeySettings((SGuiClient) miClient, SGuiUtils.getLabelName(jlAnnulReason), true); // SA-Lib-1.0 control!
        moFieldAnnulRelatedUuid = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, false, jtfAnnulRelatedUuid, jlAnnulRelatedUuid);
        moFieldDateIssue = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jftDateOfIssue, jlDateOfIssue);
        moFieldDateIssue.setPickerButton(jbDateOfIssue);
        moFieldDatePayment = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jftDateOfPayment, jlDateOfPayment);
        moFieldDatePayment.setPickerButton(jbDateOfPayment);
        moFieldRetryCancel = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckRetryCancel, jckRetryCancel);
        
        mvFields = new Vector<>();
        mvFields.add(moFieldAnnulDate);
        mvFields.add(moFieldDpsAnnulType);
        mvFields.add(moFieldAnnulSat);
        mvFields.add(moFieldAnnulReason);
        mvFields.add(moFieldAnnulRelatedUuid);
        mvFields.add(moFieldDateIssue);
        mvFields.add(moFieldDatePayment);
        mvFields.add(moFieldRetryCancel);

        jbCancel.addActionListener(this);
        jbOk.addActionListener(this);
        jbAnnulDate.addActionListener(this);
        jbDateOfIssue.addActionListener(this);
        jbDateOfPayment.addActionListener(this);
        jckAnnulSat.addItemListener(this);
        moKeyAnnulReason.addItemListener(this);
        jrbCfdiRelatedEmited.addItemListener(this);
        jrbCfdiRelatedReissue.addItemListener(this);
        
        mnCfdiType = 0;
        mtDateCfdi = null;
        mtDatePayment = null;
        moAnnulReasonFormat = new DecimalFormat("00");
        
        miClient.getSession().populateCatalogue(moKeyDpsAnnulType, SModConsts.TRNU_TP_DPS_ANN, SLibConsts.UNDEFINED, null);
        moKeyDpsAnnulType.setValue(new int[] { SModSysConsts.TRNU_TP_DPS_ANN_NA });
        
        moKeyAnnulReason.removeAllItems();
        moKeyAnnulReason.addItem(new SGuiItem("- " + SGuiUtils.getLabelName(jlAnnulReason) + " -"));
        for (String code : DCfdVer4Consts.CancelaciónMotivos.keySet()) {
            moKeyAnnulReason.addItem(new SGuiItem(new int[] { SLibUtils.parseInt(code) }, code + " - " + DCfdVer4Consts.CancelaciónMotivos.get(code)));
        }

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };
        
        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void enableFieldsCfdiType() {
        boolean isInvoiceOrPaymentReceipt = SLibUtils.belongsTo(mnCfdiType, new int[] { SDataConstantsSys.TRNS_TP_CFD_INV, SDataConstantsSys.TRNS_TP_CFD_PAY_REC }); // convenience variable
        jlDpsAnnulType.setEnabled(isInvoiceOrPaymentReceipt);
        moKeyDpsAnnulType.setEnabled(isInvoiceOrPaymentReceipt);
        
        boolean isPayrollReceipt = mnCfdiType == SDataConstantsSys.TRNS_TP_CFD_PAYROLL && mbAllowReissues;
        jlDateOfIssue.setEnabled(isPayrollReceipt);
        jlDateOfPayment.setEnabled(isPayrollReceipt);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            jftAnnulDate.requestFocus();
        }
    }

    private void actionPerformedAnnulDate() {
        miClient.getGuiDatePickerXXX().pickDate(moFieldAnnulDate.getDate(), moFieldAnnulDate);
    }
    
    private void actionPerformedDateOfIssue() {
        miClient.getGuiDatePickerXXX().pickDate(moFieldDateIssue.getDate(), moFieldDateIssue);
    }
    
    private void actionPerformedDateOfPayment() {
        miClient.getGuiDatePickerXXX().pickDate(moFieldDatePayment.getDate(), moFieldDatePayment);
    }
    
    private void itemStateChangedAnnulSat() {
        moFieldAnnulReason.resetField();
        moFieldRetryCancel.resetField();
        
        if (jckAnnulSat.isSelected()) {
            moKeyAnnulReason.setEnabled(true);
            jckRetryCancel.setEnabled(mnCfdiType == SDataConstantsSys.TRNS_TP_CFD_INV);
        }
        else {
            moKeyAnnulReason.setEnabled(false);
            jckRetryCancel.setEnabled(false);
        }
        
        itemStateChangedAnnulReason();
    }
    
    private void itemStateChangedAnnulReason() {
        mbAdjustingFields = true;
        
        if (getAnnulReason().equals(DCfdVer4Consts.CAN_MOTIVO_ERROR_CON_REL)) {
            boolean isPayrollReceipt = mnCfdiType == SDataConstantsSys.TRNS_TP_CFD_PAYROLL && mbAllowReissues;
            
            jrbCfdiRelatedEmited.setEnabled(isPayrollReceipt);
            jrbCfdiRelatedReissue.setEnabled(isPayrollReceipt);
            jrbCfdiRelatedEmited.setSelected(true);
        }
        else {
            jrbCfdiRelatedEmited.setEnabled(false);
            jrbCfdiRelatedReissue.setEnabled(false);
            bgCfdiRelated.clearSelection();
        }
        
        itemStateChangedCfdiRelated();
        
        mbAdjustingFields = false;
    }
    
    private void itemStateChangedCfdiRelated() {
        moFieldAnnulRelatedUuid.resetField();
        moFieldDateIssue.resetField();
        moFieldDatePayment.resetField();
        
        boolean isEmited = jrbCfdiRelatedEmited.isSelected();
        boolean isReissue = jrbCfdiRelatedReissue.isSelected() && mbAllowReissues;
        
        jtfAnnulRelatedUuid.setEnabled(isEmited);
        jftDateOfIssue.setEnabled(isReissue);
        jbDateOfIssue.setEnabled(isReissue);
        jftDateOfPayment.setEnabled(isReissue);
        jbDateOfPayment.setEnabled(isReissue);
        
        if (isEmited && jtfAnnulRelatedUuid.isEnabled()) {
            if (!mbAdjustingFields) {
                jtfAnnulRelatedUuid.requestFocusInWindow();
            }
        }
        else if (isReissue && jftDateOfIssue.isEnabled()) {
            moFieldDateIssue.setDate(miClient.getSession().getCurrentDate());
            moFieldDatePayment.setDate(mtDatePayment);
            
            if (!mbAdjustingFields) {
                jftDateOfIssue.requestFocusInWindow();
            }
        }
    }
    
    private void actionOk() {
        SFormValidation validation = formValidate();
        boolean cancel = true;

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            if (!SDataUtilities.isPeriodOpen(miClient, moFieldAnnulDate.getDate())) {
                miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_GUI_PER_CLOSE);
            }
            else if (moFieldAnnulDate.getDate().before(SLibTimeUtilities.convertToDateOnly(mtDateCfdi))) {
                miClient.showMsgBoxWarning("La fecha de cancelación no puede ser anterior a la fecha del documento.");
                jftAnnulDate.requestFocus();
            }
            else {
                if (!SLibTimeUtilities.isBelongingToPeriod(mtDateCfdi, SLibTimeUtilities.digestYear(moFieldAnnulDate.getDate())[0], SLibTimeUtilities.digestYearMonth(moFieldAnnulDate.getDate())[1])) {
                    cancel = miClient.showMsgBoxConfirm("La fecha de cancelación no pertenece al periodo de creación del documento.\n" + SGuiConsts.MSG_CNF_CONT) == JOptionPane.YES_OPTION;
                }
            
                if (cancel) {
                    mnFormResult = SLibConstants.FORM_RESULT_OK;
                    setVisible(false);
                }
                else {
                    jftAnnulDate.requestFocus();
                }
            }
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgCfdiRelated;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbAnnulDate;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbDateOfIssue;
    private javax.swing.JButton jbDateOfPayment;
    private javax.swing.JButton jbOk;
    private javax.swing.JCheckBox jckAnnulSat;
    private javax.swing.JCheckBox jckRetryCancel;
    private javax.swing.JFormattedTextField jftAnnulDate;
    private javax.swing.JFormattedTextField jftDateOfIssue;
    private javax.swing.JFormattedTextField jftDateOfPayment;
    private javax.swing.JLabel jlAnnulDate;
    private javax.swing.JLabel jlAnnulReason;
    private javax.swing.JLabel jlAnnulRelatedUuid;
    private javax.swing.JLabel jlDateOfIssue;
    private javax.swing.JLabel jlDateOfPayment;
    private javax.swing.JLabel jlDpsAnnulType;
    private javax.swing.JLabel jlNumber;
    private javax.swing.JPanel jpData;
    private javax.swing.JRadioButton jrbCfdiRelatedEmited;
    private javax.swing.JRadioButton jrbCfdiRelatedReissue;
    private javax.swing.JTextField jtfAnnulRelatedUuid;
    private javax.swing.JTextField jtfNumber;
    private javax.swing.JTextField jtfUuid;
    private sa.lib.gui.bean.SBeanFieldKey moKeyAnnulReason;
    private sa.lib.gui.bean.SBeanFieldKey moKeyDpsAnnulType;
    // End of variables declaration//GEN-END:variables

    public Date getAnnulDate() {
        return !jftAnnulDate.isEnabled() ? null : moFieldAnnulDate.getDate();
    }
    
    public int getDpsAnnulType() {
        return !moKeyDpsAnnulType.isEnabled() || moKeyDpsAnnulType.getSelectedIndex() <= 0 ? SModSysConsts.TRNU_TP_DPS_ANN_NA : ((int[]) moKeyDpsAnnulType.getValue())[0];
    }
    
    public boolean getAnnulSat() {
        return !jckAnnulSat.isEnabled() ? false : moFieldAnnulSat.getBoolean();
    }
    
    public String getAnnulReason() {
        return moAnnulReasonFormat.format(!moKeyAnnulReason.isEnabled() || moKeyAnnulReason.getSelectedIndex() <= 0 ? 0 : ((int[]) moKeyAnnulReason.getValue())[0]);
    }
    
    public boolean getCfdiRelatedReissue() {
        return !jrbCfdiRelatedReissue.isEnabled() ? false : jrbCfdiRelatedReissue.isSelected();
    }
    
    public String getAnnulRelatedUuid() {
        return !jtfAnnulRelatedUuid.isEnabled() ? "" : moFieldAnnulRelatedUuid.getString();
    }
    
    public Date getDateOfIssue() {
        return !jftDateOfIssue.isEnabled() ? null : moFieldDateIssue.getDate();
    }
    
    public Date getDateOfPayment() {
        return !jftDateOfPayment.isEnabled() ? null : moFieldDatePayment.getDate();
    }
    
    public boolean isRetryCancelSelected() {
        return !jckRetryCancel.isEnabled() ? false : moFieldRetryCancel.getBoolean();
    }
    
    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;
        mbAdjustingFields = false;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        mnCfdiType = 0;
        mtDateCfdi = null;
        mtDatePayment = null;
        mbAllowReissues = false;
        
        enableFieldsCfdiType();
        
        jtfNumber.setText("");
        jtfUuid.setText("");
        moFieldAnnulDate.setDate(miClient.getSessionXXX().getWorkingDate());
        moKeyDpsAnnulType.setValue(new int[] { SModSysConsts.TRNU_TP_DPS_ANN_NA });
        jckAnnulSat.setSelected(true);
        
        itemStateChangedAnnulSat();
    }

    @Override
    public void formRefreshCatalogues() {
        
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }
        
        if (!validation.getIsError()) {
            if (!jckAnnulSat.isSelected()) {
                miClient.showMsgBoxWarning("IMPORTANTE:\n"
                        + "Ha elegido no cancelar el CFDI ante el SAT.\n"
                        + "Si aún no está cancelado, habrá que hacerlo manualmente en el portal web del SAT.\n"
                        + "No olvide anexar el acuse de cancelación del CFDI al registro en esta misma vista.");
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        switch (type) {
            case SGuiConsts.PARAM_DATE:
                mtDateCfdi = (Date) value;
                break;
                
            case PARAM_NUMBER:
                jtfNumber.setText((String) value);
                jtfNumber.setCaretPosition(0);
                break;
                
            case PARAM_UUID:
                jtfUuid.setText((String) value);
                jtfUuid.setCaretPosition(0);
                break;
                
            case PARAM_DATE_PAYMENT:
                mtDatePayment = (Date) value;
                break;
                
            case PARAM_ALLOW_REISSUES:
                mbAllowReissues = (Boolean) value;
                break;
                
            case SModConsts.TRNS_TP_CFD:
                mnCfdiType = (int) value;
                enableFieldsCfdiType();
                break;
                
            default:
        }
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbAnnulDate) {
                actionPerformedAnnulDate();
            }
            else if (button == jbDateOfIssue) {
                actionPerformedDateOfIssue();
            }
            else if (button == jbDateOfPayment) {
                actionPerformedDateOfPayment();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (!mbAdjustingFields) {
            if (e.getSource() instanceof javax.swing.JCheckBox) {
                javax.swing.JCheckBox checkBox = (javax.swing.JCheckBox) e.getSource();

                if (checkBox == jckAnnulSat) {
                    itemStateChangedAnnulSat();
                }
            }
            else if (e.getSource() instanceof javax.swing.JComboBox && e.getStateChange() == ItemEvent.SELECTED) {
                javax.swing.JComboBox comboBox = (javax.swing.JComboBox) e.getSource();

                if (comboBox == moKeyAnnulReason) {
                    itemStateChangedAnnulReason();
                }
            }
            else if (e.getSource() instanceof javax.swing.JRadioButton && e.getStateChange() == ItemEvent.SELECTED) {
                javax.swing.JRadioButton radioButton = (javax.swing.JRadioButton) e.getSource();

                if (radioButton == jrbCfdiRelatedEmited || radioButton == jrbCfdiRelatedReissue) {
                    itemStateChangedCfdiRelated();
                }
            }
        }
    }
}
