/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SDialogFilterUnitType.java
 *
 * Created on 24/03/2010, 06:54:10 PM
 */

package erp.mtrn.form;

import erp.data.SDataConstantsSys;
import erp.lib.SLibConstants;
import erp.lib.form.SFormUtilities;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STablePane;
import erp.lib.table.STableRowCustom;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import javax.swing.AbstractAction;

/**
 *
 * @author Alfonso Flores, Sergio Flores
 */
public class SDialogFilterUnitType extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.lib.table.STablePane moOptionPane;
    private erp.lib.table.STableColumnForm[] aoTableColumns;

    private int mnUnitType;

    /** Creates new form SDialogFilterUnitType */
    public SDialogFilterUnitType(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jpOptionPane = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Selecci√≥n");
        setResizable(false);

        jPanel1.setPreferredSize(new java.awt.Dimension(392, 33));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Cancelar]");
        jPanel1.add(jbCancel);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Opciones disponibles:"));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jpOptionPane.setLayout(new java.awt.BorderLayout());
        jPanel2.add(jpOptionPane, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-488)/2, (screenSize.height-334)/2, 488, 334);
    }// </editor-fold>//GEN-END:initComponents

    private void initComponentsExtra() {
        aoTableColumns = null;
        int i = 0;

        moOptionPane = new STablePane(miClient);
        moOptionPane.setDoubleClickAction(this, "publicActionOk");
        jpOptionPane.add(moOptionPane, BorderLayout.CENTER);

        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);

        aoTableColumns = new STableColumnForm[1];
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Unidad", 200);

        for (i = 0; i < aoTableColumns.length; i++) {
            moOptionPane.addTableColumn(aoTableColumns[i]);
        }

        moOptionPane.createTable(null);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction action = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), action, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void actionOk() {
        if (moOptionPane.getSelectedTableRow() == null) {
            miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_GUI_OPT_UNDEF);
            moOptionPane.getTable().requestFocus();
        }
        else {
            mnUnitType = ((int[]) moOptionPane.getSelectedTableRow().getPrimaryKey())[0];
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    public void publicActionOk() {
        actionOk();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbOk;
    private javax.swing.JPanel jpOptionPane;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        mnUnitType = 0;
        moOptionPane.createTable();
        moOptionPane.clearTableRows();
    }

    @Override
    public void formRefreshCatalogues() {
        STableRowCustom rowQty = new STableRowCustom();
        STableRowCustom rowLen = new STableRowCustom();
        STableRowCustom rowSurf = new STableRowCustom();
        STableRowCustom rowVol = new STableRowCustom();
        STableRowCustom rowMass = new STableRowCustom();

        rowQty.setPrimaryKey(new int[] {SDataConstantsSys.TRNX_TP_UNIT_TOT_QTY});
        rowQty.getValues().add("CANTIDAD");
        rowLen.setPrimaryKey(new int[] {SDataConstantsSys.TRNX_TP_UNIT_TOT_LEN});
        rowLen.getValues().add("LONGITUD");
        rowSurf.setPrimaryKey(new int[] {SDataConstantsSys.TRNX_TP_UNIT_TOT_SURF});
        rowSurf.getValues().add("SUPERFICIE");
        rowVol.setPrimaryKey(new int[] {SDataConstantsSys.TRNX_TP_UNIT_TOT_VOL});
        rowVol.getValues().add("VOLUMEN");
        rowMass.setPrimaryKey(new int[] {SDataConstantsSys.TRNX_TP_UNIT_TOT_MASS});
        rowMass.getValues().add("MASA");

        moOptionPane.addTableRow(rowQty);
        moOptionPane.addTableRow(rowLen);
        moOptionPane.addTableRow(rowSurf);
        moOptionPane.addTableRow(rowVol);
        moOptionPane.addTableRow(rowMass);

        moOptionPane.renderTableRows();
        moOptionPane.setTableRowSelection(0);
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        if (type == SDataConstantsSys.VALUE_TP_UNIT) {
            for (int i = 0; i < moOptionPane.getTableGuiRowCount(); i++) {
                if ((Integer) value == ((int[]) moOptionPane.getTableRow(i).getPrimaryKey())[0]) {
                    moOptionPane.setTableRowSelection(i);
                }
            }
        }
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
        }
    }

    public int getUnitType() { return mnUnitType; }
}
