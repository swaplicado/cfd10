/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SDialogRepStockMoves.java
 *
 * Created on 1/06/2010, 04:33:36 PM
 */

package erp.mtrn.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataUtilities;
import erp.gui.SGuiUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibTimeUtilities;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormComboBoxGroup;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormOptionPickerInterface;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.util.Map;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JRadioButton;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;
import sa.lib.gui.SGuiItem;

/**
 *
 * @author Claudio Peña
 */
public class SDialogRepStockMovesSumSum extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener, java.awt.event.ItemListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private int mnOptionType;
    private int mnOptionType2;
    private int partWharehouse = 19; // Id of wharehouse the part's.
    private int toolWharehouse = 20; // Id of wharehouse the tool's .  
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.lib.form.SFormField moFieldDateStart;
    private erp.lib.form.SFormField moFieldDateEnd;
    private erp.lib.form.SFormField moFieldItemGeneric;
    private erp.lib.form.SFormField moFieldMaintenanceArea;
    private erp.lib.form.SFormField moFieldResponsable;
    private erp.lib.form.SFormComboBoxGroup moGroupMovement;
    private erp.lib.form.SFormComboBoxGroup moGroupCompanyBranch;

    private erp.lib.form.SFormComboBoxGroup moComboBoxGroup;
    /** Creates new form SDialogRepStockMovesS */
    public SDialogRepStockMovesSumSum(erp.client.SClientInterface client,  int type, int type2) {
        super(client.getFrame(), false);
        miClient =  client;
        mnOptionType = type;
        mnOptionType2 = type2;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbgReportType = new javax.swing.ButtonGroup();
        jbgReportAgrup = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlDateStart = new javax.swing.JLabel();
        jftDateStart = new javax.swing.JFormattedTextField();
        jbPickDateStart = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jlDateEnd = new javax.swing.JLabel();
        jftDateEnd = new javax.swing.JFormattedTextField();
        jbPickDateEnd = new javax.swing.JButton();
        jPanel17 = new javax.swing.JPanel();
        jlReportType = new javax.swing.JLabel();
        jrbReportTypePart = new javax.swing.JRadioButton();
        jrbReportTypeTool = new javax.swing.JRadioButton();
        jrbReportTypeAll = new javax.swing.JRadioButton();
        jPanel19 = new javax.swing.JPanel();
        jrbAgrupArea = new javax.swing.JRadioButton();
        jrbAgrupResp = new javax.swing.JRadioButton();
        jPanel20 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jlItemGeneric = new javax.swing.JLabel();
        jcbItemGeneric = new javax.swing.JComboBox<>();
        jbItemGeneric = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jlMaintenanceArea = new javax.swing.JLabel();
        jcbMaintenanceArea = new javax.swing.JComboBox<>();
        jPanel10 = new javax.swing.JPanel();
        jlResponsable = new javax.swing.JLabel();
        jcbResponsable = new javax.swing.JComboBox<>();
        jbResponsable = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jbPrint = new javax.swing.JButton();
        jbExit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Resumen de movimientos de inventarios");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Configuración del reporte:"));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel12.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel18.setBorder(javax.swing.BorderFactory.createTitledBorder("Período y tipo de reporte:"));
        jPanel18.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateStart.setText("Fecha inicial: *");
        jlDateStart.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlDateStart);

        jftDateStart.setText("dd/mm/yyyy");
        jftDateStart.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel4.add(jftDateStart);

        jbPickDateStart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_date_day.gif"))); // NOI18N
        jbPickDateStart.setToolTipText("Seleccionar fecha inicial");
        jbPickDateStart.setFocusable(false);
        jbPickDateStart.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel4.add(jbPickDateStart);

        jPanel18.add(jPanel4);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateEnd.setText("Fecha final: *");
        jlDateEnd.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlDateEnd);

        jftDateEnd.setText("dd/mm/yyyy");
        jftDateEnd.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel5.add(jftDateEnd);

        jbPickDateEnd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_date_day.gif"))); // NOI18N
        jbPickDateEnd.setToolTipText("Seleccionar fecha final");
        jbPickDateEnd.setFocusable(false);
        jbPickDateEnd.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel5.add(jbPickDateEnd);

        jPanel18.add(jPanel5);

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlReportType.setText("Tipo reporte: *");
        jlReportType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel17.add(jlReportType);

        jbgReportType.add(jrbReportTypePart);
        jrbReportTypePart.setText("Refacciones");
        jrbReportTypePart.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel17.add(jrbReportTypePart);

        jbgReportType.add(jrbReportTypeTool);
        jrbReportTypeTool.setText("Herramientas");
        jrbReportTypeTool.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel17.add(jrbReportTypeTool);

        jbgReportType.add(jrbReportTypeAll);
        jrbReportTypeAll.setText("Todo");
        jrbReportTypeAll.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel17.add(jrbReportTypeAll);

        jPanel18.add(jPanel17);

        jPanel12.add(jPanel18);

        jPanel19.setBorder(javax.swing.BorderFactory.createTitledBorder("Agrupadores:"));
        jPanel19.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jbgReportAgrup.add(jrbAgrupArea);
        jrbAgrupArea.setText("Área mantenimiento");
        jPanel19.add(jrbAgrupArea);

        jbgReportAgrup.add(jrbAgrupResp);
        jrbAgrupResp.setText("Responsable");
        jPanel19.add(jrbAgrupResp);

        jPanel12.add(jPanel19);

        jPanel20.setBorder(javax.swing.BorderFactory.createTitledBorder("Filtros del reporte:"));
        jPanel20.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItemGeneric.setText("Ítem:");
        jlItemGeneric.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlItemGeneric);

        jcbItemGeneric.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel8.add(jcbItemGeneric);

        jbItemGeneric.setText("...");
        jbItemGeneric.setToolTipText("Seleccionar asociado de negocios");
        jbItemGeneric.setFocusable(false);
        jbItemGeneric.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel8.add(jbItemGeneric);

        jPanel20.add(jPanel8);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlMaintenanceArea.setText("Área mantenimiento:");
        jlMaintenanceArea.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlMaintenanceArea);

        jcbMaintenanceArea.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel9.add(jcbMaintenanceArea);

        jPanel20.add(jPanel9);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlResponsable.setText("Responsable");
        jlResponsable.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jlResponsable);

        jcbResponsable.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel10.add(jcbResponsable);

        jbResponsable.setText("...");
        jbResponsable.setToolTipText("Seleccionar asociado de negocios");
        jbResponsable.setFocusable(false);
        jbResponsable.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel10.add(jbResponsable);

        jPanel20.add(jPanel10);

        jPanel12.add(jPanel20);

        jPanel2.add(jPanel12, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel1.setPreferredSize(new java.awt.Dimension(392, 33));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbPrint.setText("Imprimir");
        jbPrint.setToolTipText("[Ctrl + Enter]");
        jbPrint.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jbPrint);

        jbExit.setText("Cerrar");
        jbExit.setToolTipText("[Escape]");
        jbExit.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jbExit);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        setSize(new java.awt.Dimension(656, 439));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        mvFields = new Vector<>();
        moComboBoxGroup = new SFormComboBoxGroup(miClient);


        moFieldDateStart = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jftDateStart, jlDateStart);
        moFieldDateStart.setPickerButton(jbPickDateStart);
        moFieldDateEnd = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jftDateEnd, jlDateEnd);
        moFieldDateEnd.setPickerButton(jbPickDateEnd);
        moFieldItemGeneric = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, false, jcbItemGeneric, jlItemGeneric);
        moFieldMaintenanceArea = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, false, jcbMaintenanceArea, jlMaintenanceArea);
        moFieldResponsable = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, false, jcbResponsable, jlResponsable);

        mvFields.add(moFieldDateStart);
        mvFields.add(moFieldDateEnd);
        mvFields.add(moFieldItemGeneric);
        mvFields.add(moFieldMaintenanceArea);
        mvFields.add(moFieldResponsable);

        jbPrint.addActionListener(this);
        jbExit.addActionListener(this);
        jbPickDateStart.addActionListener(this);
        jbPickDateEnd.addActionListener(this);
        jrbReportTypePart.addItemListener(this);
        jrbReportTypeTool.addItemListener(this);
        jrbReportTypeAll.addItemListener(this);        
        jrbAgrupArea.addItemListener(this);
        jrbAgrupResp.addItemListener(this);
        
        jbItemGeneric.addActionListener(this);
        jbResponsable.addActionListener(this);
        
        moGroupMovement = new SFormComboBoxGroup(miClient);
        moGroupCompanyBranch = new SFormComboBoxGroup(miClient);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionPrint(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "print", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction action = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionExit(); }
        };

        SFormUtilities.putActionMap(getRootPane(), action, "exit", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            jftDateStart.requestFocus();
        }
    }

    private void printReportDetailedItem(){
        Cursor cursor = getCursor();
        SFormValidation validation = formValidate();
        Map<String, Object> map = null;
        JasperPrint jasperPrint = null;
        JasperViewer jasperViewer = null;
        String sSqlWhereDetail = "";
        String sSqlWhereDetailWh = "";
        String sSqlWhereGroup = "";
        String sqlWhere = "";
        String sSqlWhereFilter = "";
        int sTypeReport = 0;
        
        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            try {
            setCursor(new Cursor(Cursor.WAIT_CURSOR));
                if (jrbReportTypePart.isSelected()) {
                    sSqlWhereDetail += " AND iog.fid_maint_mov_tp IN ( " + SModSysConsts.TRNS_TP_MAINT_MOV_NA + ", "  + SModSysConsts.TRNS_TP_MAINT_MOV_IN_CONS_PART + ", " + SModSysConsts.TRNS_TP_MAINT_MOV_OUT_CONS_PART + " ) AND NOT iog.b_del ";
                    sSqlWhereDetailWh += " AND s.id_wh = " + partWharehouse + " ";
                    sTypeReport = SModSysConsts.TRNX_TP_MAINT_MOV_PART;
                }
                else if (jrbReportTypeTool.isSelected()) {
                    sSqlWhereDetail += " AND iog.fid_maint_mov_tp IN ( " + SModSysConsts.TRNS_TP_MAINT_MOV_NA + ", "  + SModSysConsts.TRNS_TP_MAINT_MOV_IN_CONS_TOOL + ", " +  SModSysConsts.TRNS_TP_MAINT_MOV_OUT_CONS_TOOL + " ) AND NOT iog.b_del ";
                    sSqlWhereDetailWh += " AND s.id_wh = " + toolWharehouse + " ";
                    sTypeReport = SModSysConsts.TRNX_TP_MAINT_MOV_TOOL;
                }
                else if (jrbReportTypeAll.isSelected()) {
                    sSqlWhereDetail += " AND iog.fid_maint_mov_tp IN ( " + SModSysConsts.TRNS_TP_MAINT_MOV_NA + ", "  + SModSysConsts.TRNS_TP_MAINT_MOV_IN_CONS_TOOL + ", " +  SModSysConsts.TRNS_TP_MAINT_MOV_OUT_CONS_TOOL + ", "
                            + SModSysConsts.TRNS_TP_MAINT_MOV_IN_CONS_PART + ", " + SModSysConsts.TRNS_TP_MAINT_MOV_OUT_CONS_PART + " )AND NOT iog.b_del ";
                    sSqlWhereDetailWh += "";
                    sTypeReport = SModSysConsts.TRNX_TP_MAINT_MOV_ALL;                    
                }
                
                if (jrbAgrupArea.isSelected()) {                    
                    sSqlWhereGroup += " maintName, ";                                        
                }
                else if (jrbAgrupResp.isSelected()) {
                    sSqlWhereGroup += " maint.bp, ";
                }
                
                if (jcbItemGeneric.getSelectedIndex() > 0 || jcbMaintenanceArea.getSelectedIndex() > 0 || jcbResponsable.getSelectedIndex() > 0) {
                    sqlWhere += " AND s.id_year = " + SLibTimeUtilities.digestYear(moFieldDateEnd.getDate())[0];
                }
                
                if (jcbItemGeneric.getSelectedIndex() > 0 ) {
                    sSqlWhereFilter += " AND s.id_item = " + moFieldItemGeneric.getKeyAsIntArray()[0];
                }
                
                if (jcbMaintenanceArea.getSelectedIndex() > 0 ) {                   
                    int pkMaintenance = ((SGuiItem) jcbMaintenanceArea.getSelectedItem()).getPrimaryKey()[0];
                    sSqlWhereFilter += " AND maint.id_maint_area = " + pkMaintenance;
                }
                
                if (jcbResponsable.getSelectedIndex() > 0 ) {
                    sSqlWhereFilter += " AND maint.id_bp = " + moFieldResponsable.getKeyAsIntArray()[0];
                }

                map = miClient.createReportParams();
                map.put("tDtInitial", moFieldDateStart.getDate());
                map.put("tDtEnd", moFieldDateEnd.getDate());
                map.put("nWorkingYear", SLibTimeUtilities.digestYear(moFieldDateEnd.getDate())[0]);
                map.put("sCompanyBranch", moFieldItemGeneric.getKeyAsIntArray()[0] == 0 ? "(TODAS)" : jcbItemGeneric.getSelectedItem().toString());
                map.put("sFieldItemGeneric", jcbItemGeneric.getSelectedIndex() <= 0 ? "(TODAS)" : jcbItemGeneric.getSelectedItem().toString());
                map.put("sMaintenanceArea", jcbMaintenanceArea.getSelectedIndex() <= 0 ? "(TODAS)" : jcbMaintenanceArea.getSelectedItem().toString());
                map.put("sMaintenanceArea", jcbResponsable.getSelectedIndex() <= 0 ? "(TODAS)" : jcbResponsable.getSelectedItem().toString());
                map.put("sSqlWhereDetail", sSqlWhereDetail);
                map.put("sSqlWhereDetailWh", sSqlWhereDetailWh);
                map.put("sSqlWhereGroup", sSqlWhereGroup);
                map.put("sSqlWhere", sqlWhere);
                map.put("sSqlWhereFilter", sSqlWhereFilter);
                map.put("sTypeReport", sTypeReport);

                jasperPrint = SDataUtilities.fillReport(miClient, SDataConstantsSys.REP_TRN_STK_MOV_SUM_SUM, map);
                jasperViewer = new JasperViewer(jasperPrint, false);
                jasperViewer.setTitle(getTitle());
                jasperViewer.setVisible(true);
            }
            catch(Exception e) {
                SLibUtilities.renderException(this, e);
            }
            finally {
                setCursor(cursor);
            }
        }
    }

    private void actionPrint() {
        if (jrbReportTypePart.isSelected()) {
            printReportDetailedItem();
        }
        if (jrbReportTypeTool.isSelected()) {
            printReportDetailedItem();
        }
        else if (jrbReportTypeAll.isSelected()) {
            printReportDetailedItem();
        }
    }
    
    private void actionExit() {
        dispose();
    }
    
    private void actionDateStart() {
        miClient.getGuiDatePickerXXX().pickDate(moFieldDateStart.getDate(), moFieldDateStart);
    }

    private void actionDateEnd() {
        miClient.getGuiDatePickerXXX().pickDate(moFieldDateEnd.getDate(), moFieldDateEnd);
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbExit;
    private javax.swing.JButton jbItemGeneric;
    private javax.swing.JButton jbPickDateEnd;
    private javax.swing.JButton jbPickDateStart;
    private javax.swing.JButton jbPrint;
    private javax.swing.JButton jbResponsable;
    private javax.swing.ButtonGroup jbgReportAgrup;
    private javax.swing.ButtonGroup jbgReportType;
    private javax.swing.JComboBox<SFormComponentItem> jcbItemGeneric;
    private javax.swing.JComboBox<SFormComponentItem> jcbMaintenanceArea;
    private javax.swing.JComboBox<SFormComponentItem> jcbResponsable;
    private javax.swing.JFormattedTextField jftDateEnd;
    private javax.swing.JFormattedTextField jftDateStart;
    private javax.swing.JLabel jlDateEnd;
    private javax.swing.JLabel jlDateStart;
    private javax.swing.JLabel jlItemGeneric;
    private javax.swing.JLabel jlMaintenanceArea;
    private javax.swing.JLabel jlReportType;
    private javax.swing.JLabel jlResponsable;
    private javax.swing.JRadioButton jrbAgrupArea;
    private javax.swing.JRadioButton jrbAgrupResp;
    private javax.swing.JRadioButton jrbReportTypeAll;
    private javax.swing.JRadioButton jrbReportTypePart;
    private javax.swing.JRadioButton jrbReportTypeTool;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;
        mbResetingForm = false;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        moFieldDateStart.setFieldValue(SLibTimeUtilities.getBeginOfMonth(miClient.getSessionXXX().getWorkingDate()));
        moFieldDateEnd.setFieldValue(SLibTimeUtilities.getEndOfMonth(miClient.getSessionXXX().getWorkingDate()));
        jrbReportTypePart.setSelected(true);
        moComboBoxGroup.reset();
        moGroupMovement.reset();
        moGroupCompanyBranch.reset();
    }
    
    public void formRefreshOptionPane() {
        mbResetingForm = true;

        moComboBoxGroup.clear();
        moComboBoxGroup.addComboBox(SDataConstants.BPSU_BPB, jcbItemGeneric, jbItemGeneric);
        moComboBoxGroup.addComboBox(SDataConstants.BPSU_BP, jcbResponsable, jbResponsable);

        mbResetingForm = false;
    }

    @Override
    public void formRefreshCatalogues() {
        mbResetingForm = true;
        
        moGroupMovement.clear();
        
        SFormUtilities.populateComboBox(miClient, jcbItemGeneric, SDataConstants.ITMU_ITEM);
        miClient.getSession().populateCatalogue(jcbMaintenanceArea, SModConsts.TRN_MAINT_AREA, SLibConstants.UNDEFINED, null);
        SFormUtilities.populateComboBox(miClient, jcbResponsable, SDataConstants.BPSU_BP);
        
        mbResetingForm = false;
    }
    
    public void setSelectedPrimaryKey(java.lang.Object pk) {
        if (pk == null) {
            moComboBoxGroup.reset();
        }
        else {
            SFormUtilities.locateComboBoxItem(jcbItemGeneric, new int[] { ((int[]) pk)[0] });
        }
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        if (!validation.getIsError()) {
            String msg = SGuiUtilities.validateDateRange(moFieldDateStart.getDate(), moFieldDateEnd.getDate());
            if (!msg.isEmpty()) {
                validation.setMessage(msg);
                validation.setComponent(jftDateStart);
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbPrint) {
                actionPrint();
            }
            else if (button == jbExit) {
                actionExit();
            }
            else if (button == jbPickDateStart) {
                actionDateStart();
            }
            else if (button == jbPickDateEnd) {
                actionDateEnd();
            }
            else if (button == jbItemGeneric) {
                actionItemGeneric();
            }
            else if (button == jbResponsable) {
                actionResponsable();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof JRadioButton) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                JRadioButton radioButton = (JRadioButton) e.getSource();

            }
        }
    }
    
    private void actionItemGeneric() {
        SFormOptionPickerInterface picker = miClient.getOptionPicker(mnOptionType);

        picker.formReset();
        picker.formRefreshOptionPane();
        picker.setSelectedPrimaryKey(((SFormComponentItem) jcbItemGeneric.getSelectedItem()).getPrimaryKey());
        picker.setFormVisible(true);

        if (picker.getFormResult() == SLibConstants.FORM_RESULT_OK) {
            SFormUtilities.locateComboBoxItem(jcbItemGeneric, picker.getSelectedPrimaryKey());
            jcbItemGeneric.requestFocus();
        }
    }
    
    private void actionResponsable() {
        SFormOptionPickerInterface picker = miClient.getOptionPicker(mnOptionType2);

        picker.formReset();
        picker.formRefreshOptionPane();
        picker.setSelectedPrimaryKey(((SFormComponentItem) jcbResponsable.getSelectedItem()).getPrimaryKey());
        picker.setFormVisible(true);

        if (picker.getFormResult() == SLibConstants.FORM_RESULT_OK) {
            SFormUtilities.locateComboBoxItem(jcbResponsable, picker.getSelectedPrimaryKey());
            jcbResponsable.requestFocus();
        }
    }
}
