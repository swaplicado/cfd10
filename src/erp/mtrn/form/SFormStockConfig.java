/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SFormStockConfig.java
 *
 * Created on 23/10/2009, 08:48:14 AM
 */

package erp.mtrn.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.mitm.data.SDataItem;
import erp.mtrn.data.SDataStockConfig;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.JComboBox;

/**
 *
 * @author Sergio Flores
 */
public class SFormStockConfig extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener, java.awt.event.ItemListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mtrn.data.SDataStockConfig moStockConfig;
    private erp.lib.form.SFormField moFieldPkItemId;
    private erp.lib.form.SFormField moFieldPkUnitId;
    private erp.lib.form.SFormField moFieldPkCompanyBranchId;
    private erp.lib.form.SFormField moFieldPkWarehouseId;
    private erp.lib.form.SFormField moFieldQuantityMinimum;
    private erp.lib.form.SFormField moFieldQuantityMaximum;
    private erp.lib.form.SFormField moFieldReorderPoint;

    /** Creates new form SFormStockConfig */
    public SFormStockConfig(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        mnFormType = SDataConstants.TRN_STK_CFG;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel21 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();
        jlPkItemId = new javax.swing.JLabel();
        jcbPkItemId = new javax.swing.JComboBox<SFormComponentItem>();
        jbPkItemId = new javax.swing.JButton();
        jtfItemKey = new javax.swing.JTextField();
        jPanel23 = new javax.swing.JPanel();
        jlPkUnitId = new javax.swing.JLabel();
        jcbPkUnitId = new javax.swing.JComboBox<SFormComponentItem>();
        jbPkUnitId = new javax.swing.JButton();
        jtfUnitSymbol = new javax.swing.JTextField();
        jPanel24 = new javax.swing.JPanel();
        jlPkCompanyBranchId = new javax.swing.JLabel();
        jcbPkCompanyBranchId = new javax.swing.JComboBox<SFormComponentItem>();
        jbPkCompanyBranchId = new javax.swing.JButton();
        jPanel25 = new javax.swing.JPanel();
        jlPkWarehouseId = new javax.swing.JLabel();
        jcbPkWarehouseId = new javax.swing.JComboBox<SFormComponentItem>();
        jbPkWarehouseId = new javax.swing.JButton();
        jPanel28 = new javax.swing.JPanel();
        jlQuantityMinimum = new javax.swing.JLabel();
        jtfQuantityMinimum = new javax.swing.JTextField();
        jPanel30 = new javax.swing.JPanel();
        jlReorderPoint = new javax.swing.JLabel();
        jtfReorderPoint = new javax.swing.JTextField();
        jPanel29 = new javax.swing.JPanel();
        jlQuantityMaximum = new javax.swing.JLabel();
        jtfQuantityMaximum = new javax.swing.JTextField();
        jckIsDeleted = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        jpCommands1 = new javax.swing.JPanel();
        jpCommands2 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Lote");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel2.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel21.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel21.setLayout(new java.awt.BorderLayout(5, 0));

        jPanel8.setLayout(new java.awt.GridLayout(8, 1, 0, 5));

        jPanel20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPkItemId.setForeground(java.awt.Color.blue);
        jlPkItemId.setText("Ítem: *");
        jlPkItemId.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel20.add(jlPkItemId);

        jcbPkItemId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbPkItemId.setPreferredSize(new java.awt.Dimension(320, 23));
        jPanel20.add(jcbPkItemId);

        jbPkItemId.setText("...");
        jbPkItemId.setToolTipText("Seleccionar ítem");
        jbPkItemId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel20.add(jbPkItemId);

        jtfItemKey.setEditable(false);
        jtfItemKey.setText("CODE");
        jtfItemKey.setFocusable(false);
        jtfItemKey.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel20.add(jtfItemKey);

        jPanel8.add(jPanel20);

        jPanel23.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPkUnitId.setForeground(java.awt.Color.blue);
        jlPkUnitId.setText("Unidad: *");
        jlPkUnitId.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel23.add(jlPkUnitId);

        jcbPkUnitId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbPkUnitId.setPreferredSize(new java.awt.Dimension(320, 23));
        jPanel23.add(jcbPkUnitId);

        jbPkUnitId.setText("...");
        jbPkUnitId.setToolTipText("Seleccionar unidad");
        jbPkUnitId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel23.add(jbPkUnitId);

        jtfUnitSymbol.setEditable(false);
        jtfUnitSymbol.setText("CODE");
        jtfUnitSymbol.setFocusable(false);
        jtfUnitSymbol.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel23.add(jtfUnitSymbol);

        jPanel8.add(jPanel23);

        jPanel24.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPkCompanyBranchId.setForeground(java.awt.Color.blue);
        jlPkCompanyBranchId.setText("Sucursal:*");
        jlPkCompanyBranchId.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel24.add(jlPkCompanyBranchId);

        jcbPkCompanyBranchId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbPkCompanyBranchId.setPreferredSize(new java.awt.Dimension(320, 23));
        jPanel24.add(jcbPkCompanyBranchId);

        jbPkCompanyBranchId.setText("...");
        jbPkCompanyBranchId.setToolTipText("Seleccionar sucursal");
        jbPkCompanyBranchId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel24.add(jbPkCompanyBranchId);

        jPanel8.add(jPanel24);

        jPanel25.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPkWarehouseId.setForeground(java.awt.Color.blue);
        jlPkWarehouseId.setText("Almacén:*");
        jlPkWarehouseId.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel25.add(jlPkWarehouseId);

        jcbPkWarehouseId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbPkWarehouseId.setPreferredSize(new java.awt.Dimension(320, 23));
        jPanel25.add(jcbPkWarehouseId);

        jbPkWarehouseId.setText("...");
        jbPkWarehouseId.setToolTipText("Seleccionar almacén");
        jbPkWarehouseId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel25.add(jbPkWarehouseId);

        jPanel8.add(jPanel25);

        jPanel28.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlQuantityMinimum.setText("Mínimo:");
        jlQuantityMinimum.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel28.add(jlQuantityMinimum);

        jtfQuantityMinimum.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfQuantityMinimum.setText("0.00");
        jtfQuantityMinimum.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel28.add(jtfQuantityMinimum);

        jPanel8.add(jPanel28);

        jPanel30.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlReorderPoint.setText("Pto. reorden:");
        jlReorderPoint.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel30.add(jlReorderPoint);

        jtfReorderPoint.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfReorderPoint.setText("0.00");
        jtfReorderPoint.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel30.add(jtfReorderPoint);

        jPanel8.add(jPanel30);

        jPanel29.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlQuantityMaximum.setText("Máximo:");
        jlQuantityMaximum.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel29.add(jlQuantityMaximum);

        jtfQuantityMaximum.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfQuantityMaximum.setText("0.00");
        jtfQuantityMaximum.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel29.add(jtfQuantityMaximum);

        jPanel8.add(jPanel29);

        jckIsDeleted.setText("Registro eliminado");
        jPanel8.add(jckIsDeleted);

        jPanel21.add(jPanel8, java.awt.BorderLayout.NORTH);

        jPanel2.add(jPanel21, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel1.setPreferredSize(new java.awt.Dimension(592, 33));
        jPanel1.setLayout(new java.awt.GridLayout(1, 2));

        jpCommands1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
        jPanel1.add(jpCommands1);

        jpCommands2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jpCommands2.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jpCommands2.add(jbCancel);

        jPanel1.add(jpCommands2);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        setSize(new java.awt.Dimension(568, 384));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
       windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {

        moFieldPkItemId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbPkItemId, jlPkItemId);
        moFieldPkItemId.setPickerButton(jbPkItemId);
        moFieldPkUnitId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbPkUnitId, jlPkUnitId);
        moFieldPkUnitId.setPickerButton(jbPkUnitId);
        moFieldPkCompanyBranchId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbPkCompanyBranchId, jlPkCompanyBranchId);
        moFieldPkCompanyBranchId.setPickerButton(jbPkCompanyBranchId);
        moFieldPkWarehouseId= new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbPkWarehouseId, jlPkWarehouseId);
        moFieldPkWarehouseId.setPickerButton(jbPkWarehouseId);
        moFieldQuantityMinimum = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfQuantityMinimum, jlQuantityMinimum);
        moFieldQuantityMinimum.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsQuantityFormat());
        moFieldQuantityMaximum = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfQuantityMaximum, jlQuantityMaximum);
        moFieldQuantityMaximum.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsQuantityFormat());
        moFieldReorderPoint = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfReorderPoint, jlReorderPoint);
        moFieldReorderPoint.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsQuantityFormat());

        mvFields = new Vector<>();
        mvFields.add(moFieldPkItemId);
        mvFields.add(moFieldPkUnitId);
        mvFields.add(moFieldPkCompanyBranchId);
        mvFields.add(moFieldPkWarehouseId);
        mvFields.add(moFieldQuantityMinimum);
        mvFields.add(moFieldQuantityMaximum);
        mvFields.add(moFieldReorderPoint);

        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);
        jbPkItemId.addActionListener(this);
        jbPkUnitId.addActionListener(this);
        jbPkCompanyBranchId.addActionListener(this);
        jbPkWarehouseId.addActionListener(this);
        jcbPkItemId.addItemListener(this);
        jcbPkUnitId.addItemListener(this);
        jcbPkCompanyBranchId.addItemListener(this);

        SFormUtilities.createActionMap(rootPane, this, "actionOk", "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "actionCancel", "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;

            if (jcbPkItemId.isEnabled()) {
                jcbPkItemId.requestFocus();
            }
            else {
                jtfQuantityMinimum.requestFocus();
            }
        }
    }

    public void itemStateFieldPkItemId() {
        SDataItem item = null;

        if (jcbPkItemId.getSelectedIndex() <= 0) {
            jtfItemKey.setText("");

            jcbPkUnitId.setEnabled(false);
            jbPkUnitId.setEnabled(false);
            moFieldPkUnitId.setFieldValue(null);
        }
        else {
            item = (SDataItem) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_ITEM, moFieldPkItemId.getKeyAsIntArray(), SLibConstants.EXEC_MODE_VERBOSE);

            jtfItemKey.setText(item.getKey());

            jcbPkUnitId.setEnabled(true);
            jbPkUnitId.setEnabled(true);
            moFieldPkUnitId.setFieldValue(new int[] { item.getFkUnitId() });
        }

        itemStateFieldPkUnitId();
    }

    public void itemStateFieldPkUnitId() {
        if (jcbPkUnitId.getSelectedIndex() <= 0) {
            jtfUnitSymbol.setText("");
        }
        else {
            jtfUnitSymbol.setText(((SFormComponentItem) jcbPkUnitId.getSelectedItem()).getComplement().toString());
        }
    }

    public void itemStateFieldPkCompanyBranchId() {
        if (jcbPkCompanyBranchId.getSelectedIndex() <= 0) {
            jcbPkWarehouseId.setEnabled(false);
            jbPkWarehouseId.setEnabled(false);

            jcbPkWarehouseId.removeAllItems();
            moFieldPkWarehouseId.setFieldValue(null);
        }
        else {
            jcbPkWarehouseId.setEnabled(true);
            jbPkWarehouseId.setEnabled(true);

            SFormUtilities.populateComboBox(miClient, jcbPkWarehouseId, SDataConstants.CFGU_COB_ENT, new int[] { moFieldPkCompanyBranchId.getKeyAsIntArray()[0], SDataConstantsSys.CFGS_CT_ENT_WH });
        }
    }

    public void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    public void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbOk;
    private javax.swing.JButton jbPkCompanyBranchId;
    private javax.swing.JButton jbPkItemId;
    private javax.swing.JButton jbPkUnitId;
    private javax.swing.JButton jbPkWarehouseId;
    private javax.swing.JComboBox<SFormComponentItem> jcbPkCompanyBranchId;
    private javax.swing.JComboBox<SFormComponentItem> jcbPkItemId;
    private javax.swing.JComboBox<SFormComponentItem> jcbPkUnitId;
    private javax.swing.JComboBox<SFormComponentItem> jcbPkWarehouseId;
    private javax.swing.JCheckBox jckIsDeleted;
    private javax.swing.JLabel jlPkCompanyBranchId;
    private javax.swing.JLabel jlPkItemId;
    private javax.swing.JLabel jlPkUnitId;
    private javax.swing.JLabel jlPkWarehouseId;
    private javax.swing.JLabel jlQuantityMaximum;
    private javax.swing.JLabel jlQuantityMinimum;
    private javax.swing.JLabel jlReorderPoint;
    private javax.swing.JPanel jpCommands1;
    private javax.swing.JPanel jpCommands2;
    private javax.swing.JTextField jtfItemKey;
    private javax.swing.JTextField jtfQuantityMaximum;
    private javax.swing.JTextField jtfQuantityMinimum;
    private javax.swing.JTextField jtfReorderPoint;
    private javax.swing.JTextField jtfUnitSymbol;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        moStockConfig = null;

        jcbPkItemId.setEnabled(true);
        jcbPkUnitId.setEnabled(true);
        jcbPkCompanyBranchId.setEnabled(true);
        jcbPkWarehouseId.setEnabled(true);
        jbPkItemId.setEnabled(true);
        jbPkUnitId.setEnabled(true);
        jbPkCompanyBranchId.setEnabled(true);
        jbPkWarehouseId.setEnabled(true);
    }

    @Override
    public void formReset() {
        mbResetingForm = true;

        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moStockConfig = null;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        jcbPkItemId.setEnabled(true);
        jcbPkUnitId.setEnabled(false);
        jcbPkCompanyBranchId.setEnabled(true);
        jcbPkWarehouseId.setEnabled(false);
        jbPkItemId.setEnabled(true);
        jbPkUnitId.setEnabled(false);
        jbPkCompanyBranchId.setEnabled(true);
        jbPkWarehouseId.setEnabled(false);

        jckIsDeleted.setEnabled(false);

        mbResetingForm = false;
    }

    @Override
    public void formRefreshCatalogues() {
        SFormUtilities.populateComboBox(miClient, jcbPkItemId, SDataConstants.ITMU_ITEM);
        SFormUtilities.populateComboBox(miClient, jcbPkUnitId, SDataConstants.ITMU_UNIT);
        SFormUtilities.populateComboBox(miClient, jcbPkCompanyBranchId, SDataConstants.BPSX_BPB_EMP, new int[] { miClient.getSessionXXX().getCompany().getPkCompanyId() });
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        if (!validation.getIsError()) {
            if (moFieldReorderPoint.getDouble() < moFieldQuantityMinimum.getDouble()) {
                validation.setMessage("El valor para el campo '" + jlReorderPoint.getText() + "' debe ser mayor o igual al campo '" + jlQuantityMinimum.getText() + "'.");
                validation.setComponent(jtfReorderPoint);
            }
            else if (moFieldQuantityMaximum.getDouble() != 0) {
                if (moFieldQuantityMaximum.getDouble() < moFieldReorderPoint.getDouble()) {
                    validation.setMessage("El valor para el campo '" + jlQuantityMaximum.getText() + "' debe ser mayor o igual al campo '" + jlReorderPoint.getText() + "'.");
                    validation.setComponent(jtfQuantityMaximum);
                }
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        moStockConfig = (SDataStockConfig) registry;

        moFieldPkItemId.setFieldValue(new int[] { moStockConfig.getPkItemId() });
        moFieldPkUnitId.setFieldValue(new int[] { moStockConfig.getPkUnitId() });
        moFieldPkCompanyBranchId.setFieldValue(new int[] { moStockConfig.getPkCompanyBranchId() });
        moFieldPkWarehouseId.setFieldValue(new int[] { moStockConfig.getPkCompanyBranchId(), moStockConfig.getPkWarehouseId() });
        moFieldQuantityMinimum.setFieldValue(moStockConfig.getQuantityMinimum());
        moFieldQuantityMaximum.setFieldValue(moStockConfig.getQuantityMaximum());
        moFieldReorderPoint.setFieldValue(moStockConfig.getReorderPoint());
        jckIsDeleted.setSelected(moStockConfig.getIsDeleted());

        jckIsDeleted.setEnabled(true);

        jcbPkItemId.setEnabled(false);
        jcbPkUnitId.setEnabled(false);
        jcbPkCompanyBranchId.setEnabled(false);
        jcbPkWarehouseId.setEnabled(false);
        jbPkItemId.setEnabled(false);
        jbPkUnitId.setEnabled(false);
        jbPkCompanyBranchId.setEnabled(false);
        jbPkWarehouseId.setEnabled(false);
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        if (moStockConfig == null) {
            moStockConfig = new SDataStockConfig();
            moStockConfig.setPkItemId(moFieldPkItemId.getKeyAsIntArray()[0]);
            moStockConfig.setPkUnitId(moFieldPkUnitId.getKeyAsIntArray()[0]);
            moStockConfig.setPkCompanyBranchId(moFieldPkWarehouseId.getKeyAsIntArray()[0]);
            moStockConfig.setPkWarehouseId(moFieldPkWarehouseId.getKeyAsIntArray()[1]);
            moStockConfig.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
        }
        else {
            moStockConfig.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
        }

        moStockConfig.setQuantityMinimum(moFieldQuantityMinimum.getDouble());
        moStockConfig.setQuantityMaximum(moFieldQuantityMaximum.getDouble());
        moStockConfig.setReorderPoint(moFieldReorderPoint.getDouble());
        moStockConfig.setIsDeleted(jckIsDeleted.isSelected());

        return moStockConfig;
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbPkItemId) {
                miClient.pickOption(SDataConstants.ITMX_ITEM_IOG, moFieldPkItemId, null);
            }
            else if (button == jbPkUnitId) {
                miClient.pickOption(SDataConstants.ITMU_UNIT, moFieldPkUnitId, null);
            }
            else if (button == jbPkCompanyBranchId) {
                miClient.pickOption(SDataConstants.BPSU_BPB, moFieldPkCompanyBranchId, new int[] { miClient.getSessionXXX().getCompany().getPkCompanyId() });
            }
            else if (button == jbPkWarehouseId) {
                miClient.pickOption(SDataConstants.CFGU_COB_ENT, moFieldPkWarehouseId, new int[] { moFieldPkCompanyBranchId.getKeyAsIntArray()[0], SDataConstantsSys.CFGS_CT_ENT_WH });
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (!mbResetingForm) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                JComboBox comboBox = (JComboBox) e.getSource();

                if (comboBox == jcbPkItemId) {
                    itemStateFieldPkItemId();
                }
                else if (comboBox == jcbPkUnitId) {
                    itemStateFieldPkUnitId();
                }
                else if (comboBox == jcbPkCompanyBranchId) {
                    itemStateFieldPkCompanyBranchId();
                }
            }
        }
    }
}
