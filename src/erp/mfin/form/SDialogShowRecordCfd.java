/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mfin.form;

import erp.SClientUtils;
import erp.data.SDataConstants;
import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormUtilities;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STableConstants;
import erp.lib.table.STablePaneGrid;
import erp.lib.table.STableRowCustom;
import erp.mfin.data.SDataRecord;
import erp.mfin.data.SDataRecordEntry;
import erp.mtrn.data.SCfdUtils;
import erp.server.SServerConstants;
import erp.server.SServerRequest;
import erp.server.SServerResponse;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JButton;
import sa.lib.srv.SSrvConsts;

/**
 * Dialogo que muestra el listado de los CFDI directos e indirectos.
 * @author Isabel Servín
 */
public class SDialogShowRecordCfd extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private final erp.client.SClientInterface miClient;
    private final int mnDialogType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;

    private SDataRecord moParamRecord;
    private SDataRecordEntry moParamRecordEntry;
    private erp.lib.table.STablePaneGrid moPaneGrid;
    private erp.lib.table.STableColumnForm[] maoTableColumnsCfd = null;
    
    private String msTitle;
    
    /** Creates new form SDialogShowRecordCfd
     * @param client
     * @param type */
    public SDialogShowRecordCfd(erp.client.SClientInterface client, int type) {
        super(client.getFrame(), true);
        miClient = client;
        mnDialogType = type;
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbtButtonGroup = new javax.swing.ButtonGroup();
        jpRegistry = new javax.swing.JPanel();
        jpRegistryData = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jlPeriod = new javax.swing.JLabel();
        jtfPeriod = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jlInvoice = new javax.swing.JLabel();
        jtfInvoice = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jlRecConcept = new javax.swing.JLabel();
        jtfRecConcept = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jlEtyConcept = new javax.swing.JLabel();
        jtfEtyConcept = new javax.swing.JTextField();
        jtfEntry = new javax.swing.JTextField();
        jpRegistryCfd = new javax.swing.JPanel();
        jpDpsEntry = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jpControls = new javax.swing.JPanel();
        jbObtain = new javax.swing.JButton();
        jbClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cfdi de la póliza");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpRegistry.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpRegistry.setLayout(new java.awt.BorderLayout());

        jpRegistryData.setLayout(new java.awt.GridLayout(4, 0, 2, 2));

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPeriod.setText("Período contable:");
        jlPeriod.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel2.add(jlPeriod);

        jtfPeriod.setEditable(false);
        jtfPeriod.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel2.add(jtfPeriod);

        jpRegistryData.add(jPanel2);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlInvoice.setText("Número póliza:");
        jlInvoice.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel4.add(jlInvoice);

        jtfInvoice.setEditable(false);
        jtfInvoice.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jtfInvoice);

        jpRegistryData.add(jPanel4);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlRecConcept.setText("Concepto póliza:");
        jlRecConcept.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel5.add(jlRecConcept);

        jtfRecConcept.setEditable(false);
        jtfRecConcept.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel5.add(jtfRecConcept);

        jpRegistryData.add(jPanel5);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlEtyConcept.setText("Concepto partida:");
        jlEtyConcept.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel6.add(jlEtyConcept);

        jtfEtyConcept.setEditable(false);
        jtfEtyConcept.setPreferredSize(new java.awt.Dimension(350, 23));
        jPanel6.add(jtfEtyConcept);

        jtfEntry.setEditable(false);
        jtfEntry.setToolTipText("Número de partida");
        jtfEntry.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel6.add(jtfEntry);

        jpRegistryData.add(jPanel6);

        jpRegistry.add(jpRegistryData, java.awt.BorderLayout.NORTH);

        jpRegistryCfd.setBorder(javax.swing.BorderFactory.createTitledBorder("CFDI:"));
        jpRegistryCfd.setLayout(new java.awt.BorderLayout(0, 5));

        jpDpsEntry.setLayout(new java.awt.GridLayout(2, 1, 0, 1));

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));
        jpDpsEntry.add(jPanel3);

        jpRegistryCfd.add(jpDpsEntry, java.awt.BorderLayout.NORTH);

        jpRegistry.add(jpRegistryCfd, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpRegistry, java.awt.BorderLayout.CENTER);

        jpControls.setPreferredSize(new java.awt.Dimension(392, 33));
        jpControls.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbObtain.setText("Descargar los CFDI");
        jbObtain.setToolTipText("[Escape]");
        jbObtain.setPreferredSize(new java.awt.Dimension(150, 23));
        jpControls.add(jbObtain);

        jbClose.setText("Cerrar");
        jbClose.setToolTipText("[Escape]");
        jbClose.setPreferredSize(new java.awt.Dimension(75, 23));
        jpControls.add(jbClose);

        getContentPane().add(jpControls, java.awt.BorderLayout.PAGE_END);

        setSize(new java.awt.Dimension(656, 439));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        int i = 0;

        maoTableColumnsCfd = new STableColumnForm[6];
        maoTableColumnsCfd[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Nombre", 200);
        maoTableColumnsCfd[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "Fecha", STableConstants.WIDTH_DATE);
        maoTableColumnsCfd[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "RFC emisor", 100);
        maoTableColumnsCfd[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "RFC receptor", 100);
        maoTableColumnsCfd[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "XML total $", STableConstants.WIDTH_VALUE_2X);
        maoTableColumnsCfd[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Moneda", STableConstants.WIDTH_CURRENCY_KEY);
        
        moPaneGrid = new STablePaneGrid(miClient);
        jpRegistryCfd.add(moPaneGrid, BorderLayout.CENTER);

        jbClose.addActionListener(this);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionClose(); }
        };
        
        jbObtain.addActionListener(this);

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "close", KeyEvent.VK_ESCAPE, 0);
        if (mnDialogType == SDataConstants.FINX_REC_CFD_DIRECT) {
            msTitle = "CFDI directos";
            jpRegistryCfd.setBorder(javax.swing.BorderFactory.createTitledBorder("CFDI directos:"));
        }
        else {
            msTitle = "CFDI indirectos";
            jpRegistryCfd.setBorder(javax.swing.BorderFactory.createTitledBorder("CFDI indirectos:"));
        }
        jtfRecConcept.setCaretPosition(0);
        jtfEtyConcept.setCaretPosition(0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            jbClose.requestFocus();
        }
    }

    private void actionClose() {
        setVisible(false);
    }
    
    private void actionObtain() {
        if (jbObtain.isEnabled()) {
            try {
                SCfdUtils.getXmlCfds(miClient, SCfdUtils.getCfdRecord(miClient, (Object[]) moParamRecord.getPrimaryKey()));
            }
            catch (Exception e) {
                SLibUtilities.renderException(this, e);
            }
        }
    }
    
    private String composeDirectCfdQuery() throws Exception {
        String sql = "";
        if (moParamRecordEntry == null) {
            sql = "SELECT cc.doc_xml_name, c.ts, c.xml_rfc_emi, c.xml_rfc_rec, c.xml_tot, c.xml_mon FROM trn_cfd AS c " +
                    "INNER JOIN " + SClientUtils.getComplementaryDbName(miClient.getSession().getStatement().getConnection()) + ".trn_cfd AS cc ON c.id_cfd = cc.id_cfd " +
                    "WHERE fid_fin_rec_year_n = " + moParamRecord.getPkYearId() + " " +
                    "AND fid_fin_rec_per_n = " + moParamRecord.getPkPeriodId()+ " " +
                    "AND fid_fin_rec_bkc_n = " + moParamRecord.getPkBookkeepingCenterId() + " " +
                    "AND fid_fin_rec_tp_rec_n = '" + moParamRecord.getPkRecordTypeId()+ "' " +
                    "AND fid_fin_rec_num_n = " + moParamRecord.getPkNumberId()+ " " +
                    "UNION ";
        }
        sql += "SELECT cc.doc_xml_name, c.ts, c.xml_rfc_emi, c.xml_rfc_rec, c.xml_tot, c.xml_mon FROM trn_cfd AS c " +
                "INNER JOIN " + SClientUtils.getComplementaryDbName(miClient.getSession().getStatement().getConnection()) + ".trn_cfd AS cc ON c.id_cfd = cc.id_cfd " +
                "WHERE fid_rec_year_n = " + moParamRecord.getPkYearId() + " " +
                "AND fid_rec_per_n = " + moParamRecord.getPkPeriodId()+ " " +
                "AND fid_rec_bkc_n = " + moParamRecord.getPkBookkeepingCenterId() + " " +
                "AND fid_rec_tp_rec_n = '" + moParamRecord.getPkRecordTypeId() + "' " +
                "AND fid_rec_num_n = " + moParamRecord.getPkNumberId() + " " +
                (moParamRecordEntry != null ? "AND fid_rec_ety_n = " + moParamRecordEntry.getPkEntryId() : "");
        
        return sql;
    }
    
    private String composeIndirectCfdQuery() throws Exception {
        String sql = "SELECT DISTINCT cc.doc_xml_name, c.ts, c.xml_rfc_emi, c.xml_rfc_rec, c.xml_tot, c.xml_mon FROM trn_cfd AS c " +
                "INNER JOIN ( " +
                "SELECT DISTINCT fid_cfd_n AS id_cfd FROM fin_rec_ety " +
                "WHERE id_year = " + moParamRecord.getPkYearId() + " " +
                "AND id_per = " + moParamRecord.getPkPeriodId()+" " +
                "AND id_bkc = " + moParamRecord.getPkBookkeepingCenterId() + " " +
                "AND id_tp_rec = '" + moParamRecord.getPkRecordTypeId() + "' " +
                "AND id_num = " + moParamRecord.getPkNumberId() + " " +
                (moParamRecordEntry != null ? "AND id_ety = " + moParamRecordEntry.getPkEntryId() + " " : "") +
                "AND fid_cfd_n IS NOT NULL AND NOT b_del " +
                "UNION " +
                "SELECT DISTINCT id_cfd FROM trn_cfd AS c " +
                "INNER JOIN " +
                "(SELECT DISTINCT fid_dps_year_n, fid_dps_doc_n FROM fin_rec_ety " +
                "WHERE id_year = " + moParamRecord.getPkYearId() + " " +
                "AND id_per = " + moParamRecord.getPkPeriodId()+ " " +
                "AND id_bkc = " + moParamRecord.getPkBookkeepingCenterId()+ " " +
                "AND id_tp_rec = '" + moParamRecord.getPkRecordTypeId() + "' " +
                "AND id_num = " + moParamRecord.getPkNumberId() + " " +
                (moParamRecordEntry != null ? "AND id_ety = " + moParamRecordEntry.getPkEntryId() + " " : "") +
                "AND fid_dps_year_n IS NOT NULL AND fid_dps_doc_n IS NOT NULL AND NOT b_del) AS a ON " +
                "a.fid_dps_year_n = c.fid_dps_year_n AND a.fid_dps_doc_n = c.fid_dps_doc_n) AS id_cfd ON " +
                "id_cfd.id_cfd = c.id_cfd " +
                "INNER JOIN " + SClientUtils.getComplementaryDbName(miClient.getSession().getStatement().getConnection()) + ".trn_cfd AS cc " +
                "ON id_cfd.id_cfd = cc.id_cfd;" ;
        
        return sql;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JButton jbClose;
    private javax.swing.JButton jbObtain;
    private javax.swing.ButtonGroup jbtButtonGroup;
    private javax.swing.JLabel jlEtyConcept;
    private javax.swing.JLabel jlInvoice;
    private javax.swing.JLabel jlPeriod;
    private javax.swing.JLabel jlRecConcept;
    private javax.swing.JPanel jpControls;
    private javax.swing.JPanel jpDpsEntry;
    private javax.swing.JPanel jpRegistry;
    private javax.swing.JPanel jpRegistryCfd;
    private javax.swing.JPanel jpRegistryData;
    private javax.swing.JTextField jtfEntry;
    private javax.swing.JTextField jtfEtyConcept;
    private javax.swing.JTextField jtfInvoice;
    private javax.swing.JTextField jtfPeriod;
    private javax.swing.JTextField jtfRecConcept;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moParamRecord = null;

        moParamRecordEntry = null;
    }

    @Override
    public void formRefreshCatalogues() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        switch (type) {
            case SDataConstants.FIN_REC:
                moParamRecord = (SDataRecord) value;
                setTitle(msTitle + " de la póliza contable");
                jtfPeriod.setText(moParamRecord.getRecordPeriod());
                jtfInvoice.setText(moParamRecord.getPkRecordTypeId() + "-" + moParamRecord.getPkNumberId());
                jtfRecConcept.setText(moParamRecord.getConcept());
                jlEtyConcept.setEnabled(false);
                jtfEtyConcept.setEnabled(false);
                jtfEntry.setEnabled(false);
                if (mnDialogType == SDataConstants.FINX_REC_CFD_DIRECT) {
                    jbObtain.setEnabled(true);
                }
                else {
                    jbObtain.setEnabled(false);
                }
                break;
            case SDataConstants.FIN_REC_ETY:
                moParamRecordEntry = (SDataRecordEntry) value;
                setTitle(msTitle + " de la partida");
                jtfEtyConcept.setText(moParamRecordEntry.getConcept());
                jtfEntry.setText(moParamRecordEntry.getPkEntryId() + "");
                jlEtyConcept.setEnabled(true);
                jtfEtyConcept.setEnabled(true);
                jtfEntry.setEnabled(true);
                jbObtain.setEnabled(false);
                break;
            default:
        }
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbClose) {
                actionClose();
            }
            else if (button == jbObtain) {
                actionObtain();
            }
        }
    }

    @SuppressWarnings("unchecked")
    public int readCfd() {
        int i;
        int count = 0;
        String sSql = "";
        SServerRequest oRequest;
        SServerResponse oResponse ;
        Vector<Vector<Object>> vData;

        try {
            moPaneGrid.clearTable();
            
            if (mnDialogType == SDataConstants.FINX_REC_CFD_DIRECT) {
                sSql = composeDirectCfdQuery();
            }
            else if (mnDialogType == SDataConstants.FINX_REC_CFD_INDIRECT) {
                sSql = composeIndirectCfdQuery();
            }
            
            oRequest = new SServerRequest(SServerConstants.REQ_DB_QUERY_SIMPLE, sSql);
            oResponse = miClient.getSessionXXX().request(oRequest);

            if (oResponse.getResponseType() != SSrvConsts.RESP_TYPE_OK) {
                throw new Exception(oResponse.getMessage());
            }
            else {
                for (i = 0; i < maoTableColumnsCfd.length; i++) {
                    moPaneGrid.addTableColumn(maoTableColumnsCfd[i]);
                }
                moPaneGrid.createTable();

                vData = (Vector<Vector<Object>>) oResponse.getPacket();

                for (Vector<Object> data : vData) {
                    STableRowCustom row = new STableRowCustom();

                    for (i = 0; i < data.size(); i++) {     // index 0 is descarted, used only for ordering purpouses
                        row.getValues().add(data.get(i));
                    }

                    moPaneGrid.addTableRow(row);
                }
                moPaneGrid.renderTableRows();
                moPaneGrid.setTableRowSelection(0);

                count = vData.size();
            }
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }

        return count;
    }
}
