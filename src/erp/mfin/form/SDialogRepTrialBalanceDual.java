/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SDialogRepTrialBalanceDual.java
 *
 * Created on 16/03/2012
 */

package erp.mfin.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibTimeUtilities;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import java.awt.BorderLayout;
import java.awt.Cursor;
import java.awt.event.FocusEvent;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.util.Map;
import java.util.Vector;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JFormattedTextField;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import javax.swing.border.TitledBorder;
import javax.swing.event.ChangeEvent;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Juan Barajas
 */
public class SDialogRepTrialBalanceDual extends javax.swing.JDialog implements java.awt.event.FocusListener, java.awt.event.ItemListener, javax.swing.event.ChangeListener {

    private boolean mbFirstTime;
    private final int mnReportType;
    private final erp.client.SClientInterface miClient;
    private erp.lib.form.SFormField moFieldDateStart;
    private erp.lib.form.SFormField moFieldDateEnd;
    private erp.lib.form.SFormField moFieldItem;
    private erp.mfin.form.SPanelAccount moPanelAccountStartId;
    private erp.mfin.form.SPanelAccount moPanelAccountEndId;
    private erp.mfin.form.SPanelAccount moPanelCostCenterStartId;
    private erp.mfin.form.SPanelAccount moPanelCostCenterEndId;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;

    private java.lang.String msAccountStartId;
    private java.lang.String msAccountEndId;
    private java.lang.String msCostCenterBeginId;
    private java.lang.String msCostCenterEndId;

    private final boolean mbIsAuxCostCenter;

    /** 
     * Creates new form SDialogRepTrialBalanceAndBalanceCostCenter
     * @param client
     * @param nReportType
     * @param bIsAux 
     **/
    public SDialogRepTrialBalanceDual(erp.client.SClientInterface client, int nReportType, boolean bIsAux) {
        super(client.getFrame(), true);
        miClient = client;
        mnReportType = nReportType;
        mbIsAuxCostCenter = bIsAux;
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jlDateStart = new javax.swing.JLabel();
        jftDateStart = new javax.swing.JFormattedTextField();
        jbDateStart = new javax.swing.JButton();
        jPanel16 = new javax.swing.JPanel();
        jlDateEnd = new javax.swing.JLabel();
        jftDateEnd = new javax.swing.JFormattedTextField();
        jbDateEnd = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jrbByCostCenterAccount = new javax.swing.JRadioButton();
        jrbByAccountCostCenter = new javax.swing.JRadioButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jlDummy = new javax.swing.JLabel();
        jpMainBegin = new javax.swing.JPanel();
        jlMainBegin = new javax.swing.JLabel();
        jpMainEnd = new javax.swing.JPanel();
        jlMainEnd = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        jckIsFilter = new javax.swing.JCheckBox();
        jpFilterBegin = new javax.swing.JPanel();
        jlFilterBegin = new javax.swing.JLabel();
        jpFilterEnd = new javax.swing.JPanel();
        jlFilterEnd = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jlLevel = new javax.swing.JLabel();
        jsLevel = new javax.swing.JSpinner();
        jlLevelMax = new javax.swing.JLabel();
        jtfLevelMax = new javax.swing.JTextField();
        jPanel11 = new javax.swing.JPanel();
        jckShowSysAccounts = new javax.swing.JCheckBox();
        jckShowItems = new javax.swing.JCheckBox();
        jckShowRecordAdjYearEnd = new javax.swing.JCheckBox();
        jPanel12 = new javax.swing.JPanel();
        jckShowEmpty = new javax.swing.JCheckBox();
        jckIsWithDetail = new javax.swing.JCheckBox();
        jckShowRecordAdjAudit = new javax.swing.JCheckBox();
        jPanel14 = new javax.swing.JPanel();
        jlItem = new javax.swing.JLabel();
        jcbItem = new javax.swing.JComboBox();
        jbItem = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jbPrint = new javax.swing.JButton();
        jbClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Balanza de comprobación");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Parámetros del reporte:"));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel5.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel6.setLayout(new java.awt.GridLayout(1, 2, 0, 5));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Periodo:"));
        jPanel3.setLayout(new java.awt.GridLayout(2, 1, 0, 1));

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateStart.setText("Fecha inicial:");
        jlDateStart.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel15.add(jlDateStart);

        jftDateStart.setText("dd/mm/yyyy");
        jftDateStart.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel15.add(jftDateStart);

        jbDateStart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbDateStart.setToolTipText("Seleccionar fecha");
        jbDateStart.setFocusable(false);
        jbDateStart.setPreferredSize(new java.awt.Dimension(23, 23));
        jbDateStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDateStartActionPerformed(evt);
            }
        });
        jPanel15.add(jbDateStart);

        jPanel3.add(jPanel15);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateEnd.setText("Fecha final:");
        jlDateEnd.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel16.add(jlDateEnd);

        jftDateEnd.setText("dd/mm/yyyy");
        jftDateEnd.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel16.add(jftDateEnd);

        jbDateEnd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbDateEnd.setToolTipText("Seleccionar fecha");
        jbDateEnd.setFocusable(false);
        jbDateEnd.setPreferredSize(new java.awt.Dimension(23, 23));
        jbDateEnd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDateEndActionPerformed(evt);
            }
        });
        jPanel16.add(jbDateEnd);

        jPanel3.add(jPanel16);

        jPanel6.add(jPanel3);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Ordenamiento:"));
        jPanel8.setLayout(new java.awt.GridLayout(2, 1, 0, 1));

        buttonGroup1.add(jrbByCostCenterAccount);
        jrbByCostCenterAccount.setText("Por centro de costo, cuenta contable");
        jPanel8.add(jrbByCostCenterAccount);

        buttonGroup1.add(jrbByAccountCostCenter);
        jrbByAccountCostCenter.setText("Por cuenta contable, centro de costo");
        jPanel8.add(jrbByAccountCostCenter);

        jPanel6.add(jPanel8);

        jPanel5.add(jPanel6, java.awt.BorderLayout.NORTH);

        jPanel4.setLayout(new java.awt.GridLayout(1, 2));

        jPanel10.setLayout(new java.awt.BorderLayout());

        jlDummy.setPreferredSize(new java.awt.Dimension(34, 23));
        jPanel10.add(jlDummy, java.awt.BorderLayout.PAGE_START);

        jpMainBegin.setBorder(javax.swing.BorderFactory.createTitledBorder("Cuenta contable inicial:"));
        jpMainBegin.setLayout(new java.awt.BorderLayout());

        jlMainBegin.setFont(new java.awt.Font("Tahoma", 1, 12));
        jlMainBegin.setText("[Panel cuenta contable]");
        jlMainBegin.setPreferredSize(new java.awt.Dimension(100, 50));
        jpMainBegin.add(jlMainBegin, java.awt.BorderLayout.PAGE_START);

        jPanel10.add(jpMainBegin, java.awt.BorderLayout.CENTER);

        jpMainEnd.setBorder(javax.swing.BorderFactory.createTitledBorder("Cuenta contable final:"));
        jpMainEnd.setLayout(new java.awt.BorderLayout());

        jlMainEnd.setFont(new java.awt.Font("Tahoma", 1, 12));
        jlMainEnd.setText("[Panel cuenta contable]");
        jlMainEnd.setPreferredSize(new java.awt.Dimension(100, 50));
        jpMainEnd.add(jlMainEnd, java.awt.BorderLayout.PAGE_START);

        jPanel10.add(jpMainEnd, java.awt.BorderLayout.SOUTH);

        jPanel4.add(jPanel10);

        jPanel13.setLayout(new java.awt.BorderLayout());

        jckIsFilter.setSelected(true);
        jckIsFilter.setText("Filtrar centro de costo");
        jckIsFilter.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jPanel13.add(jckIsFilter, java.awt.BorderLayout.NORTH);

        jpFilterBegin.setBorder(javax.swing.BorderFactory.createTitledBorder("Centro de costo inicial:"));
        jpFilterBegin.setLayout(new java.awt.BorderLayout());

        jlFilterBegin.setFont(new java.awt.Font("Tahoma", 1, 12));
        jlFilterBegin.setText("[Panel centro de costo]");
        jlFilterBegin.setPreferredSize(new java.awt.Dimension(100, 50));
        jpFilterBegin.add(jlFilterBegin, java.awt.BorderLayout.PAGE_START);

        jPanel13.add(jpFilterBegin, java.awt.BorderLayout.CENTER);

        jpFilterEnd.setBorder(javax.swing.BorderFactory.createTitledBorder("Centro de costo final:"));
        jpFilterEnd.setLayout(new java.awt.BorderLayout());

        jlFilterEnd.setFont(new java.awt.Font("Tahoma", 1, 12));
        jlFilterEnd.setText("[Panel centro de costo]");
        jlFilterEnd.setPreferredSize(new java.awt.Dimension(100, 50));
        jpFilterEnd.add(jlFilterEnd, java.awt.BorderLayout.PAGE_START);

        jPanel13.add(jpFilterEnd, java.awt.BorderLayout.SOUTH);

        jPanel4.add(jPanel13);

        jPanel5.add(jPanel4, java.awt.BorderLayout.CENTER);

        jPanel9.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlLevel.setText("Profundidad ctas. contables:");
        jlLevel.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel7.add(jlLevel);

        jsLevel.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel7.add(jsLevel);

        jlLevelMax.setText(" Nivel máximo:");
        jlLevelMax.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel7.add(jlLevelMax);

        jtfLevelMax.setEditable(false);
        jtfLevelMax.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfLevelMax.setText("0");
        jtfLevelMax.setFocusable(false);
        jtfLevelMax.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel7.add(jtfLevelMax);

        jPanel9.add(jPanel7);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jckShowSysAccounts.setText("Mostrar subcuentas de sistema");
        jckShowSysAccounts.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel11.add(jckShowSysAccounts);

        jckShowItems.setText("Mostrar ítems");
        jckShowItems.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel11.add(jckShowItems);

        jckShowRecordAdjYearEnd.setText("Incluir ajustes de cierre");
        jPanel11.add(jckShowRecordAdjYearEnd);

        jPanel9.add(jPanel11);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jckShowEmpty.setText("Mostrar ctas. contables sin movimientos");
        jckShowEmpty.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel12.add(jckShowEmpty);

        jckIsWithDetail.setText("Mostrar detalle");
        jckIsWithDetail.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel12.add(jckIsWithDetail);

        jckShowRecordAdjAudit.setText("Incluir ajustes de auditoría");
        jckShowRecordAdjAudit.setOpaque(false);
        jPanel12.add(jckShowRecordAdjAudit);

        jPanel9.add(jPanel12);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItem.setText("Ítem:");
        jlItem.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel14.add(jlItem);

        jcbItem.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbItem.setPreferredSize(new java.awt.Dimension(275, 23));
        jPanel14.add(jcbItem);

        jbItem.setText("jButton1");
        jbItem.setToolTipText("Seleccionar ítem");
        jbItem.setFocusable(false);
        jbItem.setPreferredSize(new java.awt.Dimension(23, 23));
        jbItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbItemActionPerformed(evt);
            }
        });
        jPanel14.add(jbItem);

        jPanel9.add(jPanel14);

        jPanel5.add(jPanel9, java.awt.BorderLayout.SOUTH);

        jPanel2.add(jPanel5, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbPrint.setText("Imprimir");
        jbPrint.setToolTipText("[Ctrl + Enter]");
        jbPrint.setPreferredSize(new java.awt.Dimension(75, 23));
        jbPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbPrintActionPerformed(evt);
            }
        });
        jPanel1.add(jbPrint);

        jbClose.setText("Cerrar");
        jbClose.setToolTipText("[Escape]");
        jbClose.setPreferredSize(new java.awt.Dimension(75, 23));
        jbClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCloseActionPerformed(evt);
            }
        });
        jPanel1.add(jbClose);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-921)/2, (screenSize.height-471)/2, 921, 471);
    }// </editor-fold>//GEN-END:initComponents

    private void jbPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbPrintActionPerformed
        actionPrint();
    }//GEN-LAST:event_jbPrintActionPerformed

    private void jbCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCloseActionPerformed
        actionClose();
    }//GEN-LAST:event_jbCloseActionPerformed

    private void jbDateStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDateStartActionPerformed
        miClient.getGuiDatePickerXXX().pickDate(moFieldDateStart.getDate(), moFieldDateStart);
    }//GEN-LAST:event_jbDateStartActionPerformed

    private void jbDateEndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDateEndActionPerformed
        miClient.getGuiDatePickerXXX().pickDate(moFieldDateEnd.getDate(), moFieldDateEnd);
    }//GEN-LAST:event_jbDateEndActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void jbItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbItemActionPerformed
        actionItem();
    }//GEN-LAST:event_jbItemActionPerformed

    @SuppressWarnings("unchecked")
    private void initComponentsExtra() {
        mbFirstTime = true;

        moFieldDateStart = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jftDateStart, jlDateStart);
        moFieldDateStart.setPickerButton(jbDateStart);
        moFieldDateEnd = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jftDateEnd, jlDateEnd);
        moFieldDateEnd.setPickerButton(jbDateEnd);
        moFieldItem = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, false, jcbItem, jlItem);
        moFieldItem.setPickerButton(jbItem);

        moFieldDateStart.setFieldValue(SLibTimeUtilities.getBeginOfMonth(miClient.getSessionXXX().getWorkingDate()));
        moFieldDateEnd.setFieldValue(SLibTimeUtilities.getEndOfMonth(miClient.getSessionXXX().getWorkingDate()));
        SFormUtilities.populateComboBox(miClient, jcbItem, SDataConstants.ITMU_ITEM);

        jckShowEmpty.setSelected(false);
        jckShowSysAccounts.setEnabled(false);
        jckIsWithDetail.setEnabled(false);
        jckShowItems.setEnabled(false);
        jlItem.setEnabled(false);
        jcbItem.setEnabled(false);
        jbItem.setEnabled(false);

        mvFields = new Vector<SFormField>();
        mvFields.add(moFieldDateStart);
        mvFields.add(moFieldDateEnd);
        mvFields.add(moFieldItem);

        try {
            moPanelAccountStartId = new SPanelAccount(miClient, SDataConstants.FIN_ACC, false, false, false);
            moPanelAccountEndId = new SPanelAccount(miClient, SDataConstants.FIN_ACC, false, false, false);

            moPanelAccountStartId.resetPanel();
            moPanelAccountEndId.resetPanel();
            moPanelAccountStartId.getFieldAccount().getComponent().addFocusListener(this);

            moPanelCostCenterStartId = new SPanelAccount(miClient, SDataConstants.FIN_CC, false, false, false);
            moPanelCostCenterEndId = new SPanelAccount(miClient, SDataConstants.FIN_CC, false, false, false);

            moPanelCostCenterStartId.resetPanel();
            moPanelCostCenterEndId.resetPanel();
            moPanelCostCenterStartId.getFieldAccount().getComponent().addFocusListener(this);

            switch(mnReportType) {
                case SDataConstants.FIN_ACC:
                    jpMainBegin.remove(jlMainBegin);
                    jpMainEnd.remove(jlMainEnd);

                    ((TitledBorder) jpMainBegin.getBorder()).setTitle("Cuenta contable inicial:");
                    ((TitledBorder) jpMainEnd.getBorder()).setTitle("Cuenta contable final:");
                    jpMainBegin.add(moPanelAccountStartId, BorderLayout.CENTER);
                    jpMainEnd.add(moPanelAccountEndId, BorderLayout.CENTER);

                    jpFilterBegin.remove(jlFilterBegin);
                    jpFilterEnd.remove(jlFilterEnd);

                    ((TitledBorder) jpFilterBegin.getBorder()).setTitle("Centro de costo inicial:");
                    ((TitledBorder) jpFilterEnd.getBorder()).setTitle("Centro de costo final:");
                    jpFilterBegin.add(moPanelCostCenterStartId, BorderLayout.CENTER);
                    jpFilterEnd.add(moPanelCostCenterEndId, BorderLayout.CENTER);
                    break;
                case SDataConstants.FIN_CC:
                    jpMainBegin.remove(jlMainBegin);
                    jpMainEnd.remove(jlMainEnd);

                    ((TitledBorder) jpMainBegin.getBorder()).setTitle("Centro de costo inicial:");
                    ((TitledBorder) jpMainEnd.getBorder()).setTitle("Centro de costo final:");
                    jpMainBegin.add(moPanelCostCenterStartId, BorderLayout.CENTER);
                    jpMainEnd.add(moPanelCostCenterEndId, BorderLayout.CENTER);

                    jpFilterBegin.remove(jlFilterBegin);
                    jpFilterEnd.remove(jlFilterEnd);

                    ((TitledBorder) jpFilterBegin.getBorder()).setTitle("Cuenta contable inicial:");
                    ((TitledBorder) jpFilterEnd.getBorder()).setTitle("Cuenta contable final:");
                    jpFilterBegin.add(moPanelAccountStartId, BorderLayout.CENTER);
                    jpFilterEnd.add(moPanelAccountEndId, BorderLayout.CENTER);
                    break;
                default:
            }
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }

        switch(mnReportType) {
            case SDataConstants.FIN_ACC:
                setTitle("Balanza de comprobación");
                jckIsFilter.setText("Filtrar centro de costo");
                jckShowEmpty.setText("Mostrar ctas. contables sin movimientos");
                jlLevel.setText("Profundidad ctas. contables:");
                jtfLevelMax.setText("" + miClient.getSessionXXX().getParamsErp().getDeepAccounts());
                jsLevel.setModel(new SpinnerNumberModel(1, 1, miClient.getSessionXXX().getParamsErp().getDeepAccounts(), 1));
                break;
            case SDataConstants.FIN_CC:
                setTitle("Balanza de comprobación de centros de costo");
                jckIsFilter.setText("Filtrar cuenta contable");
                jckShowEmpty.setText("Mostrar centros de costos sin movimientos");
                jlLevel.setText("Profundidad centros costos:");
                jtfLevelMax.setText("" + miClient.getSessionXXX().getParamsErp().getDeepCostCenters());
                jsLevel.setModel(new SpinnerNumberModel(1, 1, miClient.getSessionXXX().getParamsErp().getDeepCostCenters(), 1));

                if (mbIsAuxCostCenter) {
                    setTitle("Reporte de auxiliares contables de centros de costo");
                    jsLevel.setValue((Integer) miClient.getSessionXXX().getParamsErp().getDeepCostCenters());
                    jsLevel.setEnabled(false);
                    jckShowItems.setEnabled(true);
                    jckIsWithDetail.setEnabled(true);
                }
                break;
            default:
        }

        jckIsFilter.addItemListener(this);
        jckShowItems.addItemListener(this);
        jsLevel.addChangeListener(this);
        jckIsFilter.setSelected(false);

        setModalityType(ModalityType.MODELESS);
        SFormUtilities.createActionMap(rootPane, this, "actionPrint", "print", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "actionClose", "close", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            jftDateStart.requestFocus();
            if (mbIsAuxCostCenter) {
                jrbByCostCenterAccount.setSelected(true);
                jrbByCostCenterAccount.setEnabled(true);
                jrbByCostCenterAccount.setFocusable(true);
                jrbByAccountCostCenter.setEnabled(true);
                jrbByAccountCostCenter.setFocusable(true);
            }
            else {
                jrbByCostCenterAccount.setSelected(false);
                jrbByCostCenterAccount.setEnabled(false);
                jrbByCostCenterAccount.setFocusable(false);
                jrbByAccountCostCenter.setEnabled(false);
                jrbByAccountCostCenter.setFocusable(false);
            }
            jckShowRecordAdjYearEnd.setSelected(true);
            jckShowRecordAdjAudit.setSelected(true);
        }
    }

    private void print() {
        int report = SLibConstants.UNDEFINED;
        Cursor cursor = getCursor();
        Map<String, Object> map = null;
        JasperPrint jasperPrint = null;
        JasperViewer jasperViewer = null;

        try {
            setCursor(new Cursor(Cursor.WAIT_CURSOR));

            msAccountStartId = moPanelAccountStartId.getFieldAccount().getString();
            msAccountEndId = moPanelAccountStartId.isEmptyAccountId() && moPanelAccountEndId.isEmptyAccountId() ?
                moPanelAccountEndId.getFieldAccount().getString().replace('0', '9') :
                moPanelAccountEndId.getFieldAccount().getString();

            msCostCenterBeginId = moPanelCostCenterStartId.getFieldAccount().getString();
            msCostCenterEndId = moPanelCostCenterStartId.isEmptyAccountId() && moPanelCostCenterEndId.isEmptyAccountId() ?
                moPanelCostCenterEndId.getFieldAccount().getString().replace('0', '9') :
                moPanelCostCenterEndId.getFieldAccount().getString();

            map = miClient.createReportParams();
            map.put("nYear", SLibTimeUtilities.digestYear(moFieldDateStart.getDate())[0]);
            map.put("tDateStart", moFieldDateStart.getDate());
            map.put("tDateEnd", moFieldDateEnd.getDate());
            map.put("nLevel", (Integer) jsLevel.getValue());
            map.put("bShowSysAccounts", jckShowSysAccounts.isSelected());
            map.put("bShowItems", jckShowItems.isSelected());
            map.put("bShowEmpty", jckShowEmpty.isSelected());
            map.put("nSortingItemType", miClient.getSessionXXX().getParamsErp().getFkSortingItemTypeId());

            switch(mnReportType) {
                case SDataConstants.FIN_ACC:
                    report = (Integer) jsLevel.getValue() == 1 ? SDataConstantsSys.REP_FIN_TRIAL_BAL_MAJOR : SDataConstantsSys.REP_FIN_TRIAL_BAL_DUAL;

                    map.put("nDeep", miClient.getSessionXXX().getParamsErp().getDeepAccounts());
                    map.put("sTitle", getTitle().toUpperCase());
                    map.put("sLabelNo", "NO. CUENTA CONTABLE");
                    map.put("sLabelDescription", "CUENTA CONTABLE");
                    map.put("sRank", "RANGO CUENTAS CONTABLES: DE ");
                    map.put("sRankIdMin", msAccountStartId);
                    map.put("sRankIdMax", msAccountEndId);
                    map.put("sFilter", "FILTRO CENTRO DE COSTOS: DE ");
                    map.put("sFilterMin", msCostCenterBeginId);
                    map.put("sFilterMax", msCostCenterEndId);
                    map.put("sSqlAccount", "re.fid_acc = ");
                    map.put("bIsFilterCc", jckIsFilter.isSelected());
                    map.put("sSql", createParamSqlAccount());
                    break;
                case SDataConstants.FIN_CC:
                    report = SDataConstantsSys.REP_FIN_TRIAL_BAL_DUAL;

                    map.put("nDeep", miClient.getSessionXXX().getParamsErp().getDeepCostCenters());
                    map.put("sTitle", getTitle().toUpperCase());
                    map.put("sLabelNo", "NO. CENTRO DE COSTO");
                    map.put("sLabelDescription", "CENTRO DE COSTO");
                    map.put("sRank", "RANGO CENTRO DE COSTOS: DE ");
                    map.put("sRankIdMin", msCostCenterBeginId);
                    map.put("sRankIdMax", msCostCenterEndId);
                    map.put("sFilter", "FILTRO CUENTAS CONTABLES: DE ");
                    map.put("sFilterMin", msAccountStartId);
                    map.put("sFilterMax", msAccountEndId);
                    map.put("sSqlAccount", "re.fid_cc_n = ");
                    map.put("sSqlAccountRange", " AND re.fid_acc BETWEEN '" + msAccountStartId + "' AND '" + msAccountEndId + "' ");
                    map.put("sSql", createParamSqlCostCenter());

                    if (mbIsAuxCostCenter) {
                        map.put("sTitle", getTitle().toUpperCase());
                        map.put("bIsAuxCostCenter", true);
                        map.put("bIsWithDetail", jckIsWithDetail.isSelected());
                        map.put("bIsByCostCenter", jrbByCostCenterAccount.isSelected());
                        map.put("nNumRecordLength", SDataConstantsSys.NUM_LEN_FIN_REC);
                        map.put("sSql", jrbByCostCenterAccount.isSelected() ? createParamSqlCostCenter() : createParamSqlAccount());
                        map.put("sSqlAccountRange", " AND re.fid_acc BETWEEN '" + msAccountStartId + "' AND '" + msAccountEndId + "' ");
                        map.put("sSqlCostCenterRange", " AND re.fid_cc_n BETWEEN '" + msCostCenterBeginId + "' AND '" + msCostCenterEndId + "' ");
                        map.put("sSqlItem", moFieldItem.getKeyAsIntArray()[0] == 0 ? "" : " AND re.fid_item_n = " + moFieldItem.getKeyAsIntArray()[0] + " ");
                        map.put("bIsItemOrderByKey", miClient.getSessionXXX().getParamsErp().getFkSortingItemTypeId() == SDataConstantsSys.CFGS_TP_SORT_KEY_NAME);
                        map.put("sSqlGroupBy", jckShowItems.isSelected() ? jrbByCostCenterAccount.isSelected() ? " GROUP BY re.fid_acc, i.item_key, i.item, r.dt, re.concept, bkc.code, cob.code " :
                            " GROUP BY re.fid_cc_n, i.item_key, i.item, r.dt, re.concept, bkc.code, cob.code " : jrbByCostCenterAccount.isSelected() ? " GROUP BY re.fid_acc, r.dt, re.concept, bkc.code, cob.code, i.item_key, i.item " :
                            " GROUP BY re.fid_cc_n, r.dt, re.concept, bkc.code, cob.code, i.item_key, i.item ");
                        map.put("sSqlOrderBy", jckShowItems.isSelected() ? jrbByCostCenterAccount.isSelected() ? " ORDER BY re.fid_acc, i.item_key, i.item, r.dt, re.concept, bkc.code, cob.code " :
                            " ORDER BY re.fid_cc_n, i.item_key, i.item, r.dt, re.concept, bkc.code, cob.code " : jrbByCostCenterAccount.isSelected() ? " ORDER BY re.fid_acc, r.dt, re.concept, bkc.code, cob.code, i.item_key, i.item " :
                            " ORDER BY re.fid_cc_n, r.dt, re.concept, bkc.code, cob.code, i.item_key, i.item ");
                    }
                    break;
                default:
            }
            map.put("sSqlWhere", (!jckShowRecordAdjYearEnd.isSelected() ? " AND  b_adj_year = 0 " : "") +
                    (!jckShowRecordAdjAudit.isSelected() ? " AND  b_adj_audit = 0 " : ""));

            jasperPrint = SDataUtilities.fillReport(miClient, report, map);
            jasperViewer = new JasperViewer(jasperPrint, false);
            jasperViewer.setTitle(getTitle());
            jasperViewer.setVisible(true);
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }
        finally {
            setCursor(cursor);
        }
    }

    private java.lang.String createParamSqlAccount() {
        int len = 0;
        int year = SLibTimeUtilities.digestYear(moFieldDateStart.getDate())[0];
        String sql = "";
        String sSqlWhere = "";
        String txtDateStart = miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(moFieldDateStart.getDate());
        String txtDateEnd = miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(moFieldDateEnd.getDate());
        String account = miClient.getSessionXXX().getParamsErp().getFormatAccountId().replace('9', '0');
        Vector<Integer> levels = SDataUtilities.getAccountLevels(account);

        sSqlWhere = (!jckShowRecordAdjYearEnd.isSelected() ? " AND r.b_adj_year = 0 " : "") +
                    (!jckShowRecordAdjAudit.isSelected() ? " AND r.b_adj_audit = 0 " : "");

        for (int i = 1; i <= (Integer) jsLevel.getValue(); i++) {
            len = i < levels.size() ? levels.get(i) - 1 : account.length();

            /*
             * 'a' stands for account
             * 'am' stands for major account
             */

            sql += (sql.length() == 0 ? "" : "UNION ") +
                    "SELECT " + ((Integer) jsLevel.getValue() == 1 ?
                    "LEFT(re.fid_acc, " + len + ")" : "CONCAT(LEFT(re.fid_acc, " + len + "), '" + account.substring(len) + "')") + " AS f_id_acc, " +
                    "re.fid_acc, am.deep, am.fid_tp_acc_sys, am.fid_tp_acc_r, " + i + " AS f_lev, " +
                    "(SELECT a.acc FROM fin_acc AS a WHERE a.id_acc = CONCAT(LEFT(re.fid_acc, " + len + "), '" + account.substring(len) + "')) AS f_acc, COUNT(*) AS f_count, " +
                    "SUM(CASE WHEN r.dt < '" + txtDateStart + "' THEN re.debit ELSE 0 END) - " +
                    "SUM(CASE WHEN r.dt < '" + txtDateStart + "' THEN re.credit ELSE 0 END) AS f_ob, " +
                    "SUM(CASE WHEN r.dt >= '" + txtDateStart + "' THEN re.debit ELSE 0 END) AS f_dbt, " +
                    "SUM(CASE WHEN r.dt >= '" + txtDateStart + "' THEN re.credit ELSE 0 END) AS f_cdt " +
                    "FROM fin_rec AS r INNER JOIN fin_rec_ety AS re ON " +
                    "r.id_year = re.id_year AND r.id_per = re.id_per AND r.id_bkc = re.id_bkc AND r.id_tp_rec = re.id_tp_rec AND r.id_num = re.id_num AND " +
                    "r.id_year = " + year + " AND r.dt <= '" + txtDateEnd + "' AND r.b_del = 0 AND re.b_del = 0 " + sSqlWhere +
                    "INNER JOIN fin_acc AS a ON " +
                    "a.id_acc = re.fid_acc AND re.fid_acc >= '" + msAccountStartId + "' AND re.fid_acc <= '" + msAccountEndId + "' " +
                    "INNER JOIN fin_acc AS am ON " +
                    "am.id_acc = CONCAT(LEFT(re.fid_acc, " + (levels.get(1) - 1) + "), '" + account.substring(levels.get(1) - 1) + "') " +
                    (jckIsFilter.isSelected() ? "WHERE (re.fid_cc_n >= '" + msCostCenterBeginId + "' AND re.fid_cc_n <= '" + msCostCenterEndId + "' " : "") + (mbIsAuxCostCenter ? " OR re.fid_cc_n IS NULL " : "") + (jckIsFilter.isSelected() ? ") " : " ") +
                    (moFieldItem.getKeyAsIntArray()[0] == 0 ? "" : (jckIsFilter.isSelected() ? "AND " : " WHERE ") + " re.fid_item_n = " + moFieldItem.getKeyAsIntArray()[0] + " ") +
                    "GROUP BY " + ((Integer) jsLevel.getValue() == 1 ? "LEFT(re.fid_acc, " + len + ") " : "CONCAT(LEFT(re.fid_acc, " + len + "), '" + account.substring(len) + "') ") +
                    (jckShowEmpty.isSelected() ? "" : "HAVING NOT (f_ob = 0 AND f_dbt = 0 AND f_cdt = 0) ");
        }

        sql += "ORDER BY f_id_acc, f_lev ";

        return sql;
    }

    private java.lang.String createParamSqlCostCenter() {
        int len = 0;
        int year = SLibTimeUtilities.digestYear(moFieldDateStart.getDate())[0];
        String sql = "";
        String sSqlWhere = "";
        String txtDateStart = miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(moFieldDateStart.getDate());
        String txtDateEnd = miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(moFieldDateEnd.getDate());
        String costCenter = miClient.getSessionXXX().getParamsErp().getFormatCostCenterId().replace('9', '0');
        Vector<Integer> levels = SDataUtilities.getAccountLevels(costCenter);

        sSqlWhere = (!jckShowRecordAdjYearEnd.isSelected() ? " AND r.b_adj_year = 0 " : "") +
                    (!jckShowRecordAdjAudit.isSelected() ? " AND r.b_adj_audit = 0 " : "");

        for (int i = 1; i <= (Integer) jsLevel.getValue(); i++) {
            len = i < levels.size() ? levels.get(i) - 1 : costCenter.length();

            /*
             * 'c' stands for cost center
             * 'cm' stands for major cost center
             */
            sql += (sql.length() == 0 ? "" : "UNION ") +
                    "SELECT " + ((Integer) jsLevel.getValue() == 1 ?
                    "LEFT(re.fid_cc_n, " + len + ")" : "CONCAT(LEFT(re.fid_cc_n, " + len + "), '" + costCenter.substring(len) + "')") + " AS f_id_acc, " +
                    "re.fid_cc_n AS fid_acc, cm.deep, 0 AS fid_tp_acc_sys, 0 AS fid_tp_acc_r, " + i + " AS f_lev, " +
                    "(SELECT cc.cc FROM fin_cc AS cc WHERE cc.id_cc = CONCAT(LEFT(re.fid_cc_n, " + len + "), '" + costCenter.substring(len) + "')) AS f_acc, COUNT(*) AS f_count, " +
                    "SUM(CASE WHEN r.dt < '" + txtDateStart + "' THEN re.debit ELSE 0 END) - " +
                    "SUM(CASE WHEN r.dt < '" + txtDateStart + "' THEN re.credit ELSE 0 END) AS f_ob, " +
                    "SUM(CASE WHEN r.dt >= '" + txtDateStart + "' THEN re.debit ELSE 0 END) AS f_dbt, " +
                    "SUM(CASE WHEN r.dt >= '" + txtDateStart + "' THEN re.credit ELSE 0 END) AS f_cdt " +
                    "FROM fin_rec AS r INNER JOIN fin_rec_ety AS re ON " +
                    "r.id_year = re.id_year AND r.id_per = re.id_per AND r.id_bkc = re.id_bkc AND r.id_tp_rec = re.id_tp_rec AND r.id_num = re.id_num AND " +
                    "r.id_year = " + year + " AND r.dt <= '" + txtDateEnd + "' AND r.b_del = 0 AND re.b_del = 0 " + sSqlWhere +
                    "INNER JOIN fin_cc AS c ON " +
                    "c.id_cc = re.fid_cc_n AND re.fid_cc_n >= '" + msCostCenterBeginId + "' AND re.fid_cc_n <= '" + msCostCenterEndId + "' " +
                    "INNER JOIN fin_cc AS cm ON " +
                    "cm.id_cc = CONCAT(LEFT(re.fid_cc_n, " + (levels.get(1) - 1) + "), '" + costCenter.substring(levels.get(1) - 1) + "') " +
                    (jckIsFilter.isSelected() ? "WHERE re.fid_acc >= '" + msAccountStartId + "' AND re.fid_acc <= '" + msAccountEndId + "' " : "") +
                    (moFieldItem.getKeyAsIntArray()[0] == 0 ? "" : (jckIsFilter.isSelected() ? "AND " : " WHERE ") + " re.fid_item_n = " + moFieldItem.getKeyAsIntArray()[0] + " ") +
                    (mbIsAuxCostCenter ? "GROUP BY CONCAT(LEFT(re.fid_cc_n, " + len + "), '" + costCenter.substring(len) + "') " : "GROUP BY " + ((Integer) jsLevel.getValue() == 1 ? "LEFT(re.fid_cc_n, " + len + ") " : "CONCAT(LEFT(re.fid_cc_n, " + len + "), '" + costCenter.substring(len) + "') ")) +
                    (jckShowEmpty.isSelected() ? "" : "HAVING f_count > 0 ");
        }

        sql += "ORDER BY f_id_acc, f_lev ";

        return sql;
    }

    private void actionCostCenterIdFocusGained() {
    }

    private void actionCostCenterIdFocusLost() {
        if (!moPanelCostCenterStartId.isEmptyAccountId() && moPanelCostCenterEndId.isEmptyAccountId()) {
            moPanelCostCenterEndId.getFieldAccount().setFieldValue(moPanelCostCenterStartId.getFieldAccount().getFieldValue());
        }
    }

    private void actionAccountIdFocusGained() {
    }

    private void actionAccountIdFocusLost() {
        if (!moPanelAccountStartId.isEmptyAccountId() && moPanelAccountEndId.isEmptyAccountId()) {
            moPanelAccountEndId.getFieldAccount().setFieldValue(moPanelAccountStartId.getFieldAccount().getFieldValue());
        }
    }

    private void actionIsFilter() {
        switch(mnReportType) {
            case SDataConstants.FIN_ACC:
                moPanelCostCenterStartId.enableFields(jckIsFilter.isSelected());
                moPanelCostCenterEndId.enableFields(jckIsFilter.isSelected());
                moPanelCostCenterStartId.resetPanel();
                moPanelCostCenterEndId.resetPanel();
                break;
            case SDataConstants.FIN_CC:
                moPanelAccountStartId.enableFields(jckIsFilter.isSelected());
                moPanelAccountEndId.enableFields(jckIsFilter.isSelected());
                moPanelAccountStartId.resetPanel();
                moPanelAccountEndId.resetPanel();
                break;
            default:
        }
    }

    private void actionSpinner() {
        switch(mnReportType) {
            case SDataConstants.FIN_ACC:
                if ((Integer) jsLevel.getValue() == 1) {
                    jckShowSysAccounts.setSelected(false);
                    jckShowSysAccounts.setEnabled(false);
                }
                else {
                    jckShowSysAccounts.setEnabled(true);
                }
                break;
            case SDataConstants.FIN_CC:
                if ((Integer) jsLevel.getValue() == 1) {
                    jckShowItems.setSelected(false);
                    jckShowItems.setEnabled(false);
                }
                else {
                    jckShowItems.setEnabled(true);
                }
                break;
            default:
        }
    }

    public void actionPrint() {
        boolean error = false;
        String msg = "";
        JComponent component = null;

        for (SFormField field : mvFields) {
            if (!field.validateField()) {
                error = true;
                component = field.getComponent();
            }
        }

        if (error) {
            if (component != null) {
                component.requestFocus();
            }
        }
        else {
            if (moFieldDateStart.getDate().after(moFieldDateEnd.getDate())) {
                msg = "La fecha del campo '" + jlDateStart.getText() + "' no puede ser posterior a la del campo '" + jlDateEnd.getText() + "'.";
            }
            else if (SLibTimeUtilities.digestYear(moFieldDateStart.getDate())[0] != SLibTimeUtilities.digestYear(moFieldDateEnd.getDate())[0]) {
                msg = "La fecha del campo '" + jlDateStart.getText() + "' y la del campo '" + jlDateEnd.getText() + "' deben pertenecer al mismo ejercicio.";
            }
            else if (moPanelAccountStartId.getFieldAccount().getString().compareTo(moPanelAccountEndId.getFieldAccount().getString()) > 0) {
                switch(mnReportType) {
                    case SDataConstants.FIN_ACC:
                        msg = "El valor para el campo '" + ((TitledBorder) jpMainBegin.getBorder()).getTitle() + "' " +
                                "no puede ser mayor al del campo '" + ((TitledBorder) jpMainEnd.getBorder()).getTitle() + "'.";
                        break;
                    case SDataConstants.FIN_CC:
                        msg = "El valor para el campo '" + ((TitledBorder) jpFilterBegin.getBorder()).getTitle() + "' " +
                                "no puede ser mayor al del campo '" + ((TitledBorder) jpFilterEnd.getBorder()).getTitle() + "'.";
                        break;
                    default:
                }
            }
            else if (moPanelCostCenterStartId.getFieldAccount().getString().compareTo(moPanelCostCenterEndId.getFieldAccount().getString()) > 0) {
                switch(mnReportType) {
                    case SDataConstants.FIN_ACC:
                        msg = "El valor para el campo '" + ((TitledBorder) jpFilterBegin.getBorder()).getTitle() + "' " +
                                "no puede ser mayor al del campo '" + ((TitledBorder) jpFilterEnd.getBorder()).getTitle() + "'.";
                        break;
                    case SDataConstants.FIN_CC:
                        msg = "El valor para el campo '" + ((TitledBorder) jpMainBegin.getBorder()).getTitle() + "' " +
                                "no puede ser mayor al del campo '" + ((TitledBorder) jpMainEnd.getBorder()).getTitle() + "'.";
                        break;
                    default:
                }
            }

            if (msg.length() > 0) {
                miClient.showMsgBoxWarning(msg);
            }
            else {
                print();
            }
        }
    }

    public void actionClose() {
        setVisible(false);
    }

    private void actionItem() {
        miClient.pickOption(SDataConstants.ITMU_ITEM, moFieldItem, null);
    }

    private void actionItemCheck() {
        if (mbIsAuxCostCenter && jckShowItems.isSelected()) {
            jlItem.setEnabled(true);
            jcbItem.setEnabled(true);
            jbItem.setEnabled(true);
        }
        else {
            jlItem.setEnabled(false);
            jcbItem.setEnabled(false);
            jbItem.setEnabled(false);
            jcbItem.setSelectedIndex(0);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbClose;
    private javax.swing.JButton jbDateEnd;
    private javax.swing.JButton jbDateStart;
    private javax.swing.JButton jbItem;
    private javax.swing.JButton jbPrint;
    private javax.swing.JComboBox jcbItem;
    private javax.swing.JCheckBox jckIsFilter;
    private javax.swing.JCheckBox jckIsWithDetail;
    private javax.swing.JCheckBox jckShowEmpty;
    private javax.swing.JCheckBox jckShowItems;
    private javax.swing.JCheckBox jckShowRecordAdjAudit;
    private javax.swing.JCheckBox jckShowRecordAdjYearEnd;
    private javax.swing.JCheckBox jckShowSysAccounts;
    private javax.swing.JFormattedTextField jftDateEnd;
    private javax.swing.JFormattedTextField jftDateStart;
    private javax.swing.JLabel jlDateEnd;
    private javax.swing.JLabel jlDateStart;
    private javax.swing.JLabel jlDummy;
    private javax.swing.JLabel jlFilterBegin;
    private javax.swing.JLabel jlFilterEnd;
    private javax.swing.JLabel jlItem;
    private javax.swing.JLabel jlLevel;
    private javax.swing.JLabel jlLevelMax;
    private javax.swing.JLabel jlMainBegin;
    private javax.swing.JLabel jlMainEnd;
    private javax.swing.JPanel jpFilterBegin;
    private javax.swing.JPanel jpFilterEnd;
    private javax.swing.JPanel jpMainBegin;
    private javax.swing.JPanel jpMainEnd;
    private javax.swing.JRadioButton jrbByAccountCostCenter;
    private javax.swing.JRadioButton jrbByCostCenterAccount;
    private javax.swing.JSpinner jsLevel;
    private javax.swing.JTextField jtfLevelMax;
    // End of variables declaration//GEN-END:variables

    @Override
    public void focusGained(FocusEvent e) {
        if (e.getSource() instanceof javax.swing.JFormattedTextField) {
            JFormattedTextField formattedTextField = (JFormattedTextField) e.getSource();

            if (formattedTextField == moPanelAccountStartId.getFieldAccount().getComponent()) {
                actionAccountIdFocusGained();
            }
            else if (formattedTextField == moPanelCostCenterStartId.getFieldAccount().getComponent()) {
                actionCostCenterIdFocusGained();
            }
        }
    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof javax.swing.JFormattedTextField) {
            JFormattedTextField formattedTextField = (JFormattedTextField) e.getSource();

            if (formattedTextField == moPanelAccountStartId.getFieldAccount().getComponent()) {
                actionAccountIdFocusLost();
            }
            else if (formattedTextField == moPanelCostCenterStartId.getFieldAccount().getComponent()) {
                actionCostCenterIdFocusLost();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof JCheckBox) {
            JCheckBox checkBox = (JCheckBox) e.getSource();

            if (checkBox == jckIsFilter) {
                actionIsFilter();
            }
            else if (checkBox == jckShowItems) {
                actionItemCheck();
            }
        }
    }

    @Override
    public void stateChanged(ChangeEvent e) {
        if (e.getSource() instanceof JSpinner) {
            JSpinner spinner = (JSpinner) e.getSource();

            if (spinner == jsLevel) {
                actionSpinner();
            }
        }
    }
}
