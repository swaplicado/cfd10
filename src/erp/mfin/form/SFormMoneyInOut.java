/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SFormMoneyInOut.java
 *
 * Created on 21/10/2010, 11:32:52 AM
 */

package erp.mfin.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataReadDescriptions;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.mcfg.data.SDataCurrency;
import erp.mfin.data.SDataAccountCash;
import erp.mfin.data.SDataRecord;
import erp.mfin.data.SDataRecordEntry;
import erp.mod.SModSysConsts;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author Alfonso Flores, Sergio Flores
 */
public class SFormMoneyInOut extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener, java.awt.event.FocusListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.lib.form.SFormField moFieldFkCompanyBranchId;
    private erp.lib.form.SFormField moFieldFkAccountCashId;
    private erp.lib.form.SFormField moFieldConcept;
    private erp.lib.form.SFormField moFieldValueCy;
    private erp.lib.form.SFormField moFieldExchangeRateSystem;
    private erp.lib.form.SFormField moFieldValue;
    private erp.lib.form.SFormField moFieldExchangeRate;

    private erp.mfin.data.SDataRecord moParamRecord;
    private erp.mfin.data.SDataAccountCash moParamAccountCash;
    private boolean mbParamIsMoneyIn;
    private erp.mfin.data.SDataRecordEntry moRecordEntry;
    private erp.mfin.data.SDataAccountCash moAccountCash;
    private erp.mcfg.data.SDataCurrency moCurrency;
    private int mnFkUser;

    /** Creates new form SFormMoneyInOut */
    public SFormMoneyInOut(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlFkCompanyBranchId = new javax.swing.JLabel();
        jcbFkCompanyBranchId = new javax.swing.JComboBox();
        jbFkCompanyBranchId = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jlFkAccountCashId = new javax.swing.JLabel();
        jcbFkAccountCashId = new javax.swing.JComboBox();
        jbFkAccountCashId = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jlCurrency = new javax.swing.JLabel();
        jtfCurrency = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        jlConcept = new javax.swing.JLabel();
        jtfConcept = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jlValueCy = new javax.swing.JLabel();
        jtfValueCy = new javax.swing.JTextField();
        jbValueCy = new javax.swing.JButton();
        jlExchangeRateSystem = new javax.swing.JLabel();
        jtfExchangeRateSystem = new javax.swing.JTextField();
        jbExchangeRateSystem = new javax.swing.JButton();
        jbExchangeRateAccountCashView = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jlValue = new javax.swing.JLabel();
        jtfValue = new javax.swing.JTextField();
        jbValue = new javax.swing.JButton();
        jlExchangeRate = new javax.swing.JLabel();
        jtfExchangeRate = new javax.swing.JTextField();
        jbExchangeRate = new javax.swing.JButton();
        jbExchangeRateAccountCash = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Ingreso de efectivo");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setPreferredSize(new java.awt.Dimension(392, 33));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jPanel1.add(jbCancel);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.GridLayout(6, 1, 0, 2));

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlFkCompanyBranchId.setText("Sucursal empresa: *");
        jlFkCompanyBranchId.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel4.add(jlFkCompanyBranchId);

        jcbFkCompanyBranchId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbFkCompanyBranchId.setPreferredSize(new java.awt.Dimension(370, 23));
        jcbFkCompanyBranchId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbFkCompanyBranchIdItemStateChanged(evt);
            }
        });
        jPanel4.add(jcbFkCompanyBranchId);

        jbFkCompanyBranchId.setText("jButton1");
        jbFkCompanyBranchId.setToolTipText("Seleccionar sucursal empresa");
        jbFkCompanyBranchId.setFocusable(false);
        jbFkCompanyBranchId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel4.add(jbFkCompanyBranchId);

        jPanel3.add(jPanel4);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlFkAccountCashId.setText("Cuenta de dinero: *");
        jlFkAccountCashId.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel9.add(jlFkAccountCashId);

        jcbFkAccountCashId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbFkAccountCashId.setPreferredSize(new java.awt.Dimension(370, 23));
        jcbFkAccountCashId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbFkAccountCashIdItemStateChanged(evt);
            }
        });
        jPanel9.add(jcbFkAccountCashId);

        jbFkAccountCashId.setText("jButton1");
        jbFkAccountCashId.setToolTipText("Seleccionar cuenta de efectivo");
        jbFkAccountCashId.setFocusable(false);
        jbFkAccountCashId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel9.add(jbFkAccountCashId);

        jPanel3.add(jPanel9);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlCurrency.setText("Moneda cuenta de dinero:");
        jlCurrency.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel5.add(jlCurrency);

        jtfCurrency.setEditable(false);
        jtfCurrency.setText("CURRENCY");
        jtfCurrency.setFocusable(false);
        jtfCurrency.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel5.add(jtfCurrency);

        jPanel3.add(jPanel5);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlConcept.setText("Concepto de la partida: *");
        jlConcept.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel8.add(jlConcept);

        jtfConcept.setText("CONCEPT");
        jtfConcept.setPreferredSize(new java.awt.Dimension(370, 23));
        jPanel8.add(jtfConcept);

        jPanel3.add(jPanel8);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlValueCy.setText("Monto: *");
        jlValueCy.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel6.add(jlValueCy);

        jtfValueCy.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfValueCy.setText("0.00");
        jtfValueCy.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jtfValueCy);

        jbValueCy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_action.gif"))); // NOI18N
        jbValueCy.setToolTipText("Calcular monto");
        jbValueCy.setFocusable(false);
        jbValueCy.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel6.add(jbValueCy);

        jlExchangeRateSystem.setText("Tipo de cambio sistema:");
        jlExchangeRateSystem.setPreferredSize(new java.awt.Dimension(118, 23));
        jPanel6.add(jlExchangeRateSystem);

        jtfExchangeRateSystem.setEditable(false);
        jtfExchangeRateSystem.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfExchangeRateSystem.setText("0.00");
        jtfExchangeRateSystem.setFocusable(false);
        jtfExchangeRateSystem.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jtfExchangeRateSystem);

        jbExchangeRateSystem.setText("jButton4");
        jbExchangeRateSystem.setToolTipText("Seleccionar tipo de cambio sistema");
        jbExchangeRateSystem.setFocusable(false);
        jbExchangeRateSystem.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel6.add(jbExchangeRateSystem);

        jbExchangeRateAccountCashView.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_look.gif"))); // NOI18N
        jbExchangeRateAccountCashView.setToolTipText("Ver tipo de cambio acumulado");
        jbExchangeRateAccountCashView.setFocusable(false);
        jbExchangeRateAccountCashView.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel6.add(jbExchangeRateAccountCashView);

        jPanel3.add(jPanel6);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlValue.setText("Monto moneda local (ML): *");
        jlValue.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel7.add(jlValue);

        jtfValue.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfValue.setText("0.00");
        jtfValue.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jtfValue);

        jbValue.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_action.gif"))); // NOI18N
        jbValue.setToolTipText("Calcular monto moneda local");
        jbValue.setFocusable(false);
        jbValue.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel7.add(jbValue);

        jlExchangeRate.setText("Tipo de cambio: *");
        jlExchangeRate.setPreferredSize(new java.awt.Dimension(118, 23));
        jPanel7.add(jlExchangeRate);

        jtfExchangeRate.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfExchangeRate.setText("0.00");
        jtfExchangeRate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jtfExchangeRate);

        jbExchangeRate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_action.gif"))); // NOI18N
        jbExchangeRate.setToolTipText("Calcular tipo de cambio");
        jbExchangeRate.setFocusable(false);
        jbExchangeRate.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel7.add(jbExchangeRate);

        jbExchangeRateAccountCash.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_money.gif"))); // NOI18N
        jbExchangeRateAccountCash.setToolTipText("Asignar tipo de cambio acumulado");
        jbExchangeRateAccountCash.setFocusable(false);
        jbExchangeRateAccountCash.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel7.add(jbExchangeRateAccountCash);

        jPanel3.add(jPanel7);

        jPanel2.add(jPanel3, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        setSize(new java.awt.Dimension(575, 375));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void jcbFkCompanyBranchIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbFkCompanyBranchIdItemStateChanged
        if (!mbResetingForm) {
            if (evt.getStateChange() == ItemEvent.SELECTED) {
                itemStateChangedCompanyBranch();
            }
        }
    }//GEN-LAST:event_jcbFkCompanyBranchIdItemStateChanged

    private void jcbFkAccountCashIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbFkAccountCashIdItemStateChanged
        if (!mbResetingForm) {
            if (evt.getStateChange() == ItemEvent.SELECTED) {
                itemStateChangedAccountCash();
            }
        }
    }//GEN-LAST:event_jcbFkAccountCashIdItemStateChanged

    private void initComponentsExtra() {
        mvFields = new Vector<SFormField>();

        moFieldFkCompanyBranchId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkCompanyBranchId, jlFkCompanyBranchId);
        moFieldFkCompanyBranchId.setPickerButton(jbFkCompanyBranchId);
        moFieldFkAccountCashId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkAccountCashId, jlFkAccountCashId);
        moFieldFkAccountCashId.setPickerButton(jbFkAccountCashId);
        moFieldConcept = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtfConcept, jlConcept);
        moFieldConcept.setLengthMax(100);
        moFieldValueCy = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfValueCy, jlValueCy);
        moFieldValueCy.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsValueFormat());
        moFieldExchangeRateSystem = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfExchangeRateSystem, jlExchangeRateSystem);
        moFieldExchangeRateSystem.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsExchangeRateFormat());
        moFieldValue = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfValue, jlValue);
        moFieldValue.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsValueFormat());
        moFieldExchangeRate = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfExchangeRate, jlExchangeRate);
        moFieldExchangeRate.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsExchangeRateFormat());

        mvFields.add(moFieldFkCompanyBranchId);
        mvFields.add(moFieldFkAccountCashId);
        mvFields.add(moFieldConcept);
        mvFields.add(moFieldValueCy);
        mvFields.add(moFieldValue);
        mvFields.add(moFieldExchangeRateSystem);
        mvFields.add(moFieldExchangeRate);

        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);
        jbFkCompanyBranchId.addActionListener(this);
        jbFkAccountCashId.addActionListener(this);
        jbExchangeRate.addActionListener(this);
        jbExchangeRateSystem.addActionListener(this);
        jbValueCy.addActionListener(this);
        jbValue.addActionListener(this);
        jbExchangeRateAccountCash.addActionListener(this);
        jbExchangeRateAccountCashView.addActionListener(this);

        jtfValueCy.addFocusListener(this);
        jtfValue.addFocusListener(this);
        jtfExchangeRate.addFocusListener(this);

        moParamRecord = null;

        mnFkUser = 0;

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction action = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), action, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            setTitle((mbParamIsMoneyIn ? "Ingreso" : "Egreso") + " de dinero");
            if (moParamAccountCash != null) {
                renderAccountCashSettings(false);
                moFieldFkAccountCashId.setKey(new int[] { moParamAccountCash.getPkCompanyBranchId(),
                moParamAccountCash.getPkAccountCashId()});
                jtfConcept.requestFocus();
            }
            else {
                renderAccountCashSettings(true);
                jcbFkCompanyBranchId.requestFocus();
            }
        }
    }

    private void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    private double obtainTodayExchangeRate() {
        double rate = 0;

        try {
            rate = SDataUtilities.obtainExchangeRate(miClient,
                moCurrency.getPkCurrencyId(), moParamRecord.getDate());
        }
        catch (Exception e) {
            SLibUtilities.printOutException(this, e);
        }

        return rate;
    }

    private double obtainExchangeRateAccountCash() {
        double rate = 0;
        double[] balance = null;

        try {
            balance = obtainCurrentAccountCashBalance();
            rate = balance[0] == 0d ? 0d : balance[0] / balance[1];
        }
        catch (Exception e) {
            SLibUtilities.printOutException(this, e);
        }

        return rate;
    }

    private double[] obtainCurrentAccountCashBalance() {
        double[] balance = new double[2];

        try {
            balance = SDataUtilities.obtainAccountCashBalanceUpdated(miClient,
                moParamAccountCash != null ? moParamRecord.getDbmsDataAccountCash().getFkCurrencyId() : moAccountCash.getFkCurrencyId(), moParamRecord.getDate(),
                moParamAccountCash != null ? moParamRecord.getDbmsDataAccountCash().getPrimaryKey() : moAccountCash.getPrimaryKey(),
                (moParamAccountCash != null ? moParamRecord.getDbmsDataAccountCash().getFkAccountCashCategoryId() : moAccountCash.getFkAccountCashCategoryId()) == SDataConstantsSys.FINS_CT_ACC_CASH_CASH ?
                    SDataConstantsSys.FINS_TP_SYS_MOV_CASH_CASH : SDataConstantsSys.FINS_TP_SYS_MOV_CASH_BANK,
                moParamRecord, moRecordEntry);
        }
        catch (Exception e) {
            SLibUtilities.printOutException(this, e);
        }

        return balance;
    }

    private void renderCurrencySettings() {
        if (moFieldFkAccountCashId.getKeyAsIntArray()[1] > 0) {
            moAccountCash = (SDataAccountCash) SDataUtilities.readRegistry(miClient, SDataConstants.FIN_ACC_CASH, new int[] {
                moFieldFkAccountCashId.getKeyAsIntArray()[0], moFieldFkAccountCashId.getKeyAsIntArray()[1] }, SLibConstants.EXEC_MODE_SILENT);
            moCurrency = (SDataCurrency) SDataUtilities.readRegistry(miClient,
                SDataConstants.CFGU_CUR, new int[] { moParamAccountCash != null ? moParamAccountCash.getFkCurrencyId() :
                moAccountCash.getFkCurrencyId() }, SLibConstants.EXEC_MODE_SILENT);

            jtfCurrency.setText(moCurrency.getCurrency());

            if (moCurrency.getPkCurrencyId() != miClient.getSessionXXX().getParamsErp().getFkCurrencyId()) {
               jtfValue.setEditable(true);
               jtfValue.setFocusable(true);
               jbValueCy.setEnabled(true);
               jbValue.setEnabled(true);
               jtfExchangeRate.setEditable(true);
               jtfExchangeRate.setFocusable(true);
               jbExchangeRate.setEnabled(true);
               jbExchangeRateSystem.setEnabled(true);
               jbExchangeRateAccountCashView.setEnabled(true);
               jbExchangeRateAccountCash.setEnabled(true);

               if (mbParamIsMoneyIn) {
                   moFieldExchangeRate.setFieldValue(obtainTodayExchangeRate());
               }
               else {
                   moFieldExchangeRate.setFieldValue(obtainExchangeRateAccountCash());
               }
            }
            else {
               jtfValue.setEditable(false);
               jtfValue.setFocusable(false);
               jbValueCy.setEnabled(false);
               jbValue.setEnabled(false);
               jtfExchangeRate.setEditable(false);
               jtfExchangeRate.setFocusable(false);
               jbExchangeRateSystem.setEnabled(false);
               jbExchangeRate.setEnabled(false);
               jbExchangeRateAccountCashView.setEnabled(false);
               jbExchangeRateAccountCash.setEnabled(false);

               moFieldExchangeRateSystem.setFieldValue(1);
               moFieldExchangeRate.setFieldValue(1);
            }
        }
    }

    private void renderAccountCashSettings(boolean b) {
        jcbFkCompanyBranchId.setEnabled(b);
        jbFkCompanyBranchId.setEnabled(b);
        itemStateChangedCompanyBranch();
    }

    private void actionExchangeRateSystem() {
        double rate = miClient.pickExchangeRate(moParamAccountCash != null ? moParamRecord.getDbmsDataAccountCash().getFkCurrencyId() :
            moAccountCash.getFkCurrencyId(), miClient.getSessionXXX().getWorkingDate());

        if (rate != 0d) {
            moFieldExchangeRateSystem.setFieldValue(rate);
            if (moFieldExchangeRate.getDouble() == 0) {
                moFieldExchangeRate.setFieldValue(rate);
            }
            jtfExchangeRate.requestFocus();
        }
    }

    private void actionValueCy() {
        if (moFieldExchangeRate.getDouble() == 0) {
            jtfExchangeRate.requestFocus();
        }
        else {
            moFieldValueCy.setFieldValue(SLibUtilities.round(moFieldValue.getDouble() / moFieldExchangeRate.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
            jtfValueCy.requestFocus();
        }
    }

    private void actionValue() {
        if (moFieldExchangeRate.getDouble() == 0) {
            jtfExchangeRate.requestFocus();
        }
        else {
            moFieldValue.setFieldValue(SLibUtilities.round(moFieldValueCy.getDouble() * moFieldExchangeRate.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
            jtfValue.requestFocus();
        }
    }

    private void actionExchangeRate() {
        if (moFieldValueCy.getDouble() != 0) {

            if (moFieldValue.getDouble() == 0) {
                jtfValueCy.requestFocus();
            }
            else {
                moFieldExchangeRate.setFieldValue(moFieldValue.getDouble() / moFieldValueCy.getDouble());
                jtfExchangeRate.requestFocus();
            }
        }
        else if (moFieldValue.getDouble() != 0) {
            jtfValue.requestFocus();
        }
        else {
            jtfExchangeRate.requestFocus();
        }
    }

    private void actionExchangeRateAccountCash() {
        moFieldExchangeRate.setFieldValue(obtainExchangeRateAccountCash());
        jtfExchangeRate.requestFocus();
    }

    private void actionExchangeRateAccountCashView() {
        double[] balance = null;

        try {
            balance = obtainCurrentAccountCashBalance();

            miClient.showMsgBoxInformation(
                    "Tipo de cambio acumulado al día: " + miClient.getSessionXXX().getFormatters().getDateFormat().format(moParamRecord.getDate()) + "\n" +
                    "Saldo " + miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getKey() + ": $ " +
                    miClient.getSessionXXX().getFormatters().getDecimalsValueFormat().format(balance[0]) + ".\n" +
                    "Saldo " + moCurrency.getKey() + ": $ " +
                    miClient.getSessionXXX().getFormatters().getDecimalsValueFormat().format(balance[1]) + ".\n" +
                    "Tipo de cambio acumulado: " + miClient.getSessionXXX().getFormatters().getDecimalsExchangeRateFormat().format(balance[1] == 0d ? 0d : balance[0] / balance[1]) + ".");
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }
    }

    private void focusLostValueCy() {
        if (moFieldValueCy.getDouble() != 0) {

            if (!jtfValue.isEditable()|| moFieldValue.getDouble() == 0) {
                moFieldValue.setFieldValue(SLibUtilities.round(moFieldValueCy.getDouble() * moFieldExchangeRate.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
            }
            else if (moFieldExchangeRate.getDouble() == 0) {
                moFieldExchangeRate.setFieldValue(SLibUtilities.round(moFieldValue.getDouble() / moFieldValueCy.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsExchangeRate()));
            }
        }
    }

    private void focusLostValue() {
        if (moFieldValue.getDouble() != 0) {

            if (moFieldValueCy.getDouble() == 0 && moFieldExchangeRate.getDouble() != 0) {
                moFieldValueCy.setFieldValue(SLibUtilities.round(moFieldValue.getDouble() / moFieldExchangeRate.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
            }
            else if (moFieldValueCy.getDouble() != 0 && moFieldExchangeRate.getDouble() == 0) {
                moFieldExchangeRate.setFieldValue(SLibUtilities.round(moFieldValue.getDouble() / moFieldValueCy.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsExchangeRate()));
            }
        }
    }

    private void focusLostExchangeRate() {
        if (moFieldValueCy.getDouble() != 0 && moFieldValue.getDouble() == 0) {
            moFieldValue.setFieldValue(SLibUtilities.round(moFieldValueCy.getDouble() * moFieldExchangeRate.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
        }
    }

    private void populateComboBoxAccountCash() {
        if (moFieldFkCompanyBranchId.getKeyAsIntArray()[0] > 0) {
            SFormUtilities.populateComboBox(miClient, jcbFkAccountCashId, SDataConstants.FIN_ACC_CASH, moFieldFkCompanyBranchId.getKeyAsIntArray());
        }
    }

    private void actionFkCompanyBranchId() {
        miClient.pickOption(SDataConstants.BPSU_BPB, moFieldFkCompanyBranchId, new int[] { miClient.getSessionXXX().getCompany().getPkCompanyId() });
    }

    private void actionFkAccountCashDestinyId() {
        miClient.pickOption(SDataConstants.FIN_ACC_CASH, moFieldFkAccountCashId, moFieldFkCompanyBranchId.getKeyAsIntArray());
    }

    private erp.mfin.data.SDataRecordEntry prepareRecordEntry() {
        int nAccountCashCategory = moParamAccountCash != null ? moParamAccountCash.getFkAccountCashCategoryId() : moAccountCash.getFkAccountCashCategoryId();
        SDataRecordEntry oEntry = new SDataRecordEntry();

        oEntry.setConcept(moFieldConcept.getString());
        oEntry.setDebit(mbParamIsMoneyIn ? moFieldValue.getDouble() : 0);
        oEntry.setCredit(mbParamIsMoneyIn ? 0 : moFieldValue.getDouble());
        oEntry.setExchangeRate(moFieldExchangeRate.getDouble());
        oEntry.setExchangeRateSystem(moFieldExchangeRateSystem.getDouble());
        oEntry.setDebitCy(mbParamIsMoneyIn ? moFieldValueCy.getDouble() : 0);
        oEntry.setCreditCy(mbParamIsMoneyIn ? 0 : moFieldValueCy.getDouble());
        oEntry.setFkAccountIdXXX(moParamAccountCash != null ? moParamAccountCash.getFkAccountId() : moAccountCash.getFkAccountId());
        oEntry.setFkAccountingMoveTypeId(SDataConstantsSys.FINS_CLS_ACC_MOV_JOURNAL[0]);
        oEntry.setFkAccountingMoveClassId(SDataConstantsSys.FINS_CLS_ACC_MOV_JOURNAL[1]);
        oEntry.setFkAccountingMoveSubclassId(SDataConstantsSys.FINS_CLS_ACC_MOV_JOURNAL[2]);

        if (mbParamIsMoneyIn) {
            oEntry.setFkSystemMoveClassId(SModSysConsts.FINS_TP_SYS_MOV_MI_ADJ[0]);
            oEntry.setFkSystemMoveTypeId(SModSysConsts.FINS_TP_SYS_MOV_MI_ADJ[1]);
        }
        else {
            oEntry.setFkSystemMoveClassId(SModSysConsts.FINS_TP_SYS_MOV_MO_ADJ[0]);
            oEntry.setFkSystemMoveTypeId(SModSysConsts.FINS_TP_SYS_MOV_MO_ADJ[1]);
        }

        if (nAccountCashCategory == SDataConstantsSys.FINS_CT_ACC_CASH_CASH) {
            oEntry.setFkSystemAccountClassId(SModSysConsts.FINS_TP_SYS_ACC_ENT_CSH_CSH[0]);
            oEntry.setFkSystemAccountTypeId(SModSysConsts.FINS_TP_SYS_ACC_ENT_CSH_CSH[1]);
            oEntry.setFkSystemMoveCategoryIdXXX(SDataConstantsSys.FINS_TP_SYS_MOV_CASH_CASH[0]);
            oEntry.setFkSystemMoveTypeIdXXX(SDataConstantsSys.FINS_TP_SYS_MOV_CASH_CASH[1]);
        }
        else {
            oEntry.setFkSystemAccountClassId(SModSysConsts.FINS_TP_SYS_ACC_ENT_CSH_BNK[0]);
            oEntry.setFkSystemAccountTypeId(SModSysConsts.FINS_TP_SYS_ACC_ENT_CSH_BNK[1]);
            oEntry.setFkSystemMoveCategoryIdXXX(SDataConstantsSys.FINS_TP_SYS_MOV_CASH_BANK[0]);
            oEntry.setFkSystemMoveTypeIdXXX(SDataConstantsSys.FINS_TP_SYS_MOV_CASH_BANK[1]);
        }

        oEntry.setFkCurrencyId(moParamAccountCash != null ? moParamAccountCash.getFkCurrencyId() : moCurrency.getPkCurrencyId());
        oEntry.setFkCompanyBranchId_n(moFieldFkCompanyBranchId.getKeyAsIntArray()[0]);
        oEntry.setFkEntityId_n(moFieldFkAccountCashId.getKeyAsIntArray()[1]);
        oEntry.setDbmsAccount(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FIN_ACC, new Object[] { oEntry.getFkAccountIdXXX() }));
        oEntry.setDbmsAccountComplement(moParamAccountCash != null ? moParamAccountCash.getAuxEntity() : moAccountCash.getAuxEntity());
        oEntry.setDbmsAccountingMoveSubclass(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FINS_CLS_ACC_MOV,
                SDataConstantsSys.FINS_CLS_ACC_MOV_JOURNAL));
        oEntry.setDbmsCurrencyKey(moCurrency.getKey());
        oEntry.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
        oEntry.setFkUserEditId(mnFkUser > 0 ? miClient.getSession().getUser().getPkUserId() : SDataConstantsSys.USRX_USER_NA);
        return oEntry;
    }

    private void itemStateChangedCompanyBranch() {
        if (moFieldFkCompanyBranchId.getKeyAsIntArray()[0] > 0) {
            populateComboBoxAccountCash();
            if (moParamAccountCash == null) {
                jcbFkAccountCashId.setEnabled(true);
                jbFkAccountCashId.setEnabled(true);
            }
            else {
                jcbFkAccountCashId.setEnabled(false);
                jbFkAccountCashId.setEnabled(false);
            }
        }
        else {
            jcbFkAccountCashId.setEnabled(false);
            jbFkAccountCashId.setEnabled(false);
        }
    }

    private void itemStateChangedAccountCash() {
        renderCurrencySettings();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbExchangeRate;
    private javax.swing.JButton jbExchangeRateAccountCash;
    private javax.swing.JButton jbExchangeRateAccountCashView;
    private javax.swing.JButton jbExchangeRateSystem;
    private javax.swing.JButton jbFkAccountCashId;
    private javax.swing.JButton jbFkCompanyBranchId;
    private javax.swing.JButton jbOk;
    private javax.swing.JButton jbValue;
    private javax.swing.JButton jbValueCy;
    private javax.swing.JComboBox jcbFkAccountCashId;
    private javax.swing.JComboBox jcbFkCompanyBranchId;
    private javax.swing.JLabel jlConcept;
    private javax.swing.JLabel jlCurrency;
    private javax.swing.JLabel jlExchangeRate;
    private javax.swing.JLabel jlExchangeRateSystem;
    private javax.swing.JLabel jlFkAccountCashId;
    private javax.swing.JLabel jlFkCompanyBranchId;
    private javax.swing.JLabel jlValue;
    private javax.swing.JLabel jlValueCy;
    private javax.swing.JTextField jtfConcept;
    private javax.swing.JTextField jtfCurrency;
    private javax.swing.JTextField jtfExchangeRate;
    private javax.swing.JTextField jtfExchangeRateSystem;
    private javax.swing.JTextField jtfValue;
    private javax.swing.JTextField jtfValueCy;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moRecordEntry = null;
        moAccountCash = null;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        jcbFkAccountCashId.removeAllItems();
        jcbFkAccountCashId.setEnabled(false);
        jtfValue.setEditable(false);
        jtfValue.setFocusable(false);
        jbValueCy.setEnabled(false);
        jbValue.setEnabled(false);
        jtfExchangeRate.setEditable(false);
        jtfExchangeRate.setFocusable(false);
        jbExchangeRateSystem.setEnabled(false);
        jbExchangeRate.setEnabled(false);
        jbExchangeRateAccountCashView.setEnabled(false);
        jbExchangeRateAccountCash.setEnabled(false);
        jtfCurrency.setText("");
        mbResetingForm = false;
    }

    @Override
    public void formRefreshCatalogues() {
        mbResetingForm = true;
        SFormUtilities.populateComboBox(miClient, jcbFkCompanyBranchId, SDataConstants.BPSU_BPB, new int[] { miClient.getSessionXXX().getCompany().getPkCompanyId() });
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        String message = "";
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        if (!validation.getIsError()) {
            message = SDataUtilities.validateExchangeRate(miClient, moFieldValueCy.getDouble(), moFieldExchangeRate.getDouble(), moFieldValue.getDouble(), jlValueCy.getText());
            if (message.length() > 0) {
                if (miClient.showMsgBoxConfirm(message + "\n" + SLibConstants.MSG_CNF_MSG_CONT) != JOptionPane.YES_OPTION) {
                    validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_VALUE_DIF + "'" + jlValueCy.getText() + "'.");
                    validation.setComponent(jtfValueCy);
                }
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        moRecordEntry = (SDataRecordEntry) registry;

        moFieldConcept.setFieldValue(moRecordEntry.getConcept());
        moFieldValueCy.setFieldValue(mbParamIsMoneyIn ? moRecordEntry.getDebitCy() : moRecordEntry.getCreditCy());
        moFieldValue.setFieldValue(mbParamIsMoneyIn ? moRecordEntry.getDebit() : moRecordEntry.getCredit());
        moFieldExchangeRateSystem.setFieldValue(moRecordEntry.getExchangeRateSystem());
        moFieldExchangeRate.setFieldValue(moRecordEntry.getExchangeRate());

        mnFkUser = moRecordEntry.getFkUserNewId();
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        moRecordEntry = prepareRecordEntry();

        return moRecordEntry;
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        if (type == SDataConstants.FIN_REC) {
            moParamRecord = (SDataRecord) value;
        }
        else if (type == SDataConstants.FIN_ACC_CASH) {
            moParamAccountCash = (SDataAccountCash) value;
            if (moParamAccountCash != null) {
                moFieldFkCompanyBranchId.setKey(new int[] { moParamAccountCash.getPkCompanyBranchId() });
                renderCurrencySettings();
            }
        }
        else if (type == SDataConstantsSys.FINS_CT_SYS_MOV_CASH) {
            mbParamIsMoneyIn = (Boolean) value;
        }
    }

    @Override
    public java.lang.Object getValue(int type) {
        Object o = null;
        if (type == SDataConstantsSys.VALUE_RECORD_ENTRY) {
            moRecordEntry = prepareRecordEntry();
            o = moRecordEntry;
        }
        return o;
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbFkCompanyBranchId) {
                actionFkCompanyBranchId();
            }
            else if (button == jbFkAccountCashId) {
                actionFkAccountCashDestinyId();
            }
            else if (button == jbValueCy) {
                actionValueCy();
            }
            else if (button == jbValue) {
                actionValue();
            }
            else if (button == jbExchangeRateSystem) {
                actionExchangeRateSystem();
            }
            else if (button == jbExchangeRate) {
                actionExchangeRate();
            }
            else if (button == jbExchangeRateAccountCash) {
                actionExchangeRateAccountCash();
            }
            else if (button == jbExchangeRateAccountCashView) {
                actionExchangeRateAccountCashView();
            }
        }
    }

    @Override
    public void focusGained(java.awt.event.FocusEvent e) {

    }

    @Override
    public void focusLost(java.awt.event.FocusEvent e) {
        if (e.getSource() instanceof javax.swing.JTextField) {
            JTextField textField = (JTextField) e.getSource();

            if (textField == jtfValueCy) {
                focusLostValueCy();
            }
            else if (textField == jtfValue) {
                focusLostValue();
            }
            else if (textField == jtfExchangeRate) {
                focusLostExchangeRate();
            }
        }
    }
}
