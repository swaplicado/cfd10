/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SFormMoneyOutCheck.java
 *
 * Created on 21/10/2010, 03:30:20 PM
 */

package erp.mfin.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataReadDescriptions;
import erp.data.SDataUtilities;
import erp.data.SProcConstants;
import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.mbps.data.SDataBizPartnerBranch;
import erp.mcfg.data.SDataCurrency;
import erp.mfin.data.SDataCheck;
import erp.mfin.data.SDataCheckWallet;
import erp.mfin.data.SDataRecord;
import erp.mfin.data.SDataRecordEntry;
import erp.mod.SModSysConsts;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author Alfonso Flores
 */
public class SFormMoneyOutCheck extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener, java.awt.event.FocusListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mfin.data.SDataCheck moCheck;
    private erp.lib.form.SFormField moFieldConcept;
    private erp.lib.form.SFormField moFieldPkCheckWalletId;
    private erp.lib.form.SFormField moFieldNumber;
    private erp.lib.form.SFormField moFieldDate;
    private erp.lib.form.SFormField moFieldBeneficiary;
    private erp.lib.form.SFormField moFieldFkBizPartnerBranchId;
    private erp.lib.form.SFormField moFieldFkBizPartnerBankAccountId;
    private erp.lib.form.SFormField moFieldBeneficiaryUser;
    private erp.lib.form.SFormField moFieldValueCy;
    private erp.lib.form.SFormField moFieldExchangeRateSystem;
    private erp.lib.form.SFormField moFieldValue;
    private erp.lib.form.SFormField moFieldExchangeRate;
    private erp.lib.form.SFormField moFieldIsForBeneficiaryAccount;

    private Vector<erp.mfin.data.SDataCheck> mvParamCheckVector;

    private erp.mfin.data.SDataRecord moParamRecord;
    private erp.mfin.data.SDataRecordEntry moRecordEntry;
    private erp.mcfg.data.SDataCurrency moCurrency;

    private int mnFkUser;

    /** Creates new form SFormMoneyOutCheck */
    public SFormMoneyOutCheck(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlAccountCash = new javax.swing.JLabel();
        jtfCompanyBranch = new javax.swing.JTextField();
        jtfAccountCash = new javax.swing.JTextField();
        jtfCode = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jlPkCheckWalletId = new javax.swing.JLabel();
        jcbPkCheckWalletId = new javax.swing.JComboBox();
        jPanel7 = new javax.swing.JPanel();
        jlDate = new javax.swing.JLabel();
        jftDate = new javax.swing.JFormattedTextField();
        jbDate = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jlNumber = new javax.swing.JLabel();
        jtfNumber = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        jrbIsBeneficiarySelected = new javax.swing.JRadioButton();
        jrbIsBeneficiaryByUser = new javax.swing.JRadioButton();
        jPanel10 = new javax.swing.JPanel();
        jlBeneficiary = new javax.swing.JLabel();
        jcbBeneficiary = new javax.swing.JComboBox();
        jbBeneficiary = new javax.swing.JButton();
        jPanel16 = new javax.swing.JPanel();
        jlFkBizPartnerBranchId = new javax.swing.JLabel();
        jcbFkBizPartnerBranchId = new javax.swing.JComboBox();
        jPanel15 = new javax.swing.JPanel();
        jlFkBizPartnerBankAccountId = new javax.swing.JLabel();
        jcbFkBizPartnerBankAccountId = new javax.swing.JComboBox();
        jPanel11 = new javax.swing.JPanel();
        jlBeneficiaryUser = new javax.swing.JLabel();
        jtfBeneficiaryUser = new javax.swing.JTextField();
        jPanel12 = new javax.swing.JPanel();
        jlCurrency = new javax.swing.JLabel();
        jtfCurrency = new javax.swing.JTextField();
        jPanel13 = new javax.swing.JPanel();
        jlValueCy = new javax.swing.JLabel();
        jtfValueCy = new javax.swing.JTextField();
        jbValueCy = new javax.swing.JButton();
        jlExchangeRateSystem = new javax.swing.JLabel();
        jtfExchangeRateSystem = new javax.swing.JTextField();
        jbExchangeRateSystem = new javax.swing.JButton();
        jbExchangeRateAccountCashView = new javax.swing.JButton();
        jPanel14 = new javax.swing.JPanel();
        jlValue = new javax.swing.JLabel();
        jtfValue = new javax.swing.JTextField();
        jbValue = new javax.swing.JButton();
        jlExchangeRate = new javax.swing.JLabel();
        jtfExchangeRate = new javax.swing.JTextField();
        jbExchangeRate = new javax.swing.JButton();
        jbExchangeRateAccountCash = new javax.swing.JButton();
        jckIsForBeneficiayAccount = new javax.swing.JCheckBox();
        jPanel5 = new javax.swing.JPanel();
        jlConcept = new javax.swing.JLabel();
        jtfConcept = new javax.swing.JTextField();
        jbConcept = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Egreso de efectivo con cheque");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setPreferredSize(new java.awt.Dimension(492, 33));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jPanel1.add(jbCancel);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.GridLayout(14, 1, 0, 1));

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlAccountCash.setText("Cuenta de efectivo: ");
        jlAccountCash.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel4.add(jlAccountCash);

        jtfCompanyBranch.setEditable(false);
        jtfCompanyBranch.setText("COMPANY BRANCH");
        jtfCompanyBranch.setFocusable(false);
        jtfCompanyBranch.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel4.add(jtfCompanyBranch);

        jtfAccountCash.setEditable(false);
        jtfAccountCash.setText("ACCOUNT CASH");
        jtfAccountCash.setFocusable(false);
        jtfAccountCash.setPreferredSize(new java.awt.Dimension(170, 23));
        jPanel4.add(jtfAccountCash);

        jtfCode.setEditable(false);
        jtfCode.setText("CODE");
        jtfCode.setFocusable(false);
        jtfCode.setPreferredSize(new java.awt.Dimension(73, 23));
        jPanel4.add(jtfCode);

        jPanel3.add(jPanel4);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlPkCheckWalletId.setForeground(java.awt.Color.blue);
        jlPkCheckWalletId.setText("Chequera: *");
        jlPkCheckWalletId.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel6.add(jlPkCheckWalletId);

        jcbPkCheckWalletId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbPkCheckWalletId.setPreferredSize(new java.awt.Dimension(397, 23));
        jcbPkCheckWalletId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbPkCheckWalletIdItemStateChanged(evt);
            }
        });
        jPanel6.add(jcbPkCheckWalletId);

        jPanel3.add(jPanel6);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlDate.setText("Fecha: *");
        jlDate.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel7.add(jlDate);

        jftDate.setText("dd/mm/yyyy");
        jftDate.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel7.add(jftDate);

        jbDate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_date_day.gif"))); // NOI18N
        jbDate.setToolTipText("Seleccionar fecha");
        jbDate.setFocusable(false);
        jbDate.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel7.add(jbDate);

        jPanel3.add(jPanel7);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlNumber.setText("NÃºmero: *");
        jlNumber.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel8.add(jlNumber);

        jtfNumber.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfNumber.setText("NUMBER");
        jtfNumber.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel8.add(jtfNumber);

        jPanel3.add(jPanel8);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        buttonGroup1.add(jrbIsBeneficiarySelected);
        jrbIsBeneficiarySelected.setText("Seleccionar beneficiario");
        jrbIsBeneficiarySelected.setPreferredSize(new java.awt.Dimension(300, 23));
        jrbIsBeneficiarySelected.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jrbIsBeneficiarySelectedItemStateChanged(evt);
            }
        });
        jPanel9.add(jrbIsBeneficiarySelected);

        buttonGroup1.add(jrbIsBeneficiaryByUser);
        jrbIsBeneficiaryByUser.setText("Ingresar beneficiario");
        jrbIsBeneficiaryByUser.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jrbIsBeneficiaryByUserItemStateChanged(evt);
            }
        });
        jPanel9.add(jrbIsBeneficiaryByUser);

        jPanel3.add(jPanel9);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlBeneficiary.setText("Beneficario: *");
        jlBeneficiary.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel10.add(jlBeneficiary);

        jcbBeneficiary.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbBeneficiary.setPreferredSize(new java.awt.Dimension(372, 23));
        jcbBeneficiary.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbBeneficiaryItemStateChanged(evt);
            }
        });
        jcbBeneficiary.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jcbBeneficiaryFocusLost(evt);
            }
        });
        jPanel10.add(jcbBeneficiary);

        jbBeneficiary.setText("jButton1");
        jbBeneficiary.setToolTipText("Seleccionar beneficiario");
        jbBeneficiary.setFocusable(false);
        jbBeneficiary.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel10.add(jbBeneficiary);

        jPanel3.add(jPanel10);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlFkBizPartnerBranchId.setText("Sucursal beneficario:");
        jlFkBizPartnerBranchId.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel16.add(jlFkBizPartnerBranchId);

        jcbFkBizPartnerBranchId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbFkBizPartnerBranchId.setPreferredSize(new java.awt.Dimension(397, 23));
        jcbFkBizPartnerBranchId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbFkBizPartnerBranchIdItemStateChanged(evt);
            }
        });
        jPanel16.add(jcbFkBizPartnerBranchId);

        jPanel3.add(jPanel16);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlFkBizPartnerBankAccountId.setText("Cuenta bancaria beneficiario:");
        jlFkBizPartnerBankAccountId.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel15.add(jlFkBizPartnerBankAccountId);

        jcbFkBizPartnerBankAccountId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbFkBizPartnerBankAccountId.setPreferredSize(new java.awt.Dimension(397, 23));
        jPanel15.add(jcbFkBizPartnerBankAccountId);

        jPanel3.add(jPanel15);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlBeneficiaryUser.setText("Beneficiario (manual): *");
        jlBeneficiaryUser.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel11.add(jlBeneficiaryUser);

        jtfBeneficiaryUser.setText("BENEFICARY");
        jtfBeneficiaryUser.setPreferredSize(new java.awt.Dimension(397, 23));
        jPanel11.add(jtfBeneficiaryUser);

        jPanel3.add(jPanel11);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlCurrency.setText("Moneda:");
        jlCurrency.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel12.add(jlCurrency);

        jtfCurrency.setEditable(false);
        jtfCurrency.setText("CURRENCY");
        jtfCurrency.setFocusable(false);
        jtfCurrency.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel12.add(jtfCurrency);

        jPanel3.add(jPanel12);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlValueCy.setText("Monto: *");
        jlValueCy.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel13.add(jlValueCy);

        jtfValueCy.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfValueCy.setText("1,000,000,000.00");
        jtfValueCy.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jtfValueCy);

        jbValueCy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_action.gif"))); // NOI18N
        jbValueCy.setToolTipText("Calcular monto");
        jbValueCy.setFocusable(false);
        jbValueCy.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel13.add(jbValueCy);

        jlExchangeRateSystem.setText("Tipo de cambio sistema:");
        jlExchangeRateSystem.setPreferredSize(new java.awt.Dimension(118, 23));
        jPanel13.add(jlExchangeRateSystem);

        jtfExchangeRateSystem.setEditable(false);
        jtfExchangeRateSystem.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfExchangeRateSystem.setText("1,000,000,000.00");
        jtfExchangeRateSystem.setFocusable(false);
        jtfExchangeRateSystem.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jtfExchangeRateSystem);

        jbExchangeRateSystem.setText("jButton5");
        jbExchangeRateSystem.setToolTipText("Seleccionar tipo de cambio sistema");
        jbExchangeRateSystem.setFocusable(false);
        jbExchangeRateSystem.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel13.add(jbExchangeRateSystem);

        jbExchangeRateAccountCashView.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_look.gif"))); // NOI18N
        jbExchangeRateAccountCashView.setToolTipText("Ver tipo de cambio acumulado");
        jbExchangeRateAccountCashView.setFocusable(false);
        jbExchangeRateAccountCashView.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel13.add(jbExchangeRateAccountCashView);

        jPanel3.add(jPanel13);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlValue.setText("Monto moneda local (ML): *");
        jlValue.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel14.add(jlValue);

        jtfValue.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfValue.setText("1,000,000,000.00");
        jtfValue.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jtfValue);

        jbValue.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_action.gif"))); // NOI18N
        jbValue.setToolTipText("Calcular monto moneda local");
        jbValue.setFocusable(false);
        jbValue.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel14.add(jbValue);

        jlExchangeRate.setText("Tipo de cambio: *");
        jlExchangeRate.setPreferredSize(new java.awt.Dimension(118, 23));
        jPanel14.add(jlExchangeRate);

        jtfExchangeRate.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfExchangeRate.setText("1,000,000,000.00");
        jtfExchangeRate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jtfExchangeRate);

        jbExchangeRate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_action.gif"))); // NOI18N
        jbExchangeRate.setToolTipText("Calcular tipo de cambio");
        jbExchangeRate.setFocusable(false);
        jbExchangeRate.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel14.add(jbExchangeRate);

        jbExchangeRateAccountCash.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_money.gif"))); // NOI18N
        jbExchangeRateAccountCash.setToolTipText("Asignar tipo de cambio acumulado");
        jbExchangeRateAccountCash.setFocusable(false);
        jbExchangeRateAccountCash.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel14.add(jbExchangeRateAccountCash);

        jPanel3.add(jPanel14);

        jckIsForBeneficiayAccount.setText("Para abono en cuenta del beneficiario");
        jPanel3.add(jckIsForBeneficiayAccount);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlConcept.setText("Concepto de la partida: *");
        jlConcept.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel5.add(jlConcept);

        jtfConcept.setText("CONCEPT");
        jtfConcept.setPreferredSize(new java.awt.Dimension(372, 23));
        jPanel5.add(jtfConcept);

        jbConcept.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_action.gif"))); // NOI18N
        jbConcept.setToolTipText("Crear concepto");
        jbConcept.setFocusable(false);
        jbConcept.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel5.add(jbConcept);

        jPanel3.add(jPanel5);

        jPanel2.add(jPanel3, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-600)/2, (screenSize.height-450)/2, 600, 450);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void jcbPkCheckWalletIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbPkCheckWalletIdItemStateChanged
        if (!mbResetingForm) {
            if (evt.getStateChange() == ItemEvent.SELECTED) {
                itemStateChangedPkCheckWalletId();
            }
        }
    }//GEN-LAST:event_jcbPkCheckWalletIdItemStateChanged

    private void jrbIsBeneficiarySelectedItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jrbIsBeneficiarySelectedItemStateChanged
        if (!mbResetingForm) {
            itemStateChangedIsBeneficiarySelected();
        }
    }//GEN-LAST:event_jrbIsBeneficiarySelectedItemStateChanged

    private void jrbIsBeneficiaryByUserItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jrbIsBeneficiaryByUserItemStateChanged
        if (!mbResetingForm) {
            itemStateChangedIsBeneficiaryByUser();
        }
    }//GEN-LAST:event_jrbIsBeneficiaryByUserItemStateChanged

    private void jcbBeneficiaryFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jcbBeneficiaryFocusLost
        focusLostBeneficiary();
    }//GEN-LAST:event_jcbBeneficiaryFocusLost

    private void jcbBeneficiaryItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbBeneficiaryItemStateChanged
        if (!mbResetingForm) {
            if (evt.getStateChange() == ItemEvent.SELECTED) {
                itemStateChangedBeneficiary();
            }
        }
    }//GEN-LAST:event_jcbBeneficiaryItemStateChanged

    private void jcbFkBizPartnerBranchIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbFkBizPartnerBranchIdItemStateChanged
        if (!mbResetingForm) {
            if (evt.getStateChange() == ItemEvent.SELECTED) {
                itemStateChangedBizPartnerBranch();
            }
        }
    }//GEN-LAST:event_jcbFkBizPartnerBranchIdItemStateChanged

    private void initComponentsExtra() {
        mvFields = new Vector<SFormField>();

        moFieldConcept = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtfConcept, jlConcept);
        moFieldConcept.setLengthMax(100);
        moFieldPkCheckWalletId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbPkCheckWalletId, jlPkCheckWalletId);
        moFieldNumber = new SFormField(miClient, SLibConstants.DATA_TYPE_INTEGER, true, jtfNumber, jlNumber);
        moFieldDate = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jftDate, jlDate);
        moFieldDate.setPickerButton(jbDate);
        moFieldBeneficiary = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, false, jcbBeneficiary, jlBeneficiary);
        moFieldBeneficiary.setPickerButton(jbBeneficiary);
        moFieldFkBizPartnerBranchId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, false, jcbFkBizPartnerBranchId, jlFkBizPartnerBranchId);
        moFieldFkBizPartnerBankAccountId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, false, jcbFkBizPartnerBankAccountId, jlFkBizPartnerBankAccountId);
        moFieldBeneficiaryUser = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, false, jtfBeneficiaryUser, jlBeneficiaryUser);
        moFieldBeneficiaryUser.setLengthMax(202);
        moFieldValueCy = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfValueCy, jlValueCy);
        moFieldValueCy.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsValueFormat());
        moFieldExchangeRateSystem = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfExchangeRateSystem, jlExchangeRateSystem);
        moFieldExchangeRateSystem.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsExchangeRateFormat());
        moFieldValue = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfValue, jlValue);
        moFieldValue.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsValueFormat());
        moFieldExchangeRate = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfExchangeRate, jlExchangeRate);
        moFieldExchangeRate.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsExchangeRateFormat());
        moFieldIsForBeneficiaryAccount = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsForBeneficiayAccount);

        mvFields.add(moFieldConcept);
        mvFields.add(moFieldPkCheckWalletId);
        mvFields.add(moFieldNumber);
        mvFields.add(moFieldDate);
        mvFields.add(moFieldBeneficiary);
        mvFields.add(moFieldFkBizPartnerBranchId);
        mvFields.add(moFieldFkBizPartnerBankAccountId);
        mvFields.add(moFieldBeneficiaryUser);
        mvFields.add(moFieldValueCy);
        mvFields.add(moFieldValue);
        mvFields.add(moFieldExchangeRateSystem);
        mvFields.add(moFieldExchangeRate);
        mvFields.add(moFieldIsForBeneficiaryAccount);

        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);
        jbDate.addActionListener(this);
        jbExchangeRate.addActionListener(this);
        jbExchangeRateSystem.addActionListener(this);
        jbValueCy.addActionListener(this);
        jbValue.addActionListener(this);
        jbExchangeRateAccountCash.addActionListener(this);
        jbExchangeRateAccountCashView.addActionListener(this);
        jbBeneficiary.addActionListener(this);
        jbConcept.addActionListener(this);

        jtfValueCy.addFocusListener(this);
        jtfValue.addFocusListener(this);
        jtfExchangeRate.addFocusListener(this);
        jtfNumber.addFocusListener(this);
        jtfBeneficiaryUser.addFocusListener(this);

        moParamRecord = null;
        mvParamCheckVector = new Vector<SDataCheck>();
        mvParamCheckVector.clear();

        mnFkUser = 0;

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction action = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), action, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            if (moCheck != null) {
                jftDate.requestFocus();
            }
            else {
                jcbPkCheckWalletId.requestFocus();
            }
        }

        renderCurrencySettings();
    }

    private void actionOk() {
        SFormValidation validation = formValidate();
        jbOk.requestFocus();    // this forces all pending focus lost function to be called

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    private void actionSetDate() {
        miClient.getGuiDatePickerXXX().formReset();
        miClient.getGuiDatePickerXXX().setDate(moFieldDate.getDate());
        miClient.getGuiDatePickerXXX().setVisible(true);

        if (miClient.getGuiDatePickerXXX().getFormResult() == SLibConstants.FORM_RESULT_OK) {
            moFieldDate.setFieldValue(miClient.getGuiDatePickerXXX().getGuiDate());
            jftDate.requestFocus();
        }
    }

    private double obtainExchangeRateAccountCash() {
        double rate = 0;
        double[] balance = null;

        try {
            balance = obtainCurrentAccountCashBalance();
            rate = balance[0] == 0d ? 0d : balance[0] / balance[1];
        }
        catch (Exception e) {
            SLibUtilities.printOutException(this, e);
        }

        return rate;
    }

    private double[] obtainCurrentAccountCashBalance() {
        double[] balance = new double[2];

        try {
            balance = SDataUtilities.obtainAccountCashBalanceUpdated(miClient,
                moParamRecord.getDbmsDataAccountCash().getFkCurrencyId(), moFieldDate.getDate(),
                moParamRecord.getDbmsDataAccountCash().getPrimaryKey(),
                moParamRecord.getDbmsDataAccountCash().getFkAccountCashCategoryId() == SDataConstantsSys.FINS_CT_ACC_CASH_CASH ?
                    SDataConstantsSys.FINS_TP_SYS_MOV_CASH_CASH : SDataConstantsSys.FINS_TP_SYS_MOV_CASH_BANK,
                moParamRecord, moRecordEntry);
        }
        catch (Exception e) {
            SLibUtilities.printOutException(this, e);
        }

        return balance;
    }

    private void renderCurrencySettings() {
        SDataBizPartnerBranch oBranch = null;

        oBranch = (SDataBizPartnerBranch) SDataUtilities.readRegistry(miClient,
                SDataConstants.BPSU_BPB, new int[] { moParamRecord.getDbmsDataAccountCash().getPkCompanyBranchId() }, SLibConstants.EXEC_MODE_SILENT);
        moCurrency = (SDataCurrency) SDataUtilities.readRegistry(miClient,
                SDataConstants.CFGU_CUR, new int[] { moParamRecord.getDbmsDataAccountCash().getFkCurrencyId() }, SLibConstants.EXEC_MODE_SILENT);

        jtfCompanyBranch.setText(oBranch.getBizPartnerBranch());
        jtfAccountCash.setText(moParamRecord.getDbmsDataAccountCash().getDbmsCompanyBranchEntity().getEntity());
        jtfCode.setText(moParamRecord.getDbmsDataAccountCash().getDbmsCompanyBranchEntity().getCode());
        jtfCurrency.setText(moCurrency.getCurrency());

        if (moParamRecord.getDbmsDataAccountCash().getFkCurrencyId() != miClient.getSessionXXX().getParamsErp().getFkCurrencyId()) {
           jtfValue.setEnabled(true);
           jbValue.setEnabled(true);
           jtfExchangeRate.setEnabled(true);
           jbExchangeRate.setEnabled(true);
           jbExchangeRateSystem.setEnabled(true);
           jbExchangeRateAccountCashView.setEnabled(true);
           jbExchangeRateAccountCash.setEnabled(true);

           if (moCheck == null) {
               moFieldExchangeRate.setFieldValue(obtainExchangeRateAccountCash());
           }
        }
        else {
            jtfValue.setEnabled(false);
           jbValue.setEnabled(false);
           jtfExchangeRate.setEnabled(false);
           jbExchangeRateSystem.setEnabled(false);
           jbExchangeRate.setEnabled(false);
           jbExchangeRateAccountCashView.setEnabled(false);
           jbExchangeRateAccountCash.setEnabled(false);

           moFieldExchangeRateSystem.setFieldValue(1);
           moFieldExchangeRate.setFieldValue(1);
        }
    }

    private void renderBeneficiarySettings(boolean b) {
        jcbBeneficiary.setEnabled(b);
        jtfBeneficiaryUser.setEnabled(!b);
        jbBeneficiary.setEnabled(b);

        renderBankAccountSettings(b);
    }

    private void renderBankAccountSettings(boolean b) {
        if (b) {
            if (moFieldBeneficiary.getKeyAsIntArray()[0] > 0) {
                jcbFkBizPartnerBranchId.setEnabled(true);
            }
            if (moFieldFkBizPartnerBranchId.getKeyAsIntArray() != null) {
                if (moFieldFkBizPartnerBranchId.getKeyAsIntArray()[0] > 0) {
                    jcbFkBizPartnerBankAccountId.setEnabled(true);
                }
            }
        }
        else {
            jcbFkBizPartnerBranchId.setEnabled(false);
            jcbFkBizPartnerBankAccountId.setEnabled(false);
        }
    }

    private void itemStateChangedPkCheckWalletId() {
        int number = 0;

        if (moFieldNumber.getInteger() == 0 || moCheck == null) {
            Vector<Object> params = new Vector<Object>();

            params.add(moFieldPkCheckWalletId.getKeyAsIntArray()[0]);
            params = SDataUtilities.callProcedure(miClient, SProcConstants.FIN_GET_CHECK_NEXT_NUM, params, SLibConstants.EXEC_MODE_SILENT);

            number = (Integer) params.get(0);

            for (int i = 0; i < mvParamCheckVector.size(); i++) {
                if (number <= mvParamCheckVector.get(i).getNumber()) {
                    number += 1;
                }
            }

            moFieldNumber.setFieldValue(number);
        }
    }

    private void itemStateChangedIsBeneficiarySelected() {
        renderBeneficiarySettings(true);
    }

    private void itemStateChangedIsBeneficiaryByUser() {
        renderBeneficiarySettings(false);
    }

    private void itemStateChangedBeneficiary() {
        if (moFieldBeneficiary.getKeyAsIntArray()[0] > 0) {
            populateComboBoxBizPartnerBranch();
            jcbFkBizPartnerBranchId.setEnabled(true);
        }
        else {
            jcbFkBizPartnerBankAccountId.removeAllItems();
            jcbFkBizPartnerBranchId.setEnabled(false);
        }
    }

    private void itemStateChangedBizPartnerBranch() {
        if (moFieldFkBizPartnerBranchId.getKeyAsIntArray()[0] > 0) {
            jcbFkBizPartnerBankAccountId.setEnabled(true);
            populateComboBoxBizPartnerBankAccount();
        }
        else {
            jcbFkBizPartnerBankAccountId.setEnabled(false);
            jcbFkBizPartnerBankAccountId.removeAllItems();
        }
    }

    private void actionExchangeRateSystem() {
        double rate = miClient.pickExchangeRate(moParamRecord.getDbmsDataAccountCash().getFkCurrencyId(), miClient.getSessionXXX().getWorkingDate());

        if (rate != 0d) {
            moFieldExchangeRateSystem.setFieldValue(rate);
            if (moFieldExchangeRate.getDouble() == 0) {
                moFieldExchangeRate.setFieldValue(rate);
            }
            jtfExchangeRate.requestFocus();
        }
    }

    private void actionValueCy() {
        if (moFieldExchangeRate.getDouble() == 0) {
            jtfExchangeRate.requestFocus();
        }
        else {
            moFieldValueCy.setFieldValue(SLibUtilities.round(moFieldValue.getDouble() / moFieldExchangeRate.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
            jtfValueCy.requestFocus();
        }
    }

    private void actionValue() {
        if (moFieldExchangeRate.getDouble() == 0) {
            jtfExchangeRate.requestFocus();
        }
        else {
            moFieldValue.setFieldValue(SLibUtilities.round(moFieldValueCy.getDouble() * moFieldExchangeRate.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
            jtfValue.requestFocus();
        }
    }

    private void actionExchangeRate() {
        if (moFieldValueCy.getDouble() != 0) {

            if (moFieldValue.getDouble() == 0) {
                jtfValueCy.requestFocus();
            }
            else {
                moFieldExchangeRate.setFieldValue(moFieldValue.getDouble() / moFieldValueCy.getDouble());
                jtfExchangeRate.requestFocus();
            }
        }
        else if (moFieldValue.getDouble() != 0) {
            jtfValue.requestFocus();
        }
        else {
            jtfExchangeRate.requestFocus();
        }
    }

    private void actionExchangeRateAccountCash() {
        moFieldExchangeRate.setFieldValue(obtainExchangeRateAccountCash());
        jtfExchangeRate.requestFocus();
    }

    private void actionExchangeRateAccountCashView() {
        double[] balance = null;

        try {
            balance = obtainCurrentAccountCashBalance();

            miClient.showMsgBoxInformation(
                    "Tipo de cambio acumulado al dÃ­a: " + miClient.getSessionXXX().getFormatters().getDateFormat().format(moFieldDate.getDate()) + "\n" +
                    "Saldo " + miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getKey() + ": $ " +
                    miClient.getSessionXXX().getFormatters().getDecimalsValueFormat().format(balance[0]) + ".\n" +
                    "Saldo " + moCurrency.getKey() + ": $ " +
                    miClient.getSessionXXX().getFormatters().getDecimalsValueFormat().format(balance[1]) + ".\n" +
                    "Tipo de cambio acumulado: " + miClient.getSessionXXX().getFormatters().getDecimalsExchangeRateFormat().format(balance[1] == 0d ? 0d : balance[0] / balance[1]) + ".");
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }
    }

    private void focusLostValueCy() {
        if (moFieldValueCy.getDouble() != 0) {

            if (!jtfValue.isEnabled() || moFieldValue.getDouble() == 0) {
                moFieldValue.setFieldValue(SLibUtilities.round(moFieldValueCy.getDouble() * moFieldExchangeRate.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
            }
            else if (moFieldExchangeRate.getDouble() == 0) {
                moFieldExchangeRate.setFieldValue(SLibUtilities.round(moFieldValue.getDouble() / moFieldValueCy.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsExchangeRate()));
            }
        }
    }

    private void focusLostValue() {
        if (moFieldValue.getDouble() != 0) {

            if (moFieldValueCy.getDouble() == 0 && moFieldExchangeRate.getDouble() != 0) {
                moFieldValueCy.setFieldValue(SLibUtilities.round(moFieldValue.getDouble() / moFieldExchangeRate.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
            }
            else if (moFieldValueCy.getDouble() != 0 && moFieldExchangeRate.getDouble() == 0) {
                moFieldExchangeRate.setFieldValue(SLibUtilities.round(moFieldValue.getDouble() / moFieldValueCy.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsExchangeRate()));
            }
        }
    }

    private void focusLostExchangeRate() {
        if (moFieldValueCy.getDouble() != 0 && moFieldValue.getDouble() == 0) {
            moFieldValue.setFieldValue(SLibUtilities.round(moFieldValueCy.getDouble() * moFieldExchangeRate.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
        }
    }

    private void focusLostNumber() {
        if (jtfConcept.getText().length() == 0) {
            createConcept();
        }
    }

    private void focusLostBeneficiary() {
        if (jtfConcept.getText().length() == 0) {
            createConcept();
        }
    }

    private void focusLostBeneficiaryUser() {
        if (jtfConcept.getText().length() == 0) {
            createConcept();
        }
    }

    private void actionBeneficiary() {
        miClient.pickOption(SDataConstants.BPSU_BP, moFieldBeneficiary, null);
    }

    private void populateComboBoxCheckWallet() {
        SFormUtilities.populateComboBox(miClient, jcbPkCheckWalletId, SDataConstants.FIN_CHECK_WAL, new int[]
        { moParamRecord.getDbmsDataAccountCash().getPkCompanyBranchId(), moParamRecord.getDbmsDataAccountCash().getPkAccountCashId() });
    }

    private void populateComboBoxBizPartnerBranch() {
        SFormUtilities.populateComboBox(miClient, jcbFkBizPartnerBranchId, SDataConstants.BPSU_BPB, moFieldBeneficiary.getKeyAsIntArray());
    }

    private void populateComboBoxBizPartnerBankAccount() {
        SFormUtilities.populateComboBox(miClient, jcbFkBizPartnerBankAccountId, SDataConstants.BPSU_BANK_ACC, moFieldFkBizPartnerBranchId.getKeyAsIntArray());
    }

    private erp.mfin.data.SDataRecordEntry prepareRecordEntry() {
        SDataRecordEntry oEntry = new SDataRecordEntry();

        if (moRecordEntry != null) {
            oEntry.setPkEntryId(moRecordEntry.getPkEntryId());
        }
        oEntry.setConcept(moFieldConcept.getString());
        oEntry.setDebit(0);
        oEntry.setCredit(moFieldValue.getDouble());
        oEntry.setExchangeRate(moFieldExchangeRate.getDouble());
        oEntry.setExchangeRateSystem(moFieldExchangeRateSystem.getDouble());
        oEntry.setDebitCy(0);
        oEntry.setCreditCy(moFieldValueCy.getDouble());
        oEntry.setFkAccountIdXXX(moParamRecord.getDbmsDataAccountCash().getFkAccountId());
        oEntry.setFkAccountingMoveTypeId(SDataConstantsSys.FINS_CLS_ACC_MOV_JOURNAL[0]);
        oEntry.setFkAccountingMoveClassId(SDataConstantsSys.FINS_CLS_ACC_MOV_JOURNAL[1]);
        oEntry.setFkAccountingMoveSubclassId(SDataConstantsSys.FINS_CLS_ACC_MOV_JOURNAL[2]);
        oEntry.setFkSystemMoveClassId(SModSysConsts.FINS_TP_SYS_MOV_MO_SUP_PAY[0]);
        oEntry.setFkSystemMoveTypeId(SModSysConsts.FINS_TP_SYS_MOV_MO_SUP_PAY[1]);

        if (moParamRecord.getDbmsDataAccountCash().getFkAccountCashCategoryId() == SDataConstantsSys.FINS_CT_ACC_CASH_CASH) {
            oEntry.setFkSystemAccountClassId(SModSysConsts.FINS_TP_SYS_ACC_ENT_CSH_CSH[0]);
            oEntry.setFkSystemAccountTypeId(SModSysConsts.FINS_TP_SYS_ACC_ENT_CSH_CSH[1]);
            oEntry.setFkSystemMoveCategoryIdXXX(SDataConstantsSys.FINS_TP_SYS_MOV_CASH_CASH[0]);
            oEntry.setFkSystemMoveTypeIdXXX(SDataConstantsSys.FINS_TP_SYS_MOV_CASH_CASH[1]);
        }
        else {
            oEntry.setFkSystemAccountClassId(SModSysConsts.FINS_TP_SYS_ACC_ENT_CSH_BNK[0]);
            oEntry.setFkSystemAccountTypeId(SModSysConsts.FINS_TP_SYS_ACC_ENT_CSH_BNK[1]);
            oEntry.setFkSystemMoveCategoryIdXXX(SDataConstantsSys.FINS_TP_SYS_MOV_CASH_BANK[0]);
            oEntry.setFkSystemMoveTypeIdXXX(SDataConstantsSys.FINS_TP_SYS_MOV_CASH_BANK[1]);
        }

        oEntry.setFkCurrencyId(moParamRecord.getDbmsDataAccountCash().getFkCurrencyId());
        oEntry.setFkCompanyBranchId_n(moParamRecord.getDbmsDataAccountCash().getPkCompanyBranchId());
        oEntry.setFkEntityId_n(moParamRecord.getDbmsDataAccountCash().getPkAccountCashId());
        oEntry.setDbmsAccount(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FIN_ACC, new Object[] { oEntry.getFkAccountIdXXX() }));
        oEntry.setDbmsAccountComplement(moParamRecord.getDbmsDataAccountCash().getAuxEntity());
        oEntry.setDbmsAccountingMoveSubclass(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FINS_CLS_ACC_MOV, SDataConstantsSys.FINS_CLS_ACC_MOV_JOURNAL));
        oEntry.setDbmsCurrencyKey(moCurrency.getKey());
        oEntry.setAuxCheckNumber(moCheck.getNumber());
        oEntry.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
        oEntry.setFkUserEditId(mnFkUser > 0 ? miClient.getSession().getUser().getPkUserId() : SDataConstantsSys.USRX_USER_NA);
        return oEntry;
    }

    /*private void searchBeneficiary() { //XXX
        boolean bIsSelected = false;

        for (int i = 0; i < jcbBeneficiary.getItemCount(); i++) {
            if (moCheck.getBeneficiary().compareTo(jcbBeneficiary.getItemAt(i).toString()) == 0) {
                bIsSelected = true;
                moFieldBeneficiary.setKey(((SFormComponentItem) jcbBeneficiary.getItemAt(i)).getPrimaryKey());
                jrbIsBeneficiarySelected.setSelected(true);
                break;
            }
        }

        if (!bIsSelected) {
            moFieldBeneficiaryUser.setFieldValue(moCheck.getBeneficiary());
            jrbIsBeneficiaryByUser.setSelected(true);
        }
    }*/

    private void createConcept() {
        if (moFieldNumber.getString().length() > 0 &&
                (jrbIsBeneficiarySelected.isSelected() ? moFieldBeneficiary.getKeyAsIntArray()[0] > 0 : moFieldBeneficiaryUser.getString().length() > 0)) {
            jtfConcept.setText("CH " + moFieldNumber.getString().replace(",", "")  + "; " + (jrbIsBeneficiarySelected.isSelected() ? moFieldBeneficiary.getString() : moFieldBeneficiaryUser.getString()));
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbBeneficiary;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbConcept;
    private javax.swing.JButton jbDate;
    private javax.swing.JButton jbExchangeRate;
    private javax.swing.JButton jbExchangeRateAccountCash;
    private javax.swing.JButton jbExchangeRateAccountCashView;
    private javax.swing.JButton jbExchangeRateSystem;
    private javax.swing.JButton jbOk;
    private javax.swing.JButton jbValue;
    private javax.swing.JButton jbValueCy;
    private javax.swing.JComboBox jcbBeneficiary;
    private javax.swing.JComboBox jcbFkBizPartnerBankAccountId;
    private javax.swing.JComboBox jcbFkBizPartnerBranchId;
    private javax.swing.JComboBox jcbPkCheckWalletId;
    private javax.swing.JCheckBox jckIsForBeneficiayAccount;
    private javax.swing.JFormattedTextField jftDate;
    private javax.swing.JLabel jlAccountCash;
    private javax.swing.JLabel jlBeneficiary;
    private javax.swing.JLabel jlBeneficiaryUser;
    private javax.swing.JLabel jlConcept;
    private javax.swing.JLabel jlCurrency;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlExchangeRate;
    private javax.swing.JLabel jlExchangeRateSystem;
    private javax.swing.JLabel jlFkBizPartnerBankAccountId;
    private javax.swing.JLabel jlFkBizPartnerBranchId;
    private javax.swing.JLabel jlNumber;
    private javax.swing.JLabel jlPkCheckWalletId;
    private javax.swing.JLabel jlValue;
    private javax.swing.JLabel jlValueCy;
    private javax.swing.JRadioButton jrbIsBeneficiaryByUser;
    private javax.swing.JRadioButton jrbIsBeneficiarySelected;
    private javax.swing.JTextField jtfAccountCash;
    private javax.swing.JTextField jtfBeneficiaryUser;
    private javax.swing.JTextField jtfCode;
    private javax.swing.JTextField jtfCompanyBranch;
    private javax.swing.JTextField jtfConcept;
    private javax.swing.JTextField jtfCurrency;
    private javax.swing.JTextField jtfExchangeRate;
    private javax.swing.JTextField jtfExchangeRateSystem;
    private javax.swing.JTextField jtfNumber;
    private javax.swing.JTextField jtfValue;
    private javax.swing.JTextField jtfValueCy;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moCheck = null;
        moRecordEntry = null;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        moFieldDate.setFieldValue(moParamRecord == null ? miClient.getSessionXXX().getWorkingDate() : moParamRecord.getDate());
        jcbFkBizPartnerBranchId.setEnabled(false);
        jcbFkBizPartnerBankAccountId.setEnabled(false);
        jcbFkBizPartnerBranchId.removeAllItems();
        jcbFkBizPartnerBankAccountId.removeAllItems();
        jcbPkCheckWalletId.setEnabled(true);
        jckIsForBeneficiayAccount.setSelected(true);
        jrbIsBeneficiarySelected.setSelected(true);
        itemStateChangedIsBeneficiarySelected();
        mbResetingForm = false;
    }

    @Override
    public void formRefreshCatalogues() {
        mbResetingForm = true;
        SFormUtilities.populateComboBox(miClient, jcbBeneficiary, SDataConstants.BPSU_BP);
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        String message = "";
        SFormValidation validation = new SFormValidation();
        SDataCheckWallet oWallet = null;

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        if (!validation.getIsError()) {
            Object[] oParamsIn = new Object[] { moFieldPkCheckWalletId.getKeyAsIntArray()[0], moCheck == null ? 0 : moCheck.getPkCheckId(),
            moFieldNumber.getInteger() };

            oWallet = (SDataCheckWallet) SDataUtilities.readRegistry(miClient, SDataConstants.FIN_CHECK_WAL, moFieldPkCheckWalletId.getKeyAsIntArray(), SLibConstants.EXEC_MODE_SILENT);

            if (SDataUtilities.callProcedureVal(miClient, SProcConstants.FIN_CHECK_NUM_VAL, oParamsIn, SLibConstants.EXEC_MODE_VERBOSE) > 0) {
                validation.setMessage("El valor del campo '" + jlNumber.getText() + "' ya existe.");
                validation.setComponent(jtfNumber);
            }
            else if (moFieldNumber.getInteger() < oWallet.getNumberStart() || oWallet.getNumberEnd_n() > 0 && moFieldNumber.getInteger() > oWallet.getNumberEnd_n()) {
                validation.setMessage("El valor del campo '" + jlNumber.getText() + "' esta fuera del rango de folios valido.");
                validation.setComponent(jtfNumber);
            }
            else if (jrbIsBeneficiarySelected.isSelected() && moFieldBeneficiary.getKeyAsIntArray()[0] == 0) {
                validation.setMessage("Se debe ingresar un valor para el campo '" + jlBeneficiary.getText() + "'.");
                validation.setComponent(jcbBeneficiary);
            }
            else if (jrbIsBeneficiaryByUser.isSelected() && moFieldBeneficiaryUser.getString().length() == 0) {
                validation.setMessage("Se debe ingresar un valor para el campo '" + jlBeneficiaryUser.getText() + "'.");
                validation.setComponent(jtfBeneficiaryUser);
            }
            else if (!SDataUtilities.isPeriodOpen(miClient, moFieldDate.getDate())) {
                validation.setMessage(SLibConstants.MSG_ERR_GUI_PER_CLOSE);
                validation.setComponent(jftDate);
            }
            else {
                message = SDataUtilities.validateExchangeRate(miClient, moFieldValueCy.getDouble(), moFieldExchangeRate.getDouble(), moFieldValue.getDouble(), jlValueCy.getText());
                if (message.length() > 0) {
                    if (miClient.showMsgBoxConfirm(message + "\n" + SLibConstants.MSG_CNF_MSG_CONT) != JOptionPane.YES_OPTION) {
                        validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_VALUE_DIF + "'" + jlValueCy.getText() + "'.");
                        validation.setComponent(jtfValueCy);
                    }
                }
            }
        }

        if (!validation.getIsError()) {
            if (jrbIsBeneficiarySelected.isSelected()) {
                if (moFieldFkBizPartnerBranchId.getKeyAsIntArray()[0] > 0 && moFieldFkBizPartnerBankAccountId.getKeyAsIntArray()[1] == 0 ) {
                    validation.setMessage("Se debe seleccionar un valor para el campo '" + jlFkBizPartnerBankAccountId.getText() + "'.");
                    validation.setComponent(jcbFkBizPartnerBankAccountId);
                }
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        moRecordEntry = (SDataRecordEntry) registry;

        moCheck = moRecordEntry.getDbmsCheck();
        moFieldConcept.setFieldValue(moRecordEntry.getConcept());
        moFieldPkCheckWalletId.setFieldValue(new int[] { moCheck.getPkCheckWalletId() });
        moFieldNumber.setFieldValue(moCheck.getNumber());
        moFieldDate.setFieldValue(moCheck.getDate());

        if (moCheck.getFkBizPartnerId_nr() > 0) {
            moFieldBeneficiary.setKey(new int[] { moCheck.getFkBizPartnerId_nr() });
            moFieldFkBizPartnerBranchId.setKey(new int[] { moCheck.getFkBizPartnerBranchId() });
            moFieldFkBizPartnerBankAccountId.setKey(new int[] { moCheck.getFkBizPartnerBranchId(), moCheck.getFkBankAccountId() });
            jcbFkBizPartnerBranchId.setEnabled(true);
            jcbFkBizPartnerBankAccountId.setEnabled(moCheck.getFkBankAccountId() > 0);
            jrbIsBeneficiarySelected.setSelected(true);
        }
        else {
            moFieldBeneficiaryUser.setFieldValue(moCheck.getBeneficiary());
            jcbFkBizPartnerBranchId.setEnabled(false);
            jcbFkBizPartnerBankAccountId.setEnabled(false);
            jrbIsBeneficiaryByUser.setSelected(true);
        }

        moFieldValueCy.setFieldValue(moCheck.getValue());
        moFieldValue.setFieldValue(moRecordEntry.getCredit());
        moFieldExchangeRateSystem.setFieldValue(moRecordEntry.getExchangeRateSystem());
        moFieldExchangeRate.setFieldValue(moRecordEntry.getExchangeRate());
        moFieldIsForBeneficiaryAccount.setFieldValue(moCheck.getIsForBeneficiaryAccount());

        //searchBeneficiary();

        mnFkUser = moRecordEntry.getFkUserNewId();
        jcbPkCheckWalletId.setEnabled(false);
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        if (moCheck == null) {
            moCheck = new SDataCheck();
            moCheck.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
        }
        else {
            moCheck.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
        }

        moCheck.setPkCheckWalletId(moFieldPkCheckWalletId.getKeyAsIntArray()[0]);
        moCheck.setNumber(moFieldNumber.getInteger());
        moCheck.setDate(moFieldDate.getDate());
        moCheck.setBeneficiary(jrbIsBeneficiarySelected.isSelected() ? moFieldBeneficiary.getString() : moFieldBeneficiaryUser.getString());

        if (jrbIsBeneficiarySelected.isSelected()) {
            moCheck.setFkBizPartnerId_nr(moFieldBeneficiary.getKeyAsIntArray()[0] > 0 ? moFieldBeneficiary.getKeyAsIntArray()[0] : 0);
            moCheck.setFkBizPartnerBranchId(moFieldFkBizPartnerBranchId.getKeyAsIntArray() != null ? moFieldFkBizPartnerBranchId.getKeyAsIntArray()[0] : 0);
            moCheck.setFkBankAccountId(moFieldFkBizPartnerBankAccountId.getKeyAsIntArray() != null ? moFieldFkBizPartnerBankAccountId.getKeyAsIntArray()[1] : 0);
        }
        else if (jrbIsBeneficiaryByUser.isSelected()) {
            moCheck.setFkBizPartnerId_nr(0);
            moCheck.setFkBizPartnerBranchId(0);
            moCheck.setFkBankAccountId(0);
        }

        moCheck.setValue(moFieldValueCy.getDouble());
        moCheck.setIsForBeneficiaryAccount(moFieldIsForBeneficiaryAccount.getBoolean());
        moCheck.setFkCheckStatusId(SDataConstantsSys.TRNS_ST_DPS_EMITED);
        moCheck.seAuxCurrencyId(moCurrency.getPkCurrencyId());

        moRecordEntry = prepareRecordEntry();
        moRecordEntry.setDbmsCheck(moCheck);

        return moRecordEntry;
    }

    @Override
    @SuppressWarnings("unchecked")
    public void setValue(int type, java.lang.Object value) {
        if (type == SDataConstants.FIN_REC) {
            moParamRecord = (SDataRecord) value;
            populateComboBoxCheckWallet();
        }
        else if (type == SDataConstants.FIN_CHECK) {
            mvParamCheckVector = (Vector<SDataCheck>) value;
        }
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbDate) {
                actionSetDate();
            }
            else if (button == jbValueCy) {
                actionValueCy();
            }
            else if (button == jbValue) {
                actionValue();
            }
            else if (button == jbExchangeRateSystem) {
                actionExchangeRateSystem();
            }
            else if (button == jbExchangeRate) {
                actionExchangeRate();
            }
            else if (button == jbExchangeRateAccountCash) {
                actionExchangeRateAccountCash();
            }
            else if (button == jbExchangeRateAccountCashView) {
                actionExchangeRateAccountCashView();
            }
            else if (button == jbBeneficiary) {
                actionBeneficiary();
            }
            else if (button == jbConcept) {
                createConcept();
            }
        }
    }

    @Override
    public void focusGained(java.awt.event.FocusEvent e) {

    }

    @Override
    public void focusLost(java.awt.event.FocusEvent e) {
        if (e.getSource() instanceof javax.swing.JTextField) {
            JTextField textField = (JTextField) e.getSource();

            if (textField == jtfValueCy) {
                focusLostValueCy();
            }
            else if (textField == jtfValue) {
                focusLostValue();
            }
            else if (textField == jtfExchangeRate) {
                focusLostExchangeRate();
            }
            else if (textField == jtfNumber) {
                focusLostNumber();
            }
            else if (textField == jtfBeneficiaryUser) {
                focusLostBeneficiaryUser();
            }
        }
    }
}
