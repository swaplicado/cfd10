/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SFormCheckFormat.java
 *
 * Created on 27/08/2010, 11:57:59 AM
 */

package erp.mfin.form;

import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;

import erp.data.SDataConstants;
import erp.data.SDataUtilities;
import erp.data.SProcConstants;
import erp.lib.form.SFormField;
import erp.lib.form.SFormValidation;
import erp.lib.form.SFormUtilities;
import erp.lib.SLibConstants;
import erp.mfin.data.SDataCheckPrintingFormat;

/**
 *
 * @author Alfonso Flores
 */
public class SFormCheckFormat extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mfin.data.SDataCheckPrintingFormat moCheckPrintingFormat;
    private erp.lib.form.SFormField moFieldCheckFormat;
    private erp.lib.form.SFormField moFieldDateX;
    private erp.lib.form.SFormField moFieldDateY;
    private erp.lib.form.SFormField moFieldBeneficiaryX;
    private erp.lib.form.SFormField moFieldBeneficiaryY;
    private erp.lib.form.SFormField moFieldValueX;
    private erp.lib.form.SFormField moFieldValueY;
    private erp.lib.form.SFormField moFieldValueTextX;
    private erp.lib.form.SFormField moFieldValueTextY;
    private erp.lib.form.SFormField moFieldBeneficiaryAccountX;
    private erp.lib.form.SFormField moFieldBeneficiaryAccountY;
    private erp.lib.form.SFormField moFieldIsIssueLocalityApplying;
    private erp.lib.form.SFormField moFieldIssueLocalityX;
    private erp.lib.form.SFormField moFieldIssueLocalityY;
    private erp.lib.form.SFormField moFieldIsRecordNumberApplying;
    private erp.lib.form.SFormField moFieldRecordNumberX;
    private erp.lib.form.SFormField moFieldRecordNumberY;
    private erp.lib.form.SFormField moFieldIsCheckNumberApplying;
    private erp.lib.form.SFormField moFieldIsRotate;
    private erp.lib.form.SFormField moFieldCheckNumberX;
    private erp.lib.form.SFormField moFieldCheckNumberY;
    private erp.lib.form.SFormField moFieldBackX;
    private erp.lib.form.SFormField moFieldBackY;
    private erp.lib.form.SFormField moFieldIsDeleted;

    /** Creates new form SFormCheckFormat */
    public SFormCheckFormat(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        mnFormType = SDataConstants.FINU_CHECK_FMT;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlCheckFormat = new javax.swing.JLabel();
        jtfCheckFormat = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        Dummy01 = new javax.swing.JLabel();
        jlCoordinateX = new javax.swing.JLabel();
        jlCoordinateY = new javax.swing.JLabel();
        jlDate = new javax.swing.JLabel();
        jtfDateX = new javax.swing.JTextField();
        jtfDateY = new javax.swing.JTextField();
        jlBeneficiary = new javax.swing.JLabel();
        jtfBeneficiaryX = new javax.swing.JTextField();
        jtfBeneficiaryY = new javax.swing.JTextField();
        jlValue = new javax.swing.JLabel();
        jtfValueX = new javax.swing.JTextField();
        jtfValueY = new javax.swing.JTextField();
        jlValueText = new javax.swing.JLabel();
        jtfValueTextX = new javax.swing.JTextField();
        jtfValueTextY = new javax.swing.JTextField();
        jlBeneficiaryAccount = new javax.swing.JLabel();
        jtfBeneficiaryAccountX = new javax.swing.JTextField();
        jtfBeneficiaryAccountY = new javax.swing.JTextField();
        jlBack = new javax.swing.JLabel();
        jtfBackX = new javax.swing.JTextField();
        jtfBackY = new javax.swing.JTextField();
        jckIsIssueLocalityApplying = new javax.swing.JCheckBox();
        jtfIssueLocalityX = new javax.swing.JTextField();
        jtfIssueLocalityY = new javax.swing.JTextField();
        jckIsRecordNumberApplying = new javax.swing.JCheckBox();
        jtfRecordNumberX = new javax.swing.JTextField();
        jtfRecordNumberY = new javax.swing.JTextField();
        jckIsCheckNumberApplying = new javax.swing.JCheckBox();
        jtfCheckNumberX = new javax.swing.JTextField();
        jtfCheckNumberY = new javax.swing.JTextField();
        jckIsRotate = new javax.swing.JCheckBox();
        Dummy2 = new javax.swing.JLabel();
        Dummy3 = new javax.swing.JLabel();
        jckIsDeleted = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Formato de cheque");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setPreferredSize(new java.awt.Dimension(392, 33));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jPanel1.add(jbCancel);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.GridLayout(1, 1, 0, 1));

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCheckFormat.setText("Formato de cheque: *");
        jlCheckFormat.setPreferredSize(new java.awt.Dimension(145, 23));
        jPanel4.add(jlCheckFormat);

        jtfCheckFormat.setText("CHECK FORMAT");
        jtfCheckFormat.setPreferredSize(new java.awt.Dimension(293, 23));
        jPanel4.add(jtfCheckFormat);

        jPanel3.add(jPanel4);

        jPanel2.add(jPanel3, java.awt.BorderLayout.NORTH);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Coordenadas:"));
        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel6.setLayout(new java.awt.GridLayout(12, 3, 1, 1));
        jPanel6.add(Dummy01);

        jlCoordinateX.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jlCoordinateX.setText("Horizontal (pulg.)");
        jPanel6.add(jlCoordinateX);

        jlCoordinateY.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jlCoordinateY.setText("Vertical (pulg.)");
        jPanel6.add(jlCoordinateY);

        jlDate.setText("Fecha: *");
        jPanel6.add(jlDate);

        jtfDateX.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jPanel6.add(jtfDateX);

        jtfDateY.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfDateY.setText("DATE Y");
        jPanel6.add(jtfDateY);

        jlBeneficiary.setText("Beneficiario: *");
        jPanel6.add(jlBeneficiary);

        jtfBeneficiaryX.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfBeneficiaryX.setText("BENEFICIARY X");
        jPanel6.add(jtfBeneficiaryX);

        jtfBeneficiaryY.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfBeneficiaryY.setText("BENEFICIARY Y");
        jPanel6.add(jtfBeneficiaryY);

        jlValue.setText("Importe: *");
        jPanel6.add(jlValue);

        jtfValueX.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfValueX.setText("VALUE X");
        jPanel6.add(jtfValueX);

        jtfValueY.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfValueY.setText("VALUE Y");
        jPanel6.add(jtfValueY);

        jlValueText.setText("Texto importe: *");
        jPanel6.add(jlValueText);

        jtfValueTextX.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfValueTextX.setText("VALUE TEXT X");
        jPanel6.add(jtfValueTextX);

        jtfValueTextY.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfValueTextY.setText("VALUE TEXT Y");
        jPanel6.add(jtfValueTextY);

        jlBeneficiaryAccount.setText("Texto cta. benef.: *");
        jPanel6.add(jlBeneficiaryAccount);

        jtfBeneficiaryAccountX.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfBeneficiaryAccountX.setText("BENEFICIARY ACCOUNT X");
        jPanel6.add(jtfBeneficiaryAccountX);

        jtfBeneficiaryAccountY.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfBeneficiaryAccountY.setText("BENEFICIARY ACCOUNT Y");
        jPanel6.add(jtfBeneficiaryAccountY);

        jlBack.setText("Texto reverso: *");
        jPanel6.add(jlBack);

        jtfBackX.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfBackX.setText("BACK X");
        jPanel6.add(jtfBackX);

        jtfBackY.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfBackY.setText("BACK Y");
        jPanel6.add(jtfBackY);

        jckIsIssueLocalityApplying.setText("Imprimir localidad:");
        jckIsIssueLocalityApplying.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jckIsIssueLocalityApplyingItemStateChanged(evt);
            }
        });
        jPanel6.add(jckIsIssueLocalityApplying);

        jtfIssueLocalityX.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfIssueLocalityX.setText("ISSUE LOCALITY X");
        jPanel6.add(jtfIssueLocalityX);

        jtfIssueLocalityY.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfIssueLocalityY.setText("ISSUE LOCALITY Y");
        jPanel6.add(jtfIssueLocalityY);

        jckIsRecordNumberApplying.setText("Imprimir folio cheque:");
        jckIsRecordNumberApplying.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jckIsRecordNumberApplyingItemStateChanged(evt);
            }
        });
        jPanel6.add(jckIsRecordNumberApplying);

        jtfRecordNumberX.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfRecordNumberX.setText("RECORD NUMBER X");
        jPanel6.add(jtfRecordNumberX);

        jtfRecordNumberY.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfRecordNumberY.setText("RECORD NUMBER Y");
        jPanel6.add(jtfRecordNumberY);

        jckIsCheckNumberApplying.setText("Imprimir número cheque:");
        jckIsCheckNumberApplying.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jckIsCheckNumberApplyingItemStateChanged(evt);
            }
        });
        jPanel6.add(jckIsCheckNumberApplying);

        jtfCheckNumberX.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfCheckNumberX.setText("CHECK NUMBER X");
        jPanel6.add(jtfCheckNumberX);

        jtfCheckNumberY.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfCheckNumberY.setText("CHECK NUMBER Y");
        jPanel6.add(jtfCheckNumberY);

        jckIsRotate.setText("Rotar texto (imp. lasser))");
        jPanel6.add(jckIsRotate);
        jPanel6.add(Dummy2);
        jPanel6.add(Dummy3);

        jckIsDeleted.setText("Registro eliminado");
        jPanel6.add(jckIsDeleted);

        jPanel5.add(jPanel6, java.awt.BorderLayout.NORTH);

        jPanel2.add(jPanel5, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-480)/2, (screenSize.height-419)/2, 480, 419);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void jckIsIssueLocalityApplyingItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jckIsIssueLocalityApplyingItemStateChanged
        itemStateChangedIsIssueLocalityApplying();
    }//GEN-LAST:event_jckIsIssueLocalityApplyingItemStateChanged

    private void jckIsRecordNumberApplyingItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jckIsRecordNumberApplyingItemStateChanged
        itemStateChangedIsRecordNumberApplying();
    }//GEN-LAST:event_jckIsRecordNumberApplyingItemStateChanged

    private void jckIsCheckNumberApplyingItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jckIsCheckNumberApplyingItemStateChanged
        itemStateChangedIsCheckNumberApplying();
    }//GEN-LAST:event_jckIsCheckNumberApplyingItemStateChanged

    private void initComponentsExtra() {
        mvFields = new Vector<SFormField>();

        moFieldCheckFormat = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtfCheckFormat, jlCheckFormat);
        moFieldDateX = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfDateX, jlDate);
        moFieldDateX.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsLengthFormat());
        moFieldDateX.setMinInclusive(false);
        moFieldDateY = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfDateY, jlDate);
        moFieldDateY.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsLengthFormat());
        moFieldDateY.setMinInclusive(false);
        moFieldBeneficiaryX = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfBeneficiaryX, jlBeneficiary);
        moFieldBeneficiaryX.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsLengthFormat());
        moFieldBeneficiaryX.setMinInclusive(false);
        moFieldBeneficiaryY = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfBeneficiaryY, jlBeneficiary);
        moFieldBeneficiaryY.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsLengthFormat());
        moFieldBeneficiaryY.setMinInclusive(false);
        moFieldValueX = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfValueX, jlValue);
        moFieldValueX.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsLengthFormat());
        moFieldValueX.setMinInclusive(false);
        moFieldValueY = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfValueY, jlValue);
        moFieldValueY.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsLengthFormat());
        moFieldValueY.setMinInclusive(false);
        moFieldValueTextX = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfValueTextX, jlValueText);
        moFieldValueTextX.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsLengthFormat());
        moFieldValueTextX.setMinInclusive(false);
        moFieldValueTextY = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfValueTextY, jlValueText);
        moFieldValueTextY.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsLengthFormat());
        moFieldValueTextY.setMinInclusive(false);
        moFieldBeneficiaryAccountX = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfBeneficiaryAccountX, jlBeneficiaryAccount);
        moFieldBeneficiaryAccountX.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsLengthFormat());
        moFieldBeneficiaryAccountX.setMinInclusive(false);
        moFieldBeneficiaryAccountY = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfBeneficiaryAccountY, jlBeneficiaryAccount);
        moFieldBeneficiaryAccountY.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsLengthFormat());
        moFieldBeneficiaryAccountY.setMinInclusive(false);
        moFieldIsIssueLocalityApplying = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsIssueLocalityApplying);
        moFieldIssueLocalityX = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfIssueLocalityX, jckIsIssueLocalityApplying);
        moFieldIssueLocalityX.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsLengthFormat());
        moFieldIssueLocalityX.setMinInclusive(false);
        moFieldIssueLocalityY = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfIssueLocalityY, jckIsIssueLocalityApplying);
        moFieldIssueLocalityY.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsLengthFormat());
        moFieldIssueLocalityY.setMinInclusive(false);
        moFieldIsRecordNumberApplying = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsRecordNumberApplying);
        moFieldRecordNumberX = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfRecordNumberX, jckIsRecordNumberApplying);
        moFieldRecordNumberX.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsLengthFormat());
        moFieldRecordNumberX.setMinInclusive(false);
        moFieldRecordNumberY = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfRecordNumberY, jckIsRecordNumberApplying);
        moFieldRecordNumberY.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsLengthFormat());
        moFieldRecordNumberY.setMinInclusive(false);
        moFieldIsCheckNumberApplying = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsCheckNumberApplying);
        moFieldIsRotate = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsRotate);
        moFieldCheckNumberX = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfCheckNumberX, jckIsCheckNumberApplying);
        moFieldCheckNumberX.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsLengthFormat());
        moFieldCheckNumberX.setMinInclusive(false);
        moFieldCheckNumberY = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfCheckNumberY, jckIsCheckNumberApplying);
        moFieldCheckNumberY.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsLengthFormat());
        moFieldCheckNumberY.setMinInclusive(false);
        moFieldBackX = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfBackX, jlBack);
        moFieldBackX.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsLengthFormat());
        moFieldBackX.setMinInclusive(false);
        moFieldBackY = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfBackY, jlBack);
        moFieldBackY.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsLengthFormat());
        moFieldBackY.setMinInclusive(false);
        moFieldIsDeleted = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsDeleted);

        mvFields.add(moFieldCheckFormat);
        mvFields.add(moFieldDateX);
        mvFields.add(moFieldDateY);
        mvFields.add(moFieldBeneficiaryX);
        mvFields.add(moFieldBeneficiaryY);
        mvFields.add(moFieldValueX);
        mvFields.add(moFieldValueY);
        mvFields.add(moFieldValueTextX);
        mvFields.add(moFieldValueTextY);
        mvFields.add(moFieldBeneficiaryAccountX);
        mvFields.add(moFieldBeneficiaryAccountY);
        mvFields.add(moFieldIsIssueLocalityApplying);
        mvFields.add(moFieldIssueLocalityX);
        mvFields.add(moFieldIssueLocalityY);
        mvFields.add(moFieldIsRecordNumberApplying);
        mvFields.add(moFieldRecordNumberX);
        mvFields.add(moFieldRecordNumberY);
        mvFields.add(moFieldIsCheckNumberApplying);
        mvFields.add(moFieldIsRotate);
        mvFields.add(moFieldCheckNumberX);
        mvFields.add(moFieldCheckNumberY);
        mvFields.add(moFieldBackX);
        mvFields.add(moFieldBackY);

        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction action = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), action, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            jtfCheckFormat.requestFocus();
        }
    }

    private void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    private void itemStateChangedIsIssueLocalityApplying() {
        if (jckIsIssueLocalityApplying.isSelected()) {
            jtfIssueLocalityX.setEnabled(true);
            jtfIssueLocalityY.setEnabled(true);
        }
        else {
            jtfIssueLocalityX.setEnabled(false);
            jtfIssueLocalityY.setEnabled(false);
        }
    }

    private void itemStateChangedIsRecordNumberApplying() {
        if (jckIsRecordNumberApplying.isSelected()) {
            jtfRecordNumberX.setEnabled(true);
            jtfRecordNumberY.setEnabled(true);
        }
        else {
            jtfRecordNumberX.setEnabled(false);
            jtfRecordNumberY.setEnabled(false);
        }
    }

    private void itemStateChangedIsCheckNumberApplying() {
        if (jckIsCheckNumberApplying.isSelected()) {
            jtfCheckNumberX.setEnabled(true);
            jtfCheckNumberY.setEnabled(true);
        }
        else {
            jtfCheckNumberX.setEnabled(false);
            jtfCheckNumberY.setEnabled(false);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Dummy01;
    private javax.swing.JLabel Dummy2;
    private javax.swing.JLabel Dummy3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbOk;
    private javax.swing.JCheckBox jckIsCheckNumberApplying;
    private javax.swing.JCheckBox jckIsDeleted;
    private javax.swing.JCheckBox jckIsIssueLocalityApplying;
    private javax.swing.JCheckBox jckIsRecordNumberApplying;
    private javax.swing.JCheckBox jckIsRotate;
    private javax.swing.JLabel jlBack;
    private javax.swing.JLabel jlBeneficiary;
    private javax.swing.JLabel jlBeneficiaryAccount;
    private javax.swing.JLabel jlCheckFormat;
    private javax.swing.JLabel jlCoordinateX;
    private javax.swing.JLabel jlCoordinateY;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlValue;
    private javax.swing.JLabel jlValueText;
    private javax.swing.JTextField jtfBackX;
    private javax.swing.JTextField jtfBackY;
    private javax.swing.JTextField jtfBeneficiaryAccountX;
    private javax.swing.JTextField jtfBeneficiaryAccountY;
    private javax.swing.JTextField jtfBeneficiaryX;
    private javax.swing.JTextField jtfBeneficiaryY;
    private javax.swing.JTextField jtfCheckFormat;
    private javax.swing.JTextField jtfCheckNumberX;
    private javax.swing.JTextField jtfCheckNumberY;
    private javax.swing.JTextField jtfDateX;
    private javax.swing.JTextField jtfDateY;
    private javax.swing.JTextField jtfIssueLocalityX;
    private javax.swing.JTextField jtfIssueLocalityY;
    private javax.swing.JTextField jtfRecordNumberX;
    private javax.swing.JTextField jtfRecordNumberY;
    private javax.swing.JTextField jtfValueTextX;
    private javax.swing.JTextField jtfValueTextY;
    private javax.swing.JTextField jtfValueX;
    private javax.swing.JTextField jtfValueY;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moCheckPrintingFormat = null;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        itemStateChangedIsIssueLocalityApplying();
        itemStateChangedIsRecordNumberApplying();
        itemStateChangedIsCheckNumberApplying();
        jckIsDeleted.setEnabled(false);
    }

    @Override
    public void formRefreshCatalogues() {

    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        if (!validation.getIsError()) {
            Object[] oParamsIn = new Object[] { moCheckPrintingFormat == null ? 0 : moCheckPrintingFormat.getPkCheckFormatId(), moFieldCheckFormat.getString() };

            if (SDataUtilities.callProcedureVal(miClient, SProcConstants.FINU_CHECK_FMT_VAL, oParamsIn, SLibConstants.EXEC_MODE_VERBOSE) > 0) {
                validation.setMessage("El valor del campo '" + jlCheckFormat.getText() + "' ya existe.");
                validation.setComponent(jtfCheckFormat);
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        moCheckPrintingFormat = (SDataCheckPrintingFormat) registry;

        moFieldCheckFormat.setFieldValue(moCheckPrintingFormat.getCheckFormat());
        moFieldDateX.setFieldValue(moCheckPrintingFormat.getDateX());
        moFieldDateY.setFieldValue(moCheckPrintingFormat.getDateY());
        moFieldBeneficiaryX.setFieldValue(moCheckPrintingFormat.getBeneficiaryX());
        moFieldBeneficiaryY.setFieldValue(moCheckPrintingFormat.getBeneficiaryY());
        moFieldValueX.setFieldValue(moCheckPrintingFormat.getValueX());
        moFieldValueY.setFieldValue(moCheckPrintingFormat.getValueY());
        moFieldValueTextX.setFieldValue(moCheckPrintingFormat.getValueTextX());
        moFieldValueTextY.setFieldValue(moCheckPrintingFormat.getValueTextY());
        moFieldBeneficiaryAccountX.setFieldValue(moCheckPrintingFormat.getBeneficiaryAccountX());
        moFieldBeneficiaryAccountY.setFieldValue(moCheckPrintingFormat.getBeneficiaryAccountY());
        moFieldIsIssueLocalityApplying.setFieldValue(moCheckPrintingFormat.getIsIssueLocalityApplying());
        moFieldIssueLocalityX.setFieldValue(moCheckPrintingFormat.getIssueLocalityX());
        moFieldIssueLocalityY.setFieldValue(moCheckPrintingFormat.getIssueLocalityY());
        moFieldIsRecordNumberApplying.setFieldValue(moCheckPrintingFormat.getIsRecordNumberApplying());
        moFieldRecordNumberX.setFieldValue(moCheckPrintingFormat.getRecordNumberX());
        moFieldRecordNumberY.setFieldValue(moCheckPrintingFormat.getRecordNumberY());
        moFieldIsCheckNumberApplying.setFieldValue(moCheckPrintingFormat.getIsCheckNumberApplying());
        moFieldIsRotate.setFieldValue(moCheckPrintingFormat.getIsRotate());
        moFieldCheckNumberX.setFieldValue(moCheckPrintingFormat.getCheckNumberX());
        moFieldCheckNumberY.setFieldValue(moCheckPrintingFormat.getCheckNumberY());
        moFieldBackX.setFieldValue(moCheckPrintingFormat.getBackX());
        moFieldBackY.setFieldValue(moCheckPrintingFormat.getBackY());
        moFieldIsDeleted.setFieldValue(moCheckPrintingFormat.getIsDeleted());

        itemStateChangedIsIssueLocalityApplying();
        itemStateChangedIsRecordNumberApplying();
        itemStateChangedIsCheckNumberApplying();

        jckIsDeleted.setEnabled(true);
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        if (moCheckPrintingFormat == null) {
            moCheckPrintingFormat = new SDataCheckPrintingFormat();
            moCheckPrintingFormat.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
        }
        else {
            moCheckPrintingFormat.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
        }

        moCheckPrintingFormat.setCheckFormat(moFieldCheckFormat.getString());
        moCheckPrintingFormat.setDateX(moFieldDateX.getDouble());
        moCheckPrintingFormat.setDateY(moFieldDateY.getDouble());
        moCheckPrintingFormat.setBeneficiaryX(moFieldBeneficiaryX.getDouble());
        moCheckPrintingFormat.setBeneficiaryY(moFieldBeneficiaryY.getDouble());
        moCheckPrintingFormat.setValueX(moFieldValueX.getDouble());
        moCheckPrintingFormat.setValueY(moFieldValueY.getDouble());
        moCheckPrintingFormat.setValueTextX(moFieldValueTextX.getDouble());
        moCheckPrintingFormat.setValueTextY(moFieldValueTextY.getDouble());
        moCheckPrintingFormat.setBeneficiaryAccountX(moFieldBeneficiaryAccountX.getDouble());
        moCheckPrintingFormat.setBeneficiaryAccountY(moFieldBeneficiaryAccountY.getDouble());
        moCheckPrintingFormat.setIsIssueLocalityApplying(moFieldIsIssueLocalityApplying.getBoolean());
        moCheckPrintingFormat.setIssueLocalityX(moFieldIsIssueLocalityApplying.getBoolean() ? moFieldIssueLocalityX.getDouble() : 0);
        moCheckPrintingFormat.setIssueLocalityY(moFieldIsIssueLocalityApplying.getBoolean() ? moFieldIssueLocalityY.getDouble() : 0);
        moCheckPrintingFormat.setIsRecordNumberApplying(moFieldIsRecordNumberApplying.getBoolean());
        moCheckPrintingFormat.setRecordNumberX(moFieldIsRecordNumberApplying.getBoolean() ? moFieldRecordNumberX.getDouble() : 0);
        moCheckPrintingFormat.setRecordNumberY(moFieldIsRecordNumberApplying.getBoolean() ? moFieldRecordNumberY.getDouble() : 0);
        moCheckPrintingFormat.setIsCheckNumberApplying(moFieldIsCheckNumberApplying.getBoolean());
        moCheckPrintingFormat.setIsRotate(moFieldIsRotate.getBoolean());
        moCheckPrintingFormat.setCheckNumberX(moFieldIsCheckNumberApplying.getBoolean() ? moFieldCheckNumberX.getDouble() : 0);
        moCheckPrintingFormat.setCheckNumberY(moFieldIsCheckNumberApplying.getBoolean() ? moFieldCheckNumberY.getDouble() : 0);
        moCheckPrintingFormat.setBackX(moFieldBackX.getDouble());
        moCheckPrintingFormat.setBackY(moFieldBackY.getDouble());
        moCheckPrintingFormat.setIsDeleted(moFieldIsDeleted.getBoolean());

        return moCheckPrintingFormat;
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
        }
    }
}
