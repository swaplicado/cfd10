/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SFormCheckAnnuled.java
 *
 * Created on 14/07/2010, 09:09:15 AM
 */

package erp.mfin.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataUtilities;
import erp.data.SProcConstants;
import erp.lib.SLibConstants;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.mbps.form.SDialogPickerCompanyBranchEntity;
import erp.mfin.data.SDataCheck;
import erp.mfin.data.SDataCheckWallet;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;

/**
 *
 * @author Alfonso Flores, Sergio Flores
 */
public class SFormCheckAnnuled extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mfin.data.SDataCheck moCheck;
    private erp.lib.form.SFormField moFieldPkCheckWalletId;
    private erp.lib.form.SFormField moFieldDate;
    private erp.lib.form.SFormField moFieldNumber;

    private int mnCompanyBranchId;
    private int mnAccountCashId;
    private erp.mbps.form.SDialogPickerCompanyBranchEntity moPickerCompanyBranchEntity;

    /** Creates new form SFormCheckAnnuled */
    public SFormCheckAnnuled(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        mnFormType = SDataConstants.FIN_CHECK;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jlPkCheckWalletId = new javax.swing.JLabel();
        jcbPkCheckWalletId = new javax.swing.JComboBox<SFormComponentItem>();
        jPanel7 = new javax.swing.JPanel();
        jlDate = new javax.swing.JLabel();
        jftDate = new javax.swing.JFormattedTextField();
        jbDate = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jlNumber = new javax.swing.JLabel();
        jtfNumber = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cheque anulado");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.GridLayout(3, 2, 0, 5));

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPkCheckWalletId.setForeground(java.awt.Color.blue);
        jlPkCheckWalletId.setText("Chequera: *");
        jlPkCheckWalletId.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlPkCheckWalletId);

        jcbPkCheckWalletId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbPkCheckWalletId.setPreferredSize(new java.awt.Dimension(250, 23));
        jcbPkCheckWalletId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbPkCheckWalletIdItemStateChanged(evt);
            }
        });
        jPanel6.add(jcbPkCheckWalletId);

        jPanel3.add(jPanel6);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDate.setText("Fecha: *");
        jlDate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlDate);

        jftDate.setText("dd/mm/yyyy");
        jftDate.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel7.add(jftDate);

        jbDate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_date_day.gif"))); // NOI18N
        jbDate.setToolTipText("Seleccionar fecha");
        jbDate.setFocusable(false);
        jbDate.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel7.add(jbDate);

        jPanel3.add(jPanel7);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNumber.setText("Folio: *");
        jlNumber.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlNumber);

        jtfNumber.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfNumber.setText("NUMBER");
        jtfNumber.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jtfNumber);

        jPanel3.add(jPanel8);

        jPanel2.add(jPanel3, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel1.setPreferredSize(new java.awt.Dimension(392, 33));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jPanel1.add(jbCancel);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        setSize(new java.awt.Dimension(408, 284));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jcbPkCheckWalletIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbPkCheckWalletIdItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            itemStateChangedPkCheckWalletId();
        }
    }//GEN-LAST:event_jcbPkCheckWalletIdItemStateChanged

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        mvFields = new Vector<SFormField>();

        moFieldPkCheckWalletId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbPkCheckWalletId, jlPkCheckWalletId);
        moFieldDate = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jftDate, jlDate);
        moFieldDate.setPickerButton(jbDate);
        moFieldNumber = new SFormField(miClient, SLibConstants.DATA_TYPE_INTEGER, true, jtfNumber, jlNumber);

        mvFields.add(moFieldPkCheckWalletId);
        mvFields.add(moFieldDate);
        mvFields.add(moFieldNumber);

        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);
        jbDate.addActionListener(this);

        mnCompanyBranchId = SLibConstants.UNDEFINED;
        mnAccountCashId = SLibConstants.UNDEFINED;
        moPickerCompanyBranchEntity = new SDialogPickerCompanyBranchEntity(miClient, SDataConstantsSys.CFGS_CT_ENT_CASH);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction action = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), action, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;

            requestEntity();

            if (moCheck == null) {
                jcbPkCheckWalletId.requestFocus();
            }
            else {
                jftDate.requestFocus();
            }
        }
    }

    private void requestEntity() {
        int[] key = null;

        moPickerCompanyBranchEntity.formReset();
        moPickerCompanyBranchEntity.formRefreshCatalogues();
        moPickerCompanyBranchEntity.setCompanyBranchEntityKey(new int[] { mnCompanyBranchId, mnAccountCashId });
        moPickerCompanyBranchEntity.setFormVisible(true);

        if (moPickerCompanyBranchEntity.getFormResult() != SLibConstants.FORM_RESULT_OK) {
            actionCancel();
        }
        else {
            key = moPickerCompanyBranchEntity.getCompanyBranchEntityKey();
            mnCompanyBranchId = key[0];
            mnAccountCashId = key[1];

            if (moFieldPkCheckWalletId.getKeyAsIntArray() == null) {
                populateComboBoxCheckWallet();

                if (jcbPkCheckWalletId.getModel().getSize() <= 1) {
                    miClient.showMsgBoxInformation("La cuenta bancaria seleccionada no tiene chequeras.");
                    actionCancel();
                }
            }
        }
    }

    private void actionSetDate() {
        miClient.getGuiDatePickerXXX().formReset();
        miClient.getGuiDatePickerXXX().setDate(moFieldDate.getDate());
        miClient.getGuiDatePickerXXX().setVisible(true);

        if (miClient.getGuiDatePickerXXX().getFormResult() == SLibConstants.FORM_RESULT_OK) {
            moFieldDate.setFieldValue(miClient.getGuiDatePickerXXX().getGuiDate());
            jftDate.requestFocus();
        }
    }

    private void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    private void populateComboBoxCheckWallet() {
        SFormUtilities.populateComboBox(miClient, jcbPkCheckWalletId, SDataConstants.FIN_CHECK_WAL, new int[] { mnCompanyBranchId, mnAccountCashId });
    }

    private void itemStateChangedPkCheckWalletId() {
        if (moFieldNumber.getInteger() == 0 || moCheck == null) {
            Vector<Object> params = new Vector<Object>();

            params.add(moFieldPkCheckWalletId.getKeyAsIntArray()[0]);
            params = SDataUtilities.callProcedure(miClient, SProcConstants.FIN_GET_CHECK_NEXT_NUM, params, SLibConstants.EXEC_MODE_SILENT);

            moFieldNumber.setFieldValue((Integer) params.get(0));
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbDate;
    private javax.swing.JButton jbOk;
    private javax.swing.JComboBox<SFormComponentItem> jcbPkCheckWalletId;
    private javax.swing.JFormattedTextField jftDate;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlNumber;
    private javax.swing.JLabel jlPkCheckWalletId;
    private javax.swing.JTextField jtfNumber;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        int[] key = miClient.getSessionXXX().getCurrentCompanyBranchEntityKey(SDataConstantsSys.CFGS_CT_ENT_CASH);

        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moCheck = null;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        moFieldDate.setFieldValue(miClient.getSessionXXX().getWorkingDate());

        mnCompanyBranchId = miClient.getSessionXXX().getCurrentCompanyBranchId();
        mnAccountCashId = key == null ? SLibConstants.UNDEFINED : key[1];

        jcbPkCheckWalletId.removeAllItems();
        jcbPkCheckWalletId.setEnabled(true);
    }

    @Override
    public void formRefreshCatalogues() {

    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();
        SDataCheckWallet oWallet = null;

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        if (!validation.getIsError()) {
            Object[] oParamsIn = new Object[] { moFieldPkCheckWalletId.getKeyAsIntArray()[0], moCheck == null ? 0 : moCheck.getPkCheckId(),
            moFieldNumber.getInteger() };

            oWallet = (SDataCheckWallet) SDataUtilities.readRegistry(miClient, SDataConstants.FIN_CHECK_WAL, moFieldPkCheckWalletId.getKeyAsIntArray(), SLibConstants.EXEC_MODE_SILENT);

            if (SDataUtilities.callProcedureVal(miClient, SProcConstants.FIN_CHECK_NUM_VAL, oParamsIn, SLibConstants.EXEC_MODE_VERBOSE) > 0) {
                validation.setMessage("El valor del campo '" + jlNumber.getText() + "' ya existe.");
                validation.setComponent(jtfNumber);
            }
            else if (moFieldNumber.getInteger() < oWallet.getNumberStart() || oWallet.getNumberEnd_n() > 0 && moFieldNumber.getInteger() > oWallet.getNumberEnd_n()) {
                validation.setMessage("El valor del campo '" + jlNumber.getText() + "' esta fuera del rango de folios valido.");
                validation.setComponent(jtfNumber);
            }
            else if (!SDataUtilities.isPeriodOpen(miClient, moFieldDate.getDate())) {
                validation.setMessage(SLibConstants.MSG_ERR_GUI_PER_CLOSE);
                validation.setComponent(jftDate);
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        moCheck = (SDataCheck) registry;
        SDataCheckWallet wallet = null;

        wallet = (SDataCheckWallet) SDataUtilities.readRegistry(miClient, SDataConstants.FIN_CHECK_WAL, new int[] { moCheck.getPkCheckWalletId() }, SLibConstants.EXEC_MODE_SILENT);

        mnCompanyBranchId = wallet.getFkCompanyBranchId();
        mnAccountCashId = wallet.getFkAccountCashId();

        populateComboBoxCheckWallet();

        moFieldPkCheckWalletId.setFieldValue(new int[] { moCheck.getPkCheckWalletId() });
        moFieldDate.setFieldValue(moCheck.getDate());
        moFieldNumber.setFieldValue(moCheck.getNumber());

        jcbPkCheckWalletId.setEnabled(false);
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        if (moCheck == null) {
            moCheck = new SDataCheck();
            moCheck.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
        }
        else {
            moCheck.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
        }

        moCheck.setPkCheckWalletId(moFieldPkCheckWalletId.getKeyAsIntArray()[0]);
        moCheck.setDate(moFieldDate.getDate());
        moCheck.setNumber(moFieldNumber.getInteger());
        moCheck.setFkCheckStatusId(SDataConstantsSys.TRNS_ST_DPS_ANNULED);

        return moCheck;
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbDate) {
                actionSetDate();
            }
        }
    }
}
