/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SFormAccountTax.java
 *
 * Created on 21/10/2009, 04:20:33 PM
 */

package erp.mfin.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataReadDescriptions;
import erp.data.SDataUtilities;
import erp.data.SProcConstants;
import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormComboBoxGroup;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.mfin.data.SDataAccount;
import erp.mfin.data.SDataAccountTax;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.border.TitledBorder;
import sa.lib.SLibTimeUtils;

/**
 *
 * @author Sergio Flores
 */
public class SFormAccountTax extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mfin.data.SDataAccountTax moAccountTax;
    private erp.lib.form.SFormComboBoxGroup moComboBoxGroup;
    private erp.lib.form.SFormField moFieldPkTaxBasicId;
    private erp.lib.form.SFormField moFieldPkTaxId;
    private erp.lib.form.SFormField moFieldPkDpsCategoryId;
    private erp.lib.form.SFormField moFieldPkDateStartId;
    private erp.lib.form.SFormField moFieldIsDeleted;

    private erp.mfin.form.SPanelAccount moPanelFkAccountId;
    private erp.mfin.form.SPanelAccount moPanelFkAccountPendingId;

    /** Creates new form SFormTaxGroupEntry */
    public SFormAccountTax(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        mnFormType = SDataConstants.FIN_ACC_TAX;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel21 = new javax.swing.JPanel();
        jlPkTaxBasicId = new javax.swing.JLabel();
        jcbPkTaxBasicId = new javax.swing.JComboBox();
        jbPkTaxBasicId = new javax.swing.JButton();
        jPanel22 = new javax.swing.JPanel();
        jlPkTaxId = new javax.swing.JLabel();
        jcbPkTaxId = new javax.swing.JComboBox();
        jbPkTaxId = new javax.swing.JButton();
        jPanel23 = new javax.swing.JPanel();
        jlPkDpsCategoryId = new javax.swing.JLabel();
        jcbPkDpsCategoryId = new javax.swing.JComboBox();
        jbPkDpsCategoryId = new javax.swing.JButton();
        jPanel19 = new javax.swing.JPanel();
        jlPkDateStartId = new javax.swing.JLabel();
        jftPkDateStartId = new javax.swing.JFormattedTextField();
        jbPkDateStartId = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jlDummy01 = new javax.swing.JLabel();
        jckIsDeleted = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        jpAccount = new javax.swing.JPanel();
        jlDummyAccount = new javax.swing.JLabel();
        jpAccountPending = new javax.swing.JPanel();
        jlDummyAccountPending = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cuentas contables para impuesto");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel2.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel8.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel3.setLayout(new java.awt.GridLayout(6, 2, 5, 1));

        jPanel21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlPkTaxBasicId.setForeground(java.awt.Color.blue);
        jlPkTaxBasicId.setText("Impuesto básico: *");
        jlPkTaxBasicId.setPreferredSize(new java.awt.Dimension(165, 23));
        jPanel21.add(jlPkTaxBasicId);

        jcbPkTaxBasicId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbPkTaxBasicId.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel21.add(jcbPkTaxBasicId);

        jbPkTaxBasicId.setText("jButton3");
        jbPkTaxBasicId.setToolTipText("Seleccionar impuesto básico");
        jbPkTaxBasicId.setFocusable(false);
        jbPkTaxBasicId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel21.add(jbPkTaxBasicId);

        jPanel3.add(jPanel21);

        jPanel22.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlPkTaxId.setForeground(java.awt.Color.blue);
        jlPkTaxId.setText("Impuesto: *");
        jlPkTaxId.setPreferredSize(new java.awt.Dimension(165, 23));
        jPanel22.add(jlPkTaxId);

        jcbPkTaxId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbPkTaxId.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel22.add(jcbPkTaxId);

        jbPkTaxId.setText("jButton4");
        jbPkTaxId.setToolTipText("Seleccionar impuesto");
        jbPkTaxId.setFocusable(false);
        jbPkTaxId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel22.add(jbPkTaxId);

        jPanel3.add(jPanel22);

        jPanel23.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlPkDpsCategoryId.setForeground(java.awt.Color.blue);
        jlPkDpsCategoryId.setText("Categoría de compras-ventas: *");
        jlPkDpsCategoryId.setPreferredSize(new java.awt.Dimension(165, 23));
        jPanel23.add(jlPkDpsCategoryId);

        jcbPkDpsCategoryId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbPkDpsCategoryId.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel23.add(jcbPkDpsCategoryId);

        jbPkDpsCategoryId.setText("jButton4");
        jbPkDpsCategoryId.setToolTipText("Seleccionar impuesto");
        jbPkDpsCategoryId.setFocusable(false);
        jbPkDpsCategoryId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel23.add(jbPkDpsCategoryId);

        jPanel3.add(jPanel23);

        jPanel19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlPkDateStartId.setForeground(java.awt.Color.blue);
        jlPkDateStartId.setText("Fecha inicial vigencia: *");
        jlPkDateStartId.setPreferredSize(new java.awt.Dimension(165, 23));
        jPanel19.add(jlPkDateStartId);

        jftPkDateStartId.setText("dd/mm/yyyy");
        jftPkDateStartId.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel19.add(jftPkDateStartId);

        jbPkDateStartId.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_date_day.gif"))); // NOI18N
        jbPkDateStartId.setToolTipText("Seleccionar fecha");
        jbPkDateStartId.setFocusable(false);
        jbPkDateStartId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel19.add(jbPkDateStartId);

        jPanel3.add(jPanel19);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlDummy01.setPreferredSize(new java.awt.Dimension(165, 23));
        jPanel5.add(jlDummy01);

        jckIsDeleted.setText("Registro eliminado");
        jckIsDeleted.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel5.add(jckIsDeleted);

        jPanel3.add(jPanel5);

        jPanel8.add(jPanel3, java.awt.BorderLayout.NORTH);

        jPanel4.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jpAccount.setBorder(javax.swing.BorderFactory.createTitledBorder("Contabilización de impuestos efectivamente pagados:"));
        jpAccount.setLayout(new java.awt.BorderLayout());

        jlDummyAccount.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jlDummyAccount.setText("[Panel cuenta contable]");
        jlDummyAccount.setPreferredSize(new java.awt.Dimension(100, 50));
        jpAccount.add(jlDummyAccount, java.awt.BorderLayout.CENTER);

        jPanel4.add(jpAccount);

        jpAccountPending.setBorder(javax.swing.BorderFactory.createTitledBorder("Contabilización de impuestos pendientes de pago:"));
        jpAccountPending.setLayout(new java.awt.BorderLayout());

        jlDummyAccountPending.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jlDummyAccountPending.setText("[Panel cuenta contable]");
        jlDummyAccountPending.setPreferredSize(new java.awt.Dimension(100, 50));
        jpAccountPending.add(jlDummyAccountPending, java.awt.BorderLayout.CENTER);

        jPanel4.add(jpAccountPending);

        jPanel8.add(jPanel4, java.awt.BorderLayout.CENTER);

        jPanel2.add(jPanel8, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel1.setPreferredSize(new java.awt.Dimension(392, 33));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jPanel1.add(jbCancel);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        setSize(new java.awt.Dimension(700, 500));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        try {
            moPanelFkAccountId = new SPanelAccount(miClient, SDataConstants.FIN_ACC, false, true, false);
            moPanelFkAccountPendingId = new SPanelAccount(miClient, SDataConstants.FIN_ACC, false, true, false);
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }

        jpAccount.remove(jlDummyAccount);
        jpAccount.add(moPanelFkAccountId, BorderLayout.CENTER);

        jpAccountPending.remove(jlDummyAccountPending);
        jpAccountPending.add(moPanelFkAccountPendingId, BorderLayout.CENTER);

        moComboBoxGroup = new SFormComboBoxGroup(miClient);

        moFieldPkTaxBasicId = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbPkTaxBasicId, jlPkTaxBasicId);
        moFieldPkTaxBasicId.setPickerButton(jbPkTaxBasicId);
        moFieldPkTaxId = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbPkTaxId, jlPkTaxId);
        moFieldPkTaxId.setPickerButton(jbPkTaxId);
        moFieldPkDpsCategoryId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbPkDpsCategoryId, jlPkDpsCategoryId);
        moFieldPkDpsCategoryId.setPickerButton(jbPkDpsCategoryId);
        moFieldPkDateStartId = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jftPkDateStartId, jlPkDateStartId);
        moFieldPkDateStartId.setPickerButton(jbPkDateStartId);
        moFieldIsDeleted = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, true, jckIsDeleted);

        mvFields = new Vector<SFormField>();
        mvFields.add(moFieldPkTaxBasicId);
        mvFields.add(moFieldPkTaxId);
        mvFields.add(moFieldPkDpsCategoryId);
        mvFields.add(moFieldPkDateStartId);
        mvFields.add(moFieldIsDeleted);

        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);
        jbPkTaxBasicId.addActionListener(this);
        jbPkTaxId.addActionListener(this);
        jbPkDpsCategoryId.addActionListener(this);
        jbPkDateStartId.addActionListener(this);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            if (jcbPkTaxBasicId.isEnabled()) jcbPkTaxBasicId.requestFocus(); else moPanelFkAccountId.getFieldAccount().getComponent().requestFocus();
        }
    }

    private void actionPkTaxBasicId() {
        miClient.pickOption(SDataConstants.FINU_TAX_BAS, moFieldPkTaxBasicId, null);
    }

    private void actionPkTaxId() {
        miClient.pickOption(SDataConstants.FINU_TAX, moFieldPkTaxId, moFieldPkTaxBasicId.getKeyAsIntArray());
    }

    private void actionPkDpsCategoryId() {
        miClient.pickOption(SDataConstants.TRNS_CT_DPS, moFieldPkDpsCategoryId, null);
    }

    private void actionPkDateStartId() {
        miClient.getGuiDatePickerXXX().pickDate(moFieldPkDateStartId.getDate(), moFieldPkDateStartId);
    }

    private void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbOk;
    private javax.swing.JButton jbPkDateStartId;
    private javax.swing.JButton jbPkDpsCategoryId;
    private javax.swing.JButton jbPkTaxBasicId;
    private javax.swing.JButton jbPkTaxId;
    private javax.swing.JComboBox jcbPkDpsCategoryId;
    private javax.swing.JComboBox jcbPkTaxBasicId;
    private javax.swing.JComboBox jcbPkTaxId;
    private javax.swing.JCheckBox jckIsDeleted;
    private javax.swing.JFormattedTextField jftPkDateStartId;
    private javax.swing.JLabel jlDummy01;
    private javax.swing.JLabel jlDummyAccount;
    private javax.swing.JLabel jlDummyAccountPending;
    private javax.swing.JLabel jlPkDateStartId;
    private javax.swing.JLabel jlPkDpsCategoryId;
    private javax.swing.JLabel jlPkTaxBasicId;
    private javax.swing.JLabel jlPkTaxId;
    private javax.swing.JPanel jpAccount;
    private javax.swing.JPanel jpAccountPending;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        moAccountTax = null;
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moAccountTax = null;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        moFieldPkDateStartId.setFieldValue(SLibTimeUtils.getBeginOfYear(miClient.getSessionXXX().getWorkingDate()));

        jcbPkTaxBasicId.setEnabled(true);
        jcbPkTaxId.setEnabled(true);
        jcbPkDpsCategoryId.setEnabled(true);
        jftPkDateStartId.setEnabled(true);
        jbPkTaxBasicId.setEnabled(true);
        jbPkTaxId.setEnabled(true);
        jbPkDpsCategoryId.setEnabled(true);
        jbPkDateStartId.setEnabled(true);
        jckIsDeleted.setEnabled(false);

        moComboBoxGroup.reset();
        moPanelFkAccountId.resetPanel();
        moPanelFkAccountPendingId.resetPanel();
    }

    @Override
    @SuppressWarnings("unchecked")
    public void formRefreshCatalogues() {
        moComboBoxGroup.clear();
        moComboBoxGroup.addComboBox(SDataConstants.FINU_TAX_BAS, jcbPkTaxBasicId, jbPkTaxBasicId);
        moComboBoxGroup.addComboBox(SDataConstants.FINU_TAX, jcbPkTaxId, jbPkTaxId);

        SFormUtilities.populateComboBox(miClient, jcbPkDpsCategoryId, SDataConstants.TRNS_CT_DPS);
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        int nSystemTypeId = SDataConstantsSys.FINS_TP_ACC_SYS_NA;
        int nSystemTypePendingId = SDataConstantsSys.FINS_TP_ACC_SYS_NA;
        String message = "";
        SDataAccount account = null;
        SDataAccount accountPending = null;
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        if (!validation.getIsError()) {
            if (moAccountTax == null) {
                if (SDataUtilities.callProcedureVal(miClient, SProcConstants.FIN_ACC_TAX_VAL,
                        new Object[] { moFieldPkTaxId.getKeyAsIntArray()[0], moFieldPkTaxId.getKeyAsIntArray()[1],
                        moFieldPkDpsCategoryId.getKeyAsIntArray()[0], moFieldPkDateStartId.getDate() },
                        SLibConstants.EXEC_MODE_SILENT) > 0) {
                    validation.setMessage("Ya existe un registro para los campos especificados.");
                    validation.setComponent(jcbPkTaxBasicId);
                }
            }

            if (!validation.getIsError()) {
                account = moPanelFkAccountId.getCurrentInputAccount();
                message = SDataUtilities.validateAccount(miClient, account, null);

                if (message.length() > 0) {
                    validation.setMessage(message);
                    validation.setComponent(moPanelFkAccountId.getFieldAccount().getComponent());
                }
                else {
                    if (account.getLevel() == 1) {
                        nSystemTypeId = account.getFkAccountSystemTypeId();
                    }
                    else {
                        nSystemTypeId = moPanelFkAccountId.getDataAccountMajor().getFkAccountSystemTypeId();
                    }

                    accountPending = moPanelFkAccountPendingId.getCurrentInputAccount();
                    message = SDataUtilities.validateAccount(miClient, accountPending, null);

                    if (message.length() > 0) {
                        validation.setMessage(message);
                        validation.setComponent(moPanelFkAccountPendingId.getFieldAccount().getComponent());
                    }
                    else {
                        if (accountPending.getLevel() == 1) {
                            nSystemTypePendingId = accountPending.getFkAccountSystemTypeId();
                        }
                        else {
                            nSystemTypePendingId = moPanelFkAccountPendingId.getDataAccountMajor().getFkAccountSystemTypeId();
                        }
                    }
                }

                if (!validation.getIsError()) {
                    if (nSystemTypeId != SDataConstantsSys.FINS_TP_ACC_SYS_TAX_DBT &&
                        nSystemTypeId != SDataConstantsSys.FINS_TP_ACC_SYS_TAX_CDT) {
                        validation.setMessage("El tipo de cuenta de sistema de la cuenta contable de '" + ((TitledBorder) jpAccount.getBorder()).getTitle() + "' deber ser:\n" +
                                "'" + SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FINS_TP_ACC_SYS, new int[] { SDataConstantsSys.FINS_TP_ACC_SYS_TAX_DBT }) + "' o " +
                                "'" + SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FINS_TP_ACC_SYS, new int[] { SDataConstantsSys.FINS_TP_ACC_SYS_TAX_CDT }) + "'.");
                        validation.setComponent(moPanelFkAccountId.getFieldAccount().getComponent());
                    }
                    else if (nSystemTypePendingId != SDataConstantsSys.FINS_TP_ACC_SYS_TAX_DBT &&
                        nSystemTypePendingId != SDataConstantsSys.FINS_TP_ACC_SYS_TAX_CDT) {
                        validation.setMessage("El tipo de cuenta de sistema de la cuenta contable de '" + ((TitledBorder) jpAccountPending.getBorder()).getTitle() + "' deber ser:\n" +
                                "'" + SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FINS_TP_ACC_SYS, new int[] { SDataConstantsSys.FINS_TP_ACC_SYS_TAX_DBT }) + "' o " +
                                "'" + SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FINS_TP_ACC_SYS, new int[] { SDataConstantsSys.FINS_TP_ACC_SYS_TAX_CDT }) + "'.");
                        validation.setComponent(moPanelFkAccountPendingId.getFieldAccount().getComponent());
                    }
                }
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        moAccountTax = (SDataAccountTax) registry;

        moFieldPkTaxBasicId.setKey(new int[] { moAccountTax.getPkTaxBasicId() });
        moFieldPkTaxId.setKey(new int[] { moAccountTax.getPkTaxBasicId(), moAccountTax.getPkTaxId() });
        moFieldPkDpsCategoryId.setFieldValue(new int[] { moAccountTax.getPkDpsCategoryId() });
        moFieldPkDateStartId.setFieldValue(moAccountTax.getPkDateStartId());
        moFieldIsDeleted.setFieldValue(moAccountTax.getIsDeleted());
        moPanelFkAccountId.getFieldAccount().setFieldValue(moAccountTax.getFkAccountPaymentId());
        moPanelFkAccountPendingId.getFieldAccount().setFieldValue(moAccountTax.getFkAccountPaymentPendingId());

        jcbPkTaxBasicId.setEnabled(false);
        jcbPkTaxId.setEnabled(false);
        jcbPkDpsCategoryId.setEnabled(false);
        jftPkDateStartId.setEnabled(false);
        jbPkTaxBasicId.setEnabled(false);
        jbPkTaxId.setEnabled(false);
        jbPkDpsCategoryId.setEnabled(false);
        jbPkDateStartId.setEnabled(false);
        jckIsDeleted.setEnabled(true);

        moPanelFkAccountId.refreshPanel();
        moPanelFkAccountPendingId.refreshPanel();
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        if (moAccountTax == null) {
            moAccountTax = new SDataAccountTax();
            moAccountTax.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
        }
        else {
            moAccountTax.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
        }

        moAccountTax.setPkTaxBasicId(moFieldPkTaxId.getKeyAsIntArray()[0]);
        moAccountTax.setPkTaxId(moFieldPkTaxId.getKeyAsIntArray()[1]);
        moAccountTax.setPkDpsCategoryId(moFieldPkDpsCategoryId.getKeyAsIntArray()[0]);
        moAccountTax.setPkDateStartId(moFieldPkDateStartId.getDate());
        moAccountTax.setIsDeleted(moFieldIsDeleted.getBoolean());
        moAccountTax.setFkAccountPaymentId(moPanelFkAccountId.getFieldAccount().getString());
        moAccountTax.setFkAccountPaymentPendingId(moPanelFkAccountPendingId.getFieldAccount().getString());

        return moAccountTax;
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbPkTaxBasicId) {
                actionPkTaxBasicId();
            }
            else if (button == jbPkTaxId) {
                actionPkTaxId();
            }
            else if (button == jbPkDpsCategoryId) {
                actionPkDpsCategoryId();
            }
            else if (button == jbPkDateStartId) {
                actionPkDateStartId();
            }
        }
    }
}
