/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SFormAccountCashTransfer.java
 *
 * Created on 22/10/2010, 04:24:22 PM
 */

package erp.mfin.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataReadDescriptions;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.mbps.data.SDataBizPartnerBranch;
import erp.mcfg.data.SDataCurrency;
import erp.mfin.data.SDataAccountCash;
import erp.mfin.data.SDataRecord;
import erp.mfin.data.SDataRecordEntry;
import erp.mod.SModSysConsts;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author Alfonso Flores
 */
public class SFormAccountCashTransfer extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener, java.awt.event.FocusListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.lib.form.SFormField moFieldConcept;
    private erp.lib.form.SFormField moFieldValueCyOrigin;
    private erp.lib.form.SFormField moFieldExchangeRateSystemOrigin;
    private erp.lib.form.SFormField moFieldValueOrigin;
    private erp.lib.form.SFormField moFieldExchangeRateOrigin;
    private erp.lib.form.SFormField moFieldFkCompanyBranchId;
    private erp.lib.form.SFormField moFieldFkAccountCashId;
    private erp.lib.form.SFormField moFieldValueCyDestiny;
    private erp.lib.form.SFormField moFieldExchangeRateSystemDestiny;
    private erp.lib.form.SFormField moFieldValueDestiny;
    private erp.lib.form.SFormField moFieldExchangeRateDestiny;

    private erp.mfin.data.SDataRecord moParamRecord;
    private erp.mfin.data.SDataAccountCash moAccountCashDestiny;
    private erp.mcfg.data.SDataCurrency moCurrency;
    private erp.mcfg.data.SDataCurrency moCurrencyDestiny;
    private erp.mbps.data.SDataBizPartnerBranch moBizPartnerBranch;

    /** Creates new form SFormAccountCashTransfer */
    public SFormAccountCashTransfer(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlAccountCashOrigin = new javax.swing.JLabel();
        jtfCompanyBranch = new javax.swing.JTextField();
        jtfAccountCashOrigin = new javax.swing.JTextField();
        jtfCodeOrigin = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jlCurrencyOrigin = new javax.swing.JLabel();
        jtfCurrencyOrigin = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jlValueCyOrigin = new javax.swing.JLabel();
        jtfValueCyOrigin = new javax.swing.JTextField();
        jbValueCyOrigin = new javax.swing.JButton();
        jlExchangeRateSystemOrigin = new javax.swing.JLabel();
        jtfExchangeRateSystemOrigin = new javax.swing.JTextField();
        jbExchangeRateSystemOrigin = new javax.swing.JButton();
        jbExchangeRateAccountCashViewOrigin = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jlValueOrigin = new javax.swing.JLabel();
        jtfValueOrigin = new javax.swing.JTextField();
        jbValueOrigin = new javax.swing.JButton();
        jlExchangeRateOrigin = new javax.swing.JLabel();
        jtfExchangeRateOrigin = new javax.swing.JTextField();
        jbExchangeRateOrigin = new javax.swing.JButton();
        jbExchangeRateAccountCashOrigin = new javax.swing.JButton();
        jPanel14 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jlFkCompanyBranchId = new javax.swing.JLabel();
        jcbFkCompanyBranchId = new javax.swing.JComboBox();
        jbFkCompanyBranchId = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jlFkAccountCashDestinyId = new javax.swing.JLabel();
        jcbFkAccountCashDestinyId = new javax.swing.JComboBox();
        jbFkAccountCashDestinyId = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jlCurrencyDestiny = new javax.swing.JLabel();
        jtfCurrencyDestiny = new javax.swing.JTextField();
        jPanel11 = new javax.swing.JPanel();
        jlValueCyDestiny = new javax.swing.JLabel();
        jtfValueCyDestiny = new javax.swing.JTextField();
        jbValueCyDestiny = new javax.swing.JButton();
        jlExchangeRateSystemDestiny = new javax.swing.JLabel();
        jtfExchangeRateSystemDestiny = new javax.swing.JTextField();
        jbExchangeRateSystemDestiny = new javax.swing.JButton();
        jbExchangeRateAccountCashViewDestiny = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        jlValueDestiny = new javax.swing.JLabel();
        jtfValueDestiny = new javax.swing.JTextField();
        jbValueDestiny = new javax.swing.JButton();
        jlExchangeRateDestiny = new javax.swing.JLabel();
        jtfExchangeRateDestiny = new javax.swing.JTextField();
        jbExchangeRateDestiny = new javax.swing.JButton();
        jbExchangeRateAccountCashDestiny = new javax.swing.JButton();
        jPanel15 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jlConcept = new javax.swing.JLabel();
        jtfConcept = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Traspaso de efectivo");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setPreferredSize(new java.awt.Dimension(492, 33));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jPanel1.add(jbCancel);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.BorderLayout(0, 1));

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder("Cuenta de efectivo origen:"));
        jPanel13.setLayout(new java.awt.GridLayout(4, 1, 0, 1));

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlAccountCashOrigin.setText("Cuenta de efectivo:");
        jlAccountCashOrigin.setPreferredSize(new java.awt.Dimension(159, 23));
        jPanel4.add(jlAccountCashOrigin);

        jtfCompanyBranch.setEditable(false);
        jtfCompanyBranch.setText("COMPANY BRANCH");
        jtfCompanyBranch.setFocusable(false);
        jtfCompanyBranch.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel4.add(jtfCompanyBranch);

        jtfAccountCashOrigin.setEditable(false);
        jtfAccountCashOrigin.setText("ACCOUNT CASH");
        jtfAccountCashOrigin.setFocusable(false);
        jtfAccountCashOrigin.setPreferredSize(new java.awt.Dimension(170, 23));
        jPanel4.add(jtfAccountCashOrigin);

        jtfCodeOrigin.setEditable(false);
        jtfCodeOrigin.setText("CODE");
        jtfCodeOrigin.setFocusable(false);
        jtfCodeOrigin.setPreferredSize(new java.awt.Dimension(73, 23));
        jPanel4.add(jtfCodeOrigin);

        jPanel13.add(jPanel4);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlCurrencyOrigin.setText("Moneda:");
        jlCurrencyOrigin.setPreferredSize(new java.awt.Dimension(159, 23));
        jPanel6.add(jlCurrencyOrigin);

        jtfCurrencyOrigin.setEditable(false);
        jtfCurrencyOrigin.setText("CURRENCY ORIGIN");
        jtfCurrencyOrigin.setFocusable(false);
        jtfCurrencyOrigin.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel6.add(jtfCurrencyOrigin);

        jPanel13.add(jPanel6);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlValueCyOrigin.setText("Monto: *");
        jlValueCyOrigin.setPreferredSize(new java.awt.Dimension(159, 23));
        jPanel7.add(jlValueCyOrigin);

        jtfValueCyOrigin.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfValueCyOrigin.setText("1,000,000,000.00");
        jtfValueCyOrigin.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jtfValueCyOrigin);

        jbValueCyOrigin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_action.gif"))); // NOI18N
        jbValueCyOrigin.setToolTipText("Calcular monto");
        jbValueCyOrigin.setFocusable(false);
        jbValueCyOrigin.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel7.add(jbValueCyOrigin);

        jlExchangeRateSystemOrigin.setText("Tipo de cambio sistema:");
        jlExchangeRateSystemOrigin.setPreferredSize(new java.awt.Dimension(118, 23));
        jPanel7.add(jlExchangeRateSystemOrigin);

        jtfExchangeRateSystemOrigin.setEditable(false);
        jtfExchangeRateSystemOrigin.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfExchangeRateSystemOrigin.setText("1,000,000,000.00");
        jtfExchangeRateSystemOrigin.setFocusable(false);
        jtfExchangeRateSystemOrigin.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jtfExchangeRateSystemOrigin);

        jbExchangeRateSystemOrigin.setText("jButton2");
        jbExchangeRateSystemOrigin.setToolTipText("Seleccionar tipo de cambio sistema");
        jbExchangeRateSystemOrigin.setFocusable(false);
        jbExchangeRateSystemOrigin.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel7.add(jbExchangeRateSystemOrigin);

        jbExchangeRateAccountCashViewOrigin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_look.gif"))); // NOI18N
        jbExchangeRateAccountCashViewOrigin.setToolTipText("Ver tipo de cambio acumulado");
        jbExchangeRateAccountCashViewOrigin.setFocusable(false);
        jbExchangeRateAccountCashViewOrigin.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel7.add(jbExchangeRateAccountCashViewOrigin);

        jPanel13.add(jPanel7);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlValueOrigin.setText("Monto moneda local (ML): *");
        jlValueOrigin.setPreferredSize(new java.awt.Dimension(159, 23));
        jPanel10.add(jlValueOrigin);

        jtfValueOrigin.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfValueOrigin.setText("1,000,000,000.00");
        jtfValueOrigin.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jtfValueOrigin);

        jbValueOrigin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_action.gif"))); // NOI18N
        jbValueOrigin.setToolTipText("Calcular monto moneda local");
        jbValueOrigin.setFocusable(false);
        jbValueOrigin.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel10.add(jbValueOrigin);

        jlExchangeRateOrigin.setText("Tipo de cambio: *");
        jlExchangeRateOrigin.setPreferredSize(new java.awt.Dimension(118, 23));
        jPanel10.add(jlExchangeRateOrigin);

        jtfExchangeRateOrigin.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfExchangeRateOrigin.setText("1,000,000,000.00");
        jtfExchangeRateOrigin.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jtfExchangeRateOrigin);

        jbExchangeRateOrigin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_action.gif"))); // NOI18N
        jbExchangeRateOrigin.setToolTipText("Calcular tipo de cambio");
        jbExchangeRateOrigin.setFocusable(false);
        jbExchangeRateOrigin.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel10.add(jbExchangeRateOrigin);

        jbExchangeRateAccountCashOrigin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_money.gif"))); // NOI18N
        jbExchangeRateAccountCashOrigin.setToolTipText("Asignar tipo de cambio acumulado");
        jbExchangeRateAccountCashOrigin.setFocusable(false);
        jbExchangeRateAccountCashOrigin.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel10.add(jbExchangeRateAccountCashOrigin);

        jPanel13.add(jPanel10);

        jPanel3.add(jPanel13, java.awt.BorderLayout.NORTH);

        jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder("Cuenta de efectivo destino:"));
        jPanel14.setLayout(new java.awt.GridLayout(5, 1, 0, 1));

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlFkCompanyBranchId.setText("Sucursal empresa: *");
        jlFkCompanyBranchId.setPreferredSize(new java.awt.Dimension(159, 23));
        jPanel16.add(jlFkCompanyBranchId);

        jcbFkCompanyBranchId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbFkCompanyBranchId.setPreferredSize(new java.awt.Dimension(372, 23));
        jcbFkCompanyBranchId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbFkCompanyBranchIdItemStateChanged(evt);
            }
        });
        jPanel16.add(jcbFkCompanyBranchId);

        jbFkCompanyBranchId.setText("jButton1");
        jbFkCompanyBranchId.setToolTipText("Seleccionar sucursal empresa");
        jbFkCompanyBranchId.setFocusable(false);
        jbFkCompanyBranchId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel16.add(jbFkCompanyBranchId);

        jPanel14.add(jPanel16);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlFkAccountCashDestinyId.setText("Cuenta de efectivo: *");
        jlFkAccountCashDestinyId.setPreferredSize(new java.awt.Dimension(159, 23));
        jPanel8.add(jlFkAccountCashDestinyId);

        jcbFkAccountCashDestinyId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbFkAccountCashDestinyId.setPreferredSize(new java.awt.Dimension(372, 23));
        jcbFkAccountCashDestinyId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbFkAccountCashDestinyIdItemStateChanged(evt);
            }
        });
        jPanel8.add(jcbFkAccountCashDestinyId);

        jbFkAccountCashDestinyId.setText("jButton1");
        jbFkAccountCashDestinyId.setToolTipText("Seleccionar cuenta de efectivo");
        jbFkAccountCashDestinyId.setFocusable(false);
        jbFkAccountCashDestinyId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel8.add(jbFkAccountCashDestinyId);

        jPanel14.add(jPanel8);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlCurrencyDestiny.setText("Moneda:");
        jlCurrencyDestiny.setPreferredSize(new java.awt.Dimension(159, 23));
        jPanel9.add(jlCurrencyDestiny);

        jtfCurrencyDestiny.setEditable(false);
        jtfCurrencyDestiny.setText("CURRENCY DESTINY");
        jtfCurrencyDestiny.setFocusable(false);
        jtfCurrencyDestiny.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel9.add(jtfCurrencyDestiny);

        jPanel14.add(jPanel9);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlValueCyDestiny.setText("Monto: *");
        jlValueCyDestiny.setPreferredSize(new java.awt.Dimension(159, 23));
        jPanel11.add(jlValueCyDestiny);

        jtfValueCyDestiny.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfValueCyDestiny.setText("1,000,000,000.00");
        jtfValueCyDestiny.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jtfValueCyDestiny);

        jbValueCyDestiny.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_action.gif"))); // NOI18N
        jbValueCyDestiny.setToolTipText("Calcular monto");
        jbValueCyDestiny.setFocusable(false);
        jbValueCyDestiny.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel11.add(jbValueCyDestiny);

        jlExchangeRateSystemDestiny.setText("Tipo de cambio sistema:");
        jlExchangeRateSystemDestiny.setPreferredSize(new java.awt.Dimension(118, 23));
        jPanel11.add(jlExchangeRateSystemDestiny);

        jtfExchangeRateSystemDestiny.setEditable(false);
        jtfExchangeRateSystemDestiny.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfExchangeRateSystemDestiny.setText("1,000,000,000.00");
        jtfExchangeRateSystemDestiny.setFocusable(false);
        jtfExchangeRateSystemDestiny.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jtfExchangeRateSystemDestiny);

        jbExchangeRateSystemDestiny.setText("jButton5");
        jbExchangeRateSystemDestiny.setToolTipText("Seleccionar tipo de cambio sistema");
        jbExchangeRateSystemDestiny.setFocusable(false);
        jbExchangeRateSystemDestiny.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel11.add(jbExchangeRateSystemDestiny);

        jbExchangeRateAccountCashViewDestiny.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_look.gif"))); // NOI18N
        jbExchangeRateAccountCashViewDestiny.setToolTipText("Ver tipo de cambio acumulado");
        jbExchangeRateAccountCashViewDestiny.setFocusable(false);
        jbExchangeRateAccountCashViewDestiny.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel11.add(jbExchangeRateAccountCashViewDestiny);

        jPanel14.add(jPanel11);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlValueDestiny.setText("Monto moneda local (ML): *");
        jlValueDestiny.setPreferredSize(new java.awt.Dimension(159, 23));
        jPanel12.add(jlValueDestiny);

        jtfValueDestiny.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfValueDestiny.setText("1,000,000,000.00");
        jtfValueDestiny.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jtfValueDestiny);

        jbValueDestiny.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_action.gif"))); // NOI18N
        jbValueDestiny.setToolTipText("Calcular monto moneda local");
        jbValueDestiny.setFocusable(false);
        jbValueDestiny.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel12.add(jbValueDestiny);

        jlExchangeRateDestiny.setText("Tipo de cambio: *");
        jlExchangeRateDestiny.setPreferredSize(new java.awt.Dimension(118, 23));
        jPanel12.add(jlExchangeRateDestiny);

        jtfExchangeRateDestiny.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfExchangeRateDestiny.setText("1,000,000,000.00");
        jtfExchangeRateDestiny.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jtfExchangeRateDestiny);

        jbExchangeRateDestiny.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_action.gif"))); // NOI18N
        jbExchangeRateDestiny.setToolTipText("Calcular tipo de cambio");
        jbExchangeRateDestiny.setFocusable(false);
        jbExchangeRateDestiny.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel12.add(jbExchangeRateDestiny);

        jbExchangeRateAccountCashDestiny.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_money.gif"))); // NOI18N
        jbExchangeRateAccountCashDestiny.setToolTipText("Asignar tipo de cambio acumulado");
        jbExchangeRateAccountCashDestiny.setFocusable(false);
        jbExchangeRateAccountCashDestiny.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel12.add(jbExchangeRateAccountCashDestiny);

        jPanel14.add(jPanel12);

        jPanel3.add(jPanel14, java.awt.BorderLayout.CENTER);

        jPanel2.add(jPanel3, java.awt.BorderLayout.CENTER);

        jPanel15.setLayout(new java.awt.GridLayout(1, 1, 0, 1));

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlConcept.setText("Concepto de la partida: *");
        jlConcept.setPreferredSize(new java.awt.Dimension(167, 23));
        jPanel5.add(jlConcept);

        jtfConcept.setText("CONCEPT");
        jtfConcept.setPreferredSize(new java.awt.Dimension(405, 23));
        jPanel5.add(jtfConcept);

        jPanel15.add(jPanel5);

        jPanel2.add(jPanel15, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-600)/2, (screenSize.height-395)/2, 600, 395);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void jcbFkCompanyBranchIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbFkCompanyBranchIdItemStateChanged
        if (!mbResetingForm) {
            if (evt.getStateChange() == ItemEvent.SELECTED) {
                itemStateChangedCompanyBranchDestiny();
            }
        }
    }//GEN-LAST:event_jcbFkCompanyBranchIdItemStateChanged

    private void jcbFkAccountCashDestinyIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbFkAccountCashDestinyIdItemStateChanged
        if (!mbResetingForm) {
            if (evt.getStateChange() == ItemEvent.SELECTED) {
                itemStateChangedAccountCashDestiny();
            }
        }
    }//GEN-LAST:event_jcbFkAccountCashDestinyIdItemStateChanged

    private void initComponentsExtra() {
        mvFields = new Vector<SFormField>();

        moFieldConcept = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtfConcept, jlConcept);
        moFieldConcept.setLengthMax(100);
        moFieldValueCyOrigin = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfValueCyOrigin, jlValueCyOrigin);
        moFieldValueCyOrigin.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsValueFormat());
        moFieldExchangeRateSystemOrigin = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfExchangeRateSystemOrigin, jlExchangeRateSystemOrigin);
        moFieldExchangeRateSystemOrigin.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsExchangeRateFormat());
        moFieldValueOrigin = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfValueOrigin, jlValueOrigin);
        moFieldValueOrigin.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsValueFormat());
        moFieldExchangeRateOrigin = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfExchangeRateOrigin, jlExchangeRateOrigin);
        moFieldExchangeRateOrigin.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsExchangeRateFormat());
        moFieldFkCompanyBranchId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkCompanyBranchId, jlFkCompanyBranchId);
        moFieldFkCompanyBranchId.setPickerButton(jbFkCompanyBranchId);
        moFieldFkAccountCashId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkAccountCashDestinyId, jlFkAccountCashDestinyId);
        moFieldFkAccountCashId.setPickerButton(jbFkAccountCashDestinyId);
        moFieldValueCyDestiny = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfValueCyDestiny, jlValueCyDestiny);
        moFieldValueCyDestiny.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsValueFormat());
        moFieldExchangeRateSystemDestiny = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfExchangeRateSystemDestiny, jlExchangeRateSystemDestiny);
        moFieldExchangeRateSystemDestiny.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsExchangeRateFormat());
        moFieldValueDestiny = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfValueDestiny, jlValueDestiny);
        moFieldValueDestiny.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsValueFormat());
        moFieldExchangeRateDestiny = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfExchangeRateDestiny, jlExchangeRateDestiny);
        moFieldExchangeRateDestiny.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsExchangeRateFormat());

        mvFields.add(moFieldConcept);
        mvFields.add(moFieldValueCyOrigin);
        mvFields.add(moFieldValueOrigin);
        mvFields.add(moFieldExchangeRateSystemOrigin);
        mvFields.add(moFieldExchangeRateOrigin);
        mvFields.add(moFieldFkCompanyBranchId);
        mvFields.add(moFieldFkAccountCashId);
        mvFields.add(moFieldValueCyDestiny);
        mvFields.add(moFieldValueDestiny);
        mvFields.add(moFieldExchangeRateSystemDestiny);
        mvFields.add(moFieldExchangeRateDestiny);

        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);
        jbExchangeRateOrigin.addActionListener(this);
        jbExchangeRateSystemOrigin.addActionListener(this);
        jbValueCyOrigin.addActionListener(this);
        jbValueOrigin.addActionListener(this);
        jbExchangeRateAccountCashOrigin.addActionListener(this);
        jbExchangeRateAccountCashViewOrigin.addActionListener(this);
        jbFkCompanyBranchId.addActionListener(this);
        jbFkAccountCashDestinyId.addActionListener(this);
        jbExchangeRateDestiny.addActionListener(this);
        jbExchangeRateSystemDestiny.addActionListener(this);
        jbValueCyDestiny.addActionListener(this);
        jbValueDestiny.addActionListener(this);
        jbExchangeRateAccountCashDestiny.addActionListener(this);
        jbExchangeRateAccountCashViewDestiny.addActionListener(this);

        jtfValueCyOrigin.addFocusListener(this);
        jtfValueOrigin.addFocusListener(this);
        jtfExchangeRateOrigin.addFocusListener(this);
        jtfValueCyDestiny.addFocusListener(this);
        jtfValueDestiny.addFocusListener(this);
        jtfExchangeRateDestiny.addFocusListener(this);

        moParamRecord = null;

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction action = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), action, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            jtfConcept.requestFocus();
        }

        renderCurrencySettings();
    }

    private void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    private double obtainTodayExchangeRateOrigin() {
        double rate = 0;

        try {
            rate = SDataUtilities.obtainExchangeRate(miClient,
                moParamRecord.getDbmsDataAccountCash().getFkCurrencyId(), moParamRecord.getDate());
        }
        catch (Exception e) {
            SLibUtilities.printOutException(this, e);
        }

        return rate;
    }

    private double obtainTodayExchangeRate() {
        double rate = 0;

        try {
            rate = SDataUtilities.obtainExchangeRate(miClient,
                moCurrencyDestiny.getPkCurrencyId(), moParamRecord.getDate());
        }
        catch (Exception e) {
            SLibUtilities.printOutException(this, e);
        }

        return rate;
    }

    private double obtainExchangeRateAccountCashOrigin() {
        double rate = 0;
        double[] balance = null;

        try {
            balance = obtainCurrentAccountCashBalanceOrigin();
            rate = balance[0] == 0d ? 0d : balance[0] / balance[1];
        }
        catch (Exception e) {
            SLibUtilities.printOutException(this, e);
        }

        return rate;
    }

    private double[] obtainCurrentAccountCashBalanceOrigin() {
        double[] balance = new double[2];

        try {
            balance = SDataUtilities.obtainAccountCashBalanceUpdated(miClient,
                moParamRecord.getDbmsDataAccountCash().getFkCurrencyId(), moParamRecord.getDate(),
                moParamRecord.getDbmsDataAccountCash().getPrimaryKey(),
                moParamRecord.getDbmsDataAccountCash().getFkAccountCashCategoryId() == SDataConstantsSys.FINS_CT_ACC_CASH_CASH ?
                    SDataConstantsSys.FINS_TP_SYS_MOV_CASH_CASH : SDataConstantsSys.FINS_TP_SYS_MOV_CASH_BANK,
                moParamRecord, null);
        }
        catch (Exception e) {
            SLibUtilities.printOutException(this, e);
        }

        return balance;
    }

    private void renderCurrencySettings() {
        SDataBizPartnerBranch oBranch = null;

        oBranch = (SDataBizPartnerBranch) SDataUtilities.readRegistry(miClient,
                SDataConstants.BPSU_BPB, new int[] { moParamRecord.getDbmsDataAccountCash().getPkCompanyBranchId() }, SLibConstants.EXEC_MODE_SILENT);
        moCurrency = (SDataCurrency) SDataUtilities.readRegistry(miClient,
                SDataConstants.CFGU_CUR, new int[] { moParamRecord.getDbmsDataAccountCash().getFkCurrencyId() }, SLibConstants.EXEC_MODE_SILENT);

        jtfCompanyBranch.setText(oBranch.getBizPartnerBranch());
        jtfAccountCashOrigin.setText(moParamRecord.getDbmsDataAccountCash().getDbmsCompanyBranchEntity().getEntity());
        jtfCodeOrigin.setText(moParamRecord.getDbmsDataAccountCash().getDbmsCompanyBranchEntity().getCode());
        jtfCurrencyOrigin.setText(moCurrency.getCurrency());

        if (moParamRecord.getDbmsDataAccountCash().getFkCurrencyId() != miClient.getSessionXXX().getParamsErp().getFkCurrencyId()) {
           jtfValueOrigin.setEnabled(true);
           jbValueOrigin.setEnabled(true);
           jtfExchangeRateOrigin.setEnabled(true);
           jbExchangeRateOrigin.setEnabled(true);
           jbExchangeRateSystemOrigin.setEnabled(true);
           jbExchangeRateAccountCashViewOrigin.setEnabled(true);
           jbExchangeRateAccountCashOrigin.setEnabled(true);

           if (moFieldExchangeRateOrigin.getDouble() == 0) {
               moFieldExchangeRateOrigin.setFieldValue(obtainExchangeRateAccountCashOrigin());
           }
        }
        else {
           jtfValueOrigin.setEnabled(false);
           jbValueOrigin.setEnabled(false);
           jtfExchangeRateOrigin.setEnabled(false);
           jbExchangeRateSystemOrigin.setEnabled(false);
           jbExchangeRateOrigin.setEnabled(false);
           jbExchangeRateAccountCashViewOrigin.setEnabled(false);
           jbExchangeRateAccountCashOrigin.setEnabled(false);

           moFieldExchangeRateSystemOrigin.setFieldValue(1);
           moFieldExchangeRateOrigin.setFieldValue(1);
        }
    }

    private void renderCurrencySettingsDestiny() {
        if (moAccountCashDestiny != null) {
            if (moFieldFkAccountCashId.getKeyAsIntArray()[1] > 0 && moAccountCashDestiny.getFkCurrencyId() != miClient.getSessionXXX().getParamsErp().getFkCurrencyId()) {
               jtfValueDestiny.setEnabled(true);
               jbValueDestiny.setEnabled(true);
               jtfExchangeRateDestiny.setEnabled(true);
               jbExchangeRateDestiny.setEnabled(true);
               jbExchangeRateSystemDestiny.setEnabled(true);
               jbExchangeRateAccountCashViewDestiny.setEnabled(true);
               jbExchangeRateAccountCashDestiny.setEnabled(true);

               moFieldExchangeRateDestiny.setFieldValue(obtainTodayExchangeRate());
            }
            else {
               jtfValueDestiny.setEnabled(false);
               jbValueDestiny.setEnabled(false);
               jtfExchangeRateDestiny.setEnabled(false);
               jbExchangeRateSystemDestiny.setEnabled(false);
               jbExchangeRateDestiny.setEnabled(false);
               jbExchangeRateAccountCashViewDestiny.setEnabled(false);
               jbExchangeRateAccountCashDestiny.setEnabled(false);

               moFieldExchangeRateSystemDestiny.setFieldValue(1);
               moFieldExchangeRateDestiny.setFieldValue(1);
            }
        }
        else {
            jtfValueDestiny.setEnabled(false);
           jbValueDestiny.setEnabled(false);
           jtfExchangeRateDestiny.setEnabled(false);
           jbExchangeRateSystemDestiny.setEnabled(false);
           jbExchangeRateDestiny.setEnabled(false);
           jbExchangeRateAccountCashViewDestiny.setEnabled(false);
           jbExchangeRateAccountCashDestiny.setEnabled(false);

           moFieldExchangeRateSystemDestiny.setFieldValue(1);
           moFieldExchangeRateDestiny.setFieldValue(1);
        }
    }

    private void actionExchangeRateSystemOrigin() {
        double rate = miClient.pickExchangeRate(moParamRecord.getDbmsDataAccountCash().getFkCurrencyId(), miClient.getSessionXXX().getWorkingDate());

        if (rate != 0d) {
            moFieldExchangeRateSystemOrigin.setFieldValue(rate);
            if (moFieldExchangeRateOrigin.getDouble() == 0) {
                moFieldExchangeRateOrigin.setFieldValue(rate);
            }
            jtfExchangeRateOrigin.requestFocus();
        }
    }

    private void actionValueCyOrigin() {
        if (moFieldExchangeRateOrigin.getDouble() == 0) {
            jtfExchangeRateOrigin.requestFocus();
        }
        else {
            moFieldValueCyOrigin.setFieldValue(SLibUtilities.round(moFieldValueOrigin.getDouble() / moFieldExchangeRateOrigin.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
            jtfValueCyOrigin.requestFocus();
        }
    }

    private void actionValueOrigin() {
        if (moFieldExchangeRateOrigin.getDouble() == 0) {
            jtfExchangeRateOrigin.requestFocus();
        }
        else {
            moFieldValueOrigin.setFieldValue(SLibUtilities.round(moFieldValueCyOrigin.getDouble() * moFieldExchangeRateOrigin.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
            jtfValueOrigin.requestFocus();
        }
    }

    private void actionExchangeRateOrigin() {
        if (moFieldValueCyOrigin.getDouble() != 0) {

            if (moFieldValueOrigin.getDouble() == 0) {
                jtfValueCyOrigin.requestFocus();
            }
            else {
                moFieldExchangeRateOrigin.setFieldValue(moFieldValueOrigin.getDouble() / moFieldValueCyOrigin.getDouble());
                jtfExchangeRateOrigin.requestFocus();
            }
        }
        else if (moFieldValueOrigin.getDouble() != 0) {
            jtfValueOrigin.requestFocus();
        }
        else {
            jtfExchangeRateOrigin.requestFocus();
        }
    }

    private void actionExchangeRateAccountCashOrigin() {
        moFieldExchangeRateOrigin.setFieldValue(obtainExchangeRateAccountCashOrigin());
        jtfExchangeRateOrigin.requestFocus();
    }

    private void actionExchangeRateAccountCashViewOrigin() {
        double[] balance = null;

        try {
            balance = obtainCurrentAccountCashBalanceOrigin();

            miClient.showMsgBoxInformation(
                    "Tipo de cambio acumulado al día: " + miClient.getSessionXXX().getFormatters().getDateFormat().format(moParamRecord.getDate()) + "\n" +
                    "Saldo " + miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getKey() + ": $ " +
                    miClient.getSessionXXX().getFormatters().getDecimalsValueFormat().format(balance[0]) + ".\n" +
                    "Saldo " + moCurrency.getKey() + ": $ " +
                    miClient.getSessionXXX().getFormatters().getDecimalsValueFormat().format(balance[1]) + ".\n" +
                    "Tipo de cambio acumulado: " + miClient.getSessionXXX().getFormatters().getDecimalsExchangeRateFormat().format(balance[1] == 0d ? 0d : balance[0] / balance[1]) + ".");
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }
    }

    private void focusLostValueCyOrigin() {
        if (moFieldValueCyOrigin.getDouble() != 0) {

            if (!jtfValueOrigin.isEnabled() || moFieldValueOrigin.getDouble() == 0) {
                moFieldValueOrigin.setFieldValue(SLibUtilities.round(moFieldValueCyOrigin.getDouble() * moFieldExchangeRateOrigin.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
            }
            else if (moFieldExchangeRateOrigin.getDouble() == 0) {
                moFieldExchangeRateOrigin.setFieldValue(SLibUtilities.round(moFieldValueOrigin.getDouble() / moFieldValueCyOrigin.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsExchangeRate()));
            }
        }
    }

    private void focusLostValueOrigin() {
        if (moFieldValueOrigin.getDouble() != 0) {

            if (moFieldValueCyOrigin.getDouble() == 0 && moFieldExchangeRateOrigin.getDouble() != 0) {
                moFieldValueCyOrigin.setFieldValue(SLibUtilities.round(moFieldValueOrigin.getDouble() / moFieldExchangeRateOrigin.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
            }
            else if (moFieldValueCyOrigin.getDouble() != 0 && moFieldExchangeRateOrigin.getDouble() == 0) {
                moFieldExchangeRateOrigin.setFieldValue(SLibUtilities.round(moFieldValueOrigin.getDouble() / moFieldValueCyOrigin.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsExchangeRate()));
            }
        }
    }

    private void focusLostExchangeRateOrigin() {
        if (moFieldValueCyOrigin.getDouble() != 0 && moFieldValueOrigin.getDouble() == 0) {
            moFieldValueOrigin.setFieldValue(SLibUtilities.round(moFieldValueCyOrigin.getDouble() * moFieldExchangeRateOrigin.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
        }
    }

    private void populateComboBoxAccountCashDestiny() {
        if (moFieldFkCompanyBranchId.getKeyAsIntArray()[0] > 0) {
            SFormUtilities.populateComboBox(miClient, jcbFkAccountCashDestinyId, SDataConstants.FIN_ACC_CASH, moFieldFkCompanyBranchId.getKeyAsIntArray());
        }
    }

    private void itemStateChangedCompanyBranchDestiny() {
        if (moFieldFkCompanyBranchId.getKeyAsIntArray()[0] > 0) {
            populateComboBoxAccountCashDestiny();
            jcbFkAccountCashDestinyId.setEnabled(true);
        }
        else {
            jcbFkAccountCashDestinyId.setEnabled(false);
        }
    }

    private void itemStateChangedAccountCashDestiny() {
        if (moFieldFkAccountCashId.getKeyAsIntArray()[1] > 0) {
            moAccountCashDestiny = (SDataAccountCash) SDataUtilities.readRegistry(miClient, SDataConstants.FIN_ACC_CASH,
                    moFieldFkAccountCashId.getKeyAsIntArray(), SLibConstants.EXEC_MODE_SILENT);
            moCurrencyDestiny = (SDataCurrency) SDataUtilities.readRegistry(miClient, SDataConstants.CFGU_CUR,
                    new int[] { moAccountCashDestiny.getFkCurrencyId() }, SLibConstants.EXEC_MODE_SILENT);
            jtfCurrencyDestiny.setText(moCurrencyDestiny.getCurrency());
        }
        else {
            jtfCurrencyDestiny.setText("");
        }

        renderCurrencySettingsDestiny();
    }

    private double obtainExchangeRateAccountCashDestiny() {
        double rate = 0;
        double[] balance = null;

        try {
            balance = obtainCurrentAccountCashBalanceDestiny();
            rate = balance[0] == 0d ? 0d : balance[0] / balance[1];
        }
        catch (Exception e) {
            SLibUtilities.printOutException(this, e);
        }

        return rate;
    }

    private double[] obtainCurrentAccountCashBalanceDestiny() {
        double[] balance = new double[2];

        try {
            balance = SDataUtilities.obtainAccountCashBalanceUpdated(miClient,
                moParamRecord.getDbmsDataAccountCash().getFkCurrencyId(), moParamRecord.getDate(),
                moFieldFkAccountCashId.getKeyAsIntArray(),
                moParamRecord.getDbmsDataAccountCash().getFkAccountCashCategoryId() == SDataConstantsSys.FINS_CT_ACC_CASH_CASH ?
                    SDataConstantsSys.FINS_TP_SYS_MOV_CASH_CASH : SDataConstantsSys.FINS_TP_SYS_MOV_CASH_BANK,
                moParamRecord, null);
        }
        catch (Exception e) {
            SLibUtilities.printOutException(this, e);
        }

        return balance;
    }

    private void actionExchangeRateSystemDestiny() {
        double rate = miClient.pickExchangeRate(moCurrencyDestiny.getPkCurrencyId(), miClient.getSessionXXX().getWorkingDate());

        if (rate != 0d) {
            moFieldExchangeRateSystemDestiny.setFieldValue(rate);
            if (moFieldExchangeRateDestiny.getDouble() == 0) {
                moFieldExchangeRateDestiny.setFieldValue(rate);
            }
            jtfExchangeRateDestiny.requestFocus();
        }
    }

    private void actionValueCyDestiny() {
        if (moFieldExchangeRateDestiny.getDouble() == 0) {
            jtfExchangeRateDestiny.requestFocus();
        }
        else {
            moFieldValueCyDestiny.setFieldValue(SLibUtilities.round(moFieldValueDestiny.getDouble() / moFieldExchangeRateDestiny.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
            jtfValueCyDestiny.requestFocus();
        }
    }

    private void actionValueDestiny() {
        if (moFieldExchangeRateDestiny.getDouble() == 0) {
            jtfExchangeRateDestiny.requestFocus();
        }
        else {
            moFieldValueDestiny.setFieldValue(SLibUtilities.round(moFieldValueCyDestiny.getDouble() * moFieldExchangeRateDestiny.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
            jtfValueDestiny.requestFocus();
        }
    }

    private void actionExchangeRateDestiny() {
        if (moFieldValueCyDestiny.getDouble() != 0) {

            if (moFieldValueDestiny.getDouble() == 0) {
                jtfValueCyDestiny.requestFocus();
            }
            else {
                moFieldExchangeRateDestiny.setFieldValue(moFieldValueDestiny.getDouble() / moFieldValueCyDestiny.getDouble());
                jtfExchangeRateDestiny.requestFocus();
            }
        }
        else if (moFieldValueDestiny.getDouble() != 0) {
            jtfValueDestiny.requestFocus();
        }
        else {
            jtfExchangeRateDestiny.requestFocus();
        }
    }

    private void actionExchangeRateAccountCashDestiny() {
        moFieldExchangeRateDestiny.setFieldValue(obtainExchangeRateAccountCashDestiny());
        jtfExchangeRateDestiny.requestFocus();
    }

    private void actionExchangeRateAccountCashViewDestiny() {
        double[] balance = null;

        try {
            balance = obtainCurrentAccountCashBalanceDestiny();

            miClient.showMsgBoxInformation(
                    "Tipo de cambio acumulado al día: " + miClient.getSessionXXX().getFormatters().getDateFormat().format(moParamRecord.getDate()) + "\n" +
                    "Saldo " + miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getKey() + ": $ " +
                    miClient.getSessionXXX().getFormatters().getDecimalsValueFormat().format(balance[0]) + ".\n" +
                    "Saldo " + moCurrency.getKey() + ": $ " +
                    miClient.getSessionXXX().getFormatters().getDecimalsValueFormat().format(balance[1]) + ".\n" +
                    "Tipo de cambio acumulado: " + miClient.getSessionXXX().getFormatters().getDecimalsExchangeRateFormat().format(balance[1] == 0d ? 0d : balance[0] / balance[1]) + ".");
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }
    }

    private void focusLostValueCyDestiny() {
        if (moFieldValueCyDestiny.getDouble() != 0) {

            if (!jtfValueDestiny.isEnabled() || moFieldValueDestiny.getDouble() == 0) {
                moFieldValueDestiny.setFieldValue(SLibUtilities.round(moFieldValueCyDestiny.getDouble() * moFieldExchangeRateDestiny.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
            }
            else if (moFieldExchangeRateDestiny.getDouble() == 0) {
                moFieldExchangeRateDestiny.setFieldValue(SLibUtilities.round(moFieldValueDestiny.getDouble() / moFieldValueCyDestiny.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsExchangeRate()));
            }
        }
    }

    private void focusLostValueDestiny() {
        if (moFieldValueDestiny.getDouble() != 0) {

            if (moFieldValueCyDestiny.getDouble() == 0 && moFieldExchangeRateDestiny.getDouble() != 0) {
                moFieldValueCyDestiny.setFieldValue(SLibUtilities.round(moFieldValueDestiny.getDouble() / moFieldExchangeRateDestiny.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
            }
            else if (moFieldValueCyDestiny.getDouble() != 0 && moFieldExchangeRateDestiny.getDouble() == 0) {
                moFieldExchangeRateDestiny.setFieldValue(SLibUtilities.round(moFieldValueDestiny.getDouble() / moFieldValueCyDestiny.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsExchangeRate()));
            }
        }
    }

    private void focusLostExchangeRateDestiny() {
        if (moFieldValueCyDestiny.getDouble() != 0 && moFieldValueDestiny.getDouble() == 0) {
            moFieldValueDestiny.setFieldValue(SLibUtilities.round(moFieldValueCyDestiny.getDouble() * moFieldExchangeRateDestiny.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
        }
    }

    private void actionFkCompanyBranchId() {
        miClient.pickOption(SDataConstants.BPSU_BPB, moFieldFkCompanyBranchId, new int[] { miClient.getSessionXXX().getCompany().getPkCompanyId() });
    }

    private void actionFkAccountCashDestinyId() {
        miClient.pickOption(SDataConstants.FIN_ACC_CASH, moFieldFkAccountCashId, moFieldFkCompanyBranchId.getKeyAsIntArray());
    }

    private erp.mfin.data.SDataRecordEntry[] prepareRecordEntries() {
        SDataRecordEntry oEntryMoneyIn = new SDataRecordEntry();
        SDataRecordEntry oEntryMoneyOut = new SDataRecordEntry();
        SDataRecordEntry oEntryGainLoss = null;

        oEntryMoneyIn.setConcept(moFieldConcept.getString());
        oEntryMoneyIn.setCredit(moFieldValueOrigin.getDouble());
        oEntryMoneyIn.setExchangeRate(moFieldExchangeRateOrigin.getDouble());
        oEntryMoneyIn.setExchangeRateSystem(moFieldExchangeRateSystemOrigin.getDouble());
        oEntryMoneyIn.setCreditCy(moFieldValueCyOrigin.getDouble());
        oEntryMoneyIn.setFkAccountIdXXX(moParamRecord.getDbmsDataAccountCash().getFkAccountId());
        oEntryMoneyIn.setFkAccountingMoveTypeId(SDataConstantsSys.FINS_CLS_ACC_MOV_JOURNAL[0]);
        oEntryMoneyIn.setFkAccountingMoveClassId(SDataConstantsSys.FINS_CLS_ACC_MOV_JOURNAL[1]);
        oEntryMoneyIn.setFkAccountingMoveSubclassId(SDataConstantsSys.FINS_CLS_ACC_MOV_JOURNAL[2]);
        oEntryMoneyIn.setFkSystemMoveClassId(SModSysConsts.FINS_TP_SYS_MOV_MI_TRA[0]);
        oEntryMoneyIn.setFkSystemMoveTypeId(SModSysConsts.FINS_TP_SYS_MOV_MI_TRA[1]);

        if (moParamRecord.getDbmsDataAccountCash().getFkAccountCashCategoryId() == SDataConstantsSys.FINS_CT_ACC_CASH_CASH) {
            oEntryMoneyIn.setFkSystemAccountClassId(SModSysConsts.FINS_TP_SYS_ACC_ENT_CSH_CSH[0]);
            oEntryMoneyIn.setFkSystemAccountTypeId(SModSysConsts.FINS_TP_SYS_ACC_ENT_CSH_CSH[1]);
            oEntryMoneyIn.setFkSystemMoveCategoryIdXXX(SDataConstantsSys.FINS_TP_SYS_MOV_CASH_CASH[0]);
            oEntryMoneyIn.setFkSystemMoveTypeIdXXX(SDataConstantsSys.FINS_TP_SYS_MOV_CASH_CASH[1]);
        }
        else {
            oEntryMoneyIn.setFkSystemAccountClassId(SModSysConsts.FINS_TP_SYS_ACC_ENT_CSH_BNK[0]);
            oEntryMoneyIn.setFkSystemAccountTypeId(SModSysConsts.FINS_TP_SYS_ACC_ENT_CSH_BNK[1]);
            oEntryMoneyIn.setFkSystemMoveCategoryIdXXX(SDataConstantsSys.FINS_TP_SYS_MOV_CASH_BANK[0]);
            oEntryMoneyIn.setFkSystemMoveTypeIdXXX(SDataConstantsSys.FINS_TP_SYS_MOV_CASH_BANK[1]);
        }

        oEntryMoneyIn.setFkCurrencyId(moParamRecord.getDbmsDataAccountCash().getFkCurrencyId());
        oEntryMoneyIn.setFkCompanyBranchId_n(moParamRecord.getDbmsDataAccountCash().getPkCompanyBranchId());
        oEntryMoneyIn.setFkEntityId_n(moParamRecord.getDbmsDataAccountCash().getPkAccountCashId());
        oEntryMoneyIn.setDbmsAccount(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FIN_ACC, new Object[] { oEntryMoneyIn.getFkAccountIdXXX() }));
        oEntryMoneyIn.setDbmsAccountComplement(moParamRecord.getDbmsDataAccountCash().getAuxEntity());
        oEntryMoneyIn.setDbmsAccountingMoveSubclass(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FINS_CLS_ACC_MOV, SDataConstantsSys.FINS_CLS_ACC_MOV_JOURNAL));
        oEntryMoneyIn.setDbmsCurrencyKey(moCurrency.getKey());
        oEntryMoneyIn.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
        oEntryMoneyIn.setFkUserEditId(miClient.getSession().getUser().getPkUserId());

        oEntryMoneyOut.setConcept(moFieldConcept.getString());
        oEntryMoneyOut.setDebit(moFieldValueDestiny.getDouble());
        oEntryMoneyOut.setExchangeRate(moFieldExchangeRateDestiny.getDouble());
        oEntryMoneyOut.setExchangeRateSystem(moFieldExchangeRateSystemDestiny.getDouble());
        oEntryMoneyOut.setDebitCy(moFieldValueCyDestiny.getDouble());
        oEntryMoneyOut.setFkAccountIdXXX(moAccountCashDestiny.getFkAccountId());
        oEntryMoneyOut.setFkAccountingMoveTypeId(SDataConstantsSys.FINS_CLS_ACC_MOV_JOURNAL[0]);
        oEntryMoneyOut.setFkAccountingMoveClassId(SDataConstantsSys.FINS_CLS_ACC_MOV_JOURNAL[1]);
        oEntryMoneyOut.setFkAccountingMoveSubclassId(SDataConstantsSys.FINS_CLS_ACC_MOV_JOURNAL[2]);
        oEntryMoneyOut.setFkSystemMoveClassId(SModSysConsts.FINS_TP_SYS_MOV_MO_TRA[0]);
        oEntryMoneyOut.setFkSystemMoveTypeId(SModSysConsts.FINS_TP_SYS_MOV_MO_TRA[1]);

        if (moAccountCashDestiny.getFkAccountCashCategoryId() == SDataConstantsSys.FINS_CT_ACC_CASH_CASH) {
            oEntryMoneyOut.setFkSystemAccountClassId(SModSysConsts.FINS_TP_SYS_ACC_ENT_CSH_CSH[0]);
            oEntryMoneyOut.setFkSystemAccountTypeId(SModSysConsts.FINS_TP_SYS_ACC_ENT_CSH_CSH[1]);
            oEntryMoneyOut.setFkSystemMoveCategoryIdXXX(SDataConstantsSys.FINS_TP_SYS_MOV_CASH_CASH[0]);
            oEntryMoneyOut.setFkSystemMoveTypeIdXXX(SDataConstantsSys.FINS_TP_SYS_MOV_CASH_CASH[1]);
        }
        else {
            oEntryMoneyOut.setFkSystemAccountClassId(SModSysConsts.FINS_TP_SYS_ACC_ENT_CSH_BNK[0]);
            oEntryMoneyOut.setFkSystemAccountTypeId(SModSysConsts.FINS_TP_SYS_ACC_ENT_CSH_BNK[1]);
            oEntryMoneyOut.setFkSystemMoveCategoryIdXXX(SDataConstantsSys.FINS_TP_SYS_MOV_CASH_BANK[0]);
            oEntryMoneyOut.setFkSystemMoveTypeIdXXX(SDataConstantsSys.FINS_TP_SYS_MOV_CASH_BANK[1]);
        }

        oEntryMoneyOut.setFkCurrencyId(moCurrencyDestiny.getPkCurrencyId());
        oEntryMoneyOut.setFkCompanyBranchId_n(moFieldFkAccountCashId.getKeyAsIntArray()[0]);
        oEntryMoneyOut.setFkEntityId_n(moFieldFkAccountCashId.getKeyAsIntArray()[1]);
        oEntryMoneyOut.setDbmsAccount(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FIN_ACC, new Object[] { oEntryMoneyOut.getFkAccountIdXXX() }));
        oEntryMoneyOut.setDbmsAccountComplement(moAccountCashDestiny.getAuxEntity());
        oEntryMoneyOut.setDbmsAccountingMoveSubclass(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FINS_CLS_ACC_MOV, SDataConstantsSys.FINS_CLS_ACC_MOV_JOURNAL));
        oEntryMoneyOut.setDbmsCurrencyKey(moCurrencyDestiny.getKey());
        oEntryMoneyOut.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
        oEntryMoneyOut.setFkUserEditId(miClient.getSession().getUser().getPkUserId());

        /*if (moFieldValueOrigin.getDouble() - moFieldValueDestiny.getDouble() != 0) { XXX
            oEntryGainLoss = new SDataRecordEntry();
            oEntryGainLoss.setConcept(moFieldConcept.getString());
            oEntryGainLoss.setDebit(moFieldValueOrigin.getDouble() - moFieldValueDestiny.getDouble() > 0 ? moFieldValueOrigin.getDouble() - moFieldValueDestiny.getDouble() : 0);
            oEntryGainLoss.setCredit(moFieldValueOrigin.getDouble() - moFieldValueDestiny.getDouble() < 0 ? (moFieldValueOrigin.getDouble() - moFieldValueDestiny.getDouble()) * -1 : 0);
            oEntryGainLoss.setExchangeRate(1);
            oEntryGainLoss.setExchangeRateSystem(1);
            oEntryGainLoss.setDebitCy(moFieldValueOrigin.getDouble() - moFieldValueDestiny.getDouble() > 0 ? moFieldValueOrigin.getDouble() - moFieldValueDestiny.getDouble() : 0);
            oEntryGainLoss.setCreditCy(moFieldValueOrigin.getDouble() - moFieldValueDestiny.getDouble() < 0 ? (moFieldValueOrigin.getDouble() - moFieldValueDestiny.getDouble()) * -1 : 0);
            oEntryGainLoss.setIsExchangeDifference(true);
            oEntryGainLoss.setFkAccountIdXXX(moFieldValueOrigin.getDouble() - moFieldValueDestiny.getDouble() < 0 ? miClient.getSessionXXX().getParamsCompany().getFkAccountDifferenceIncomeId() :
                miClient.getSessionXXX().getParamsCompany().getFkAccountDifferenceExpenseId());
            oEntryGainLoss.setFkAccountingMoveTypeId(SDataConstantsSys.FINS_CLS_ACC_MOV_JOURNAL[0]);
            oEntryGainLoss.setFkAccountingMoveClassId(SDataConstantsSys.FINS_CLS_ACC_MOV_JOURNAL[1]);
            oEntryGainLoss.setFkAccountingMoveSubclassId(SDataConstantsSys.FINS_CLS_ACC_MOV_JOURNAL[2]);
            oEntryGainLoss.setFkSystemMoveCategoryIdXXX(SDataConstantsSys.FINS_TP_SYS_MOV_NA[0]);
            oEntryGainLoss.setFkSystemMoveTypeIdXXX(SDataConstantsSys.FINS_TP_SYS_MOV_NA[1]);
            oEntryGainLoss.setFkCurrencyId(miClient.getSessionXXX().getParamsErp().getFkCurrencyId());
            oEntryGainLoss.setFkCompanyBranchId_n(moFieldValueOrigin.getDouble() - moFieldValueDestiny.getDouble() < 0 ?
                moFieldFkAccountCashId.getKeyAsIntArray()[0] : moParamRecord.getDbmsDataAccountCash().getPkCompanyBranchId());
            oEntryGainLoss.setFkEntityId_n(moFieldValueOrigin.getDouble() - moFieldValueDestiny.getDouble() < 0 ?
                moFieldFkAccountCashId.getKeyAsIntArray()[1] : moParamRecord.getDbmsDataAccountCash().getPkAccountCashId());
            oEntryGainLoss.setDbmsAccount(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FIN_ACC,
                new Object[] { moFieldValueOrigin.getDouble() - moFieldValueDestiny.getDouble() < 0 ? miClient.getSessionXXX().getParamsCompany().getFkAccountDifferenceIncomeId() :
                miClient.getSessionXXX().getParamsCompany().getFkAccountDifferenceExpenseId() }));
            oEntryGainLoss.setDbmsAccountingMoveSubclass(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FINS_CLS_ACC_MOV, SDataConstantsSys.FINS_CLS_ACC_MOV_JOURNAL));
            oEntryGainLoss.setDbmsCurrencyKey(miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getKey());
            oEntryGainLoss.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
            oEntryGainLoss.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
        }*/

        return new SDataRecordEntry[] { oEntryMoneyIn, oEntryMoneyOut, oEntryGainLoss };
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbExchangeRateAccountCashDestiny;
    private javax.swing.JButton jbExchangeRateAccountCashOrigin;
    private javax.swing.JButton jbExchangeRateAccountCashViewDestiny;
    private javax.swing.JButton jbExchangeRateAccountCashViewOrigin;
    private javax.swing.JButton jbExchangeRateDestiny;
    private javax.swing.JButton jbExchangeRateOrigin;
    private javax.swing.JButton jbExchangeRateSystemDestiny;
    private javax.swing.JButton jbExchangeRateSystemOrigin;
    private javax.swing.JButton jbFkAccountCashDestinyId;
    private javax.swing.JButton jbFkCompanyBranchId;
    private javax.swing.JButton jbOk;
    private javax.swing.JButton jbValueCyDestiny;
    private javax.swing.JButton jbValueCyOrigin;
    private javax.swing.JButton jbValueDestiny;
    private javax.swing.JButton jbValueOrigin;
    private javax.swing.JComboBox jcbFkAccountCashDestinyId;
    private javax.swing.JComboBox jcbFkCompanyBranchId;
    private javax.swing.JLabel jlAccountCashOrigin;
    private javax.swing.JLabel jlConcept;
    private javax.swing.JLabel jlCurrencyDestiny;
    private javax.swing.JLabel jlCurrencyOrigin;
    private javax.swing.JLabel jlExchangeRateDestiny;
    private javax.swing.JLabel jlExchangeRateOrigin;
    private javax.swing.JLabel jlExchangeRateSystemDestiny;
    private javax.swing.JLabel jlExchangeRateSystemOrigin;
    private javax.swing.JLabel jlFkAccountCashDestinyId;
    private javax.swing.JLabel jlFkCompanyBranchId;
    private javax.swing.JLabel jlValueCyDestiny;
    private javax.swing.JLabel jlValueCyOrigin;
    private javax.swing.JLabel jlValueDestiny;
    private javax.swing.JLabel jlValueOrigin;
    private javax.swing.JTextField jtfAccountCashOrigin;
    private javax.swing.JTextField jtfCodeOrigin;
    private javax.swing.JTextField jtfCompanyBranch;
    private javax.swing.JTextField jtfConcept;
    private javax.swing.JTextField jtfCurrencyDestiny;
    private javax.swing.JTextField jtfCurrencyOrigin;
    private javax.swing.JTextField jtfExchangeRateDestiny;
    private javax.swing.JTextField jtfExchangeRateOrigin;
    private javax.swing.JTextField jtfExchangeRateSystemDestiny;
    private javax.swing.JTextField jtfExchangeRateSystemOrigin;
    private javax.swing.JTextField jtfValueCyDestiny;
    private javax.swing.JTextField jtfValueCyOrigin;
    private javax.swing.JTextField jtfValueDestiny;
    private javax.swing.JTextField jtfValueOrigin;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        moAccountCashDestiny = null;
        moCurrency = null;
        moCurrencyDestiny = null;

        jcbFkAccountCashDestinyId.removeAllItems();
        jcbFkAccountCashDestinyId.setEnabled(false);
        jtfCurrencyDestiny.setText("");
        renderCurrencySettingsDestiny();
        mbResetingForm = false;
    }

    @Override
    public void formRefreshCatalogues() {
        mbResetingForm = true;
        SFormUtilities.populateComboBox(miClient, jcbFkCompanyBranchId, SDataConstants.BPSU_BPB, new int[] { miClient.getSessionXXX().getCompany().getPkCompanyId() });
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        String message = "";
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        if (!validation.getIsError()) {
            message = SDataUtilities.validateExchangeRate(miClient, moFieldValueCyOrigin.getDouble(), moFieldExchangeRateOrigin.getDouble(), moFieldValueOrigin.getDouble(), jlValueCyOrigin.getText());
            if (message.length() > 0) {
                if (miClient.showMsgBoxConfirm(message + "\n" + SLibConstants.MSG_CNF_MSG_CONT) != JOptionPane.YES_OPTION) {
                    validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_VALUE_DIF + "'" + jlValueCyOrigin.getText() + "'.");
                    validation.setComponent(jtfValueCyOrigin);
                }
            }
            else {
                message = SDataUtilities.validateExchangeRate(miClient, moFieldValueCyDestiny.getDouble(), moFieldExchangeRateDestiny.getDouble(), moFieldValueDestiny.getDouble(), jlValueCyOrigin.getText());
                if (message.length() > 0) {
                    if (miClient.showMsgBoxConfirm(message + "\n" + SLibConstants.MSG_CNF_MSG_CONT) != JOptionPane.YES_OPTION) {
                        validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_VALUE_DIF + "'" + jlValueCyDestiny.getText() + "'.");
                        validation.setComponent(jtfValueCyDestiny);
                    }
                }
            }
        }

        if (!validation.getIsError()) {
            if ((moFieldValueOrigin.getDouble() - moFieldValueDestiny.getDouble() != 0) &&
                    miClient.showMsgBoxConfirm("Hay una diferencia en los montos origen y destino. ¿Desea continuar?") != JOptionPane.YES_OPTION) {
                validation.setMessage("Los montos origen y destino no coinciden");
                validation.setComponent(jtfValueCyOrigin);
            }
        }


        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        SDataRecord oRecord = new SDataRecord();
        SDataRecordEntry oEntries[] = null;

        oEntries = prepareRecordEntries();

        oRecord.getDbmsRecordEntries().add(oEntries[0]);
        oRecord.getDbmsRecordEntries().add(oEntries[1]);

        if (oEntries[2] != null) {
            oRecord.getDbmsRecordEntries().add(oEntries[2]);
        }

        return oRecord;
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        if (type == SDataConstants.FIN_REC) {
            moParamRecord = (SDataRecord) value;
        }
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbValueCyOrigin) {
                actionValueCyOrigin();
            }
            else if (button == jbValueOrigin) {
                actionValueOrigin();
            }
            else if (button == jbExchangeRateSystemOrigin) {
                actionExchangeRateSystemOrigin();
            }
            else if (button == jbExchangeRateOrigin) {
                actionExchangeRateOrigin();
            }
            else if (button == jbExchangeRateAccountCashOrigin) {
                actionExchangeRateAccountCashOrigin();
            }
            else if (button == jbExchangeRateAccountCashViewOrigin) {
                actionExchangeRateAccountCashViewOrigin();
            }
            else if (button == jbFkCompanyBranchId) {
                actionFkCompanyBranchId();
            }
            else if (button == jbFkAccountCashDestinyId) {
                actionFkAccountCashDestinyId();
            }
            else if (button == jbValueCyDestiny) {
                actionValueCyDestiny();
            }
            else if (button == jbValueDestiny) {
                actionValueDestiny();
            }
            else if (button == jbExchangeRateSystemDestiny) {
                actionExchangeRateSystemDestiny();
            }
            else if (button == jbExchangeRateDestiny) {
                actionExchangeRateDestiny();
            }
            else if (button == jbExchangeRateAccountCashDestiny) {
                actionExchangeRateAccountCashDestiny();
            }
            else if (button == jbExchangeRateAccountCashViewDestiny) {
                actionExchangeRateAccountCashViewDestiny();
            }
        }
    }

    @Override
    public void focusGained(java.awt.event.FocusEvent e) {

    }

    @Override
    public void focusLost(java.awt.event.FocusEvent e) {
        if (e.getSource() instanceof javax.swing.JTextField) {
            JTextField textField = (JTextField) e.getSource();

            if (textField == jtfValueCyOrigin) {
                focusLostValueCyOrigin();
            }
            else if (textField == jtfValueOrigin) {
                focusLostValueOrigin();
            }
            else if (textField == jtfExchangeRateOrigin) {
                focusLostExchangeRateOrigin();
            }
            else if (textField == jtfValueCyDestiny) {
                focusLostValueCyDestiny();
            }
            else if (textField == jtfValueDestiny) {
                focusLostValueDestiny();
            }
            else if (textField == jtfExchangeRateDestiny) {
                focusLostExchangeRateDestiny();
            }
        }
    }
}
