/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SDialogRepAccountCostCenter.java
 *
 * Created on 1/09/2010, 01:55:43 PM
 */

package erp.mfin.form;

import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.util.Map;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JFormattedTextField;
import net.sf.jasperreports.engine.*;
import net.sf.jasperreports.view.*;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataUtilities;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.lib.SLibConstants;
import erp.lib.SLibTimeUtilities;
import erp.lib.SLibUtilities;
import java.awt.BorderLayout;

/**
 *
 * @author Alfonso Flores
 */
public class SDialogRepAccountCostCenter extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener, java.awt.event.FocusListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.lib.form.SFormField moFieldDateInitial;
    private erp.lib.form.SFormField moFieldDateEnd;
    private erp.lib.form.SFormField moFieldCompanyBranch;
    private erp.lib.form.SFormField moFieldItem;
    private erp.lib.form.SFormField moFieldIsWithDetail;
    private erp.lib.form.SFormField moFieldShowAccountWithoutCostCenter;
    private erp.lib.form.SFormField moFieldIsShowAllLevelsApplying;

    private erp.mfin.form.SPanelAccount moPanelCostCenterInitial;
    private erp.mfin.form.SPanelAccount moPanelCostCenterEnd;
    private erp.mfin.form.SPanelAccount moPanelAccountInitial;
    private erp.mfin.form.SPanelAccount moPanelAccountEnd;

    /** Creates new form SDialogRepAccountCostCenter */
    public SDialogRepAccountCostCenter(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jbPrint = new javax.swing.JButton();
        jbExit = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlDateInitial = new javax.swing.JLabel();
        jftDateInitial = new javax.swing.JFormattedTextField();
        jbDateInitial = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jlDateEnd = new javax.swing.JLabel();
        jftDateEnd = new javax.swing.JFormattedTextField();
        jbDateEnd = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jrbByCostCenterAccount = new javax.swing.JRadioButton();
        jrbByAccountCostCenter = new javax.swing.JRadioButton();
        jPanel8 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jpCostCenterInitial = new javax.swing.JPanel();
        jlDummyPaneCostCenterInitial = new javax.swing.JLabel();
        jpCostCenterEnd = new javax.swing.JPanel();
        jlDummyPaneCostCenterEnd = new javax.swing.JLabel();
        jpAccountInitial = new javax.swing.JPanel();
        jlDummyPaneAccountInitial = new javax.swing.JLabel();
        jpAccountEnd = new javax.swing.JPanel();
        jlDummyPaneAccountEnd = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jlCompanyBranch = new javax.swing.JLabel();
        jcbCompanyBranch = new javax.swing.JComboBox();
        jPanel10 = new javax.swing.JPanel();
        jckShowAccountWithoutCostCenter = new javax.swing.JCheckBox();
        jckIsWithDetail = new javax.swing.JCheckBox();
        jPanel11 = new javax.swing.JPanel();
        jckIsShowAllLevelsApplying = new javax.swing.JCheckBox();
        jckIsShowItemsApplying = new javax.swing.JCheckBox();
        jPanel14 = new javax.swing.JPanel();
        jlItem = new javax.swing.JLabel();
        jcbItem = new javax.swing.JComboBox();
        jbItem = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Reporte de auxiliares de centros de costo");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setPreferredSize(new java.awt.Dimension(392, 33));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbPrint.setText("Imprimir");
        jbPrint.setToolTipText("[Ctrl + Enter]");
        jbPrint.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jbPrint);

        jbExit.setText("Cerrar");
        jbExit.setToolTipText("[Escape]");
        jbExit.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jbExit);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Configuración del reporte:"));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel12.setPreferredSize(new java.awt.Dimension(500, 77));
        jPanel12.setLayout(new java.awt.GridLayout(1, 2, 0, 1));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Período:"));
        jPanel3.setPreferredSize(new java.awt.Dimension(376, 77));
        jPanel3.setLayout(new java.awt.GridLayout(2, 1, 0, 1));

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateInitial.setText("Fecha inicial: *");
        jlDateInitial.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlDateInitial);

        jftDateInitial.setText("dd/mm/yyyy");
        jftDateInitial.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel4.add(jftDateInitial);

        jbDateInitial.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_date_day.gif"))); // NOI18N
        jbDateInitial.setToolTipText("Seleccionar fecha inicial");
        jbDateInitial.setFocusable(false);
        jbDateInitial.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel4.add(jbDateInitial);

        jPanel3.add(jPanel4);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateEnd.setText("Fecha final: *");
        jlDateEnd.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlDateEnd);

        jftDateEnd.setText("dd/mm/yyyy");
        jftDateEnd.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel5.add(jftDateEnd);

        jbDateEnd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_date_day.gif"))); // NOI18N
        jbDateEnd.setToolTipText("Seleccionar fecha final");
        jbDateEnd.setFocusable(false);
        jbDateEnd.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel5.add(jbDateEnd);

        jPanel3.add(jPanel5);

        jPanel12.add(jPanel3);

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Ordenamiento:"));
        jPanel9.setMinimumSize(new java.awt.Dimension(219, 80));
        jPanel9.setPreferredSize(new java.awt.Dimension(219, 80));
        jPanel9.setLayout(new java.awt.GridLayout(2, 1, 0, 1));

        buttonGroup1.add(jrbByCostCenterAccount);
        jrbByCostCenterAccount.setText("Por centro de costo, cuenta contable");
        jPanel9.add(jrbByCostCenterAccount);

        buttonGroup1.add(jrbByAccountCostCenter);
        jrbByAccountCostCenter.setText("Por cuenta contable, centro de costo");
        jPanel9.add(jrbByAccountCostCenter);

        jPanel12.add(jPanel9);

        jPanel2.add(jPanel12, java.awt.BorderLayout.NORTH);

        jPanel8.setLayout(new java.awt.BorderLayout());

        jPanel13.setLayout(new java.awt.GridLayout(2, 1, 0, 1));

        jpCostCenterInitial.setBorder(javax.swing.BorderFactory.createTitledBorder("Centro de costo inicial:"));
        jpCostCenterInitial.setPreferredSize(new java.awt.Dimension(100, 85));
        jpCostCenterInitial.setLayout(new java.awt.BorderLayout());

        jlDummyPaneCostCenterInitial.setFont(new java.awt.Font("Tahoma", 1, 12));
        jlDummyPaneCostCenterInitial.setText("[Panel centro de costo]");
        jpCostCenterInitial.add(jlDummyPaneCostCenterInitial, java.awt.BorderLayout.CENTER);

        jPanel13.add(jpCostCenterInitial);

        jpCostCenterEnd.setBorder(javax.swing.BorderFactory.createTitledBorder("Centro de costo final:"));
        jpCostCenterEnd.setLayout(new java.awt.BorderLayout());

        jlDummyPaneCostCenterEnd.setFont(new java.awt.Font("Tahoma", 1, 12));
        jlDummyPaneCostCenterEnd.setText("[Panel centro de costo]");
        jpCostCenterEnd.add(jlDummyPaneCostCenterEnd, java.awt.BorderLayout.CENTER);

        jPanel13.add(jpCostCenterEnd);

        jPanel8.add(jPanel13, java.awt.BorderLayout.NORTH);

        jpAccountInitial.setBorder(javax.swing.BorderFactory.createTitledBorder("Cuenta contable inicial:"));
        jpAccountInitial.setLayout(new java.awt.BorderLayout());

        jlDummyPaneAccountInitial.setFont(new java.awt.Font("Tahoma", 1, 12));
        jlDummyPaneAccountInitial.setText("[Panel cuenta contable]");
        jlDummyPaneAccountInitial.setPreferredSize(new java.awt.Dimension(100, 50));
        jpAccountInitial.add(jlDummyPaneAccountInitial, java.awt.BorderLayout.CENTER);

        jPanel8.add(jpAccountInitial, java.awt.BorderLayout.CENTER);

        jpAccountEnd.setBorder(javax.swing.BorderFactory.createTitledBorder("Cuenta contable final:"));
        jpAccountEnd.setPreferredSize(new java.awt.Dimension(100, 85));
        jpAccountEnd.setLayout(new java.awt.BorderLayout());

        jlDummyPaneAccountEnd.setFont(new java.awt.Font("Tahoma", 1, 12));
        jlDummyPaneAccountEnd.setText("[Panel cuenta contable]");
        jpAccountEnd.add(jlDummyPaneAccountEnd, java.awt.BorderLayout.CENTER);

        jPanel8.add(jpAccountEnd, java.awt.BorderLayout.SOUTH);

        jPanel2.add(jPanel8, java.awt.BorderLayout.CENTER);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Filtros del reporte:"));
        jPanel6.setPreferredSize(new java.awt.Dimension(376, 130));
        jPanel6.setLayout(new java.awt.GridLayout(4, 1, 0, 1));

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCompanyBranch.setText("Sucursal empresa:");
        jlCompanyBranch.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlCompanyBranch);

        jcbCompanyBranch.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbCompanyBranch.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel7.add(jcbCompanyBranch);

        jPanel6.add(jPanel7);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jckShowAccountWithoutCostCenter.setText("Mostrar movimientos sin centro de costo");
        jckShowAccountWithoutCostCenter.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel10.add(jckShowAccountWithoutCostCenter);

        jckIsWithDetail.setText("Con detalle");
        jckIsWithDetail.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel10.add(jckIsWithDetail);

        jPanel6.add(jPanel10);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jckIsShowAllLevelsApplying.setText("Mostrar todos los niveles");
        jckIsShowAllLevelsApplying.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel11.add(jckIsShowAllLevelsApplying);

        jckIsShowItemsApplying.setText("Mostrar ítems");
        jPanel11.add(jckIsShowItemsApplying);

        jPanel6.add(jPanel11);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItem.setText("Ítem:");
        jlItem.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jlItem);

        jcbItem.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbItem.setPreferredSize(new java.awt.Dimension(372, 23));
        jPanel14.add(jcbItem);

        jbItem.setText("jButton1");
        jbItem.setToolTipText("Seleccionar ítem");
        jbItem.setFocusable(false);
        jbItem.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel14.add(jbItem);

        jPanel6.add(jPanel14);

        jPanel2.add(jPanel6, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-550)/2, (screenSize.height-650)/2, 550, 650);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        mvFields = new Vector<SFormField>();

        try {
            moPanelCostCenterInitial = new SPanelAccount(miClient, SDataConstants.FIN_CC, false, false, false);
            moPanelCostCenterEnd = new SPanelAccount(miClient, SDataConstants.FIN_CC, false, false, false);
            moPanelAccountInitial = new SPanelAccount(miClient, SDataConstants.FIN_ACC, false, false, false);
            moPanelAccountEnd = new SPanelAccount(miClient, SDataConstants.FIN_ACC, false, false, false);
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }

        jpCostCenterInitial.remove(jlDummyPaneCostCenterInitial);
        jpCostCenterInitial.add(moPanelCostCenterInitial, BorderLayout.CENTER);

        jpCostCenterEnd.remove(jlDummyPaneCostCenterEnd);
        jpCostCenterEnd.add(moPanelCostCenterEnd, BorderLayout.CENTER);

        jpAccountInitial.remove(jlDummyPaneAccountInitial);
        jpAccountInitial.add(moPanelAccountInitial, BorderLayout.CENTER);

        jpAccountEnd.remove(jlDummyPaneAccountEnd);
        jpAccountEnd.add(moPanelAccountEnd, BorderLayout.CENTER);

        moFieldDateInitial = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jftDateInitial, jlDateInitial);
        moFieldDateInitial.setPickerButton(jbDateInitial);
        moFieldDateEnd = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jftDateEnd, jlDateEnd);
        moFieldDateEnd.setPickerButton(jbDateEnd);
        moFieldCompanyBranch = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, false, jcbCompanyBranch, jlCompanyBranch);
        moFieldItem = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, false, jcbItem, jlItem);
        moFieldItem.setPickerButton(jbItem);
        moFieldIsWithDetail = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsWithDetail);
        moFieldShowAccountWithoutCostCenter = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckShowAccountWithoutCostCenter);
        moFieldIsShowAllLevelsApplying = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsShowAllLevelsApplying);

        mvFields.add(moFieldDateInitial);
        mvFields.add(moFieldDateEnd);
        mvFields.add(moFieldCompanyBranch);
        mvFields.add(moFieldItem);
        mvFields.add(moFieldIsWithDetail);
        mvFields.add(moFieldShowAccountWithoutCostCenter);
        mvFields.add(moFieldIsShowAllLevelsApplying);

        jbPrint.addActionListener(this);
        jbExit.addActionListener(this);
        jbDateInitial.addActionListener(this);
        jbDateEnd.addActionListener(this);
        jbItem.addActionListener(this);
        moPanelCostCenterInitial.getFieldAccount().getComponent().addFocusListener(this);
        moPanelAccountInitial.getFieldAccount().getComponent().addFocusListener(this);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionPrint(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "print", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction action = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionClose(); }
        };

        SFormUtilities.putActionMap(getRootPane(), action, "exit", KeyEvent.VK_ESCAPE, 0);

        setModalityType(ModalityType.MODELESS);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            jftDateInitial.requestFocus();
            jrbByCostCenterAccount.setSelected(true);
        }
    }

    private void actionPrint() {
        Cursor cursor = getCursor();
        SFormValidation validation = formValidate();
        Map<String, Object> map = null;
        JasperPrint jasperPrint = null;
        JasperViewer jasperViewer = null;

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            try {
                setCursor(new Cursor(Cursor.WAIT_CURSOR));

                map = miClient.createReportParams();
                map.put("tDtInitial", moFieldDateInitial.getDate());
                map.put("tDtEnd", moFieldDateEnd.getDate());
                map.put("sConcept", moFieldCompanyBranch.getKeyAsIntArray()[0] == 0 ? "(TODAS)" : jcbCompanyBranch.getSelectedItem().toString());
                map.put("sAccount", moPanelAccountInitial.isEmptyAccountId() && moPanelAccountEnd.isEmptyAccountId() ? "(TODAS)" :
                    "DE " + moPanelAccountInitial.getFieldAccount().getString() + " A " + moPanelAccountEnd.getFieldAccount().getString());
                map.put("sCostCenter", moPanelCostCenterInitial.isEmptyAccountId() && moPanelCostCenterEnd.isEmptyAccountId() ? "(TODOS)" :
                    "DE " + moPanelCostCenterInitial.getFieldAccount().getString() + " A " + moPanelCostCenterEnd.getFieldAccount().getString());
                map.put("sSqlCompanyBranch", moFieldCompanyBranch.getKeyAsIntArray()[0] == 0 ? "" : " AND r.fid_cob = " + moFieldCompanyBranch.getKeyAsIntArray()[0] + " ");
                map.put("bIsByCostCenter", jrbByCostCenterAccount.isSelected() ? true : false);
                map.put("bIsWithDetail", jckIsWithDetail.isSelected() ? true : false);
                map.put("nNumRecordLength", SDataConstantsSys.NUM_LEN_FIN_REC);
                map.put("sSql", jrbByCostCenterAccount.isSelected() ? createParamSqlCostCenter() : createParamSqlAccount());
                map.put("sSqlAccountRange", moPanelAccountInitial.isEmptyAccountId() && moPanelAccountEnd.isEmptyAccountId() ? "" :
                    " AND re.fid_acc BETWEEN '" + moPanelAccountInitial.getFieldAccount().getString() + "' AND '" + moPanelAccountEnd.getFieldAccount().getString() + "'");
                map.put("sSqlCostCenterRange", moPanelCostCenterInitial.isEmptyAccountId() && moPanelCostCenterEnd.isEmptyAccountId() ? "" :
                    " AND re.fid_cc_n BETWEEN '" + moPanelCostCenterInitial.getFieldAccount().getString() + "' AND '" + moPanelCostCenterEnd.getFieldAccount().getString() + "'");
                map.put("bIsShowAllLevelsApplying", jckIsShowAllLevelsApplying.isSelected() ? true : false);
                map.put("bIsShowItemApplying", jckIsShowItemsApplying.isSelected() ? true : false);
                map.put("bIsItemOrderByKey", miClient.getSessionXXX().getParamsErp().getFkSortingItemTypeId() == SDataConstantsSys.CFGS_TP_SORT_KEY_NAME ? true : false);
                map.put("sSqlItemFields", jckIsShowItemsApplying.isSelected() ? ", i.item_key, i.item " : "");
                map.put("sSqlLeftOuterJoinItem", jckIsShowItemsApplying.isSelected() ? " LEFT OUTER JOIN erp.itmu_item AS i ON re.fid_item_n = i.id_item " : "");
                map.put("sSqlGroupBy", jckIsShowItemsApplying.isSelected() ? jrbByCostCenterAccount.isSelected() ? " GROUP BY re.fid_acc, re.fid_item_n, r.dt, re.id_tp_rec, re.id_num, re.sort_pos " :
                    " GROUP BY re.fid_cc_n, re.fid_item_n, r.dt, re.id_tp_rec, re.id_num, re.sort_pos "  : jrbByCostCenterAccount.isSelected() ? " GROUP BY re.fid_acc, r.dt, re.id_tp_rec, re.id_num, re.sort_pos " :
                    " GROUP BY re.fid_cc_n, r.dt, re.id_tp_rec, re.id_num, re.sort_pos ");
                map.put("sSqlOrderBy", jckIsShowItemsApplying.isSelected() ? jrbByCostCenterAccount.isSelected() ? " ORDER BY re.fid_acc, re.fid_item_n, r.dt, re.id_tp_rec, re.id_num, re.sort_pos " :
                    " ORDER BY re.fid_cc_n, re.fid_item_n, r.dt, re.id_tp_rec, re.id_num, re.sort_pos "  : jrbByCostCenterAccount.isSelected() ? " ORDER BY re.fid_acc, r.dt, re.id_tp_rec, re.id_num, re.sort_pos " :
                    " ORDER BY re.fid_cc_n, r.dt, re.id_tp_rec, re.id_num, re.sort_pos ");
                map.put("sSqlItem", moFieldItem.getKeyAsIntArray()[0] == 0 ? "" : " AND re.fid_item_n = " + moFieldItem.getKeyAsIntArray()[0] + " ");
                jasperPrint = SDataUtilities.fillReport(miClient, SDataConstantsSys.REP_FIN_CC, map);
                jasperViewer = new JasperViewer(jasperPrint, false);
                jasperViewer.setTitle("Reporte de centros de costo");
                jasperViewer.setVisible(true);
            }
            catch(Exception e) {
                SLibUtilities.renderException(this, e);
            }
            finally {
                setCursor(cursor);
            }
        }
    }

    private void actionClose() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    private void actionDateInitial() {
        miClient.getGuiDatePickerXXX().formReset();
        miClient.getGuiDatePickerXXX().setDate(moFieldDateInitial.getDate());
        miClient.getGuiDatePickerXXX().setVisible(true);

        if (miClient.getGuiDatePickerXXX().getFormResult() == SLibConstants.FORM_RESULT_OK) {
            moFieldDateInitial.setFieldValue(miClient.getGuiDatePickerXXX().getGuiDate());
            jftDateInitial.requestFocus();
        }
    }

    private void actionDateEnd() {
        miClient.getGuiDatePickerXXX().formReset();
        miClient.getGuiDatePickerXXX().setDate(moFieldDateEnd.getDate());
        miClient.getGuiDatePickerXXX().setVisible(true);

        if (miClient.getGuiDatePickerXXX().getFormResult() == SLibConstants.FORM_RESULT_OK) {
            moFieldDateEnd.setFieldValue(miClient.getGuiDatePickerXXX().getGuiDate());
            jftDateEnd.requestFocus();
        }
    }

    private void actionItem() {
        miClient.pickOption(SDataConstants.ITMU_ITEM, moFieldItem, null);
    }

    private java.lang.String createParamSqlAccount() {
        int len = 0;
        int year = SLibTimeUtilities.digestYear(moFieldDateInitial.getDate())[0];
        String sql = "";
        String txtDateStart = miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(moFieldDateInitial.getDate());
        String txtDateEnd = miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(moFieldDateEnd.getDate());
        String account = miClient.getSessionXXX().getParamsErp().getFormatAccountId().replace('9', '0');
        Vector<Integer> levels = SDataUtilities.getAccountLevels(account);

        for (int i = 1; i <= miClient.getSessionXXX().getParamsErp().getDeepAccounts(); i++) {
            len = i < levels.size() ? levels.get(i) - 1 : account.length();

            /*
             * 'a' stands for account
             * 'am' stands for major account
             */

            sql += (sql.length() == 0 ? "" : "UNION ") +
                    "SELECT COUNT(*) AS cont, CONCAT(LEFT(re.fid_acc, " + len + "), '" + account.substring(len) + "')" + " AS f_id, " +
                    "am.deep AS deep, " +
                    i + " AS f_lev, cob.id_bpb AS id_cob, cob.bpb, " +
                    "(SELECT a.acc FROM fin_acc AS a WHERE a.id_acc = CONCAT(LEFT(re.fid_acc, " + len + "), '" + account.substring(len) + "')) AS f_descrip, " +
                    "SUM(CASE WHEN r.dt < '" + txtDateStart + "' THEN re.debit ELSE 0 END) - " +
                    "SUM(CASE WHEN r.dt < '" + txtDateStart + "' THEN re.credit ELSE 0 END) AS f_ob, " +
                    "SUM(CASE WHEN r.dt >= '" + txtDateStart + "' THEN re.debit ELSE 0 END) AS f_dbt, " +
                    "SUM(CASE WHEN r.dt >= '" + txtDateStart + "' THEN re.credit ELSE 0 END) AS f_cdt " +
                    "FROM fin_rec AS r INNER JOIN fin_rec_ety AS re ON " +
                    "r.id_year = re.id_year AND r.id_per = re.id_per AND r.id_bkc = re.id_bkc AND r.id_tp_rec = re.id_tp_rec AND r.id_num = re.id_num " +
                    "INNER JOIN fin_acc AS a ON " +
                    "a.id_acc = re.fid_acc AND re.fid_acc >= '" + moPanelAccountInitial.getFieldAccount().getString() + "' " +
                    "INNER JOIN fin_acc AS am ON " +
                    "am.id_acc = CONCAT(LEFT(re.fid_acc, " + (levels.get(1) - 1) + "), '" + account.substring(levels.get(1) - 1) + "') " +
                    "INNER JOIN erp.bpsu_bpb AS cob ON " +
                    "r.fid_cob = cob.id_bpb " +
                    "WHERE re.b_del = 0 AND r.b_del = 0 AND r.id_year = " + year + " AND r.dt <= '" + txtDateEnd + "' " +
                    (moFieldCompanyBranch.getKeyAsIntArray()[0] == 0 ? "" : " AND r.fid_cob = " + moFieldCompanyBranch.getKeyAsIntArray()[0] + " ") +
                    (moFieldItem.getKeyAsIntArray()[0] == 0 ? "" : " AND re.fid_item_n = " + moFieldItem.getKeyAsIntArray()[0] + " ") +
                    (moPanelCostCenterInitial.isEmptyAccountId() && moPanelCostCenterEnd.isEmptyAccountId() ? "" :
                    " AND re.fid_cc_n BETWEEN '" + moPanelCostCenterInitial.getFieldAccount().getString() + "' AND '" + moPanelCostCenterEnd.getFieldAccount().getString() + "'") + " " +
                    (moPanelAccountInitial.isEmptyAccountId() && moPanelAccountEnd.isEmptyAccountId() ? "" :
                    " AND re.fid_acc BETWEEN '" + moPanelAccountInitial.getFieldAccount().getString() + "' AND '" + moPanelAccountEnd.getFieldAccount().getString() + "'") + " " +
                    (jckShowAccountWithoutCostCenter.isSelected() ? "" : " AND re.fid_cc_n IS NOT NULL ") +
                    "GROUP BY CONCAT(LEFT(re.fid_acc, " + len + "), '" + account.substring(len) + "') " +
                    "HAVING cont > 0 ";
        }

        sql += "ORDER BY f_id, f_lev ";

        return sql;
    }

    private java.lang.String createParamSqlCostCenter() {
        int len = 0;
        int year = SLibTimeUtilities.digestYear(moFieldDateInitial.getDate())[0];
        String sql = "";
        String txtDateStart = miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(moFieldDateInitial.getDate());
        String txtDateEnd = miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(moFieldDateEnd.getDate());
        String costCenter = miClient.getSessionXXX().getParamsErp().getFormatCostCenterId().replace('9', '0');
        Vector<Integer> levels = SDataUtilities.getAccountLevels(costCenter);

        for (int i = 1; i <= miClient.getSessionXXX().getParamsErp().getDeepCostCenters(); i++) {
            len = i < levels.size() ? levels.get(i) - 1 : costCenter.length();

            /*
             * 'a' stands for account
             * 'am' stands for major account
             */

            sql += (sql.length() == 0 ? "" : "UNION ") +
                    "SELECT CONCAT(LEFT(re.fid_cc_n, " + len + "), '" + costCenter.substring(len) + "')" + " AS f_id, " +
                    "(SELECT cc.cc FROM fin_cc AS cc WHERE cc.id_cc = CONCAT(LEFT(re.fid_cc_n, " + len + "), '" + costCenter.substring(len) + "')) " +
                    "AS f_descrip, IF(cm.deep IS NULL, 0, cm.deep) AS deep, " +
                    "IF(re.fid_cc_n IS NULL, 0, " + i + ") AS f_lev, cob.id_bpb AS id_cob, cob.bpb, " +
                    "SUM(CASE WHEN r.dt < '" + txtDateStart + "' THEN re.debit ELSE 0 END) - " +
                    "SUM(CASE WHEN r.dt < '" + txtDateStart + "' THEN re.credit ELSE 0 END) AS f_ob, " +
                    "SUM(CASE WHEN r.dt >= '" + txtDateStart + "' THEN re.debit ELSE 0 END) AS f_dbt, " +
                    "SUM(CASE WHEN r.dt >= '" + txtDateStart + "' THEN re.credit ELSE 0 END) AS f_cdt " +
                    "FROM fin_rec AS r INNER JOIN fin_rec_ety AS re ON " +
                    "r.id_year = re.id_year AND r.id_per = re.id_per AND r.id_bkc = re.id_bkc AND r.id_tp_rec = re.id_tp_rec AND r.id_num = re.id_num " +
                    "INNER JOIN erp.bpsu_bpb AS cob ON " +
                    "r.fid_cob = cob.id_bpb " +
                    "LEFT OUTER JOIN fin_cc AS cc ON " +
                    "re.fid_cc_n = cc.id_cc " +
                    "LEFT OUTER JOIN fin_cc AS cm ON " +
                    "cm.id_cc = CONCAT(LEFT(re.fid_cc_n, " + (levels.get(1) - 1) + "), '" + costCenter.substring(levels.get(1) - 1) + "') " + " " +
                    "WHERE re.b_del = 0 AND r.b_del = 0 AND r.id_year = " + year + " AND r.dt <= '" + txtDateEnd + "' " +
                    (moFieldCompanyBranch.getKeyAsIntArray()[0] == 0 ? "" : " AND r.fid_cob = " + moFieldCompanyBranch.getKeyAsIntArray()[0] + " ") +
                    (moFieldItem.getKeyAsIntArray()[0] == 0 ? "" : " AND re.fid_item_n = " + moFieldItem.getKeyAsIntArray()[0] + " ") +
                    (moPanelCostCenterInitial.isEmptyAccountId() && moPanelCostCenterEnd.isEmptyAccountId() ? "" :
                    " AND re.fid_cc_n BETWEEN '" + moPanelCostCenterInitial.getFieldAccount().getString() + "' AND '" + moPanelCostCenterEnd.getFieldAccount().getString() + "'") + " " +
                    (moPanelAccountInitial.isEmptyAccountId() && moPanelAccountEnd.isEmptyAccountId() ? "" :
                    " AND re.fid_acc BETWEEN '" + moPanelAccountInitial.getFieldAccount().getString() + "' AND '" + moPanelAccountEnd.getFieldAccount().getString() + "'") + " " +
                    (jckShowAccountWithoutCostCenter.isSelected() ? "" : " AND re.fid_cc_n IS NOT NULL ") +
                    "GROUP BY CONCAT(LEFT(re.fid_cc_n, " + len + "), '" + costCenter.substring(len) + "') " +
                    "HAVING NOT (f_ob = 0 AND f_dbt = 0 AND f_cdt = 0) ";
        }

        sql += "ORDER BY f_id, f_lev ";

        return sql;
    }

    private void actionCostCenterIdFocusGained() {
    }

    private void actionCostCenterIdFocusLost() {
        if (!moPanelCostCenterInitial.isEmptyAccountId() && moPanelCostCenterEnd.isEmptyAccountId()) {
            moPanelCostCenterEnd.getFieldAccount().setFieldValue(moPanelCostCenterInitial.getFieldAccount().getFieldValue());
        }
    }

    private void actionAccountIdFocusGained() {
    }

    private void actionAccountIdFocusLost() {
        if (!moPanelAccountInitial.isEmptyAccountId() && moPanelAccountEnd.isEmptyAccountId()) {
            moPanelAccountEnd.getFieldAccount().setFieldValue(moPanelAccountInitial.getFieldAccount().getFieldValue());
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbDateEnd;
    private javax.swing.JButton jbDateInitial;
    private javax.swing.JButton jbExit;
    private javax.swing.JButton jbItem;
    private javax.swing.JButton jbPrint;
    private javax.swing.JComboBox jcbCompanyBranch;
    private javax.swing.JComboBox jcbItem;
    private javax.swing.JCheckBox jckIsShowAllLevelsApplying;
    private javax.swing.JCheckBox jckIsShowItemsApplying;
    private javax.swing.JCheckBox jckIsWithDetail;
    private javax.swing.JCheckBox jckShowAccountWithoutCostCenter;
    private javax.swing.JFormattedTextField jftDateEnd;
    private javax.swing.JFormattedTextField jftDateInitial;
    private javax.swing.JLabel jlCompanyBranch;
    private javax.swing.JLabel jlDateEnd;
    private javax.swing.JLabel jlDateInitial;
    private javax.swing.JLabel jlDummyPaneAccountEnd;
    private javax.swing.JLabel jlDummyPaneAccountInitial;
    private javax.swing.JLabel jlDummyPaneCostCenterEnd;
    private javax.swing.JLabel jlDummyPaneCostCenterInitial;
    private javax.swing.JLabel jlItem;
    private javax.swing.JPanel jpAccountEnd;
    private javax.swing.JPanel jpAccountInitial;
    private javax.swing.JPanel jpCostCenterEnd;
    private javax.swing.JPanel jpCostCenterInitial;
    private javax.swing.JRadioButton jrbByAccountCostCenter;
    private javax.swing.JRadioButton jrbByCostCenterAccount;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        moFieldDateInitial.setFieldValue(SLibTimeUtilities.getBeginOfMonth(miClient.getSessionXXX().getWorkingDate()));
        moFieldDateEnd.setFieldValue(SLibTimeUtilities.getEndOfMonth(miClient.getSessionXXX().getWorkingDate()));
        moPanelCostCenterInitial.resetPanel();
        moPanelCostCenterEnd.resetPanel();
        moPanelAccountInitial.resetPanel();
        moPanelAccountEnd.resetPanel();
        jckIsWithDetail.setSelected(true);

        jckIsShowAllLevelsApplying.setSelected(true);
        jckShowAccountWithoutCostCenter.setSelected(true);
        jckIsShowItemsApplying.setSelected(true);
        jckIsShowItemsApplying.setEnabled(true);

        mbResetingForm = false;
    }

    @Override
    @SuppressWarnings("unchecked")
    public void formRefreshCatalogues() {
        mbResetingForm = true;
        SFormUtilities.populateComboBox(miClient, jcbCompanyBranch, SDataConstants.BPSU_BPB, new int[] { miClient.getSessionXXX().getCompany().getPkCompanyId() });
        SFormUtilities.populateComboBox(miClient, jcbItem, SDataConstants.ITMU_ITEM);
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        if (!validation.getIsError()) {
            if (moFieldDateEnd.getDate().compareTo(moFieldDateInitial.getDate()) < 0) {
                validation.setMessage("La fecha final debe ser mayor o igual a la fecha inicial.");
                validation.setComponent(jftDateEnd);
            }
            else if (SLibTimeUtilities.digestYear(moFieldDateEnd.getDate())[0] != SLibTimeUtilities.digestYear(moFieldDateInitial.getDate())[0]) {
                validation.setMessage("La fecha inicial y final deben pertenecer al mismo ejercicio.");
                validation.setComponent(jftDateInitial);
            }
        }

        if (!validation.getIsError()) {
            if (moPanelCostCenterInitial.getFieldAccount().getString().compareTo(moPanelCostCenterEnd.getFieldAccount().getString()) > 0) {
                validation.setComponent(moPanelCostCenterEnd);
                validation.setMessage("El valor del centro de costo final debe ser mayor o igual al valor del centro de costo inicial.");
            }
            else if (moPanelCostCenterInitial.getFieldAccount().getString().compareTo(SDataUtilities.createNewFormattedCostCenterId(miClient, miClient.getSessionXXX().getParamsErp().getDeepAccounts())) != 0 &&
                    moPanelCostCenterEnd.getFieldAccount().getString().compareTo(SDataUtilities.createNewFormattedCostCenterId(miClient, miClient.getSessionXXX().getParamsErp().getDeepAccounts())) == 0) {
                validation.setComponent(moPanelCostCenterEnd);
                validation.setMessage("Se debe seleccionar el valor del centro de costo final.");
            }
            else if (moPanelCostCenterInitial.getFieldAccount().getString().compareTo(SDataUtilities.createNewFormattedCostCenterId(miClient, miClient.getSessionXXX().getParamsErp().getDeepAccounts())) == 0 &&
                    moPanelCostCenterEnd.getFieldAccount().getString().compareTo(SDataUtilities.createNewFormattedCostCenterId(miClient, miClient.getSessionXXX().getParamsErp().getDeepAccounts())) != 0) {
                validation.setComponent(moPanelCostCenterInitial);
                validation.setMessage("Se debe seleccionar el valor del centro de costo inicial.");
            }
            else if (moPanelAccountInitial.getFieldAccount().getString().compareTo(moPanelAccountEnd.getFieldAccount().getString()) > 0) {
                validation.setComponent(moPanelAccountEnd);
                validation.setMessage("El valor de la cuenta contable final debe ser mayor o igual al valor de la cuenta contable inicial.");
            }
            else if (moPanelAccountInitial.getFieldAccount().getString().compareTo(SDataUtilities.createNewFormattedAccountId(miClient, miClient.getSessionXXX().getParamsErp().getDeepAccounts())) != 0 &&
                    moPanelAccountEnd.getFieldAccount().getString().compareTo(SDataUtilities.createNewFormattedAccountId(miClient, miClient.getSessionXXX().getParamsErp().getDeepAccounts())) == 0) {
                validation.setComponent(moPanelAccountEnd);
                validation.setMessage("Se debe seleccionar el valor de la cuenta contable final.");
            }
            else if (moPanelAccountInitial.getFieldAccount().getString().compareTo(SDataUtilities.createNewFormattedAccountId(miClient, miClient.getSessionXXX().getParamsErp().getDeepAccounts())) == 0 &&
                    moPanelAccountEnd.getFieldAccount().getString().compareTo(SDataUtilities.createNewFormattedAccountId(miClient, miClient.getSessionXXX().getParamsErp().getDeepAccounts())) != 0) {
                validation.setComponent(moPanelAccountInitial);
                validation.setMessage("Se debe seleccionar el valor de la cuenta contable inicial.");
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbPrint) {
                actionPrint();
            }
            else if (button == jbExit) {
                actionClose();
            }
            else if (button == jbDateInitial) {
                actionDateInitial();
            }
            else if (button == jbDateEnd) {
                actionDateEnd();
            }
            else if (button == jbItem) {
                actionItem();
            }
        }
    }

    @Override
    public void focusGained(FocusEvent e) {
        if (e.getSource() instanceof javax.swing.JFormattedTextField) {
            JFormattedTextField formattedTextField = (JFormattedTextField) e.getSource();

            if (formattedTextField == moPanelCostCenterInitial.getFieldAccount().getComponent()) {
                actionCostCenterIdFocusGained();
            }
            else if (formattedTextField == moPanelAccountInitial.getFieldAccount().getComponent()) {
                actionAccountIdFocusGained();
            }
        }
    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof javax.swing.JFormattedTextField) {
            JFormattedTextField formattedTextField = (JFormattedTextField) e.getSource();

            if (formattedTextField == moPanelCostCenterInitial.getFieldAccount().getComponent()) {
                actionCostCenterIdFocusLost();
            }
            else if (formattedTextField == moPanelAccountInitial.getFieldAccount().getComponent()) {
                actionAccountIdFocusLost();
            }
        }
    }
}
