/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package erp.mfin.form;

import erp.data.SDataConstants;
import erp.data.SDataUtilities;
import erp.data.SProcConstants;
import erp.lib.SLibConstants;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.mfin.data.SDataExchangeRate;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JButton;

/**
 *
 * @author  Sergio Flores
 */
public class SFormExchangeRate extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mfin.data.SDataExchangeRate moExchangeRate;
    private erp.lib.form.SFormField moFieldPkCurrencyId;
    private erp.lib.form.SFormField moFieldPkDateId;
    private erp.lib.form.SFormField moFieldExchangeRate;
    private erp.lib.form.SFormField moFieldIsDeleted;

    /** Creates new form DFormExchangeRate */
    public SFormExchangeRate(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        mnFormType = SDataConstants.FIN_EXC_RATE;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jlPkCurrencyId = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jcbPkCurrencyId = new javax.swing.JComboBox<SFormComponentItem>();
        jbPkCurrencyId = new javax.swing.JButton();
        jlPkDateId = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jftPkDateId = new javax.swing.JFormattedTextField();
        jbPkDateId = new javax.swing.JButton();
        jlExchangeRate = new javax.swing.JLabel();
        jtfExchangeRate = new javax.swing.JTextField();
        jlDummy = new javax.swing.JLabel();
        jckIsDeleted = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Tipo de cambio"); // NOI18N
        setModal(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel13.setLayout(new java.awt.GridLayout(4, 2, 5, 1));

        jlPkCurrencyId.setForeground(java.awt.Color.blue);
        jlPkCurrencyId.setText("Moneda: *"); // NOI18N
        jPanel13.add(jlPkCurrencyId);

        jPanel4.setLayout(new java.awt.BorderLayout(2, 0));

        jcbPkCurrencyId.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel4.add(jcbPkCurrencyId, java.awt.BorderLayout.CENTER);

        jbPkCurrencyId.setText("...");
        jbPkCurrencyId.setToolTipText("Seleccionar moneda");
        jbPkCurrencyId.setFocusable(false);
        jbPkCurrencyId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel4.add(jbPkCurrencyId, java.awt.BorderLayout.EAST);

        jPanel13.add(jPanel4);

        jlPkDateId.setForeground(java.awt.Color.blue);
        jlPkDateId.setText("Fecha: *");
        jPanel13.add(jlPkDateId);

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        jftPkDateId.setText("yyyy/mm/dd");
        jftPkDateId.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jftPkDateId);

        jbPkDateId.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbPkDateId.setToolTipText("Seleccionar fecha");
        jbPkDateId.setFocusable(false);
        jbPkDateId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel1.add(jbPkDateId);

        jPanel13.add(jPanel1);

        jlExchangeRate.setText("Tipo de cambio: *");
        jPanel13.add(jlExchangeRate);

        jtfExchangeRate.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfExchangeRate.setText("1.0000");
        jPanel13.add(jtfExchangeRate);
        jPanel13.add(jlDummy);

        jckIsDeleted.setText("Registro eliminado");
        jPanel13.add(jckIsDeleted);

        jPanel3.add(jPanel13, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar"); // NOI18N
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel2.add(jbOk);

        jbCancel.setText("Cancelar"); // NOI18N
        jbCancel.setToolTipText("[Escape]");
        jbCancel.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel2.add(jbCancel);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        setSize(new java.awt.Dimension(418, 297));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        if (mbFirstTime) {
            mbFirstTime = false;
            if (jcbPkCurrencyId.isEnabled()) jcbPkCurrencyId.requestFocus(); else jtfExchangeRate.requestFocus();
        }
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        mvFields = new Vector<SFormField>();

        moFieldPkCurrencyId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbPkCurrencyId, jlPkCurrencyId);
        moFieldPkCurrencyId.setPickerButton(jbPkCurrencyId);
        moFieldPkDateId = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jftPkDateId, jlPkDateId);
        moFieldPkDateId.setPickerButton(jbPkDateId);
        moFieldExchangeRate = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfExchangeRate, jlExchangeRate);
        moFieldExchangeRate.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsExchangeRateFormat());
        moFieldIsDeleted = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, true, jckIsDeleted);

        mvFields.add(moFieldPkCurrencyId);
        mvFields.add(moFieldPkDateId);
        mvFields.add(moFieldExchangeRate);
        mvFields.add(moFieldIsDeleted);

        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);
        jbPkCurrencyId.addActionListener(this);
        jbPkDateId.addActionListener(this);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void actionPkCurrencyId() {
        miClient.pickOption(SDataConstants.CFGU_CUR, moFieldPkCurrencyId, null);
    }

    private void actionPkDateId() {
        miClient.getGuiDatePickerXXX().pickDate(moFieldPkDateId.getDate(), moFieldPkDateId);
    }

    private void actionEdit(boolean edit) {

    }

    private void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbOk;
    private javax.swing.JButton jbPkCurrencyId;
    private javax.swing.JButton jbPkDateId;
    private javax.swing.JComboBox<SFormComponentItem> jcbPkCurrencyId;
    private javax.swing.JCheckBox jckIsDeleted;
    private javax.swing.JFormattedTextField jftPkDateId;
    private javax.swing.JLabel jlDummy;
    private javax.swing.JLabel jlExchangeRate;
    private javax.swing.JLabel jlPkCurrencyId;
    private javax.swing.JLabel jlPkDateId;
    private javax.swing.JTextField jtfExchangeRate;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moExchangeRate = null;

        for (int i = 0; i < mvFields.size(); i++) {
            mvFields.get(i).resetField();
        }

        moFieldPkDateId.setFieldValue(miClient.getSessionXXX().getWorkingDate());

        jcbPkCurrencyId.setEnabled(true);
        jbPkCurrencyId.setEnabled(true);
        jftPkDateId.setEnabled(true);
        jbPkDateId.setEnabled(true);

        jckIsDeleted.setEnabled(false);
    }

    @Override
    public void formRefreshCatalogues() {
        SFormUtilities.populateComboBox(miClient, jcbPkCurrencyId, SDataConstants.CFGU_CUR);
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(mvFields.get(i).getComponent());
                break;
            }
        }

        if (moExchangeRate == null && !validation.getIsError()) {
            if (moFieldPkCurrencyId.getKeyAsIntArray()[0] == miClient.getSessionXXX().getParamsErp().getFkCurrencyId()) {
                validation.setMessage("La moneda del tipo de cambio no puede ser la moneda local del sistema.");
                validation.setComponent(jcbPkCurrencyId);
            }
            else {
                if (SDataUtilities.callProcedureVal(miClient, SProcConstants.FIN_EXC_RATE_VAL,
                        new Object[] { moFieldPkCurrencyId.getKeyAsIntArray()[0], moFieldPkDateId.getDate() },
                        SLibConstants.EXEC_MODE_VERBOSE) > 0) {
                    validation.setMessage("Ya existe un registro para la moneda y fecha especificadas.");
                    validation.setComponent(jftPkDateId);
                }
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        moExchangeRate = (SDataExchangeRate) registry;

        moFieldPkCurrencyId.setFieldValue(new int[] { moExchangeRate.getPkCurrencyId() });
        moFieldPkDateId.setFieldValue(moExchangeRate.getPkDateId());
        moFieldExchangeRate.setFieldValue(moExchangeRate.getExchangeRate());
        moFieldIsDeleted.setFieldValue(moExchangeRate.getIsDeleted());

        jcbPkCurrencyId.setEnabled(false);
        jbPkCurrencyId.setEnabled(false);

        jftPkDateId.setEnabled(false);
        jbPkDateId.setEnabled(false);
        jckIsDeleted.setEnabled(true);
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        if (moExchangeRate == null) {
            moExchangeRate = new SDataExchangeRate();
            moExchangeRate.setPkCurrencyId(moFieldPkCurrencyId.getKeyAsIntArray()[0]);
            moExchangeRate.setPkDateId(moFieldPkDateId.getDate());
            moExchangeRate.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
        }
        else {
            moExchangeRate.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
        }

        moExchangeRate.setExchangeRate(moFieldExchangeRate.getDouble());
        moExchangeRate.setIsDeleted(moFieldIsDeleted.getBoolean());

        return moExchangeRate;
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbPkCurrencyId) {
                actionPkCurrencyId();
            }
            else if (button == jbPkDateId) {
                actionPkDateId();
            }
        }
    }
}
