/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mfin.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibTimeUtilities;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.mfin.data.SDataAccount;
import erp.mfin.data.SDataFiscalYearClosing;
import erp.mod.fin.db.SFinUtils;
import erp.server.SServerConstants;
import erp.server.SServerRequest;
import erp.server.SServerResponse;
import java.awt.BorderLayout;
import java.awt.Cursor;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import javax.swing.JFormattedTextField;
import javax.swing.border.TitledBorder;
import sa.lib.srv.SSrvConsts;

/**
 *
 * @author Juan Barajas
 */
public class SDialogUtilFiscalYearClosing extends javax.swing.JDialog implements java.awt.event.FocusListener {

    private int mnFormResult;
    private boolean mbFirstTime;
    protected int mnPkYearId;
    protected int mnPkPeriodId;
    protected int mnPkBookkeepingCenterId;
    protected java.lang.String msPkRecordTypeId;
    protected int mnPkNumberId;
    private java.lang.String msCurrentFkAccountId;
    protected int mnFkAccountTypeId_r;
    protected int mnFkAccountSystemTypeId;

    private erp.client.SClientInterface miClient;
    private erp.lib.form.SFormField moFieldYear;
    private erp.mfin.form.SPanelAccount moPanelFkAccountId;

    /** Creates new form SDialogUtilFiscalYearClosing */
    public SDialogUtilFiscalYearClosing(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jpRegistry = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jlYear = new javax.swing.JLabel();
        jtfYear = new javax.swing.JTextField();
        jlDummyAccount = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Generación de cierre del ejercicio");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Parámetros generación de cierre del ejercicio:"));
        jPanel3.setLayout(new java.awt.BorderLayout());

        jpRegistry.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlYear.setText("Ejercicio a cerrar: *");
        jlYear.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel1.add(jlYear);

        jtfYear.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfYear.setText("0000");
        jtfYear.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel1.add(jtfYear);

        jpRegistry.add(jPanel1, java.awt.BorderLayout.SOUTH);

        jlDummyAccount.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jlDummyAccount.setText("[Panel cuenta contable]");
        jlDummyAccount.setPreferredSize(new java.awt.Dimension(135, 50));
        jpRegistry.add(jlDummyAccount, java.awt.BorderLayout.NORTH);

        jPanel3.add(jpRegistry, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jbOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbOkActionPerformed(evt);
            }
        });
        jPanel2.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jbCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelActionPerformed(evt);
            }
        });
        jPanel2.add(jbCancel);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-417)/2, (screenSize.height-238)/2, 417, 238);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void jbOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbOkActionPerformed
        actionOk();
    }//GEN-LAST:event_jbOkActionPerformed

    private void jbCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelActionPerformed
        actionCancel();
    }//GEN-LAST:event_jbCancelActionPerformed

    private void initComponentsExtra() {
        // Create and add form panels:

        try {
            moPanelFkAccountId = new SPanelAccount(miClient, SDataConstants.FIN_ACC, false, true, false);
            moPanelFkAccountId.setBorder(new TitledBorder("Cuenta contable para registrar resultado del ejercicio:"));
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }

        jpRegistry.remove(jlDummyAccount);
        jpRegistry.add(moPanelFkAccountId, BorderLayout.NORTH);

        moFieldYear = new SFormField(miClient, SLibConstants.DATA_TYPE_INTEGER, true, jtfYear, jlYear);
        moFieldYear.setIntegerMin(2000);
        moFieldYear.setIntegerMax(2100);
        moFieldYear.setMinInclusive(true);
        moFieldYear.setMaxInclusive(true);
        moFieldYear.setDecimalFormat(miClient.getSessionXXX().getFormatters().getYearFormat());

        moPanelFkAccountId.getFieldAccount().getComponent().addFocusListener(this);

        SFormUtilities.createActionMap(rootPane, this, "actionOk", "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "actionCancel", "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;

            if (miClient.getSessionXXX().getCurrentCompanyBranchId() == 0) {
                miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_GUI_SESSION_BRANCH);
                actionCancel();
            }
            else {
                moPanelFkAccountId.getFieldAccount().getComponent().requestFocus();
            }
        }
    }

    private void renderAccountSettings() {
        SDataAccount oAccountMajor = null;

        if (!moPanelFkAccountId.isEmptyAccountId()) {
            oAccountMajor = moPanelFkAccountId.getDataAccountMajor();
            mnFkAccountSystemTypeId = oAccountMajor.getFkAccountSystemTypeId();
            mnFkAccountTypeId_r = oAccountMajor.getFkAccountTypeId_r();
        }
    }

    private void actionFkAccountIdFocusGained() {
        if (msCurrentFkAccountId.compareTo(moPanelFkAccountId.getFieldAccount().getString()) != 0) {
            renderAccountSettings();
        }

        msCurrentFkAccountId = moPanelFkAccountId.getFieldAccount().getString();
    }

    private void actionFkAccountIdFocusLost() {
        if (msCurrentFkAccountId.compareTo(moPanelFkAccountId.getFieldAccount().getString()) != 0) {
            renderAccountSettings();
        }

        msCurrentFkAccountId = moPanelFkAccountId.getFieldAccount().getString();
    }

    @SuppressWarnings("empty-statement")
    public void actionOk() {
        Cursor cursor = null;
        SDataFiscalYearClosing fyc = null;
        String message = "";

        if (moFieldYear.validateField()) {
            message = SDataUtilities.validateAccount(miClient, moPanelFkAccountId.getCurrentInputAccount(), miClient.getSessionXXX().getWorkingDate());

            if (message.length() > 0) {
                miClient.showMsgBoxWarning(message);
            }
            else {
                if (!SDataUtilities.isPeriodOpen(miClient, new int[] { moFieldYear.getInteger(), 12 })) {
                    miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_GUI_PER_CLOSE + "\nPeríodo cerrado: " + moFieldYear.getInteger() + "-12.");
                }
                else if (mnFkAccountTypeId_r != SDataConstantsSys.FINS_TP_ACC_BAL) {
                    miClient.showMsgBoxWarning("La cuenta debe ser de balance y capital contable.");
                }
                else {
                    try {
                        cursor = getCursor();
                        setCursor(new Cursor(Cursor.WAIT_CURSOR));

                        fyc = new SDataFiscalYearClosing();
                        fyc.setPkYearId(moFieldYear.getInteger());
                        fyc.setPkPeriodId(12);
                        fyc.setPkBookkeepingCenterId(miClient.getSessionXXX().getCurrentCompanyBranch().getDbmsDataCompanyBranchBkc().getPkBookkepingCenterId());
                        fyc.setPkRecordTypeId(SDataConstantsSys.FINU_TP_REC_FY_END);
                        fyc.setPkNumberId(1);
                        fyc.setFkCompanyBranchId(miClient.getSessionXXX().getCurrentCompanyBranchId());
                        fyc.setFkUserId(miClient.getSession().getUser().getPkUserId());
                        fyc.setFkAccountSystemTypeId(mnFkAccountSystemTypeId);
                        fyc.setFkAccountTypeId_r(mnFkAccountTypeId_r);
                        fyc.setFkAccountId(SFinUtils.getAccountId(miClient.getSession(), msCurrentFkAccountId));
                        fyc.setAccountId(msCurrentFkAccountId);
                        fyc.setAccountFormat(miClient.getSessionXXX().getParamsErp().getFormatAccountId().replace('9', '0'));
                        fyc.setAuxSimpleDateFormat(miClient.getSessionXXX().getFormatters().getDbmsDateFormat());

                        SServerRequest request = new SServerRequest(SServerConstants.REQ_DB_ACTION_SAVE);
                        request.setPacket(fyc);
                        SServerResponse response = miClient.getSessionXXX().request(request);

                        if (response.getResponseType() != SSrvConsts.RESP_TYPE_OK) {
                            throw new Exception(response.getMessage());
                        }
                        miClient.getGuiModule(SDataConstants.MOD_FIN).refreshCatalogues(SDataConstants.FIN_REC);
                        miClient.showMsgBoxInformation(SLibConstants.MSG_INF_PROC_FINISH);
                        actionCancel();
                    }
                    catch (Exception e) {
                        SLibUtilities.renderException(this, e);
                    }
                    finally {
                        setCursor(cursor);
                    }
                }
            }
        }
    }

    public void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbOk;
    private javax.swing.JLabel jlDummyAccount;
    private javax.swing.JLabel jlYear;
    private javax.swing.JPanel jpRegistry;
    private javax.swing.JTextField jtfYear;
    // End of variables declaration//GEN-END:variables

    public void resetForm() {
        int[] date = SLibTimeUtilities.digestDate(miClient.getSessionXXX().getWorkingDate());

        mnPkYearId = 0;
        mnPkPeriodId = 0;
        mnPkBookkeepingCenterId = 0;
        msPkRecordTypeId = "";
        mnPkNumberId = 0;
        moPanelFkAccountId.resetPanel();
        msCurrentFkAccountId = "";
        mnFkAccountTypeId_r = 0;

        mnFormResult = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moFieldYear.setFieldValue(date[0]);
    }

    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void focusGained(FocusEvent e) {
        if (e.getSource() instanceof javax.swing.JFormattedTextField) {
            JFormattedTextField formattedTextField = (JFormattedTextField) e.getSource();

            if (formattedTextField == moPanelFkAccountId.getFieldAccount().getComponent()) {
                actionFkAccountIdFocusGained();
            }
        }
    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof javax.swing.JFormattedTextField) {
            JFormattedTextField formattedTextField = (JFormattedTextField) e.getSource();

            if (formattedTextField == moPanelFkAccountId.getFieldAccount().getComponent()) {
                actionFkAccountIdFocusLost();
            }
        }
    }
}
