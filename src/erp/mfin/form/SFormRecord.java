/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package erp.mfin.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataReadDescriptions;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibTimeUtilities;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormInterface;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STableConstants;
import erp.lib.table.STablePaneGrid;
import erp.lib.table.STableRow;
import erp.mfin.data.SDataAccountCash;
import erp.mfin.data.SDataCheck;
import erp.mfin.data.SDataRecord;
import erp.mfin.data.SDataRecordEntry;
import erp.mfin.data.SDataRecordEntryRow;
import erp.mod.fin.db.SFinConsts;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JToggleButton;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;

/**
 *
 * @author  Sergio Flores
 */
public class SFormRecord extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener, java.awt.event.ItemListener, javax.swing.event.ListSelectionListener {

    private final int CONCEPT_POLICY_BLANK = 1;
    private final int CONCEPT_POLICY_RECORD = 2;
    private final int CONCEPT_POLICY_CURR_ENTRY = 3;
    private final int CONCEPT_POLICY_LAST_ENTRY = 4;

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mfin.data.SDataRecord moRecord;
    private erp.mfin.data.SDataAccountCash moAccountCash;
    private erp.lib.form.SFormField moFieldDate;
    private erp.lib.form.SFormField moFieldConcept;
    private erp.lib.form.SFormField moFieldIsAdjustmentYearEnd;
    private erp.lib.form.SFormField moFieldIsAdjustmentAudit;
    private erp.lib.form.SFormField moFieldFkAccountCashId_n;
    private erp.lib.form.SFormField moFieldIsDeleted;
    private erp.mfin.form.SFormRecordEntry moFormEntry;
    private erp.mfin.form.SDialogRecordPayment moDialogPaymentSup;
    private erp.mfin.form.SDialogRecordPayment moDialogPaymentCus;
    private erp.mfin.form.SDialogRecordPaymentComplete moDialogPaymentCompleteSup;
    private erp.mfin.form.SDialogRecordPaymentComplete moDialogPaymentCompleteCus;
    private erp.mfin.form.SFormMoneyInOut moFormMoneyInOut;
    private erp.mfin.form.SFormMoneyOutCheck moFormMoneyOutCheck;
    private erp.mfin.form.SFormMoneyInOutBizPartner moFormMoneyInOutBizPartner;
    private erp.mfin.form.SFormDifferenceIncomeExpense moFormDifferenceIncomeExpense;
    private erp.mfin.form.SFormAccountCashTransfer moFormAccountCashTransfer;
    private erp.lib.table.STablePaneGrid moPaneGridEntries;

    private boolean mbParamIsReadOnly;
    private boolean mbOriginalIsDeleted;
    private java.lang.String msAuxLastEntryConcept;

    /** Creates new form SFormRecord */
    public SFormRecord(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        mnFormType = SDataConstants.FIN_REC;
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpRegistry = new javax.swing.JPanel();
        jpRecord = new javax.swing.JPanel();
        jpRecord1 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jlDate = new javax.swing.JLabel();
        jftDate = new javax.swing.JFormattedTextField();
        jbDate = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jlPeriod = new javax.swing.JLabel();
        jtfPeriod = new javax.swing.JTextField();
        jPanel14 = new javax.swing.JPanel();
        jlCompanyBranch = new javax.swing.JLabel();
        jtfCompanyBranch = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jlPkNumberId = new javax.swing.JLabel();
        jtfPkNumberId = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jlConcept = new javax.swing.JLabel();
        jtfConcept = new javax.swing.JTextField();
        jckIsRecordConceptCopyEnabled = new javax.swing.JCheckBox();
        jPanel9 = new javax.swing.JPanel();
        jlFkAccountCashId_n = new javax.swing.JLabel();
        jcbFkAccountCashId_n = new javax.swing.JComboBox<SFormComponentItem>();
        jtfAccountCashCurrencyKey = new javax.swing.JTextField();
        jpRecord2 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jlDebit = new javax.swing.JLabel();
        jtfDebit = new javax.swing.JTextField();
        jtfCurrencyKeyDebit = new javax.swing.JTextField();
        jPanel16 = new javax.swing.JPanel();
        jlCredit = new javax.swing.JLabel();
        jtfCredit = new javax.swing.JTextField();
        jtfCurrencyKeyCredit = new javax.swing.JTextField();
        jPanel17 = new javax.swing.JPanel();
        jlBalance = new javax.swing.JLabel();
        jtfBalance = new javax.swing.JTextField();
        jtfCurrencyKeyBalance = new javax.swing.JTextField();
        jPanel18 = new javax.swing.JPanel();
        jckIsAudited = new javax.swing.JCheckBox();
        jckIsAdjustmentYearEnd = new javax.swing.JCheckBox();
        jPanel19 = new javax.swing.JPanel();
        jckIsAuthorized = new javax.swing.JCheckBox();
        jckIsAdjustmentAudit = new javax.swing.JCheckBox();
        jPanel20 = new javax.swing.JPanel();
        jckIsSystem = new javax.swing.JCheckBox();
        jckIsDeleted = new javax.swing.JCheckBox();
        jpEntries = new javax.swing.JPanel();
        jpCommands = new javax.swing.JPanel();
        jpCommandsEntries = new javax.swing.JPanel();
        jpCommands11 = new javax.swing.JPanel();
        jbEntryNew = new javax.swing.JButton();
        jbEntryNewInsert = new javax.swing.JButton();
        jbEntryNewCopy = new javax.swing.JButton();
        jbEntryEdit = new javax.swing.JButton();
        jbEntryDelete = new javax.swing.JButton();
        jsEntry01 = new javax.swing.JSeparator();
        jbEntryMoveDown = new javax.swing.JButton();
        jbEntryMoveUp = new javax.swing.JButton();
        jsEntry2 = new javax.swing.JSeparator();
        jbEntryViewSum = new javax.swing.JButton();
        jsEntry3 = new javax.swing.JSeparator();
        jtbEntryDeletedFilter = new javax.swing.JToggleButton();
        jpCommands12 = new javax.swing.JPanel();
        jpCommands13 = new javax.swing.JPanel();
        jlGuiConceptPolicy = new javax.swing.JLabel();
        jcbGuiConceptPolicy = new javax.swing.JComboBox<SFormComponentItem>();
        jpCommandsCashAccount = new javax.swing.JPanel();
        jpCommandsCashAccount1 = new javax.swing.JPanel();
        jPanel22 = new javax.swing.JPanel();
        jbMoneyIn = new javax.swing.JButton();
        jbMoneyInOther = new javax.swing.JButton();
        jbMoneyInPaymentCus = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel23 = new javax.swing.JPanel();
        jbMiPaymentCus = new javax.swing.JButton();
        jbMiAdvanceCus = new javax.swing.JButton();
        jbMiAdvanceSupDev = new javax.swing.JButton();
        jbMiCreditCdr = new javax.swing.JButton();
        jbMiCreditDbr = new javax.swing.JButton();
        jbMiExchangeRate = new javax.swing.JButton();
        jpCommandsCashAccount2 = new javax.swing.JPanel();
        jPanel25 = new javax.swing.JPanel();
        jbMoneyOut = new javax.swing.JButton();
        jbMoneyOutOther = new javax.swing.JButton();
        jbMoneyOutPaymentSup = new javax.swing.JButton();
        jbMoneyOutCheck = new javax.swing.JButton();
        jbMoneyOutTransfer = new javax.swing.JButton();
        jPanel26 = new javax.swing.JPanel();
        jbMoPaymentSup = new javax.swing.JButton();
        jbMoAdvanceSup = new javax.swing.JButton();
        jbMoAdvanceCusDev = new javax.swing.JButton();
        jbMoDebitCdr = new javax.swing.JButton();
        jbMoDebitDbr = new javax.swing.JButton();
        jbMoExchangeRate = new javax.swing.JButton();
        jpCommandsJournal = new javax.swing.JPanel();
        jpCommandsJournal1 = new javax.swing.JPanel();
        jpControlCashAccount2 = new javax.swing.JPanel();
        jbDbtPaymentSup = new javax.swing.JButton();
        jbDbtAdvanceSup = new javax.swing.JButton();
        jbDbtAdvanceCusDev = new javax.swing.JButton();
        jbDbtDebitCdr = new javax.swing.JButton();
        jbDbtDebitDbr = new javax.swing.JButton();
        jpCommandsJournal2 = new javax.swing.JPanel();
        jpControlCashAccount3 = new javax.swing.JPanel();
        jbCdtPaymentCus = new javax.swing.JButton();
        jbCdtAdvanceCus = new javax.swing.JButton();
        jbCdtAdvanceSupDev = new javax.swing.JButton();
        jbCdtCreditCdr = new javax.swing.JButton();
        jbCdtCreditDbr = new javax.swing.JButton();
        jpControls = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("PÃ³liza contable"); // NOI18N
        setModal(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jpRegistry.setLayout(new java.awt.BorderLayout(5, 5));

        jpRecord.setLayout(new java.awt.BorderLayout());

        jpRecord1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpRecord1.setLayout(new java.awt.GridLayout(6, 1, 0, 2));

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlDate.setText("Fecha de la pÃ³liza: *");
        jlDate.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel11.add(jlDate);

        jftDate.setText("yyyy/mm/dd");
        jftDate.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel11.add(jftDate);

        jbDate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbDate.setToolTipText("Seleccionar fecha");
        jbDate.setFocusable(false);
        jbDate.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel11.add(jbDate);

        jpRecord1.add(jPanel11);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlPeriod.setText("PerÃ­odo contable:");
        jlPeriod.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel6.add(jlPeriod);

        jtfPeriod.setEditable(false);
        jtfPeriod.setText("yyyy-dd");
        jtfPeriod.setFocusable(false);
        jtfPeriod.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel6.add(jtfPeriod);

        jpRecord1.add(jPanel6);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlCompanyBranch.setText("Sucursal de la empresa:");
        jlCompanyBranch.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel14.add(jlCompanyBranch);

        jtfCompanyBranch.setEditable(false);
        jtfCompanyBranch.setText("COMPANY BRANCH");
        jtfCompanyBranch.setFocusable(false);
        jtfCompanyBranch.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel14.add(jtfCompanyBranch);

        jpRecord1.add(jPanel14);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlPkNumberId.setText("NÃºmero de pÃ³liza:");
        jlPkNumberId.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel5.add(jlPkNumberId);

        jtfPkNumberId.setEditable(false);
        jtfPkNumberId.setText("0");
        jtfPkNumberId.setFocusable(false);
        jtfPkNumberId.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jtfPkNumberId);

        jpRecord1.add(jPanel5);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlConcept.setText("Concepto pÃ³liza: *");
        jlConcept.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel7.add(jlConcept);

        jtfConcept.setText("CONCEPT");
        jtfConcept.setPreferredSize(new java.awt.Dimension(450, 23));
        jPanel7.add(jtfConcept);

        jckIsRecordConceptCopyEnabled.setText("Copiar");
        jckIsRecordConceptCopyEnabled.setEnabled(false);
        jckIsRecordConceptCopyEnabled.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jckIsRecordConceptCopyEnabled.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jckIsRecordConceptCopyEnabled.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel7.add(jckIsRecordConceptCopyEnabled);

        jpRecord1.add(jPanel7);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlFkAccountCashId_n.setText("Cuenta de dinero:");
        jlFkAccountCashId_n.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel9.add(jlFkAccountCashId_n);

        jcbFkAccountCashId_n.setEnabled(false);
        jcbFkAccountCashId_n.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel9.add(jcbFkAccountCashId_n);

        jtfAccountCashCurrencyKey.setEditable(false);
        jtfAccountCashCurrencyKey.setText("CUR");
        jtfAccountCashCurrencyKey.setToolTipText("Moneda");
        jtfAccountCashCurrencyKey.setFocusable(false);
        jtfAccountCashCurrencyKey.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel9.add(jtfAccountCashCurrencyKey);

        jpRecord1.add(jPanel9);

        jpRecord.add(jpRecord1, java.awt.BorderLayout.CENTER);

        jpRecord2.setBorder(javax.swing.BorderFactory.createTitledBorder("Saldo de la pÃ³liza contable:"));
        jpRecord2.setLayout(new java.awt.GridLayout(6, 1, 0, 2));

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlDebit.setText("Cargos:");
        jlDebit.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel15.add(jlDebit);

        jtfDebit.setEditable(false);
        jtfDebit.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfDebit.setText("0.00");
        jtfDebit.setFocusable(false);
        jtfDebit.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel15.add(jtfDebit);

        jtfCurrencyKeyDebit.setEditable(false);
        jtfCurrencyKeyDebit.setText("CUR");
        jtfCurrencyKeyDebit.setFocusable(false);
        jtfCurrencyKeyDebit.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel15.add(jtfCurrencyKeyDebit);

        jpRecord2.add(jPanel15);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlCredit.setText("Abonos:");
        jlCredit.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel16.add(jlCredit);

        jtfCredit.setEditable(false);
        jtfCredit.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfCredit.setText("0.00");
        jtfCredit.setFocusable(false);
        jtfCredit.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel16.add(jtfCredit);

        jtfCurrencyKeyCredit.setEditable(false);
        jtfCurrencyKeyCredit.setText("CUR");
        jtfCurrencyKeyCredit.setFocusable(false);
        jtfCurrencyKeyCredit.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel16.add(jtfCurrencyKeyCredit);

        jpRecord2.add(jPanel16);

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlBalance.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jlBalance.setText("Saldo:");
        jlBalance.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel17.add(jlBalance);

        jtfBalance.setEditable(false);
        jtfBalance.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jtfBalance.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfBalance.setText("0.00");
        jtfBalance.setFocusable(false);
        jtfBalance.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel17.add(jtfBalance);

        jtfCurrencyKeyBalance.setEditable(false);
        jtfCurrencyKeyBalance.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jtfCurrencyKeyBalance.setText("CUR");
        jtfCurrencyKeyBalance.setFocusable(false);
        jtfCurrencyKeyBalance.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel17.add(jtfCurrencyKeyBalance);

        jpRecord2.add(jPanel17);

        jPanel18.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jckIsAudited.setText("Registro auditado");
        jckIsAudited.setEnabled(false);
        jckIsAudited.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel18.add(jckIsAudited);

        jckIsAdjustmentYearEnd.setText("Ajuste de cierre");
        jckIsAdjustmentYearEnd.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel18.add(jckIsAdjustmentYearEnd);

        jpRecord2.add(jPanel18);

        jPanel19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jckIsAuthorized.setText("Registro autorizado");
        jckIsAuthorized.setEnabled(false);
        jckIsAuthorized.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel19.add(jckIsAuthorized);

        jckIsAdjustmentAudit.setText("Ajuste de auditorÃ­a");
        jckIsAdjustmentAudit.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel19.add(jckIsAdjustmentAudit);

        jpRecord2.add(jPanel19);

        jPanel20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jckIsSystem.setText("Registro de sistema");
        jckIsSystem.setEnabled(false);
        jckIsSystem.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel20.add(jckIsSystem);

        jckIsDeleted.setText("Registro eliminado");
        jckIsDeleted.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel20.add(jckIsDeleted);

        jpRecord2.add(jPanel20);

        jpRecord.add(jpRecord2, java.awt.BorderLayout.EAST);

        jpRegistry.add(jpRecord, java.awt.BorderLayout.NORTH);

        jpEntries.setBorder(javax.swing.BorderFactory.createTitledBorder("Partidas de la pÃ³liza contable:"));
        jpEntries.setLayout(new java.awt.BorderLayout());

        jpCommands.setLayout(new java.awt.BorderLayout());

        jpCommandsEntries.setLayout(new java.awt.BorderLayout());

        jpCommands11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 1, 0));

        jbEntryNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_new.gif"))); // NOI18N
        jbEntryNew.setToolTipText("Crear partida [Ctrl + N]");
        jbEntryNew.setPreferredSize(new java.awt.Dimension(23, 23));
        jpCommands11.add(jbEntryNew);

        jbEntryNewInsert.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_insert.gif"))); // NOI18N
        jbEntryNewInsert.setToolTipText("Insertar partida [Ctrl + MayÃºsc + I]");
        jbEntryNewInsert.setPreferredSize(new java.awt.Dimension(23, 23));
        jpCommands11.add(jbEntryNewInsert);

        jbEntryNewCopy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_copy.gif"))); // NOI18N
        jbEntryNewCopy.setToolTipText("Copiar partida [Ctrl + MayÃºsc + C]");
        jbEntryNewCopy.setPreferredSize(new java.awt.Dimension(23, 23));
        jpCommands11.add(jbEntryNewCopy);

        jbEntryEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_edit.gif"))); // NOI18N
        jbEntryEdit.setToolTipText("Modificar partida [Ctrl + M]");
        jbEntryEdit.setPreferredSize(new java.awt.Dimension(23, 23));
        jpCommands11.add(jbEntryEdit);

        jbEntryDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_delete.gif"))); // NOI18N
        jbEntryDelete.setToolTipText("Eliminar partida [Ctrl + D]");
        jbEntryDelete.setPreferredSize(new java.awt.Dimension(23, 23));
        jpCommands11.add(jbEntryDelete);

        jsEntry01.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jsEntry01.setPreferredSize(new java.awt.Dimension(3, 23));
        jpCommands11.add(jsEntry01);

        jbEntryMoveDown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_move_down.gif"))); // NOI18N
        jbEntryMoveDown.setToolTipText("Mover partida abajo [Ctrl + MayÃºsc + D]");
        jbEntryMoveDown.setPreferredSize(new java.awt.Dimension(23, 23));
        jpCommands11.add(jbEntryMoveDown);

        jbEntryMoveUp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_move_up.gif"))); // NOI18N
        jbEntryMoveUp.setToolTipText("Mover partida arriba [Ctrl + MayÃºsc + U]");
        jbEntryMoveUp.setPreferredSize(new java.awt.Dimension(23, 23));
        jpCommands11.add(jbEntryMoveUp);

        jsEntry2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jsEntry2.setPreferredSize(new java.awt.Dimension(3, 23));
        jpCommands11.add(jsEntry2);

        jbEntryViewSum.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_sum.gif"))); // NOI18N
        jbEntryViewSum.setToolTipText("Ver sumatoria [Ctrl + S]");
        jbEntryViewSum.setPreferredSize(new java.awt.Dimension(23, 23));
        jpCommands11.add(jbEntryViewSum);

        jsEntry3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jsEntry3.setPreferredSize(new java.awt.Dimension(3, 23));
        jpCommands11.add(jsEntry3);

        jtbEntryDeletedFilter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/switch_filter_off.gif"))); // NOI18N
        jtbEntryDeletedFilter.setToolTipText("Filtrar partidas eliminadas [Ctrl + F]");
        jtbEntryDeletedFilter.setPreferredSize(new java.awt.Dimension(23, 23));
        jtbEntryDeletedFilter.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/switch_filter_on.gif"))); // NOI18N
        jpCommands11.add(jtbEntryDeletedFilter);

        jpCommandsEntries.add(jpCommands11, java.awt.BorderLayout.WEST);

        jpCommands12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 1, 0));
        jpCommandsEntries.add(jpCommands12, java.awt.BorderLayout.CENTER);

        jpCommands13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 2, 0));

        jlGuiConceptPolicy.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jlGuiConceptPolicy.setText("Concepto para nuevas partidas:");
        jlGuiConceptPolicy.setPreferredSize(new java.awt.Dimension(200, 23));
        jpCommands13.add(jlGuiConceptPolicy);

        jcbGuiConceptPolicy.setPreferredSize(new java.awt.Dimension(150, 23));
        jpCommands13.add(jcbGuiConceptPolicy);

        jpCommandsEntries.add(jpCommands13, java.awt.BorderLayout.EAST);

        jpCommands.add(jpCommandsEntries, java.awt.BorderLayout.NORTH);

        jpCommandsCashAccount.setLayout(new java.awt.GridLayout(2, 1));

        jpCommandsCashAccount1.setLayout(new java.awt.BorderLayout());

        jPanel22.setBorder(javax.swing.BorderFactory.createTitledBorder("Ingresos:"));
        jPanel22.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jbMoneyIn.setText("Ingreso");
        jbMoneyIn.setToolTipText("Ingreso de dinero");
        jbMoneyIn.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbMoneyIn.setPreferredSize(new java.awt.Dimension(85, 23));
        jPanel22.add(jbMoneyIn);

        jbMoneyInOther.setText("Ingr. otra cta.");
        jbMoneyInOther.setToolTipText("Ingreso de dinero en otra cuenta");
        jbMoneyInOther.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbMoneyInOther.setPreferredSize(new java.awt.Dimension(95, 23));
        jPanel22.add(jbMoneyInOther);

        jbMoneyInPaymentCus.setText("Ingr.& cobro cte.");
        jbMoneyInPaymentCus.setToolTipText("Ingreso de dinero & cobro a clientes");
        jbMoneyInPaymentCus.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbMoneyInPaymentCus.setPreferredSize(new java.awt.Dimension(95, 23));
        jPanel22.add(jbMoneyInPaymentCus);

        jLabel2.setPreferredSize(new java.awt.Dimension(65, 23));
        jPanel22.add(jLabel2);

        jLabel3.setPreferredSize(new java.awt.Dimension(65, 23));
        jPanel22.add(jLabel3);

        jpCommandsCashAccount1.add(jPanel22, java.awt.BorderLayout.CENTER);

        jPanel23.setBorder(javax.swing.BorderFactory.createTitledBorder("Contrapartidas ingresos:"));
        jPanel23.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jbMiPaymentCus.setText("Cobro cte.");
        jbMiPaymentCus.setToolTipText("Cobro a clientes");
        jbMiPaymentCus.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbMiPaymentCus.setPreferredSize(new java.awt.Dimension(95, 23));
        jPanel23.add(jbMiPaymentCus);

        jbMiAdvanceCus.setText("Cobro ant. cte.");
        jbMiAdvanceCus.setToolTipText("Cobro anticipo a clientes");
        jbMiAdvanceCus.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbMiAdvanceCus.setPreferredSize(new java.awt.Dimension(95, 23));
        jPanel23.add(jbMiAdvanceCus);

        jbMiAdvanceSupDev.setText("Abono ant. prv.");
        jbMiAdvanceSupDev.setToolTipText("DevoluciÃ³n anticipo a proveedores");
        jbMiAdvanceSupDev.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbMiAdvanceSupDev.setPreferredSize(new java.awt.Dimension(95, 23));
        jPanel23.add(jbMiAdvanceSupDev);

        jbMiCreditCdr.setText("Abono acr. div.");
        jbMiCreditCdr.setToolTipText("Abono a acreedores diversos");
        jbMiCreditCdr.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbMiCreditCdr.setPreferredSize(new java.awt.Dimension(95, 23));
        jPanel23.add(jbMiCreditCdr);

        jbMiCreditDbr.setText("Abono ddr. div.");
        jbMiCreditDbr.setToolTipText("Abono a deudores diversos");
        jbMiCreditDbr.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbMiCreditDbr.setPreferredSize(new java.awt.Dimension(95, 23));
        jPanel23.add(jbMiCreditDbr);

        jbMiExchangeRate.setText("Ganancia cambios");
        jbMiExchangeRate.setToolTipText("Ganancia por diferencia cambiaria");
        jbMiExchangeRate.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbMiExchangeRate.setPreferredSize(new java.awt.Dimension(95, 23));
        jPanel23.add(jbMiExchangeRate);

        jpCommandsCashAccount1.add(jPanel23, java.awt.BorderLayout.EAST);

        jpCommandsCashAccount.add(jpCommandsCashAccount1);

        jpCommandsCashAccount2.setLayout(new java.awt.BorderLayout());

        jPanel25.setBorder(javax.swing.BorderFactory.createTitledBorder("Egresos:"));
        jPanel25.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jbMoneyOut.setText("Egreso");
        jbMoneyOut.setToolTipText("Egreso de dinero");
        jbMoneyOut.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbMoneyOut.setPreferredSize(new java.awt.Dimension(85, 23));
        jPanel25.add(jbMoneyOut);

        jbMoneyOutOther.setText("Egr. otra cta.");
        jbMoneyOutOther.setToolTipText("Egreso de dinero en otra cuenta");
        jbMoneyOutOther.setFocusable(false);
        jbMoneyOutOther.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbMoneyOutOther.setPreferredSize(new java.awt.Dimension(95, 23));
        jPanel25.add(jbMoneyOutOther);

        jbMoneyOutPaymentSup.setText("Egr.& pago prv.");
        jbMoneyOutPaymentSup.setToolTipText("Egreso de dinero & pago a proveedores");
        jbMoneyOutPaymentSup.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbMoneyOutPaymentSup.setPreferredSize(new java.awt.Dimension(95, 23));
        jPanel25.add(jbMoneyOutPaymentSup);

        jbMoneyOutCheck.setText("Cheque");
        jbMoneyOutCheck.setToolTipText("Egreso de dinero con cheque");
        jbMoneyOutCheck.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbMoneyOutCheck.setPreferredSize(new java.awt.Dimension(65, 23));
        jPanel25.add(jbMoneyOutCheck);

        jbMoneyOutTransfer.setText("Traspaso");
        jbMoneyOutTransfer.setToolTipText("Egreso de dinero con traspaso ");
        jbMoneyOutTransfer.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbMoneyOutTransfer.setPreferredSize(new java.awt.Dimension(65, 23));
        jPanel25.add(jbMoneyOutTransfer);

        jpCommandsCashAccount2.add(jPanel25, java.awt.BorderLayout.CENTER);

        jPanel26.setBorder(javax.swing.BorderFactory.createTitledBorder("Contrapartidas egresos:"));
        jPanel26.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jbMoPaymentSup.setText("Pago prv.");
        jbMoPaymentSup.setToolTipText("Pago a proveedores");
        jbMoPaymentSup.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbMoPaymentSup.setPreferredSize(new java.awt.Dimension(95, 23));
        jPanel26.add(jbMoPaymentSup);

        jbMoAdvanceSup.setText("Pago ant. prv.");
        jbMoAdvanceSup.setToolTipText("Pago anticipo a proveedores");
        jbMoAdvanceSup.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbMoAdvanceSup.setPreferredSize(new java.awt.Dimension(95, 23));
        jPanel26.add(jbMoAdvanceSup);

        jbMoAdvanceCusDev.setText("Cargo ant. cte.");
        jbMoAdvanceCusDev.setToolTipText("DevoluciÃ³n anticipo a clientes");
        jbMoAdvanceCusDev.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbMoAdvanceCusDev.setPreferredSize(new java.awt.Dimension(95, 23));
        jPanel26.add(jbMoAdvanceCusDev);

        jbMoDebitCdr.setText("Cargo acr. div.");
        jbMoDebitCdr.setToolTipText("Cargo a acreedores diversos");
        jbMoDebitCdr.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbMoDebitCdr.setPreferredSize(new java.awt.Dimension(95, 23));
        jPanel26.add(jbMoDebitCdr);

        jbMoDebitDbr.setText("Cargo ddr. div.");
        jbMoDebitDbr.setToolTipText("Cargo a deudores diversos");
        jbMoDebitDbr.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbMoDebitDbr.setPreferredSize(new java.awt.Dimension(95, 23));
        jPanel26.add(jbMoDebitDbr);

        jbMoExchangeRate.setText("PÃ©rdida cambios");
        jbMoExchangeRate.setToolTipText("PÃ©rdida por diferencia cambiaria");
        jbMoExchangeRate.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbMoExchangeRate.setPreferredSize(new java.awt.Dimension(95, 23));
        jPanel26.add(jbMoExchangeRate);

        jpCommandsCashAccount2.add(jPanel26, java.awt.BorderLayout.EAST);

        jpCommandsCashAccount.add(jpCommandsCashAccount2);

        jpCommands.add(jpCommandsCashAccount, java.awt.BorderLayout.CENTER);

        jpCommandsJournal.setLayout(new java.awt.GridLayout(1, 2));

        jpCommandsJournal1.setLayout(new java.awt.BorderLayout());

        jpControlCashAccount2.setBorder(javax.swing.BorderFactory.createTitledBorder("Cargos:"));
        jpControlCashAccount2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jbDbtPaymentSup.setText("Aplic. pago prv.");
        jbDbtPaymentSup.setToolTipText("AplicaciÃ³n pago a proveedores");
        jbDbtPaymentSup.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbDbtPaymentSup.setPreferredSize(new java.awt.Dimension(95, 23));
        jpControlCashAccount2.add(jbDbtPaymentSup);

        jbDbtAdvanceSup.setText("Cargo ant. prv.");
        jbDbtAdvanceSup.setToolTipText("Cargo anticipo a proveedores");
        jbDbtAdvanceSup.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbDbtAdvanceSup.setPreferredSize(new java.awt.Dimension(95, 23));
        jpControlCashAccount2.add(jbDbtAdvanceSup);

        jbDbtAdvanceCusDev.setText("Cargo ant. cte.");
        jbDbtAdvanceCusDev.setToolTipText("Cargo anticipo a clientes");
        jbDbtAdvanceCusDev.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbDbtAdvanceCusDev.setPreferredSize(new java.awt.Dimension(95, 23));
        jpControlCashAccount2.add(jbDbtAdvanceCusDev);

        jbDbtDebitCdr.setText("Cargo acr. div.");
        jbDbtDebitCdr.setToolTipText("Cargo a acreedores diversos");
        jbDbtDebitCdr.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbDbtDebitCdr.setPreferredSize(new java.awt.Dimension(95, 23));
        jpControlCashAccount2.add(jbDbtDebitCdr);

        jbDbtDebitDbr.setText("Cargo ddr. div.");
        jbDbtDebitDbr.setToolTipText("Cargo a deudores diversos");
        jbDbtDebitDbr.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbDbtDebitDbr.setPreferredSize(new java.awt.Dimension(95, 23));
        jpControlCashAccount2.add(jbDbtDebitDbr);

        jpCommandsJournal1.add(jpControlCashAccount2, java.awt.BorderLayout.CENTER);

        jpCommandsJournal.add(jpCommandsJournal1);

        jpCommandsJournal2.setBorder(javax.swing.BorderFactory.createTitledBorder("Abonos:"));
        jpCommandsJournal2.setLayout(new java.awt.BorderLayout());

        jpControlCashAccount3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jbCdtPaymentCus.setText("Aplic. pago cte.");
        jbCdtPaymentCus.setToolTipText("AplicaciÃ³n cobro a clientes");
        jbCdtPaymentCus.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbCdtPaymentCus.setPreferredSize(new java.awt.Dimension(95, 23));
        jpControlCashAccount3.add(jbCdtPaymentCus);

        jbCdtAdvanceCus.setText("Abono ant. cte.");
        jbCdtAdvanceCus.setToolTipText("Abono anticipo a clientes");
        jbCdtAdvanceCus.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbCdtAdvanceCus.setPreferredSize(new java.awt.Dimension(95, 23));
        jpControlCashAccount3.add(jbCdtAdvanceCus);

        jbCdtAdvanceSupDev.setText("Abono ant. prv.");
        jbCdtAdvanceSupDev.setToolTipText("Abono anticipo a proveedores");
        jbCdtAdvanceSupDev.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbCdtAdvanceSupDev.setPreferredSize(new java.awt.Dimension(95, 23));
        jpControlCashAccount3.add(jbCdtAdvanceSupDev);

        jbCdtCreditCdr.setText("Abono acr. div.");
        jbCdtCreditCdr.setToolTipText("Abono a acreedores diversos");
        jbCdtCreditCdr.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbCdtCreditCdr.setPreferredSize(new java.awt.Dimension(95, 23));
        jpControlCashAccount3.add(jbCdtCreditCdr);

        jbCdtCreditDbr.setText("Abono ddr. div.");
        jbCdtCreditDbr.setToolTipText("Abono a deudores diversos");
        jbCdtCreditDbr.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbCdtCreditDbr.setPreferredSize(new java.awt.Dimension(95, 23));
        jpControlCashAccount3.add(jbCdtCreditDbr);

        jpCommandsJournal2.add(jpControlCashAccount3, java.awt.BorderLayout.CENTER);

        jpCommandsJournal.add(jpCommandsJournal2);

        jpCommands.add(jpCommandsJournal, java.awt.BorderLayout.SOUTH);

        jpEntries.add(jpCommands, java.awt.BorderLayout.NORTH);

        jpRegistry.add(jpEntries, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpRegistry, java.awt.BorderLayout.CENTER);

        jpControls.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar"); // NOI18N
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jpControls.add(jbOk);

        jbCancel.setText("Cancelar"); // NOI18N
        jbCancel.setToolTipText("[Escape]");
        jpControls.add(jbCancel);

        getContentPane().add(jpControls, java.awt.BorderLayout.PAGE_END);

        setSize(new java.awt.Dimension(1056, 689));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        actionPerformedCancel();
    }//GEN-LAST:event_formWindowClosing

    private void initComponentsExtra() {
        int i = 0;
        STableColumnForm[] aoTableColumns = null;
        mvFields = new Vector<SFormField>();

        moFieldDate = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jftDate, jlDate);
        moFieldDate.setPickerButton(jbDate);
        moFieldConcept = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtfConcept, jlConcept);
        moFieldConcept.setLengthMax(100);
        moFieldIsAdjustmentYearEnd = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, true, jckIsAdjustmentYearEnd);
        moFieldIsAdjustmentAudit = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, true, jckIsAdjustmentAudit);
        moFieldFkAccountCashId_n = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, false, jcbFkAccountCashId_n, jlFkAccountCashId_n);
        moFieldIsDeleted = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, true, jckIsDeleted);

        mvFields.add(moFieldDate);
        mvFields.add(moFieldConcept);
        mvFields.add(moFieldFkAccountCashId_n);
        mvFields.add(moFieldIsDeleted);

        moFormEntry = new SFormRecordEntry(miClient);
        moDialogPaymentSup = new SDialogRecordPayment(miClient, SDataConstantsSys.BPSS_CT_BP_SUP);
        moDialogPaymentCus = new SDialogRecordPayment(miClient, SDataConstantsSys.BPSS_CT_BP_CUS);
        moDialogPaymentCompleteSup = new SDialogRecordPaymentComplete(miClient, SDataConstantsSys.BPSS_CT_BP_SUP);
        moDialogPaymentCompleteCus = new SDialogRecordPaymentComplete(miClient, SDataConstantsSys.BPSS_CT_BP_CUS);
        moFormMoneyInOut = new SFormMoneyInOut(miClient);
        moFormMoneyOutCheck = new SFormMoneyOutCheck(miClient);
        moFormMoneyInOutBizPartner = new SFormMoneyInOutBizPartner(miClient);
        moFormDifferenceIncomeExpense = new SFormDifferenceIncomeExpense(miClient);
        moFormAccountCashTransfer = new SFormAccountCashTransfer(miClient);
        moPaneGridEntries = new STablePaneGrid(miClient);
        moPaneGridEntries.setDoubleClickAction(this, "publicActionEntryEdit");
        jpEntries.add(moPaneGridEntries, BorderLayout.CENTER);

        aoTableColumns = new STableColumnForm[24];
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_INTEGER, "#", STableConstants.WIDTH_NUM_TINYINT);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "No. cuenta contable", STableConstants.WIDTH_ACCOUNT_ID);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Cuenta contable", STableConstants.WIDTH_ACCOUNT);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Concepto", 175);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Debe $", STableConstants.WIDTH_VALUE);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Haber $", STableConstants.WIDTH_VALUE);
        aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "T. cambio", STableConstants.WIDTH_EXCHANGE_RATE);
        aoTableColumns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererExchangeRate());
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Debe mon $", STableConstants.WIDTH_VALUE);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Haber mon $", STableConstants.WIDTH_VALUE);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Moneda", STableConstants.WIDTH_CURRENCY_KEY);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "Sistema", STableConstants.WIDTH_BOOLEAN);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "Diferencia cambiaria", STableConstants.WIDTH_BOOLEAN);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Subclase movimiento", 200);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "No. centro costo", STableConstants.WIDTH_ACCOUNT_ID);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Centro costo", STableConstants.WIDTH_ACCOUNT);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "No. cheque", STableConstants.WIDTH_NUM_SMALLINT);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "Eliminado", STableConstants.WIDTH_BOOLEAN);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Usr. creaciÃ³n", STableConstants.WIDTH_USER);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE_TIME, "CreaciÃ³n", STableConstants.WIDTH_DATE_TIME);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Usr. modificaciÃ³n", STableConstants.WIDTH_USER);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE_TIME, "ModificaciÃ³n", STableConstants.WIDTH_DATE_TIME);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Usr. eliminaciÃ³n", STableConstants.WIDTH_USER);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE_TIME, "EliminaciÃ³n", STableConstants.WIDTH_DATE_TIME);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_INTEGER, "Id interno", STableConstants.WIDTH_NUM_TINYINT);

        for (i = 0; i < aoTableColumns.length; i++) {
            moPaneGridEntries.addTableColumn(aoTableColumns[i]);
        }

        jcbGuiConceptPolicy.removeAllItems();
        jcbGuiConceptPolicy.addItem(new SFormComponentItem(new int[] { CONCEPT_POLICY_BLANK }, "En blanco"));
        jcbGuiConceptPolicy.addItem(new SFormComponentItem(new int[] { CONCEPT_POLICY_RECORD }, "Copiar concepto pÃ³liza"));
        jcbGuiConceptPolicy.addItem(new SFormComponentItem(new int[] { CONCEPT_POLICY_CURR_ENTRY }, "Copiar concepto actual"));
        jcbGuiConceptPolicy.addItem(new SFormComponentItem(new int[] { CONCEPT_POLICY_LAST_ENTRY }, "Copiar Ãºltimo concepto"));

        if (miClient.getSessionXXX().getParamsErp().getIsRecordConceptCopyEnabled()) {
            SFormUtilities.locateComboBoxItem(jcbGuiConceptPolicy, new int[] { CONCEPT_POLICY_RECORD });
        }
        else {
            SFormUtilities.locateComboBoxItem(jcbGuiConceptPolicy, new int[] { CONCEPT_POLICY_BLANK });
        }

        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);
        jbDate.addActionListener(this);
        jbEntryNew.addActionListener(this);
        jbEntryNewCopy.addActionListener(this);
        jbEntryNewInsert.addActionListener(this);
        jbEntryEdit.addActionListener(this);
        jbEntryDelete.addActionListener(this);
        jbEntryMoveDown.addActionListener(this);
        jbEntryMoveUp.addActionListener(this);
        jbEntryViewSum.addActionListener(this);
        jtbEntryDeletedFilter.addActionListener(this);
        
        jbMoneyIn.addActionListener(this);
        jbMoneyInOther.addActionListener(this);
        jbMoneyInPaymentCus.addActionListener(this);
        jbMiPaymentCus.addActionListener(this);
        jbMiAdvanceCus.addActionListener(this);
        jbMiAdvanceSupDev.addActionListener(this);
        jbMiCreditCdr.addActionListener(this);
        jbMiCreditDbr.addActionListener(this);
        jbMiExchangeRate.addActionListener(this);
        
        jbMoneyOut.addActionListener(this);
        jbMoneyOutOther.addActionListener(this);
        jbMoneyOutPaymentSup.addActionListener(this);
        jbMoneyOutCheck.addActionListener(this);
        jbMoneyOutTransfer.addActionListener(this);
        jbMoPaymentSup.addActionListener(this);
        jbMoAdvanceSup.addActionListener(this);
        jbMoAdvanceCusDev.addActionListener(this);
        jbMoDebitCdr.addActionListener(this);
        jbMoDebitDbr.addActionListener(this);
        jbMoExchangeRate.addActionListener(this);
        
        jbDbtPaymentSup.addActionListener(this);
        jbDbtAdvanceSup.addActionListener(this);
        jbDbtAdvanceCusDev.addActionListener(this);
        jbDbtDebitCdr.addActionListener(this);
        jbDbtDebitDbr.addActionListener(this);
        
        jbCdtPaymentCus.addActionListener(this);
        jbCdtAdvanceCus.addActionListener(this);
        jbCdtAdvanceSupDev.addActionListener(this);
        jbCdtCreditCdr.addActionListener(this);
        jbCdtCreditDbr.addActionListener(this);
        
        jcbFkAccountCashId_n.addItemListener(this);

        SFormUtilities.createActionMap(rootPane, this, "publicActionEntryNew", "entryNew", KeyEvent.VK_N, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "publicActionEntryNewInsert", "entryNewInsert", KeyEvent.VK_I, KeyEvent.CTRL_DOWN_MASK | KeyEvent.SHIFT_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "publicActionEntryNewCopy", "entryNewCopy", KeyEvent.VK_C, KeyEvent.CTRL_DOWN_MASK | KeyEvent.SHIFT_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "publicActionEntryEdit", "entryEdit", KeyEvent.VK_M, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "publicActionEntryDelete", "entryDelete", KeyEvent.VK_D, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "publicActionEntryMoveDown", "entryMoveDown", KeyEvent.VK_D, KeyEvent.CTRL_DOWN_MASK | KeyEvent.SHIFT_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "publicActionEntryMoveUp", "entryMoveUp", KeyEvent.VK_U, KeyEvent.CTRL_DOWN_MASK | KeyEvent.SHIFT_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "publicActionEntryViewSum", "entryViewSum", KeyEvent.VK_S, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "publicActionEntryFilter", "entryFilter", KeyEvent.VK_F, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionPerformedOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionPerformedCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            if (jftDate.isEnabled()) {
                jftDate.requestFocus();
            }
            else {
                jbCancel.requestFocus();
            }
        }
    }

    private void updateRecord() {
        moRecord.setDate(moFieldDate.getDate());
        moRecord.setConcept(moFieldConcept.getString());
        if (moFieldFkAccountCashId_n.getComponent().isEnabled()) {
            moRecord.setFkCompanyBranchId_n(moFieldFkAccountCashId_n.getKeyAsIntArray()[0]);
            moRecord.setFkAccountCashId_n(moFieldFkAccountCashId_n.getKeyAsIntArray()[1]);
        }
        moRecord.setDbmsDataAccountCash(moAccountCash);

        moRecord.getDbmsRecordEntries().clear();

        for (STableRow row : moPaneGridEntries.getGridRows()) {
            moRecord.getDbmsRecordEntries().add((SDataRecordEntry) row.getData());
        }
    }

    private void renderEntries(boolean renumber) {
        int sortingPosition = 0;

        moPaneGridEntries.renderTableRows();
        
        if (renumber) {
            for (int i = 0; i < moPaneGridEntries.getTableGuiRowCount(); i++) {
                SDataRecordEntry entry = (SDataRecordEntry) moPaneGridEntries.getTableRow(i).getData();

                if (entry.getIsDeleted()) {
                    entry.setSortingPosition(0);
                }
                else {
                    entry.setSortingPosition(++sortingPosition);
                }

                entry.setIsRegistryEdited(true);
                moPaneGridEntries.getTableRow(i).prepareTableRow();
            }
        }
    }

    private void calculateBalance() {
        double debit = 0;
        double credit = 0;

        for (int i = 0; i < moPaneGridEntries.getTableGuiRowCount(); i++) {
            debit = SLibUtils.roundAmount(debit + ((SDataRecordEntry) moPaneGridEntries.getTableRow(i).getData()).getDebit());
            credit = SLibUtils.roundAmount(credit + ((SDataRecordEntry) moPaneGridEntries.getTableRow(i).getData()).getCredit());
        }

        jtfDebit.setText(miClient.getSessionXXX().getFormatters().getDecimalsValueFormat().format(debit));
        jtfCredit.setText(miClient.getSessionXXX().getFormatters().getDecimalsValueFormat().format(credit));
        jtfBalance.setText(miClient.getSessionXXX().getFormatters().getDecimalsValueFormat().format(debit - credit));
    }

    private void renderPeriod() {
        java.util.Date date = moFieldDate.getDate();

        if (date == null) {
            jtfPeriod.setText("");
        }
        else {
            jtfPeriod.setText(miClient.getSessionXXX().getFormatters().getDateYearMonthFormat().format(date));
        }
    }

    private void renderCompanyBranch() {
        jtfCompanyBranch.setText(moRecord == null ? miClient.getSessionXXX().getCurrentCompanyBranchName() : SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.BPSU_BPB, new int[] { moRecord.getFkCompanyBranchId() }));
        jtfCompanyBranch.setToolTipText(jtfCompanyBranch.getText());
        jtfCompanyBranch.setCaretPosition(0);
    }

    private void renderAccountCashSettings() {
        if (jcbFkAccountCashId_n.getSelectedIndex() <= 0) {
            moAccountCash = null;
        }
        else {
            moAccountCash = (SDataAccountCash) SDataUtilities.readRegistry(miClient, SDataConstants.FIN_ACC_CASH, moFieldFkAccountCashId_n.getKey(), SLibConstants.EXEC_MODE_SILENT);
        }

        if (moAccountCash == null) {
            jtfAccountCashCurrencyKey.setText("");
        }
        else {
            jtfAccountCashCurrencyKey.setText(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.CFGU_CUR, new int[] { moAccountCash.getFkCurrencyId() }, SLibConstants.DESCRIPTION_CODE));
        }
    }

    private int obtainNextUserId() {
        int userId = 0;

        for (STableRow row : moPaneGridEntries.getGridRows()) {
            if (((SDataRecordEntry) row.getData()).getUserId() > userId) {
                userId = ((SDataRecordEntry) row.getData()).getUserId();
            }
        }

        return ++userId;
    }

    private java.util.Vector<erp.mfin.data.SDataCheck> obtainRecordChecks() {
        Vector<SDataCheck> checks = new Vector<SDataCheck>();

        for (int i = 0; i < moPaneGridEntries.getTableGuiRowCount(); i++) {
            if (((SDataRecordEntry) moPaneGridEntries.getTableRow(i).getData()).getDbmsCheck() != null) {
                checks.add(((SDataRecordEntry) moPaneGridEntries.getTableRow(i).getData()).getDbmsCheck());
            }
        }

        return checks;
    }

    private void itemStateChangedAccountCashId_n() {
        renderAccountCashSettings();
    }

    private void actionPerformedDate() {
        miClient.getGuiDatePickerXXX().formReset();
        miClient.getGuiDatePickerXXX().setDate(moFieldDate.getDate());
        miClient.getGuiDatePickerXXX().setVisible(true);

        if (miClient.getGuiDatePickerXXX().getFormResult() == SLibConstants.FORM_RESULT_OK) {
            moFieldDate.setDate(miClient.getGuiDatePickerXXX().getGuiDate());
            jftDate.requestFocus();
        }
    }

    private void actionPerformedEntryNew() {
        if (jbEntryNew.isEnabled()) {
            SDataRecordEntry entry = null;

            updateRecord();

            moFormEntry.formReset();
            moFormEntry.setValue(SDataConstants.FIN_REC, moRecord);
            moFormEntry.setValue(SDataConstants.FIN_CHECK, obtainRecordChecks());

            switch (((int[]) ((SFormComponentItem) jcbGuiConceptPolicy.getSelectedItem()).getPrimaryKey())[0]) {
                case CONCEPT_POLICY_BLANK:
                    moFormEntry.setValue(SLibConstants.VALUE_TEXT, "");
                    break;
                case CONCEPT_POLICY_RECORD:
                    moFormEntry.setValue(SLibConstants.VALUE_TEXT, moFieldConcept.getString());
                    break;
                case CONCEPT_POLICY_CURR_ENTRY:
                    if (moPaneGridEntries.getTable().getSelectedRow() != -1) {
                        moFormEntry.setValue(SLibConstants.VALUE_TEXT, ((SDataRecordEntry) moPaneGridEntries.getSelectedTableRow().getData()).getConcept());
                    }
                    break;
                case CONCEPT_POLICY_LAST_ENTRY:
                    moFormEntry.setValue(SLibConstants.VALUE_TEXT, msAuxLastEntryConcept);
                    break;
                default:
            }

            moFormEntry.setFormVisible(true);

            if (moFormEntry.getFormResult() == SLibConstants.FORM_RESULT_OK) {
                entry = (SDataRecordEntry) moFormEntry.getRegistry();

                moPaneGridEntries.addTableRow(new SDataRecordEntryRow(entry));
                renderEntries(true);
                calculateBalance();
                moPaneGridEntries.setTableRowSelection(moPaneGridEntries.getTableGuiRowCount() - 1);

                msAuxLastEntryConcept = (String) moFormEntry.getValue(SLibConstants.VALUE_TEXT);    // preserve last entry concept
            }
        }
    }

    private void actionPerformedEntryNewInsert() {
        if (jbEntryNewInsert.isEnabled()) {
            int index = moPaneGridEntries.getTable().getSelectedRow();
            SDataRecordEntry entry = null;

            if (index != -1) {
                updateRecord();

                moFormEntry.formReset();
                moFormEntry.setValue(SDataConstants.FIN_REC, moRecord);
                moFormEntry.setValue(SDataConstants.FIN_CHECK, obtainRecordChecks());

                switch (((int[]) ((SFormComponentItem) jcbGuiConceptPolicy.getSelectedItem()).getPrimaryKey())[0]) {
                    case CONCEPT_POLICY_BLANK:
                        moFormEntry.setValue(SLibConstants.VALUE_TEXT, "");
                        break;
                    case CONCEPT_POLICY_RECORD:
                        moFormEntry.setValue(SLibConstants.VALUE_TEXT, moFieldConcept.getString());
                        break;
                    case CONCEPT_POLICY_CURR_ENTRY:
                        if (moPaneGridEntries.getTable().getSelectedRow() != -1) {
                            moFormEntry.setValue(SLibConstants.VALUE_TEXT, ((SDataRecordEntry) moPaneGridEntries.getSelectedTableRow().getData()).getConcept());
                        }
                        break;
                    case CONCEPT_POLICY_LAST_ENTRY:
                        moFormEntry.setValue(SLibConstants.VALUE_TEXT, msAuxLastEntryConcept);
                        break;
                    default:
                }

                moFormEntry.setFormVisible(true);

                if (moFormEntry.getFormResult() == SLibConstants.FORM_RESULT_OK) {
                    entry = (SDataRecordEntry) moFormEntry.getRegistry();

                    moPaneGridEntries.insertTableRow(new SDataRecordEntryRow(entry), index);
                    renderEntries(true);
                    calculateBalance();
                    moPaneGridEntries.setTableRowSelection(index + 1);

                    msAuxLastEntryConcept = (String) moFormEntry.getValue(SLibConstants.VALUE_TEXT);    // preserve last entry concept
                }
            }
        }
    }

    private void actionPerformedEntryNewCopy() {
        if (jbEntryNewCopy.isEnabled()) {
            int index = moPaneGridEntries.getTable().getSelectedRow();
            SDataRecordEntry entry = null;
            SDataRecordEntry entryCopy = null;

            if (index != -1) {
                entry = (SDataRecordEntry) moPaneGridEntries.getSelectedTableRow().getData();
                entryCopy = entry.clone();
                entryCopy.setIsRegistryNew(false);

                updateRecord();

                moFormEntry.formReset();
                moFormEntry.setValue(SDataConstants.FIN_REC, moRecord);
                moFormEntry.setValue(SDataConstants.FIN_CHECK, obtainRecordChecks());
                moFormEntry.setRegistry(entryCopy);
                moFormEntry.setFormVisible(true);

                if (moFormEntry.getFormResult() == SLibConstants.FORM_RESULT_OK) {
                    entry = (SDataRecordEntry) moFormEntry.getRegistry();
                    entry.resetRegistry();
                    entry.setPkEntryId(0);
                    entry.setIsSystem(false);

                    if (index + 1 < moPaneGridEntries.getTableGuiRowCount()) {
                        moPaneGridEntries.insertTableRow(new SDataRecordEntryRow(entry), index + 1);
                    }
                    else {
                        moPaneGridEntries.addTableRow(new SDataRecordEntryRow(entry));
                    }

                    renderEntries(true);
                    calculateBalance();
                    moPaneGridEntries.setTableRowSelection(index + 1);

                    msAuxLastEntryConcept = (String) moFormEntry.getValue(SLibConstants.VALUE_TEXT);    // preserve last entry concept
                }
            }
        }
    }

    private void actionPerformedEntryEdit() {
        if (jbEntryEdit.isEnabled()) {
            int index = moPaneGridEntries.getTable().getSelectedRow();
            SDataRecordEntry entry = null;
            SFormInterface form = null;

            if (index != -1) {
                entry = (SDataRecordEntry) moPaneGridEntries.getSelectedTableRow().getData();

                updateRecord();

                if (entry.getDbmsCheck() != null) {
                    form = moFormMoneyOutCheck;
                    form.setValue(SDataConstants.FIN_REC, moRecord);
                    form.setValue(SDataConstants.FIN_CHECK, obtainRecordChecks());
                    form.formRefreshCatalogues();
                    form.formReset();
                }
                else {
                    form = moFormEntry;
                    form.formReset();
                    form.setValue(SDataConstants.FIN_REC, moRecord);
                    form.setValue(SDataConstants.FIN_CHECK, obtainRecordChecks());
                }

                form.setRegistry(entry);
                form.setFormVisible(true);

                if (form.getFormResult() == SLibConstants.FORM_RESULT_OK) {
                    moPaneGridEntries.setTableRow(new SDataRecordEntryRow(form.getRegistry()), index);
                    renderEntries(true);
                    calculateBalance();
                    moPaneGridEntries.setTableRowSelection(index);
                }
            }
        }
    }

    private void actionPerformedEntryDelete() {
        if (jbEntryDelete.isEnabled()) {
            int index = moPaneGridEntries.getTable().getSelectedRow();
            int userId = 0;
            SDataRecordEntry entry = null;

            if (index != -1 && miClient.showMsgBoxConfirm(SLibConstants.MSG_CNF_REG_DELETE) == JOptionPane.YES_OPTION) {
                entry = (SDataRecordEntry) moPaneGridEntries.getTableRow(index).getData();

                if (entry.getIsDeleted()) {
                    miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_GUI_REG_ALREADY_DELETE);
                }
                else {
                    userId = entry.getUserId();

                    if (userId == 0) {
                        // Delete single entry:

                        if (entry.getIsRegistryNew()) {
                            moPaneGridEntries.removeTableRow(index);
                        }
                        else {
                            entry.setIsDeleted(true);
                            entry.setFkUserDeleteId(miClient.getSession().getUser().getPkUserId());
                            entry.setIsRegistryEdited(true);
                            entry.setFkUserEditId(miClient.getSession().getUser().getPkUserId());

                            moPaneGridEntries.setTableRow(new SDataRecordEntryRow(entry), index);
                        }
                    }
                    else {
                        // Delete group of entries:

                        for (int i = 0; i < moPaneGridEntries.getTableGuiRowCount(); ) {
                            entry = (SDataRecordEntry) moPaneGridEntries.getTableRow(i).getData();
                            if (entry.getUserId() != userId) {
                                i++;
                            }
                            else {
                                if (entry.getIsRegistryNew()) {
                                    moPaneGridEntries.removeTableRow(i);
                                    moPaneGridEntries.renderTableRows();
                                }
                                else {
                                    entry.setIsDeleted(true);
                                    entry.setFkUserDeleteId(miClient.getSession().getUser().getPkUserId());
                                    entry.setIsRegistryEdited(true);
                                    entry.setFkUserEditId(miClient.getSession().getUser().getPkUserId());

                                    moPaneGridEntries.setTableRow(new SDataRecordEntryRow(entry), i++);
                                }
                            }
                        }
                    }
                }

                renderEntries(true);
                calculateBalance();
                moPaneGridEntries.setTableRowSelection(index < moPaneGridEntries.getTableGuiRowCount() ? index : moPaneGridEntries.getTableGuiRowCount() - 1);
            }
        }
    }

    private void actionPerformedEntryMoveDown() {
        if (jbEntryMoveDown.isEnabled()) {
            int index = moPaneGridEntries.getTable().getSelectedRow();

            if (index != -1 && index + 1 < moPaneGridEntries.getTableGuiRowCount()) {
                SDataRecordEntry entryA = (SDataRecordEntry) moPaneGridEntries.getTableRow(index).getData();
                SDataRecordEntry entryB = (SDataRecordEntry) moPaneGridEntries.getTableRow(index + 1).getData();

                moPaneGridEntries.setTableRow(new SDataRecordEntryRow(entryB), index);
                moPaneGridEntries.setTableRow(new SDataRecordEntryRow(entryA), index + 1);
                renderEntries(true);
                moPaneGridEntries.setTableRowSelection(index + 1);
            }
        }
    }

    private void actionPerformedEntryMoveUp() {
        if (jbEntryMoveUp.isEnabled()) {
            int index = moPaneGridEntries.getTable().getSelectedRow();

            if (index > 0) {
                SDataRecordEntry entryA = (SDataRecordEntry) moPaneGridEntries.getTableRow(index - 1).getData();
                SDataRecordEntry entryB = (SDataRecordEntry) moPaneGridEntries.getTableRow(index).getData();

                moPaneGridEntries.setTableRow(new SDataRecordEntryRow(entryB), index - 1);
                moPaneGridEntries.setTableRow(new SDataRecordEntryRow(entryA), index);
                renderEntries(true);
                moPaneGridEntries.setTableRowSelection(index - 1);
            }
        }
    }

    private void actionPerformedEntryViewSum() {
        double debit = 0;
        double credit = 0;

        if (moPaneGridEntries.getTable().getSelectedRow() != -1) {
            for (int row : moPaneGridEntries.getTable().getSelectedRows()) {
                debit += ((SDataRecordEntry) ((SDataRecordEntryRow) moPaneGridEntries.getTableRow(row)).getData()).getDebit();
                credit += ((SDataRecordEntry) ((SDataRecordEntryRow) moPaneGridEntries.getTableRow(row)).getData()).getCredit();
            }

            miClient.showMsgBoxInformation(
                    "Total cargos: $ " + SLibUtils.getDecimalFormatAmount().format(debit) + ".\n" +
                    "Total abonos: $ " + SLibUtils.getDecimalFormatAmount().format(credit) + "." +
                    (debit == 0 || credit == 0 ? "" : "\nDiferencia (cargos - abonos): $ " + SLibUtils.getDecimalFormatAmount().format(debit - credit) + "."));
        }
    }

    private void actionPerformedMoneyInOut(final SDataAccountCash cash_n, final boolean in) {
        updateRecord();

        moFormMoneyInOut.formRefreshCatalogues();
        moFormMoneyInOut.formReset();
        moFormMoneyInOut.setValue(SDataConstants.FIN_REC, moRecord);
        moFormMoneyInOut.setValue(SDataConstants.FIN_ACC_CASH, cash_n);
        moFormMoneyInOut.setValue(SDataConstantsSys.FINS_CT_SYS_MOV_CASH, in);
        moFormMoneyInOut.setFormVisible(true);

        if (moFormMoneyInOut.getFormResult() == SLibConstants.FORM_RESULT_OK) {
            SDataRecordEntry entry = (SDataRecordEntry) moFormMoneyInOut.getRegistry();

            moPaneGridEntries.addTableRow(new SDataRecordEntryRow(entry));
            renderEntries(true);
            calculateBalance();
            moPaneGridEntries.setTableRowSelection(moPaneGridEntries.getTableGuiRowCount() - 1);
        }
    }

    private void actionPerformedMoneyInOutBizPartner(final int bizPartnerCategoryX, final int[] keyAccountingMoveSubclass) {
        moFormMoneyInOutBizPartner.setValue(SDataConstants.FIN_REC, moRecord);
        moFormMoneyInOutBizPartner.setValue(SDataConstants.BPSU_BP, bizPartnerCategoryX);
        moFormMoneyInOutBizPartner.setValue(SDataConstants.FINS_CLS_ACC_MOV, keyAccountingMoveSubclass);
        moFormMoneyInOutBizPartner.setValue(SDataConstants.FIN_CHECK, obtainRecordChecks());
        moFormMoneyInOutBizPartner.formRefreshCatalogues();
        moFormMoneyInOutBizPartner.formReset();
        moFormMoneyInOutBizPartner.setFormVisible(true);

        if (moFormMoneyInOutBizPartner.getFormResult() == SLibConstants.FORM_RESULT_OK) {
            SDataRecordEntry entry = (SDataRecordEntry) moFormMoneyInOutBizPartner.getRegistry();

            moPaneGridEntries.addTableRow(new SDataRecordEntryRow(entry));
            renderEntries(true);
            calculateBalance();
            moPaneGridEntries.setTableRowSelection(moPaneGridEntries.getTableGuiRowCount() - 1);
        }
    }

    private void actionPerformedPayment(final int bizPartnerCategoryX) {
        SDialogRecordPayment dialog = null;
        
        switch (bizPartnerCategoryX) {
            case SDataConstants.BPSX_BP_SUP:
                dialog = moDialogPaymentSup;
                break;
            case SDataConstants.BPSX_BP_CUS:
                dialog = moDialogPaymentCus;
                break;
            default:
        }
        
        if (dialog != null) {
            int userId = 0;
            double exr = 0d;
            double[] cashBalance = null;
            SDataRecord record = null;

            try {
                if (moAccountCash == null) {
                    exr = 1;
                    cashBalance = new double[] { 0, 0 };
                }
                else {
                    exr = SDataUtilities.obtainExchangeRate(miClient, moAccountCash.getFkCurrencyId(), moRecord.getDate());
                    cashBalance = SDataUtilities.obtainAccountCashBalanceUpdated(miClient, moAccountCash.getFkCurrencyId(), moRecord.getDate(), moAccountCash.getPrimaryKey(), 
                            moAccountCash.getFkAccountCashCategoryId() == SDataConstantsSys.FINS_CT_ACC_CASH_CASH ? SDataConstantsSys.FINS_TP_SYS_MOV_CASH_CASH : SDataConstantsSys.FINS_TP_SYS_MOV_CASH_BANK, moRecord, null);
                }

                dialog.formReset();
                dialog.setValue(SDataConstants.FIN_ACC_CASH, new Object[] { moRecord, moAccountCash, exr, cashBalance });
                dialog.setValue(SDataConstants.FIN_CHECK, obtainRecordChecks());
                dialog.setFormVisible(true);

                if (dialog.getFormResult() == SLibConstants.FORM_RESULT_OK) {
                    userId = obtainNextUserId();
                    record = (SDataRecord) dialog.getRegistry();

                    if (!record.getDbmsRecordEntries().isEmpty()) {
                        for (SDataRecordEntry entry : record.getDbmsRecordEntries()) {
                            entry.setUserId(userId);
                            moPaneGridEntries.addTableRow(new SDataRecordEntryRow(entry));
                        }

                        renderEntries(true);
                        calculateBalance();
                        moPaneGridEntries.setTableRowSelection(moPaneGridEntries.getTableGuiRowCount() - 1);
                    }
                }
            }
            catch (Exception e) {
                SLibUtilities.renderException(this, e);
            }
        }
    }

    private void actionPerformedPaymentComplete(final int bizPartnerCategoryX) {
        SDialogRecordPaymentComplete dialog = null;
        
        switch (bizPartnerCategoryX) {
            case SDataConstants.BPSX_BP_SUP:
                dialog = moDialogPaymentCompleteSup;
                break;
            case SDataConstants.BPSX_BP_CUS:
                dialog = moDialogPaymentCompleteCus;
                break;
            default:
            
        }
        
        if (dialog != null) {
            int userId = 0;
            double rateToday = 0d;
            double[] cashBal = null;
            SDataRecord record = null;

            try {
                rateToday = SDataUtilities.obtainExchangeRate(miClient, moAccountCash.getFkCurrencyId(), moRecord.getDate());
                cashBal = SDataUtilities.obtainAccountCashBalanceUpdated(miClient, moAccountCash.getFkCurrencyId(), moRecord.getDate(), moAccountCash.getPrimaryKey(), 
                        moAccountCash.getFkAccountCashCategoryId() == SDataConstantsSys.FINS_CT_ACC_CASH_CASH ? SDataConstantsSys.FINS_TP_SYS_MOV_CASH_CASH : SDataConstantsSys.FINS_TP_SYS_MOV_CASH_BANK, moRecord, null);

                dialog.formReset();
                dialog.setValue(SDataConstants.FIN_ACC_CASH, new Object[] { moRecord, moAccountCash, rateToday, cashBal });
                dialog.setFormVisible(true);

                if (dialog.getFormResult() == SLibConstants.FORM_RESULT_OK) {
                    userId = obtainNextUserId();
                    record = (SDataRecord) dialog.getRegistry();

                    if (!record.getDbmsRecordEntries().isEmpty()) {
                        for (SDataRecordEntry entry : record.getDbmsRecordEntries()) {
                            entry.setUserId(userId);
                            moPaneGridEntries.addTableRow(new SDataRecordEntryRow(entry));
                        }

                        renderEntries(true);
                        calculateBalance();
                        moPaneGridEntries.setTableRowSelection(moPaneGridEntries.getTableGuiRowCount() - 1);
                    }
                }
            }
            catch (Exception e) {
                SLibUtilities.renderException(this, e);
            }
        }
    }

    private void actionPerformedExrProfitLoss(final boolean profit) {
        int userId = 0;
        String msg = "";
        SDataRecord record = null;

        if (profit) {
            if (!SDataUtilities.validateAccountSyntax(miClient.getSessionXXX().getParamsCompany().getFkAccountDifferenceIncomeId_n())) {
                msg = SFinConsts.MSG_ERR_GUI_CFG_DIFF_ACC;
            }
            else if (!SDataUtilities.validateAccountSyntax(miClient.getSessionXXX().getParamsCompany().getFkCostCenterDifferenceIncomeId_n())) {
                msg = SFinConsts.MSG_ERR_GUI_CFG_DIFF_CC;
            }
            else if (miClient.getSessionXXX().getParamsCompany().getFkItemDifferenceIncomeId_n() == SLibConsts.UNDEFINED) {
                msg = SFinConsts.MSG_ERR_GUI_CFG_DIFF_ITEM;
            }
        }
        else {
            if (!SDataUtilities.validateAccountSyntax(miClient.getSessionXXX().getParamsCompany().getFkAccountDifferenceExpenseId_n())) {
                msg = SFinConsts.MSG_ERR_GUI_CFG_DIFF_ACC;
            }
            else if (!SDataUtilities.validateAccountSyntax(miClient.getSessionXXX().getParamsCompany().getFkCostCenterDifferenceExpenseId_n())) {
                msg = SFinConsts.MSG_ERR_GUI_CFG_DIFF_CC;
            }
            else if (miClient.getSessionXXX().getParamsCompany().getFkItemDifferenceExpenseId_n() == SLibConsts.UNDEFINED) {
                msg = SFinConsts.MSG_ERR_GUI_CFG_DIFF_ITEM;
            }
        }
        
        if (!msg.isEmpty()) {
            miClient.showMsgBoxWarning(msg);
        }
        else {                
            moFormDifferenceIncomeExpense.setValue(SDataConstants.FIN_REC, moRecord);
            moFormDifferenceIncomeExpense.setValue(SDataConstantsSys.FINS_CT_SYS_MOV_CASH, profit);
            moFormDifferenceIncomeExpense.formReset();
            moFormDifferenceIncomeExpense.setFormVisible(true);

            if (moFormDifferenceIncomeExpense.getFormResult() == SLibConstants.FORM_RESULT_OK) {
                userId = obtainNextUserId();
                record = (SDataRecord) moFormDifferenceIncomeExpense.getRegistry();

                if (!record.getDbmsRecordEntries().isEmpty()) {
                    for (SDataRecordEntry entry : record.getDbmsRecordEntries()) {
                        entry.setUserId(userId);
                        moPaneGridEntries.addTableRow(new SDataRecordEntryRow(entry));
                    }

                    renderEntries(true);
                    calculateBalance();
                    moPaneGridEntries.setTableRowSelection(moPaneGridEntries.getTableGuiRowCount() - 1);
                }
            }
        }
    }

    private void actionPerformedCheck() {
        updateRecord();

        moFormMoneyOutCheck.setValue(SDataConstants.FIN_REC, moRecord);
        moFormMoneyOutCheck.setValue(SDataConstants.FIN_CHECK, obtainRecordChecks());
        moFormMoneyOutCheck.formRefreshCatalogues();
        moFormMoneyOutCheck.formReset();
        moFormMoneyOutCheck.setFormVisible(true);

        if (moFormMoneyOutCheck.getFormResult() == SLibConstants.FORM_RESULT_OK) {
            SDataRecordEntry entry = (SDataRecordEntry) moFormMoneyOutCheck.getRegistry();

            moPaneGridEntries.addTableRow(new SDataRecordEntryRow(entry));
            renderEntries(true);
            calculateBalance();
            moPaneGridEntries.setTableRowSelection(moPaneGridEntries.getTableGuiRowCount() - 1);
        }
    }

    private void actionPerformedTransfer() {
        int userId = 0;
        SDataRecord record = null;

        updateRecord();

        moFormAccountCashTransfer.setValue(SDataConstants.FIN_REC, moRecord);
        moFormAccountCashTransfer.formRefreshCatalogues();
        moFormAccountCashTransfer.formReset();
        moFormAccountCashTransfer.setFormVisible(true);

        if (moFormAccountCashTransfer.getFormResult() == SLibConstants.FORM_RESULT_OK) {
            userId = obtainNextUserId();
            record = (SDataRecord) moFormAccountCashTransfer.getRegistry();

            if (record.getDbmsRecordEntries().size() > 0) {
                for (SDataRecordEntry entry : record.getDbmsRecordEntries()) {
                    entry.setUserId(userId);
                    moPaneGridEntries.addTableRow(new SDataRecordEntryRow(entry));
                }

                renderEntries(true);
                calculateBalance();
                moPaneGridEntries.setTableRowSelection(moPaneGridEntries.getTableGuiRowCount() - 1);
            }
        }
    }

    private void actionPerformedEntryDeletedFilter() {
        if (jtbEntryDeletedFilter.isEnabled()) {
            int index = moPaneGridEntries.getTable().getSelectedRow();

            moPaneGridEntries.setGridViewStatus(!jtbEntryDeletedFilter.isSelected() ? STableConstants.VIEW_STATUS_ALL : STableConstants.VIEW_STATUS_ALIVE);
            renderEntries(false);
            moPaneGridEntries.setTableRowSelection(index < moPaneGridEntries.getTableGuiRowCount() ? index : moPaneGridEntries.getTableGuiRowCount() - 1);

            jbEntryMoveUp.setEnabled(jtbEntryDeletedFilter.isSelected() && jbEntryNew.isEnabled());
            jbEntryMoveDown.setEnabled(jtbEntryDeletedFilter.isSelected() && jbEntryNew.isEnabled());
        }
    }

    private void actionEdit(boolean edit) {

    }

    private void actionPerformedOk() {
        if (jbOk.isEnabled()) {
            boolean ok = true;
            SFormValidation validation = formValidate();

            if (validation.getIsError()) {
                if (validation.getComponent() != null) {
                    validation.getComponent().requestFocus();
                }
                if (validation.getMessage().length() > 0) {
                    miClient.showMsgBoxWarning(validation.getMessage());
                }
            }
            else {
                if (!mbOriginalIsDeleted && jckIsDeleted.isSelected() && miClient.showMsgBoxConfirm(SLibConstants.MSG_CNF_REG_DELETE) != JOptionPane.YES_OPTION) {
                    ok = false;
                }

                if (ok) {
                    mnFormResult = SLibConstants.FORM_RESULT_OK;
                    setVisible(false);
                }
            }
        }
    }

    private void actionPerformedCancel() {
        if (jbCancel.isEnabled()) {
            if (jckIsSystem.isSelected() || mbParamIsReadOnly || miClient.showMsgBoxConfirm(SLibConstants.MSG_CNF_FORM_CLOSE) == JOptionPane.YES_OPTION) {
                mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
                setVisible(false);
            }
        }
    }

    public void publicActionEntryNew() {
        actionPerformedEntryNew();
    }

    public void publicActionEntryNewInsert() {
        actionPerformedEntryNewInsert();
    }

    public void publicActionEntryNewCopy() {
        actionPerformedEntryNewCopy();
    }

    public void publicActionEntryEdit() {
        actionPerformedEntryEdit();
    }

    public void publicActionEntryDelete() {
        actionPerformedEntryDelete();
    }

    public void publicActionEntryMoveDown() {
        actionPerformedEntryMoveDown();
    }

    public void publicActionEntryMoveUp() {
        actionPerformedEntryMoveUp();
    }

    public void publicActionEntryViewSum() {
        actionPerformedEntryViewSum();
    }

    public void publicActionEntryFilter() {
        jtbEntryDeletedFilter.setSelected(!jtbEntryDeletedFilter.isSelected());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbCdtAdvanceCus;
    private javax.swing.JButton jbCdtAdvanceSupDev;
    private javax.swing.JButton jbCdtCreditCdr;
    private javax.swing.JButton jbCdtCreditDbr;
    private javax.swing.JButton jbCdtPaymentCus;
    private javax.swing.JButton jbDate;
    private javax.swing.JButton jbDbtAdvanceCusDev;
    private javax.swing.JButton jbDbtAdvanceSup;
    private javax.swing.JButton jbDbtDebitCdr;
    private javax.swing.JButton jbDbtDebitDbr;
    private javax.swing.JButton jbDbtPaymentSup;
    private javax.swing.JButton jbEntryDelete;
    private javax.swing.JButton jbEntryEdit;
    private javax.swing.JButton jbEntryMoveDown;
    private javax.swing.JButton jbEntryMoveUp;
    private javax.swing.JButton jbEntryNew;
    private javax.swing.JButton jbEntryNewCopy;
    private javax.swing.JButton jbEntryNewInsert;
    private javax.swing.JButton jbEntryViewSum;
    private javax.swing.JButton jbMiAdvanceCus;
    private javax.swing.JButton jbMiAdvanceSupDev;
    private javax.swing.JButton jbMiCreditCdr;
    private javax.swing.JButton jbMiCreditDbr;
    private javax.swing.JButton jbMiExchangeRate;
    private javax.swing.JButton jbMiPaymentCus;
    private javax.swing.JButton jbMoAdvanceCusDev;
    private javax.swing.JButton jbMoAdvanceSup;
    private javax.swing.JButton jbMoDebitCdr;
    private javax.swing.JButton jbMoDebitDbr;
    private javax.swing.JButton jbMoExchangeRate;
    private javax.swing.JButton jbMoPaymentSup;
    private javax.swing.JButton jbMoneyIn;
    private javax.swing.JButton jbMoneyInOther;
    private javax.swing.JButton jbMoneyInPaymentCus;
    private javax.swing.JButton jbMoneyOut;
    private javax.swing.JButton jbMoneyOutCheck;
    private javax.swing.JButton jbMoneyOutOther;
    private javax.swing.JButton jbMoneyOutPaymentSup;
    private javax.swing.JButton jbMoneyOutTransfer;
    private javax.swing.JButton jbOk;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkAccountCashId_n;
    private javax.swing.JComboBox<SFormComponentItem> jcbGuiConceptPolicy;
    private javax.swing.JCheckBox jckIsAdjustmentAudit;
    private javax.swing.JCheckBox jckIsAdjustmentYearEnd;
    private javax.swing.JCheckBox jckIsAudited;
    private javax.swing.JCheckBox jckIsAuthorized;
    private javax.swing.JCheckBox jckIsDeleted;
    private javax.swing.JCheckBox jckIsRecordConceptCopyEnabled;
    private javax.swing.JCheckBox jckIsSystem;
    private javax.swing.JFormattedTextField jftDate;
    private javax.swing.JLabel jlBalance;
    private javax.swing.JLabel jlCompanyBranch;
    private javax.swing.JLabel jlConcept;
    private javax.swing.JLabel jlCredit;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlDebit;
    private javax.swing.JLabel jlFkAccountCashId_n;
    private javax.swing.JLabel jlGuiConceptPolicy;
    private javax.swing.JLabel jlPeriod;
    private javax.swing.JLabel jlPkNumberId;
    private javax.swing.JPanel jpCommands;
    private javax.swing.JPanel jpCommands11;
    private javax.swing.JPanel jpCommands12;
    private javax.swing.JPanel jpCommands13;
    private javax.swing.JPanel jpCommandsCashAccount;
    private javax.swing.JPanel jpCommandsCashAccount1;
    private javax.swing.JPanel jpCommandsCashAccount2;
    private javax.swing.JPanel jpCommandsEntries;
    private javax.swing.JPanel jpCommandsJournal;
    private javax.swing.JPanel jpCommandsJournal1;
    private javax.swing.JPanel jpCommandsJournal2;
    private javax.swing.JPanel jpControlCashAccount2;
    private javax.swing.JPanel jpControlCashAccount3;
    private javax.swing.JPanel jpControls;
    private javax.swing.JPanel jpEntries;
    private javax.swing.JPanel jpRecord;
    private javax.swing.JPanel jpRecord1;
    private javax.swing.JPanel jpRecord2;
    private javax.swing.JPanel jpRegistry;
    private javax.swing.JSeparator jsEntry01;
    private javax.swing.JSeparator jsEntry2;
    private javax.swing.JSeparator jsEntry3;
    private javax.swing.JToggleButton jtbEntryDeletedFilter;
    private javax.swing.JTextField jtfAccountCashCurrencyKey;
    private javax.swing.JTextField jtfBalance;
    private javax.swing.JTextField jtfCompanyBranch;
    private javax.swing.JTextField jtfConcept;
    private javax.swing.JTextField jtfCredit;
    private javax.swing.JTextField jtfCurrencyKeyBalance;
    private javax.swing.JTextField jtfCurrencyKeyCredit;
    private javax.swing.JTextField jtfCurrencyKeyDebit;
    private javax.swing.JTextField jtfDebit;
    private javax.swing.JTextField jtfPeriod;
    private javax.swing.JTextField jtfPkNumberId;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {

    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moRecord = null;
        moAccountCash = null;
        mbOriginalIsDeleted = false;
        msAuxLastEntryConcept = "";

        moPaneGridEntries.createTable(this);
        moPaneGridEntries.clearTableRows();
        moPaneGridEntries.setGridViewStatus(STableConstants.VIEW_STATUS_ALIVE);
        moPaneGridEntries.getTable().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jtbEntryDeletedFilter.setSelected(true);
        jpCommands.remove(jpCommandsCashAccount);
        jpCommands.remove(jpCommandsJournal);

        for (int i = 0; i < mvFields.size(); i++) {
            mvFields.get(i).resetField();
        }

        jckIsRecordConceptCopyEnabled.setSelected(miClient.getSessionXXX().getParamsErp().getIsRecordConceptCopyEnabled());
        jtfCurrencyKeyDebit.setText(miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getKey());
        jtfCurrencyKeyCredit.setText(miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getKey());
        jtfCurrencyKeyBalance.setText(miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getKey());

        jftDate.setEditable(true);
        jftDate.setFocusable(true);
        jtfConcept.setEditable(true);
        jtfConcept.setFocusable(true);
        
        jbDate.setEnabled(true);
        jbEntryNew.setEnabled(true);
        jbEntryNewInsert.setEnabled(true);
        jbEntryNewCopy.setEnabled(true);
        jbEntryEdit.setEnabled(true);
        jbEntryDelete.setEnabled(true);
        jbEntryMoveDown.setEnabled(true);
        jbEntryMoveUp.setEnabled(true);
        
        jbMoneyIn.setEnabled(true);
        jbMoneyInOther.setEnabled(true);
        jbMoneyInPaymentCus.setEnabled(true);
        jbMiPaymentCus.setEnabled(true);
        jbMiAdvanceCus.setEnabled(true);
        jbMoAdvanceCusDev.setEnabled(true);
        jbMiCreditCdr.setEnabled(true);
        jbMiCreditDbr.setEnabled(true);
        jbMiExchangeRate.setEnabled(true);
        
        jbMoneyOut.setEnabled(true);
        jbMoneyOutOther.setEnabled(true);
        jbMoneyOutPaymentSup.setEnabled(true);
        jbMoneyOutCheck.setEnabled(true);
        jbMoneyOutTransfer.setEnabled(true);
        jbMoPaymentSup.setEnabled(true);
        jbMoAdvanceSup.setEnabled(true);
        jbMiAdvanceSupDev.setEnabled(true);
        jbMoDebitCdr.setEnabled(true);
        jbMoDebitDbr.setEnabled(true);
        jbMoExchangeRate.setEnabled(true);
        
        jbDbtPaymentSup.setEnabled(true);
        jbDbtAdvanceSup.setEnabled(true);
        jbDbtAdvanceCusDev.setEnabled(true);
        jbDbtDebitCdr.setEnabled(true);
        jbDbtDebitDbr.setEnabled(true);
        
        jbCdtPaymentCus.setEnabled(true);
        jbCdtAdvanceCus.setEnabled(true);
        jbCdtAdvanceSupDev.setEnabled(true);
        jbCdtCreditCdr.setEnabled(true);
        jbCdtCreditDbr.setEnabled(true);
        
        jbOk.setEnabled(true);

        jcbGuiConceptPolicy.setEnabled(true);
        
        jckIsDeleted.setEnabled(true);
        jckIsAdjustmentYearEnd.setEnabled(true);
        jckIsAdjustmentAudit.setEnabled(true);

        calculateBalance();
        renderPeriod();
        renderCompanyBranch();
        renderAccountCashSettings();
    }

    @Override
    public void formRefreshCatalogues() {
        SFormUtilities.populateComboBox(miClient, jcbFkAccountCashId_n, SDataConstants.FIN_ACC_CASH, new int[] { miClient.getSessionXXX().getCurrentCompanyBranchId() });
        moFormEntry.formRefreshCatalogues();
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(mvFields.get(i).getComponent());
                break;
            }
        }

        if (!validation.getIsError()) {
            // Validate accounting record period:

            if (!SLibTimeUtilities.isBelongingToPeriod(moFieldDate.getDate(), moRecord.getPkYearId(), moRecord.getPkPeriodId())) {
                validation.setMessage(SLibConstants.MSG_ERR_GUI_PER_DATE_REC);
                validation.setComponent(jftDate);
            }

            if (!validation.getIsError()) {
                if (moFieldIsDeleted.getBoolean()) {
                    SDataRecordEntry entry = null;

                    for (STableRow row : moPaneGridEntries.getGridRows()) {
                        entry = (SDataRecordEntry) row.getData();
                        if (entry.getIsSystem() && entry.getUserId() == 0) {
                            validation.setMessage("No se puede eliminar esta pÃ³liza contable puesto que al menos una de sus partidas es de sistema.");
                            break;
                        }
                    }
                }

                if (!validation.getIsError()) {
                    if (jcbFkAccountCashId_n.getSelectedIndex() > 0) {
                        String currency = "";
                        SDataRecordEntry entry = null;

                        // Validate account cash currency:

                        updateRecord();
                        currency = SDataReadDescriptions.getCatalogueDescription(miClient,
                                SDataConstants.CFGU_CUR, new int[] { moRecord.getDbmsDataAccountCash().getFkCurrencyId() });

                        for (STableRow row : moPaneGridEntries.getGridRows()) {
                            entry = (SDataRecordEntry) row.getData();
                            if (!entry.getIsDeleted() && !entry.getIsExchangeDifference()) {
                                if (entry.getFkCurrencyId() != moRecord.getDbmsDataAccountCash().getFkCurrencyId()) {
                                    if (miClient.showMsgBoxConfirm("Al menos una de las monedas de las partidas no coincide con " +
                                            "la moneda de la cuenta de efectivo de la pÃ³liza contable (" + currency + ").\nÂ¿Desea continuar?") != JOptionPane.YES_OPTION) {
                                        validation.setMessage("Se debe especificar la moneda de las partidas como '" + currency + "'.");
                                    }
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        boolean isReadOnly = false;

        moRecord = (SDataRecord) registry;
        moAccountCash = moRecord.getDbmsDataAccountCash();

        SFormUtilities.populateComboBox(miClient, jcbFkAccountCashId_n, SDataConstants.FIN_ACC_CASH, new int[] { moRecord.getFkCompanyBranchId_n() });

        moFieldDate.setFieldValue(moRecord.getDate());
        moFieldConcept.setFieldValue(moRecord.getConcept());
        moFieldIsAdjustmentYearEnd.setFieldValue(moRecord.getIsAdjustmentsYearEnd());
        moFieldIsAdjustmentAudit.setFieldValue(moRecord.getIsAdjustmentsAudit());
        moFieldFkAccountCashId_n.setFieldValue(new int[] { moRecord.getFkCompanyBranchId_n(), moRecord.getFkAccountCashId_n() });
        jtfPkNumberId.setText(moRecord.getPkRecordTypeId() + "-" + moRecord.getPkNumberId());
        //jtfPkNumberId.setText(moRecord.getPkRecordTypeId() + "-" + miClient.getSessionXXX().getFormatters().getRecordNumberFormat().format(moRecord.getPkNumberId()));
        jckIsAudited.setSelected(moRecord.getIsAudited());
        jckIsAuthorized.setSelected(moRecord.getIsAuthorized());
        jckIsSystem.setSelected(moRecord.getIsSystem());
        moFieldIsDeleted.setFieldValue(moRecord.getIsDeleted());

        mbOriginalIsDeleted = moRecord.getIsDeleted();

        for (SDataRecordEntry entry : moRecord.getDbmsRecordEntries()) {
            moPaneGridEntries.addTableRow(new SDataRecordEntryRow(entry));
        }
        renderEntries(false);
        moPaneGridEntries.setTableRowSelection(0);

        if (!SDataUtilities.isPeriodOpen(miClient, moRecord.getDate())) {
            mbParamIsReadOnly = true;
        }

        if (mbParamIsReadOnly || moRecord.getIsSystem() || moRecord.getIsAudited() || moRecord.getIsAuthorized()) {
            isReadOnly = true;

            jftDate.setEditable(false);
            jftDate.setFocusable(false);
            jtfConcept.setEditable(false);
            jtfConcept.setFocusable(false);
            
            jftDate.setEnabled(false);
            jtfConcept.setEnabled(false);
            
            jbDate.setEnabled(false);
            jbEntryNew.setEnabled(false);
            jbEntryNewInsert.setEnabled(false);
            jbEntryNewCopy.setEnabled(false);
            jbEntryEdit.setEnabled(false);
            jbEntryDelete.setEnabled(false);
            jbEntryMoveDown.setEnabled(false);
            jbEntryMoveUp.setEnabled(false);

            jbMoneyIn.setEnabled(false);
            jbMoneyInOther.setEnabled(false);
            jbMoneyInPaymentCus.setEnabled(false);
            jbMiPaymentCus.setEnabled(false);
            jbMiAdvanceCus.setEnabled(false);
            jbMoAdvanceCusDev.setEnabled(false);
            jbMiCreditCdr.setEnabled(false);
            jbMiCreditDbr.setEnabled(false);
            jbMiExchangeRate.setEnabled(false);

            jbMoneyOut.setEnabled(false);
            jbMoneyOutOther.setEnabled(false);
            jbMoneyOutPaymentSup.setEnabled(false);
            jbMoneyOutCheck.setEnabled(false);
            jbMoneyOutTransfer.setEnabled(false);
            jbMoPaymentSup.setEnabled(false);
            jbMoAdvanceSup.setEnabled(false);
            jbMiAdvanceSupDev.setEnabled(false);
            jbMoDebitCdr.setEnabled(false);
            jbMoDebitDbr.setEnabled(false);
            jbMoExchangeRate.setEnabled(false);

            jbDbtPaymentSup.setEnabled(false);
            jbDbtAdvanceSup.setEnabled(false);
            jbDbtAdvanceCusDev.setEnabled(false);
            jbDbtDebitCdr.setEnabled(false);
            jbDbtDebitDbr.setEnabled(false);

            jbCdtPaymentCus.setEnabled(false);
            jbCdtAdvanceCus.setEnabled(false);
            jbCdtAdvanceSupDev.setEnabled(false);
            jbCdtCreditCdr.setEnabled(false);
            jbCdtCreditDbr.setEnabled(false);

            jbOk.setEnabled(false);

            jcbGuiConceptPolicy.setEnabled(false);
            
            jckIsDeleted.setEnabled(false);
        }

        if (moAccountCash == null) {
            jpCommands.add(jpCommandsJournal, BorderLayout.SOUTH);
        }
        else {
            jpCommands.add(jpCommandsCashAccount, BorderLayout.CENTER);
            jbMiExchangeRate.setEnabled(!isReadOnly && moAccountCash.getFkCurrencyId() != miClient.getSessionXXX().getParamsErp().getFkCurrencyId());
            jbMoExchangeRate.setEnabled(!isReadOnly && moAccountCash.getFkCurrencyId() != miClient.getSessionXXX().getParamsErp().getFkCurrencyId());
            jbMoneyOutCheck.setEnabled(!isReadOnly && moAccountCash.getIsCheckWalletApplying());
        }

        if (!moRecord.getPkRecordTypeId().equalsIgnoreCase(SDataConstantsSys.FINU_TP_REC_JOURNAL)) {
            jckIsAdjustmentYearEnd.setEnabled(false);
            jckIsAdjustmentAudit.setEnabled(false);
        }
        else {
            jckIsAdjustmentYearEnd.setEnabled(!isReadOnly);
            jckIsAdjustmentAudit.setEnabled(!isReadOnly);
        }

        calculateBalance();
        renderPeriod();
        renderCompanyBranch();
        renderAccountCashSettings();
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        if (moRecord == null) {
            miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_GUI_FORM_EDIT_ONLY);
        }
        else {
            moRecord.setDate(moFieldDate.getDate());
            moRecord.setConcept(moFieldConcept.getString());
            moRecord.setIsAdjustmentsYearEnd(moFieldIsAdjustmentYearEnd.getBoolean());
            moRecord.setIsAdjustmentsAudit(moFieldIsAdjustmentAudit.getBoolean());
            moRecord.setIsDeleted(moFieldIsDeleted.getBoolean());
            if (moFieldFkAccountCashId_n.getComponent().isEnabled()) {
                moRecord.setFkCompanyBranchId_n(moFieldFkAccountCashId_n.getKeyAsIntArray()[0]);
                moRecord.setFkAccountCashId_n(moFieldFkAccountCashId_n.getKeyAsIntArray()[1]);
            }
            moRecord.setFkUserEditId(miClient.getSession().getUser().getPkUserId());

            moRecord.getDbmsRecordEntries().clear();

            for (STableRow row : moPaneGridEntries.getGridRows()) {
                moRecord.getDbmsRecordEntries().add((SDataRecordEntry) row.getData());
            }
        }

        return moRecord;
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        switch (type) {
            case SLibConstants.VALUE_STATUS:
                mbParamIsReadOnly = (Boolean) value;
                break;
            default:
        }
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbOk) {
                actionPerformedOk();
            }
            else if (button == jbCancel) {
                actionPerformedCancel();
            }
            else if (button == jbDate) {
                actionPerformedDate();
            }
            else if (button == jbEntryNew) {
                actionPerformedEntryNew();
            }
            else if (button == jbEntryNewCopy) {
                actionPerformedEntryNewCopy();
            }
            else if (button == jbEntryNewInsert) {
                actionPerformedEntryNewInsert();
            }
            else if (button == jbEntryEdit) {
                actionPerformedEntryEdit();
            }
            else if (button == jbEntryDelete) {
                actionPerformedEntryDelete();
            }
            else if (button == jbEntryMoveDown) {
                actionPerformedEntryMoveDown();
            }
            else if (button == jbEntryMoveUp) {
                actionPerformedEntryMoveUp();
            }
            else if (button == jbEntryViewSum) {
                actionPerformedEntryViewSum();
            }
            
            else if (button == jbMoneyIn) {
                actionPerformedMoneyInOut(moRecord.getDbmsDataAccountCash(), true);
            }
            else if (button == jbMoneyInOther) {
                actionPerformedMoneyInOut(null, true);
            }
            else if (button == jbMoneyInPaymentCus) {
                actionPerformedPaymentComplete(SDataConstants.BPSX_BP_CUS);
            }
            else if (button == jbMiPaymentCus || button == jbCdtPaymentCus) {
                actionPerformedPayment(SDataConstants.BPSX_BP_CUS);
            }
            else if (button == jbMiAdvanceCus || button == jbCdtAdvanceCus) {
                actionPerformedMoneyInOutBizPartner(SDataConstants.BPSX_BP_CUS, SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_IN_CUS_ADV);
            }
            else if (button == jbMiAdvanceSupDev || button == jbCdtAdvanceSupDev) {
                actionPerformedMoneyInOutBizPartner(SDataConstants.BPSX_BP_SUP, SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_IN_SUP_ADV_REF);
            }
            else if (button == jbMiCreditCdr || button == jbCdtCreditCdr) {
                actionPerformedMoneyInOutBizPartner(SDataConstants.BPSX_BP_CDR, SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_IN_EXT_CDR);
            }
            else if (button == jbMiCreditDbr || button == jbCdtCreditDbr) {
                actionPerformedMoneyInOutBizPartner(SDataConstants.BPSX_BP_DBR, SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_IN_EXT_DBR);
            }
            else if (button == jbMiExchangeRate) {
                actionPerformedExrProfitLoss(true);
            }
            
            else if (button == jbMoneyOut) {
                actionPerformedMoneyInOut(moRecord.getDbmsDataAccountCash(), false);
            }
            else if (button == jbMoneyOutOther) {
                actionPerformedMoneyInOut(null, false);
            }
            else if (button == jbMoneyOutPaymentSup) {
                actionPerformedPaymentComplete(SDataConstants.BPSX_BP_SUP);
            }
            else if (button == jbMoneyOutCheck) {
                actionPerformedCheck();
            }
            else if (button == jbMoneyOutTransfer) {
                actionPerformedTransfer();
            }
            else if (button == jbMoPaymentSup || button == jbDbtPaymentSup) {
                actionPerformedPayment(SDataConstants.BPSX_BP_SUP);
            }
            else if (button == jbMoAdvanceSup || button == jbDbtAdvanceSup) {
                actionPerformedMoneyInOutBizPartner(SDataConstants.BPSX_BP_SUP, SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_OUT_SUP_ADV);
            }
            else if (button == jbMoAdvanceCusDev || button == jbDbtAdvanceCusDev) {
                actionPerformedMoneyInOutBizPartner(SDataConstants.BPSX_BP_CUS, SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_OUT_CUS_ADV_REF);
            }
            else if (button == jbMoDebitCdr || button == jbDbtDebitCdr) {
                actionPerformedMoneyInOutBizPartner(SDataConstants.BPSX_BP_CDR, SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_OUT_EXT_CDR);
            }
            else if (button == jbMoDebitDbr || button == jbDbtDebitDbr) {
                actionPerformedMoneyInOutBizPartner(SDataConstants.BPSX_BP_DBR, SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_OUT_EXT_DBR);
            }
            else if (button == jbMoExchangeRate) {
                actionPerformedExrProfitLoss(false);
            }
        }
        else if (e.getSource() instanceof javax.swing.JToggleButton) {
            JToggleButton toggleButton = (JToggleButton) e.getSource();

            if (toggleButton == jtbEntryDeletedFilter) {
                actionPerformedEntryDeletedFilter();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof JComboBox) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                JComboBox comboBox = (JComboBox) e.getSource();

                if (comboBox == jcbFkAccountCashId_n) {
                    itemStateChangedAccountCashId_n();
                }
            }
        }
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        if (!e.getValueIsAdjusting()) {
            SDataRecordEntryRow row = (SDataRecordEntryRow) moPaneGridEntries.getSelectedTableRow();

            if (row != null) {
                SDataRecordEntry entry = (SDataRecordEntry) row.getData();

                jbEntryNewCopy.setEnabled(!jckIsSystem.isSelected() && !entry.getIsSystem() && !mbParamIsReadOnly);
                jbEntryEdit.setEnabled(!jckIsSystem.isSelected() && !entry.getIsSystem() && !mbParamIsReadOnly);
                jbEntryDelete.setEnabled(!jckIsSystem.isSelected() && (!entry.getIsSystem() || entry.getUserId() != 0) && !mbParamIsReadOnly);
            }
        }
    }
}
