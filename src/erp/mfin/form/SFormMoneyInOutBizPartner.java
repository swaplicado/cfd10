/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SFormMoneyInOutBizPartner.java
 *
 * Created on 21/10/2010, 06:17:12 PM
 */

package erp.mfin.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataReadDescriptions;
import erp.data.SDataUtilities;
import erp.data.SProcConstants;
import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.mbps.data.SDataBizPartner;
import erp.mbps.data.SDataBizPartnerBranch;
import erp.mcfg.data.SDataCurrency;
import erp.mfin.data.SDataCheck;
import erp.mfin.data.SDataRecord;
import erp.mfin.data.SDataRecordEntry;
import erp.mod.SModSysConsts;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import sa.lib.SLibConsts;

/**
 *
 * @author Alfonso Flores, Sergio Flores, Juan Barajas, Isabel Serv√≠n
 */
public class SFormMoneyInOutBizPartner extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener, java.awt.event.ItemListener, java.awt.event.FocusListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mfin.data.SDataCheck moCheck;
    private erp.lib.form.SFormField moFieldConcept;
    private erp.lib.form.SFormField moFieldFkBizPartnerId;
    private erp.lib.form.SFormField moFieldReference;
    private erp.lib.form.SFormField moFieldIsReferenceTax;
    private erp.lib.form.SFormField moFieldFkBizPartnerCurrencyId;
    private erp.lib.form.SFormField moFieldValueCy;
    private erp.lib.form.SFormField moFieldExchangeRateSys;
    private erp.lib.form.SFormField moFieldValue;
    private erp.lib.form.SFormField moFieldExchangeRate;
    private erp.lib.form.SFormField moFieldFkCheckId_n;

    private Vector<erp.mfin.data.SDataCheck> mvParamCheckVector;

    private erp.mfin.data.SDataRecord moParamRecord;
    private erp.mfin.data.SDataRecordEntry moRecordEntry;
    private erp.mbps.data.SDataBizPartner moBizPartner;
    private erp.mcfg.data.SDataCurrency moCurrencyRecord;
    private erp.mcfg.data.SDataCurrency moCurrencyBizPartner;
    private int mnParamBizPartnerCategory;
    private int[] manParamAccountingMove;

    private int mnFkUser;
    private int mnFkBizPartnerCurrencyId;

    /** Creates new form SFormMoneyInOutBizPartner */
    public SFormMoneyInOutBizPartner(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlAccountCash = new javax.swing.JLabel();
        jtfCompanyBranch = new javax.swing.JTextField();
        jtfAccountCash = new javax.swing.JTextField();
        jtfAccountCashCode = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        jlAccountCashCurrency = new javax.swing.JLabel();
        jtfAccountCashCurrency = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jlFkBizPartnerId = new javax.swing.JLabel();
        jcbFkBizPartnerId = new javax.swing.JComboBox();
        jbFkBizPartnerId = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        jlBizPartnerCurrency = new javax.swing.JLabel();
        jtfBizPartnerCurrency = new javax.swing.JTextField();
        jPanel14 = new javax.swing.JPanel();
        jlReference = new javax.swing.JLabel();
        jtfReference = new javax.swing.JTextField();
        jlDummy01 = new javax.swing.JLabel();
        jckIsReferenceTax = new javax.swing.JCheckBox();
        jPanel5 = new javax.swing.JPanel();
        jlFkBizPartnerCurrencyId = new javax.swing.JLabel();
        jcbFkBizPartnerCurrencyId = new javax.swing.JComboBox();
        jbFkBizPartnerCurrencyId = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jlValueCy = new javax.swing.JLabel();
        jtfValueCy = new javax.swing.JTextField();
        jbValueCy = new javax.swing.JButton();
        jlExchangeRateSys = new javax.swing.JLabel();
        jtfExchangeRateSys = new javax.swing.JTextField();
        jbExchangeRateSys = new javax.swing.JButton();
        jbExchangeRateAccountCashView = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jlValue = new javax.swing.JLabel();
        jtfValue = new javax.swing.JTextField();
        jbValue = new javax.swing.JButton();
        jlExchangeRate = new javax.swing.JLabel();
        jtfExchangeRate = new javax.swing.JTextField();
        jbExchangeRate = new javax.swing.JButton();
        jbExchangeRateAccountCashSet = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jckCheckApplying = new javax.swing.JCheckBox();
        jcbFkCheckId_n = new javax.swing.JComboBox();
        jPanel12 = new javax.swing.JPanel();
        jlConcept = new javax.swing.JLabel();
        jtfConcept = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Egreso por anticipo pago cliente");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setPreferredSize(new java.awt.Dimension(492, 33));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jPanel1.add(jbCancel);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.GridLayout(11, 1, 0, 2));

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlAccountCash.setText("Cuenta de dinero:");
        jlAccountCash.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel4.add(jlAccountCash);

        jtfCompanyBranch.setEditable(false);
        jtfCompanyBranch.setText("COMPANY BRANCH");
        jtfCompanyBranch.setFocusable(false);
        jtfCompanyBranch.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel4.add(jtfCompanyBranch);

        jtfAccountCash.setEditable(false);
        jtfAccountCash.setText("ACCOUNT CASH");
        jtfAccountCash.setFocusable(false);
        jtfAccountCash.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel4.add(jtfAccountCash);

        jtfAccountCashCode.setEditable(false);
        jtfAccountCashCode.setText("CODE");
        jtfAccountCashCode.setFocusable(false);
        jtfAccountCashCode.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel4.add(jtfAccountCashCode);

        jPanel3.add(jPanel4);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlAccountCashCurrency.setText("Moneda cuenta de dinero:");
        jlAccountCashCurrency.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel8.add(jlAccountCashCurrency);

        jtfAccountCashCurrency.setEditable(false);
        jtfAccountCashCurrency.setText("CURRENCY");
        jtfAccountCashCurrency.setFocusable(false);
        jtfAccountCashCurrency.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel8.add(jtfAccountCashCurrency);

        jPanel3.add(jPanel8);
        jPanel3.add(jPanel9);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlFkBizPartnerId.setText("Asociado negocios: *");
        jlFkBizPartnerId.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel6.add(jlFkBizPartnerId);

        jcbFkBizPartnerId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbFkBizPartnerId.setPreferredSize(new java.awt.Dimension(375, 23));
        jPanel6.add(jcbFkBizPartnerId);

        jbFkBizPartnerId.setText("jButton1");
        jbFkBizPartnerId.setToolTipText("Seleccionar asociado de negocios");
        jbFkBizPartnerId.setFocusable(false);
        jbFkBizPartnerId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel6.add(jbFkBizPartnerId);

        jPanel3.add(jPanel6);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlBizPartnerCurrency.setText("Moneda asociado negocios:");
        jlBizPartnerCurrency.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel13.add(jlBizPartnerCurrency);

        jtfBizPartnerCurrency.setEditable(false);
        jtfBizPartnerCurrency.setText("CURRENCY BIZ PARTNER");
        jtfBizPartnerCurrency.setFocusable(false);
        jtfBizPartnerCurrency.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel13.add(jtfBizPartnerCurrency);

        jPanel3.add(jPanel13);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlReference.setText("Repositorio contable:");
        jlReference.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel14.add(jlReference);

        jtfReference.setText("REF");
        jtfReference.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel14.add(jtfReference);

        jlDummy01.setPreferredSize(new java.awt.Dimension(25, 23));
        jPanel14.add(jlDummy01);

        jckIsReferenceTax.setText("Aplican impuestos");
        jckIsReferenceTax.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel14.add(jckIsReferenceTax);

        jPanel3.add(jPanel14);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlFkBizPartnerCurrencyId.setText("Moneda movimiento:");
        jlFkBizPartnerCurrencyId.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel5.add(jlFkBizPartnerCurrencyId);

        jcbFkBizPartnerCurrencyId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbFkBizPartnerCurrencyId.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel5.add(jcbFkBizPartnerCurrencyId);

        jbFkBizPartnerCurrencyId.setText("jButton1");
        jbFkBizPartnerCurrencyId.setToolTipText("Seleccionar moneda");
        jbFkBizPartnerCurrencyId.setFocusable(false);
        jbFkBizPartnerCurrencyId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel5.add(jbFkBizPartnerCurrencyId);

        jPanel3.add(jPanel5);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlValueCy.setText("Monto: *");
        jlValueCy.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel10.add(jlValueCy);

        jtfValueCy.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfValueCy.setText("0.00");
        jtfValueCy.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jtfValueCy);

        jbValueCy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_action.gif"))); // NOI18N
        jbValueCy.setToolTipText("Calcular monto");
        jbValueCy.setFocusable(false);
        jbValueCy.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel10.add(jbValueCy);

        jlExchangeRateSys.setText("Tipo de cambio sistema:");
        jlExchangeRateSys.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel10.add(jlExchangeRateSys);

        jtfExchangeRateSys.setEditable(false);
        jtfExchangeRateSys.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfExchangeRateSys.setText("0.00");
        jtfExchangeRateSys.setFocusable(false);
        jtfExchangeRateSys.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jtfExchangeRateSys);

        jbExchangeRateSys.setText("jButton5");
        jbExchangeRateSys.setToolTipText("Seleccionar tipo de cambio sistema");
        jbExchangeRateSys.setFocusable(false);
        jbExchangeRateSys.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel10.add(jbExchangeRateSys);

        jbExchangeRateAccountCashView.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_look.gif"))); // NOI18N
        jbExchangeRateAccountCashView.setToolTipText("Ver tipo de cambio acumulado");
        jbExchangeRateAccountCashView.setFocusable(false);
        jbExchangeRateAccountCashView.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel10.add(jbExchangeRateAccountCashView);

        jPanel3.add(jPanel10);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlValue.setText("Monto moneda local (ML): *");
        jlValue.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel11.add(jlValue);

        jtfValue.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfValue.setText("0.00");
        jtfValue.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jtfValue);

        jbValue.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_action.gif"))); // NOI18N
        jbValue.setToolTipText("Calcular monto moneda local");
        jbValue.setFocusable(false);
        jbValue.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel11.add(jbValue);

        jlExchangeRate.setText("Tipo de cambio: *");
        jlExchangeRate.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel11.add(jlExchangeRate);

        jtfExchangeRate.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfExchangeRate.setText("0.00");
        jtfExchangeRate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jtfExchangeRate);

        jbExchangeRate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_action.gif"))); // NOI18N
        jbExchangeRate.setToolTipText("Calcular tipo de cambio");
        jbExchangeRate.setFocusable(false);
        jbExchangeRate.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel11.add(jbExchangeRate);

        jbExchangeRateAccountCashSet.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_money.gif"))); // NOI18N
        jbExchangeRateAccountCashSet.setToolTipText("Asignar tipo de cambio acumulado");
        jbExchangeRateAccountCashSet.setFocusable(false);
        jbExchangeRateAccountCashSet.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel11.add(jbExchangeRateAccountCashSet);

        jPanel3.add(jPanel11);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jckCheckApplying.setText("Cheque del movimiento");
        jckCheckApplying.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel7.add(jckCheckApplying);

        jcbFkCheckId_n.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbFkCheckId_n.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel7.add(jcbFkCheckId_n);

        jPanel3.add(jPanel7);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlConcept.setText("Concepto de la partida: *");
        jlConcept.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel12.add(jlConcept);

        jtfConcept.setText("CONCEPT");
        jtfConcept.setPreferredSize(new java.awt.Dimension(375, 23));
        jPanel12.add(jtfConcept);

        jPanel3.add(jPanel12);

        jPanel2.add(jPanel3, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        setSize(new java.awt.Dimension(616, 414));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        mvFields = new Vector<SFormField>();

        moFieldFkBizPartnerId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkBizPartnerId, jlFkBizPartnerId);
        moFieldFkBizPartnerId.setPickerButton(jbFkBizPartnerId);
        moFieldReference = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, false, jtfReference, jlReference);
        moFieldReference.setLengthMax(15);
        moFieldIsReferenceTax = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsReferenceTax);
        moFieldFkBizPartnerCurrencyId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkBizPartnerCurrencyId, jlFkBizPartnerCurrencyId);
        moFieldFkBizPartnerCurrencyId.setPickerButton(jbFkBizPartnerCurrencyId);
        moFieldValueCy = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfValueCy, jlValueCy);
        moFieldValueCy.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsValueFormat());
        moFieldExchangeRateSys = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfExchangeRateSys, jlExchangeRateSys);
        moFieldExchangeRateSys.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsExchangeRateFormat());
        moFieldValue = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfValue, jlValue);
        moFieldValue.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsValueFormat());
        moFieldExchangeRate = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfExchangeRate, jlExchangeRate);
        moFieldExchangeRate.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsExchangeRateFormat());
        moFieldFkCheckId_n = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, false, jcbFkCheckId_n, jckCheckApplying);
        moFieldConcept = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtfConcept, jlConcept);
        moFieldConcept.setLengthMax(100);

        mvFields.add(moFieldFkBizPartnerId);
        mvFields.add(moFieldReference);
        mvFields.add(moFieldIsReferenceTax);
        mvFields.add(moFieldFkBizPartnerCurrencyId);
        mvFields.add(moFieldValueCy);
        mvFields.add(moFieldExchangeRateSys);
        mvFields.add(moFieldValue);
        mvFields.add(moFieldExchangeRate);
        mvFields.add(moFieldFkCheckId_n);
        mvFields.add(moFieldConcept);

        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);
        jbFkBizPartnerId.addActionListener(this);
        jbFkBizPartnerCurrencyId.addActionListener(this);
        jbExchangeRate.addActionListener(this);
        jbExchangeRateSys.addActionListener(this);
        jbValueCy.addActionListener(this);
        jbValue.addActionListener(this);
        jbExchangeRateAccountCashSet.addActionListener(this);
        jbExchangeRateAccountCashView.addActionListener(this);
        
        jcbFkBizPartnerId.addItemListener(this);
        jcbFkBizPartnerCurrencyId.addItemListener(this);
        jckCheckApplying.addItemListener(this);

        jtfValueCy.addFocusListener(this);
        jtfValue.addFocusListener(this);
        jtfExchangeRate.addFocusListener(this);
        jcbFkCheckId_n.addFocusListener(this);

        moParamRecord = null;
        mvParamCheckVector = new Vector<SDataCheck>();
        mvParamCheckVector.clear();

        mnFkUser = 0;
        mnFkBizPartnerCurrencyId = 0;

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionPerformedOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction action = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionPerformedCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), action, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            setFormTitle();
            readAccountCashInformation();
            jcbFkBizPartnerId.requestFocus();
        }
    }

    private void setFormTitle() {
        if (SLibUtilities.compareKeys(manParamAccountingMove, SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_IN_CUS_ADV)) {
            setTitle("Cobro anticipo a clientes");
        }
        else if (SLibUtilities.compareKeys(manParamAccountingMove, SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_OUT_CUS_ADV_REF)) {
            setTitle("Devoluci√≥n anticipo a clientes");
        }
        else if (SLibUtilities.compareKeys(manParamAccountingMove, SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_OUT_SUP_ADV)) {
            setTitle("Pago anticipo a proveedores");
        }
        else if (SLibUtilities.compareKeys(manParamAccountingMove, SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_IN_SUP_ADV_REF)) {
            setTitle("Devoluci√≥n anticipo a proveedores");
        }
        else if (SLibUtilities.compareKeys(manParamAccountingMove, SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_IN_EXT_DBR)) {
            setTitle("Abono a deudores diversos");
        }
        else if (SLibUtilities.compareKeys(manParamAccountingMove, SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_OUT_EXT_DBR)) {
            setTitle("Cargo a deudores diversos");
        }
        else if (SLibUtilities.compareKeys(manParamAccountingMove, SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_IN_EXT_CDR)) {
            setTitle("Abono a acreedores diversos");
        }
        else if (SLibUtilities.compareKeys(manParamAccountingMove, SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_OUT_EXT_CDR)) {
            setTitle("Cargo a acreedores diversos");
        }
    }
    
    private void readAccountCashInformation() {
        SDataBizPartnerBranch branch = null;
        
        if (moParamRecord.getDbmsDataAccountCash() == null) {
            moCurrencyRecord = miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency();

            jlAccountCash.setEnabled(false);
            jlAccountCashCurrency.setEnabled(false);
            jtfCompanyBranch.setText("");
            jtfAccountCash.setText("");
            jtfAccountCashCode.setText("");
        }
        else {
            branch = (SDataBizPartnerBranch) SDataUtilities.readRegistry(
                    miClient, SDataConstants.BPSU_BPB, new int[] { moParamRecord.getDbmsDataAccountCash().getPkCompanyBranchId() }, SLibConstants.EXEC_MODE_SILENT);

            moCurrencyRecord = (SDataCurrency) SDataUtilities.readRegistry(
                    miClient, SDataConstants.CFGU_CUR, new int[] { moParamRecord.getDbmsDataAccountCash().getFkCurrencyId() }, SLibConstants.EXEC_MODE_SILENT);

            jlAccountCash.setEnabled(true);
            jlAccountCashCurrency.setEnabled(true);
            jtfCompanyBranch.setText(branch.getBizPartnerBranch());
            jtfAccountCash.setText(moParamRecord.getDbmsDataAccountCash().getDbmsCompanyBranchEntity().getEntity());
            jtfAccountCashCode.setText(moParamRecord.getDbmsDataAccountCash().getDbmsCompanyBranchEntity().getCode());

            jtfCompanyBranch.setCaretPosition(0);
            jtfAccountCash.setCaretPosition(0);
            jtfAccountCashCode.setCaretPosition(0);
        }
        
        jtfAccountCashCurrency.setText(moCurrencyRecord.getCurrency());
        jtfAccountCashCurrency.setCaretPosition(0);
    }

    private void readBizPartnerCurrency() {
        int idCurrency = SLibConsts.UNDEFINED;
        
        moBizPartner = (SDataBizPartner) SDataUtilities.readRegistry(miClient, SDataConstants.BPSU_BP, moFieldFkBizPartnerId.getKeyAsIntArray(), SLibConstants.EXEC_MODE_SILENT);
        
        moCurrencyBizPartner = null;

        switch(mnParamBizPartnerCategory) {
            case SDataConstants.BPSX_BP_SUP:
                idCurrency = moBizPartner.getDbmsCategorySettingsSup().getFkCurrencyId_n();
                break;
            case SDataConstants.BPSX_BP_CUS:
                idCurrency = moBizPartner.getDbmsCategorySettingsCus().getFkCurrencyId_n();
                break;
            case SDataConstants.BPSX_BP_CDR:
                idCurrency = moBizPartner.getDbmsCategorySettingsCdr().getFkCurrencyId_n();
                break;
            case SDataConstants.BPSX_BP_DBR:
                idCurrency = moBizPartner.getDbmsCategorySettingsDbr().getFkCurrencyId_n();
                break;
            default:
        }
        
        if (idCurrency != SLibConsts.UNDEFINED) {
            moCurrencyBizPartner = (SDataCurrency) SDataUtilities.readRegistry(
                    miClient, SDataConstants.CFGU_CUR, new int[] { idCurrency }, SLibConstants.EXEC_MODE_SILENT);
        }

        if (moCurrencyBizPartner == null) {
            moCurrencyBizPartner = miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency();
        }

        jtfBizPartnerCurrency.setText(moCurrencyBizPartner.getCurrency());
        moFieldFkBizPartnerCurrencyId.setKey(new int[] { moCurrencyBizPartner.getPkCurrencyId() });

        renderCurrencySettings();
    }

    private void renderCurrencySettings() {
        if (miClient.getSession().getSessionCustom().isLocalCurrency(new int[] { moCurrencyBizPartner.getPkCurrencyId() })) {
            jtfValue.setEditable(false);
            jtfValue.setFocusable(false);
            jtfExchangeRate.setEditable(false);
            jtfExchangeRate.setFocusable(false);
            
            jbValueCy.setEnabled(false);
            jbValue.setEnabled(false);
            jbExchangeRateSys.setEnabled(false);
            jbExchangeRate.setEnabled(false);
            
            jbExchangeRateAccountCashView.setEnabled(false);
            jbExchangeRateAccountCashSet.setEnabled(false);

            moFieldExchangeRateSys.setFieldValue(1d);
            moFieldExchangeRate.setFieldValue(1d);
        }
        else {
            jtfValue.setEditable(true);
            jtfValue.setFocusable(true);
            jtfExchangeRate.setEditable(true);
            jtfExchangeRate.setFocusable(true);
            
            jbValueCy.setEnabled(true);
            jbValue.setEnabled(true);
            jbExchangeRateSys.setEnabled(true);
            jbExchangeRate.setEnabled(true);
            
            jbExchangeRateAccountCashView.setEnabled(true);
            jbExchangeRateAccountCashSet.setEnabled(true);

            jbExchangeRateAccountCashView.setEnabled(!miClient.getSession().getSessionCustom().isLocalCurrency(new int[] { moCurrencyRecord.getPkCurrencyId() }));
            jbExchangeRateAccountCashSet.setEnabled(!miClient.getSession().getSessionCustom().isLocalCurrency(new int[] { moCurrencyRecord.getPkCurrencyId() }));

            moFieldExchangeRate.setFieldValue(obtainExchangeRate());
        }
    }

    private boolean isMoneyIn() {
        return
            SLibUtilities.compareKeys(manParamAccountingMove, SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_IN_CUS_ADV) ||
            SLibUtilities.compareKeys(manParamAccountingMove, SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_IN_SUP_ADV_REF) ||
            SLibUtilities.compareKeys(manParamAccountingMove, SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_IN_EXT_CDR) ||
            SLibUtilities.compareKeys(manParamAccountingMove, SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_IN_EXT_DBR);
    }

    private boolean isDebit() {
        return
            SLibUtilities.compareKeys(manParamAccountingMove, SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_OUT_CUS_ADV_REF) ||
            SLibUtilities.compareKeys(manParamAccountingMove, SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_OUT_SUP_ADV) ||
            SLibUtilities.compareKeys(manParamAccountingMove, SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_OUT_EXT_CDR) ||
            SLibUtilities.compareKeys(manParamAccountingMove, SDataConstantsSys.FINS_CLS_ACC_MOV_CASH_OUT_EXT_DBR);
    }

    private double[] obtainCurrentAccountCashBalance() {
        double[] balance = null;

        try {
            balance = SDataUtilities.obtainAccountCashBalanceUpdated(miClient,
                moParamRecord.getDbmsDataAccountCash().getFkCurrencyId(), moParamRecord.getDate(),
                moParamRecord.getDbmsDataAccountCash().getPrimaryKey(),
                moParamRecord.getDbmsDataAccountCash().getFkAccountCashCategoryId() == SDataConstantsSys.FINS_CT_ACC_CASH_CASH ?
                    SDataConstantsSys.FINS_TP_SYS_MOV_CASH_CASH : SDataConstantsSys.FINS_TP_SYS_MOV_CASH_BANK,
                moParamRecord, moRecordEntry);
        }
        catch (Exception e) {
            SLibUtilities.printOutException(this, e);
        }

        return balance;
    }

    private double obtainExchangeRate() {
        double exr = 0;

        try {
            exr = SDataUtilities.obtainExchangeRate(miClient,
                moFieldFkBizPartnerCurrencyId.getKeyAsIntArray()[0], moParamRecord.getDate());
        }
        catch (Exception e) {
            SLibUtilities.printOutException(this, e);
        }

        return exr;
    }

    private double obtainExchangeRateAccountCash() {
        double[] balance = null;
        double exr = 0;

        try {
            balance = obtainCurrentAccountCashBalance();
            exr = balance[0] == 0d ? 0d : balance[0] / balance[1];
        }
        catch (Exception e) {
            SLibUtilities.printOutException(this, e);
        }

        return exr;
    }

    private java.lang.String getBizPartnerAccountId() {
        String sBpAccount = "";
        String sMsg = "";
        Vector<Object> mvParams = new Vector<Object>();
        SDataBizPartner oBizPartner = null;

        mvParams.clear();

        oBizPartner = (SDataBizPartner) SDataUtilities.readRegistry(miClient, SDataConstants.BPSU_BP, moFieldFkBizPartnerId.getKeyAsIntArray(), SLibConstants.EXEC_MODE_SILENT);

        if (oBizPartner != null) {
            mvParams.add(oBizPartner.getPkBizPartnerId());

            switch(mnParamBizPartnerCategory) {
                case SDataConstants.BPSX_BP_SUP:
                    mvParams.add(oBizPartner.getDbmsCategorySettingsSup().getPkBizPartnerCategoryId());
                    mnFkBizPartnerCurrencyId = oBizPartner.getDbmsCategorySettingsSup().getFkCurrencyId_n();
                    break;
                case SDataConstants.BPSX_BP_CUS:
                    mvParams.add(oBizPartner.getDbmsCategorySettingsCus().getPkBizPartnerCategoryId());
                    mnFkBizPartnerCurrencyId = oBizPartner.getDbmsCategorySettingsCus().getFkCurrencyId_n();
                    break;
                case SDataConstants.BPSX_BP_CDR:
                    mvParams.add(oBizPartner.getDbmsCategorySettingsCdr().getPkBizPartnerCategoryId());
                    mnFkBizPartnerCurrencyId = oBizPartner.getDbmsCategorySettingsCdr().getFkCurrencyId_n();
                    break;
                case SDataConstants.BPSX_BP_DBR:
                    mvParams.add(oBizPartner.getDbmsCategorySettingsDbr().getPkBizPartnerCategoryId());
                    mnFkBizPartnerCurrencyId = oBizPartner.getDbmsCategorySettingsDbr().getFkCurrencyId_n();
                    break;
                default:
            }

            mvParams.add(miClient.getSessionXXX().getCompany().getDbmsDataCompany().getDbmsHqBranch().getDbmsDataCompanyBranchBkc().getPkBookkepingCenterId());
            mvParams.add(SDataConstantsSys.FINS_TP_ACC_BP_PAY);
            mvParams.add(moParamRecord.getDate());
            mvParams = SDataUtilities.callProcedure(miClient, SProcConstants.FIN_ACC_BP_GET,  mvParams, SLibConstants.EXEC_MODE_SILENT);

            if (mvParams.size() > 0) {
                if (SLibUtilities.parseInt(mvParams.get(1).toString()) > 0) {
                    sMsg = mvParams.get(2).toString();
                }
                sBpAccount = mvParams.get(0).toString();
            }
        }

        return sBpAccount;
    }

    private erp.mfin.data.SDataRecordEntry prepareRecordEntry() {
        int[] keySystemMoveType = null;
        int[] keySystemAccountType = null;
        SDataRecordEntry oEntry = new SDataRecordEntry();

        oEntry.setConcept(moFieldConcept.getString());
        oEntry.setDebit(isDebit() ? moFieldValue.getDouble() : 0d);
        oEntry.setCredit(isDebit() ? 0d : moFieldValue.getDouble());
        oEntry.setExchangeRate(moFieldExchangeRate.getDouble());
        oEntry.setExchangeRateSystem(moFieldExchangeRateSys.getDouble());
        oEntry.setDebitCy(isDebit() ? moFieldValueCy.getDouble() : 0d);
        oEntry.setCreditCy(isDebit() ? 0d : moFieldValueCy.getDouble());
        oEntry.setFkAccountIdXXX(getBizPartnerAccountId());
        oEntry.setFkAccountingMoveTypeId(SDataConstantsSys.FINS_CLS_ACC_MOV_JOURNAL[0]);
        oEntry.setFkAccountingMoveClassId(SDataConstantsSys.FINS_CLS_ACC_MOV_JOURNAL[1]);
        oEntry.setFkAccountingMoveSubclassId(SDataConstantsSys.FINS_CLS_ACC_MOV_JOURNAL[2]);

        switch (mnParamBizPartnerCategory) {
            case SDataConstants.BPSX_BP_SUP:
                keySystemAccountType = SModSysConsts.FINS_TP_SYS_ACC_BPR_SUP_BAL;
                keySystemMoveType = isDebit() ? SModSysConsts.FINS_TP_SYS_MOV_MO_SUP_PAY : SModSysConsts.FINS_TP_SYS_MOV_MI_SUP_PAY;
                break;
            case SDataConstants.BPSX_BP_CUS:
                keySystemAccountType = SModSysConsts.FINS_TP_SYS_ACC_BPR_CUS_BAL;
                keySystemMoveType = isDebit() ? SModSysConsts.FINS_TP_SYS_MOV_MO_CUS_PAY : SModSysConsts.FINS_TP_SYS_MOV_MI_CUS_PAY;
                break;
            case SDataConstants.BPSX_BP_CDR:
                keySystemAccountType = SModSysConsts.FINS_TP_SYS_ACC_BPR_CDR_BAL;
                keySystemMoveType = isDebit() ? SModSysConsts.FINS_TP_SYS_MOV_MO_CDR_PAY : SModSysConsts.FINS_TP_SYS_MOV_MI_CDR_PAY;
                break;
            case SDataConstants.BPSX_BP_DBR:
                keySystemAccountType = SModSysConsts.FINS_TP_SYS_ACC_BPR_DBR_BAL;
                keySystemMoveType = isDebit() ? SModSysConsts.FINS_TP_SYS_MOV_MO_DBR_PAY : SModSysConsts.FINS_TP_SYS_MOV_MI_DBR_PAY;
                break;
            default:
        }

        oEntry.setFkSystemMoveClassId(keySystemMoveType[0]);
        oEntry.setFkSystemMoveTypeId(keySystemMoveType[1]);
        oEntry.setFkSystemAccountClassId(keySystemAccountType[0]);
        oEntry.setFkSystemAccountTypeId(keySystemAccountType[1]);

        oEntry.setFkSystemMoveCategoryIdXXX(SDataConstantsSys.FINS_CT_SYS_MOV_BPS);
        oEntry.setFkSystemMoveTypeIdXXX(
                mnParamBizPartnerCategory == SDataConstants.BPSX_BP_SUP ? SDataConstantsSys.FINS_TP_SYS_MOV_BPS_SUP[1] :
                mnParamBizPartnerCategory == SDataConstants.BPSX_BP_CUS ? SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CUS[1] :
                mnParamBizPartnerCategory == SDataConstants.BPSX_BP_CDR ? SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CDR[1] :
                SDataConstantsSys.FINS_TP_SYS_MOV_BPS_DBR[1]);
        oEntry.setFkCurrencyId(moFieldFkBizPartnerCurrencyId.getKeyAsIntArray()[0]);
        oEntry.setFkBizPartnerId_nr(moFieldFkBizPartnerId.getKeyAsIntArray()[0]);
        oEntry.setFkBizPartnerBranchId_n(moBizPartner.getDbmsHqBranch().getPkBizPartnerBranchId());
        
        if (jtfReference.isEnabled()) {
            oEntry.setReference(moFieldReference.getString());
            oEntry.setIsReferenceTax(moFieldIsReferenceTax.getBoolean());
        }
        else {
            oEntry.setReference("");
            oEntry.setIsReferenceTax(false);
        }
        
        if (moParamRecord.getDbmsDataAccountCash() == null) {
            oEntry.setFkCompanyBranchId_n(SLibConsts.UNDEFINED);
            oEntry.setFkEntityId_n(SLibConsts.UNDEFINED);
        }
        else {
            oEntry.setFkCompanyBranchId_n(moParamRecord.getDbmsDataAccountCash().getPkCompanyBranchId());
            oEntry.setFkEntityId_n(moParamRecord.getDbmsDataAccountCash().getPkAccountCashId());
        }
        
        oEntry.setDbmsAccount(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FIN_ACC, new Object[] { oEntry.getFkAccountIdXXX() }));
        oEntry.setDbmsAccountComplement(moFieldFkBizPartnerId.getString());
        oEntry.setDbmsAccountingMoveSubclass(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FINS_CLS_ACC_MOV, SDataConstantsSys.FINS_CLS_ACC_MOV_JOURNAL));
        oEntry.setDbmsCurrencyKey((String) ((SFormComponentItem) jcbFkBizPartnerCurrencyId.getSelectedItem()).getComplement());

        if (!jckCheckApplying.isSelected()) {
            oEntry.setFkCheckWalletId_n(0);
            oEntry.setFkCheckId_n(0);
            oEntry.setAuxCheckNumber(0);
        }
        else {
            oEntry.setFkCheckWalletId_n(moFieldFkCheckId_n.getKeyAsIntArray()[0]);
            oEntry.setFkCheckId_n(moFieldFkCheckId_n.getKeyAsIntArray()[1]);
            oEntry.setAuxCheckNumber(((Integer) ((SFormComponentItem) jcbFkCheckId_n.getSelectedItem()).getComplement()).intValue());
        }

        oEntry.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
        oEntry.setFkUserEditId(mnFkUser > 0 ? miClient.getSession().getUser().getPkUserId() : SDataConstantsSys.USRX_USER_NA);
        return oEntry;
    }

    private void actionPerformedOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionPerformedCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    private void actionPerformedBizPartnerId() {
        miClient.pickOption(mnParamBizPartnerCategory, moFieldFkBizPartnerId, null);
    }

    private void actionPerformedCurrencyBizPartnerId() {
        miClient.pickOption(SDataConstants.CFGU_CUR, moFieldFkBizPartnerCurrencyId, null);
    }

    private void actionPerformedExchangeRateSystem() {
        double rate = miClient.pickExchangeRate(moCurrencyBizPartner.getPkCurrencyId(), miClient.getSessionXXX().getWorkingDate());

        if (rate != 0d) {
            moFieldExchangeRateSys.setFieldValue(rate);
            if (moFieldExchangeRate.getDouble() == 0) {
                moFieldExchangeRate.setFieldValue(rate);
            }
            jtfExchangeRate.requestFocus();
        }
    }

    private void actionPerformedValueCy() {
        if (moFieldExchangeRate.getDouble() == 0) {
            jtfExchangeRate.requestFocus();
        }
        else {
            moFieldValueCy.setFieldValue(SLibUtilities.round(moFieldValue.getDouble() / moFieldExchangeRate.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
            jtfValueCy.requestFocus();
        }
    }

    private void actionPerformedValue() {
        if (moFieldExchangeRate.getDouble() == 0) {
            jtfExchangeRate.requestFocus();
        }
        else {
            moFieldValue.setFieldValue(SLibUtilities.round(moFieldValueCy.getDouble() * moFieldExchangeRate.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
            jtfValue.requestFocus();
        }
    }

    private void actionPerformedExchangeRate() {
        if (moFieldValueCy.getDouble() != 0) {

            if (moFieldValue.getDouble() == 0) {
                jtfValueCy.requestFocus();
            }
            else {
                moFieldExchangeRate.setFieldValue(moFieldValue.getDouble() / moFieldValueCy.getDouble());
                jtfExchangeRate.requestFocus();
            }
        }
        else if (moFieldValue.getDouble() != 0) {
            jtfValue.requestFocus();
        }
        else {
            jtfExchangeRate.requestFocus();
        }
    }

    private void actionPerformedExchangeRateAccountCashView() {
        double[] balance = null;

        try {
            balance = obtainCurrentAccountCashBalance();

            miClient.showMsgBoxInformation(
                    "Tipo de cambio acumulado al d√≠a: " + miClient.getSessionXXX().getFormatters().getDateFormat().format(moParamRecord.getDate()) + "\n" +
                    "Saldo " + miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getKey() + ": $ " +
                    miClient.getSessionXXX().getFormatters().getDecimalsValueFormat().format(balance[0]) + ".\n" +
                    "Saldo " + moCurrencyRecord.getKey() + ": $ " +
                    miClient.getSessionXXX().getFormatters().getDecimalsValueFormat().format(balance[1]) + ".\n" +
                    "Tipo de cambio acumulado: " + miClient.getSessionXXX().getFormatters().getDecimalsExchangeRateFormat().format(balance[1] == 0d ? 0d : balance[0] / balance[1]) + ".");
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }
    }

    private void actionPerformedExchangeRateAccountCashSet() {
        moFieldExchangeRate.setFieldValue(obtainExchangeRateAccountCash());
        jtfExchangeRate.requestFocus();
    }

    private void itemStateChangedBizPartner() {
        moBizPartner = null;
        
        if (jcbFkBizPartnerId.getSelectedIndex() > 0) {
            jcbFkBizPartnerCurrencyId.setEnabled(true);
            jbFkBizPartnerCurrencyId.setEnabled(true);
            readBizPartnerCurrency();
        }
        else {
            jcbFkBizPartnerCurrencyId.setEnabled(false);
            jbFkBizPartnerCurrencyId.setEnabled(false);
            renderCurrencySettings();
        }
    }

    private void itemStateChangedBizPartnerCurrency() {
        if (moFieldFkBizPartnerCurrencyId.getKeyAsIntArray()[0] > 0) {
            moCurrencyBizPartner = (SDataCurrency) SDataUtilities.readRegistry(miClient, SDataConstants.CFGU_CUR,
                new int[] { moFieldFkBizPartnerCurrencyId.getKeyAsIntArray()[0] }, SLibConstants.EXEC_MODE_SILENT);
        }
        else {
            moCurrencyBizPartner = miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency();
        }

        renderCurrencySettings();
    }

    private void itemStateChangedCheckApplying() {
        if (!jckCheckApplying.isSelected()) {
            jcbFkCheckId_n.setEnabled(false);
        }
        else {
            jcbFkCheckId_n.setEnabled(true);
            jcbFkCheckId_n.requestFocus();
        }
    }

    private void focusLostValueCy() {
        if (moFieldValueCy.getDouble() != 0) {

            if (!jtfValue.isEditable()|| moFieldValue.getDouble() == 0) {
                moFieldValue.setFieldValue(SLibUtilities.round(moFieldValueCy.getDouble() * moFieldExchangeRate.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
            }
            else if (moFieldExchangeRate.getDouble() == 0) {
                moFieldExchangeRate.setFieldValue(SLibUtilities.round(moFieldValue.getDouble() / moFieldValueCy.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsExchangeRate()));
            }
        }
    }

    private void focusLostValue() {
        if (moFieldValue.getDouble() != 0) {

            if (moFieldValueCy.getDouble() == 0 && moFieldExchangeRate.getDouble() != 0) {
                moFieldValueCy.setFieldValue(SLibUtilities.round(moFieldValue.getDouble() / moFieldExchangeRate.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
            }
            else if (moFieldValueCy.getDouble() != 0 && moFieldExchangeRate.getDouble() == 0) {
                moFieldExchangeRate.setFieldValue(SLibUtilities.round(moFieldValue.getDouble() / moFieldValueCy.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsExchangeRate()));
            }
        }
    }

    private void focusLostExchangeRate() {
        if (moFieldValueCy.getDouble() != 0 && moFieldValue.getDouble() == 0) {
            moFieldValue.setFieldValue(SLibUtilities.round(moFieldValueCy.getDouble() * moFieldExchangeRate.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
        }
    }

    private void focusLostCheck() {
        if (jcbFkCheckId_n.getSelectedIndex() > 0 && moFieldConcept.getString().length() == 0) {
            jtfConcept.setText("CH " + ((Integer) ((SFormComponentItem) jcbFkCheckId_n.getSelectedItem()).getComplement()) + "; " + moParamRecord.getDbmsDataAccountCash().getAuxCode() + " ");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbExchangeRate;
    private javax.swing.JButton jbExchangeRateAccountCashSet;
    private javax.swing.JButton jbExchangeRateAccountCashView;
    private javax.swing.JButton jbExchangeRateSys;
    private javax.swing.JButton jbFkBizPartnerCurrencyId;
    private javax.swing.JButton jbFkBizPartnerId;
    private javax.swing.JButton jbOk;
    private javax.swing.JButton jbValue;
    private javax.swing.JButton jbValueCy;
    private javax.swing.JComboBox jcbFkBizPartnerCurrencyId;
    private javax.swing.JComboBox jcbFkBizPartnerId;
    private javax.swing.JComboBox jcbFkCheckId_n;
    private javax.swing.JCheckBox jckCheckApplying;
    private javax.swing.JCheckBox jckIsReferenceTax;
    private javax.swing.JLabel jlAccountCash;
    private javax.swing.JLabel jlAccountCashCurrency;
    private javax.swing.JLabel jlBizPartnerCurrency;
    private javax.swing.JLabel jlConcept;
    private javax.swing.JLabel jlDummy01;
    private javax.swing.JLabel jlExchangeRate;
    private javax.swing.JLabel jlExchangeRateSys;
    private javax.swing.JLabel jlFkBizPartnerCurrencyId;
    private javax.swing.JLabel jlFkBizPartnerId;
    private javax.swing.JLabel jlReference;
    private javax.swing.JLabel jlValue;
    private javax.swing.JLabel jlValueCy;
    private javax.swing.JTextField jtfAccountCash;
    private javax.swing.JTextField jtfAccountCashCode;
    private javax.swing.JTextField jtfAccountCashCurrency;
    private javax.swing.JTextField jtfBizPartnerCurrency;
    private javax.swing.JTextField jtfCompanyBranch;
    private javax.swing.JTextField jtfConcept;
    private javax.swing.JTextField jtfExchangeRate;
    private javax.swing.JTextField jtfExchangeRateSys;
    private javax.swing.JTextField jtfReference;
    private javax.swing.JTextField jtfValue;
    private javax.swing.JTextField jtfValueCy;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moCheck = null;
        moRecordEntry = null;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        moCurrencyBizPartner = null;
        jtfBizPartnerCurrency.setText("");
        jckCheckApplying.setEnabled(isMoneyIn() ? false : true);
        jckCheckApplying.setSelected(false);
        jcbFkBizPartnerCurrencyId.setEnabled(false);
        jtfValue.setEditable(false);
        jtfValue.setFocusable(false);
        jbValueCy.setEnabled(false);
        jbValue.setEnabled(false);
        jtfExchangeRate.setEditable(false);
        jtfExchangeRate.setFocusable(false);
        jbExchangeRateSys.setEnabled(false);
        jbExchangeRate.setEnabled(false);
        jbExchangeRateAccountCashView.setEnabled(false);
        jbExchangeRateAccountCashSet.setEnabled(false);
        itemStateChangedCheckApplying();
        mbResetingForm = false;
    }

    @Override
    public void formRefreshCatalogues() {
        mbResetingForm = true;
        SFormUtilities.populateComboBox(miClient, jcbFkBizPartnerId, mnParamBizPartnerCategory);
        SFormUtilities.populateComboBox(miClient, jcbFkBizPartnerCurrencyId, SDataConstants.CFGU_CUR);
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        String message = "";
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        if (!validation.getIsError()) {
            message = SDataUtilities.validateExchangeRate(miClient, moFieldValueCy.getDouble(), moFieldExchangeRate.getDouble(), moFieldValue.getDouble(), jlValueCy.getText());
            if (message.length() > 0) {
                if (miClient.showMsgBoxConfirm(message + "\n" + SLibConstants.MSG_CNF_MSG_CONT) != JOptionPane.YES_OPTION) {
                    validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_VALUE_DIF + "'" + jlValueCy.getText() + "'.");
                    validation.setComponent(jtfValueCy);
                }
            }
            else if (jckCheckApplying.isSelected() && jcbFkCheckId_n.getSelectedIndex() <= 0) {
                validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_EMPTY + "'" + jckCheckApplying.getText() + "'.");
                validation.setComponent(jcbFkCheckId_n);
            }
            else if (getBizPartnerAccountId().length() == 0) {
                validation.setMessage("No se encuentra la cuenta contable del asociado de negocio");
                validation.setComponent(jcbFkBizPartnerId);
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        moRecordEntry = (SDataRecordEntry) registry;

        moFieldConcept.setFieldValue(moRecordEntry.getConcept());
        moFieldFkBizPartnerId.setKey(new int[] { moRecordEntry.getFkBizPartnerId_nr() });
        moFieldReference.setFieldValue(moRecordEntry.getReference());
        moFieldIsReferenceTax.setFieldValue(moRecordEntry.getIsReferenceTax());
        moFieldValueCy.setFieldValue(moCheck.getValue());
        moFieldValue.setFieldValue(moRecordEntry.getCredit());
        moFieldExchangeRateSys.setFieldValue(moRecordEntry.getExchangeRateSystem());
        moFieldExchangeRate.setFieldValue(moRecordEntry.getExchangeRate());

        mnFkUser = moRecordEntry.getFkUserNewId();
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        return moRecordEntry = prepareRecordEntry();
    }

    @Override
    @SuppressWarnings("unchecked")
    public void setValue(int type, java.lang.Object value) {
        switch (type) {
            case SDataConstants.FIN_REC:
                moParamRecord = (SDataRecord) value;
                break;
                
            case SDataConstants.FIN_CHECK:
                SFormComponentItem item = null;
                mvParamCheckVector = (Vector<SDataCheck>) value;
                jcbFkCheckId_n.removeAllItems();
                jcbFkCheckId_n.addItem(new SFormComponentItem(new int[] { 0, 0 }, "(Seleccionar cheque)"));

                for (SDataCheck check : mvParamCheckVector) {
                    item = new SFormComponentItem(check.getPrimaryKey(), "#" + check.getNumber() + "; " +
                            miClient.getSessionXXX().getFormatters().getDecimalsCurrencyFormat().format(check.getValue()) + "; " +
                            check.getBeneficiary());
                    item.setComplement(check.getNumber());

                    jcbFkCheckId_n.addItem(item);
                }

                jcbFkCheckId_n.setSelectedIndex(0);
                break;
                
            case SDataConstants.BPSU_BP:
                mnParamBizPartnerCategory = (Integer) value;
                break;
                
            case SDataConstants.FINS_CLS_ACC_MOV:
                manParamAccountingMove = (int[]) value;
                break;
                
            default:
        }
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOk) {
                actionPerformedOk();
            }
            else if (button == jbCancel) {
                actionPerformedCancel();
            }
            else if (button == jbFkBizPartnerId) {
                actionPerformedBizPartnerId();
            }
            else if (button == jbFkBizPartnerCurrencyId) {
                actionPerformedCurrencyBizPartnerId();
            }
            else if (button == jbValueCy) {
                actionPerformedValueCy();
            }
            else if (button == jbValue) {
                actionPerformedValue();
            }
            else if (button == jbExchangeRateSys) {
                actionPerformedExchangeRateSystem();
            }
            else if (button == jbExchangeRate) {
                actionPerformedExchangeRate();
            }
            else if (button == jbExchangeRateAccountCashView) {
                actionPerformedExchangeRateAccountCashView();
            }
            else if (button == jbExchangeRateAccountCashSet) {
                actionPerformedExchangeRateAccountCashSet();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof javax.swing.JComboBox) {
            if (!mbResetingForm) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    JComboBox comboBox = (JComboBox) e.getSource();
                    
                    if (comboBox == jcbFkBizPartnerId) {
                        itemStateChangedBizPartner();
                    }
                    else if (comboBox == jcbFkBizPartnerCurrencyId) {
                        itemStateChangedBizPartnerCurrency();
                    }
                }
            }
        }
        else if (e.getSource() instanceof javax.swing.JCheckBox) {
            if (!mbResetingForm) {
                JCheckBox checkBox = (JCheckBox) e.getSource();
                
                if (checkBox == jckCheckApplying) {
                    itemStateChangedCheckApplying();
                }
            }
        }
    }
    
    @Override
    public void focusGained(java.awt.event.FocusEvent e) {

    }

    @Override
    public void focusLost(java.awt.event.FocusEvent e) {
        if (e.getSource() instanceof javax.swing.JTextField) {
            JTextField textField = (JTextField) e.getSource();

            if (textField == jtfValueCy) {
                focusLostValueCy();
            }
            else if (textField == jtfValue) {
                focusLostValue();
            }
            else if (textField == jtfExchangeRate) {
                focusLostExchangeRate();
            }
        }
        else if (e.getSource() instanceof javax.swing.JComboBox) {
            JComboBox comboBox = (JComboBox) e.getSource();
            
            if (comboBox == jcbFkCheckId_n) {
                focusLostCheck();
            }
        }
    }
}
