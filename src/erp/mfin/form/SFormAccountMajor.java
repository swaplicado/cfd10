/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package erp.mfin.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataUtilities;
import erp.data.SProcConstants;
import erp.form.SFormFieldAccountId;
import erp.gui.account.SAccountUtils;
import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormComboBoxGroup;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormOptionPickerInterface;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.mfin.data.SDataAccount;
import erp.mfin.data.SDataAccountUserSubclass;
import erp.mod.SModSysConsts;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JButton;
import sa.lib.SLibTimeUtils;

/**
 *
 * @author  Sergio Flores
 */
public class SFormAccountMajor extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mfin.data.SDataAccount moAccount;
    private erp.mfin.data.SDataAccountUserSubclass moAccountUserSubclass;
    private erp.lib.form.SFormComboBoxGroup moAccountUserComboBoxGroup;
    private erp.form.SFormFieldAccountId moFieldAccountPkAccountId;
    private erp.lib.form.SFormField moFieldFkAccountSystemTypeId;
    private erp.lib.form.SFormField moFieldFkAccountUserTypeId;
    private erp.lib.form.SFormField moFieldFkAccountUserClassId;
    private erp.lib.form.SFormField moFieldFkAccountUserSubclassId;
    private erp.lib.form.SFormField moFieldFkAccountLedgerTypeId;
    private erp.lib.form.SFormField moFieldAccount;
    private erp.lib.form.SFormField moFieldIsContraAccount;
    private erp.lib.form.SFormField moFieldDeep;
    private erp.lib.form.SFormField moFieldDateStart;
    private erp.lib.form.SFormField moFieldDateEnd_n;
    private erp.lib.form.SFormField moFieldIsCostCenterRequired;
    private erp.lib.form.SFormField moFieldIsEntityRequired;
    private erp.lib.form.SFormField moFieldIsBizPartnerRequired;
    private erp.lib.form.SFormField moFieldIsItemRequired;
    private erp.lib.form.SFormField moFieldIsActive;
    private erp.lib.form.SFormField moFieldIsDeleted;
    private erp.lib.form.SFormField moFieldFkAccountSpecializedTypeId;
    private erp.lib.form.SFormField moFieldFkAccountEbitdaTypeId;
    private erp.lib.form.SFormField moFieldFkAssetFixedTypeId;
    private erp.lib.form.SFormField moFieldFkAssetDifferredTypeId;
    private erp.lib.form.SFormField moFieldFkLiabilityDifferredTypeId;
    private erp.lib.form.SFormField moFieldFkExpenseOperativeTypeId;
    private erp.lib.form.SFormField moFieldFkAdministrativeConceptTypeId;
    private erp.lib.form.SFormField moFieldFkTaxableConceptTypeId;
    private erp.lib.form.SFormField moFieldFkFiscalAccountId;

    private boolean mbCanModifyAccountType;

    /** Creates new form DFormAccountMajor */
    public SFormAccountMajor(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        mnFormType = SDataConstants.FINX_ACC_MAJOR;
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jlFkAccountSystemTypeId = new javax.swing.JLabel();
        jcbFkAccountSystemTypeId = new javax.swing.JComboBox<SFormComponentItem>();
        jlFkAccountUserTypeId = new javax.swing.JLabel();
        jPanel15 = new javax.swing.JPanel();
        jbFkAccountUserTypeId = new javax.swing.JButton();
        jcbFkAccountUserTypeId = new javax.swing.JComboBox<SFormComponentItem>();
        jlFkAccountUserClassId = new javax.swing.JLabel();
        jPanel16 = new javax.swing.JPanel();
        jbFkAccountUserClassId = new javax.swing.JButton();
        jcbFkAccountUserClassId = new javax.swing.JComboBox<SFormComponentItem>();
        jlFkAccountUserSubclassId = new javax.swing.JLabel();
        jPanel18 = new javax.swing.JPanel();
        jbFkAccountUserSubclassId = new javax.swing.JButton();
        jcbFkAccountUserSubclassId = new javax.swing.JComboBox<SFormComponentItem>();
        jlFkAccountLedgerTypeId = new javax.swing.JLabel();
        jPanel17 = new javax.swing.JPanel();
        jbFkAccountLedgerTypeId = new javax.swing.JButton();
        jcbFkAccountLedgerTypeId = new javax.swing.JComboBox<SFormComponentItem>();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jlPkAccountId = new javax.swing.JLabel();
        jftPkAccountId = new javax.swing.JFormattedTextField();
        jbViewAccount = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jtfRangeAccountId = new javax.swing.JTextField();
        jckIsContraAccount = new javax.swing.JCheckBox();
        jPanel6 = new javax.swing.JPanel();
        jlAccount = new javax.swing.JLabel();
        jtfAccount = new javax.swing.JTextField();
        jPanel14 = new javax.swing.JPanel();
        jlDeep = new javax.swing.JLabel();
        jtfDeep = new javax.swing.JTextField();
        jlDummy11 = new javax.swing.JLabel();
        jlDummy01 = new javax.swing.JLabel();
        jlDummy12 = new javax.swing.JLabel();
        jckIsActive = new javax.swing.JCheckBox();
        jPanel11 = new javax.swing.JPanel();
        jlDateStart = new javax.swing.JLabel();
        jftDateStart = new javax.swing.JFormattedTextField();
        jbDateStart = new javax.swing.JButton();
        jlDummy02 = new javax.swing.JLabel();
        jckIsRequiredCostCenter = new javax.swing.JCheckBox();
        jPanel12 = new javax.swing.JPanel();
        jlDateEnd_n = new javax.swing.JLabel();
        jftDateEnd_n = new javax.swing.JFormattedTextField();
        jbDateEnd_n = new javax.swing.JButton();
        jlDummy03 = new javax.swing.JLabel();
        jckIsDeleted = new javax.swing.JCheckBox();
        jPanel9 = new javax.swing.JPanel();
        jckIsRequiredEntity = new javax.swing.JCheckBox();
        jckIsRequiredBizPartner = new javax.swing.JCheckBox();
        jckIsRequiredItem = new javax.swing.JCheckBox();
        jPanel13 = new javax.swing.JPanel();
        jlFkAccountSpecializadTypeId = new javax.swing.JLabel();
        jPanel26 = new javax.swing.JPanel();
        jcbFkAccountSpecializedTypeId = new javax.swing.JComboBox<SFormComponentItem>();
        jbFkAccountSpecializedTypeId = new javax.swing.JButton();
        jlFkAccountEbitdaTypeId = new javax.swing.JLabel();
        jPanel19 = new javax.swing.JPanel();
        jbFkAccountEbitdaTypeId = new javax.swing.JButton();
        jcbFkAccountEbitdaTypeId = new javax.swing.JComboBox<SFormComponentItem>();
        jlFkAssetFixedTypeId = new javax.swing.JLabel();
        jPanel20 = new javax.swing.JPanel();
        jbFkAssetFixedTypeId = new javax.swing.JButton();
        jcbFkAssetFixedTypeId = new javax.swing.JComboBox<SFormComponentItem>();
        jlFkAssetDifferredTypeId = new javax.swing.JLabel();
        jPanel21 = new javax.swing.JPanel();
        jbFkAssetDifferredTypeId = new javax.swing.JButton();
        jcbFkAssetDifferredTypeId = new javax.swing.JComboBox<SFormComponentItem>();
        jlFkLiabilityDifferredTypeId = new javax.swing.JLabel();
        jPanel23 = new javax.swing.JPanel();
        jbFkLiabilityDifferredTypeId = new javax.swing.JButton();
        jcbFkLiabilityDifferredTypeId = new javax.swing.JComboBox<SFormComponentItem>();
        jlFkExpenseOperativeTypeId = new javax.swing.JLabel();
        jPanel22 = new javax.swing.JPanel();
        jbFkExpenseOperativeTypeId = new javax.swing.JButton();
        jcbFkExpenseOperativeTypeId = new javax.swing.JComboBox<SFormComponentItem>();
        jlFkAdministrativeConceptTypeId = new javax.swing.JLabel();
        jPanel24 = new javax.swing.JPanel();
        jbFkAdministrativeConceptTypeId = new javax.swing.JButton();
        jcbFkAdministrativeConceptTypeId = new javax.swing.JComboBox<SFormComponentItem>();
        jlFkTaxableConceptTypeId = new javax.swing.JLabel();
        jPanel25 = new javax.swing.JPanel();
        jbFkTaxableConceptTypeId = new javax.swing.JButton();
        jcbFkTaxableConceptTypeId = new javax.swing.JComboBox<SFormComponentItem>();
        jlFkFiscalAccountId = new javax.swing.JLabel();
        jPanel45 = new javax.swing.JPanel();
        jbFkFiscalAccountId = new javax.swing.JButton();
        jcbFkFiscalAccountId = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cuenta contable de mayor"); // NOI18N
        setModal(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel3.setLayout(new java.awt.BorderLayout(5, 5));

        jPanel8.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel10.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 5, 0, 0));
        jPanel10.setLayout(new java.awt.GridLayout(5, 2, 5, 1));

        jlFkAccountSystemTypeId.setForeground(java.awt.Color.blue);
        jlFkAccountSystemTypeId.setText("Tipo de cuenta de sistema: *");
        jlFkAccountSystemTypeId.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jlFkAccountSystemTypeId);

        jcbFkAccountSystemTypeId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbFkAccountSystemTypeIdItemStateChanged(evt);
            }
        });
        jPanel10.add(jcbFkAccountSystemTypeId);

        jlFkAccountUserTypeId.setForeground(java.awt.Color.blue);
        jlFkAccountUserTypeId.setText("Tipo de cuenta contable de la empresa: *");
        jlFkAccountUserTypeId.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jlFkAccountUserTypeId);

        jPanel15.setLayout(new java.awt.BorderLayout(2, 0));

        jbFkAccountUserTypeId.setText("...");
        jbFkAccountUserTypeId.setToolTipText("Seleccionar tipo de cuenta contable");
        jbFkAccountUserTypeId.setFocusable(false);
        jbFkAccountUserTypeId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel15.add(jbFkAccountUserTypeId, java.awt.BorderLayout.EAST);

        jcbFkAccountUserTypeId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbFkAccountUserTypeIdItemStateChanged(evt);
            }
        });
        jPanel15.add(jcbFkAccountUserTypeId, java.awt.BorderLayout.CENTER);

        jPanel10.add(jPanel15);

        jlFkAccountUserClassId.setForeground(java.awt.Color.blue);
        jlFkAccountUserClassId.setText("Clase de cuenta contable de la empresa: *");
        jlFkAccountUserClassId.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jlFkAccountUserClassId);

        jPanel16.setLayout(new java.awt.BorderLayout(2, 0));

        jbFkAccountUserClassId.setText("...");
        jbFkAccountUserClassId.setToolTipText("Seleccionar clase de cuenta contable");
        jbFkAccountUserClassId.setFocusable(false);
        jbFkAccountUserClassId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel16.add(jbFkAccountUserClassId, java.awt.BorderLayout.EAST);
        jPanel16.add(jcbFkAccountUserClassId, java.awt.BorderLayout.CENTER);

        jPanel10.add(jPanel16);

        jlFkAccountUserSubclassId.setForeground(java.awt.Color.blue);
        jlFkAccountUserSubclassId.setText("Subclase de cuenta contable de la empresa: *");
        jlFkAccountUserSubclassId.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jlFkAccountUserSubclassId);

        jPanel18.setLayout(new java.awt.BorderLayout(2, 0));

        jbFkAccountUserSubclassId.setText("...");
        jbFkAccountUserSubclassId.setToolTipText("Seleccionar subclase de cuenta contable");
        jbFkAccountUserSubclassId.setFocusable(false);
        jbFkAccountUserSubclassId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel18.add(jbFkAccountUserSubclassId, java.awt.BorderLayout.EAST);

        jcbFkAccountUserSubclassId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbFkAccountUserSubclassIdItemStateChanged(evt);
            }
        });
        jPanel18.add(jcbFkAccountUserSubclassId, java.awt.BorderLayout.CENTER);

        jPanel10.add(jPanel18);

        jlFkAccountLedgerTypeId.setForeground(java.awt.Color.blue);
        jlFkAccountLedgerTypeId.setText("Tipo de cuenta de libro mayor: *");
        jlFkAccountLedgerTypeId.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jlFkAccountLedgerTypeId);

        jPanel17.setLayout(new java.awt.BorderLayout(2, 0));

        jbFkAccountLedgerTypeId.setText("...");
        jbFkAccountLedgerTypeId.setToolTipText("Seleccionar tipo de cuenta de libro mayor");
        jbFkAccountLedgerTypeId.setFocusable(false);
        jbFkAccountLedgerTypeId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel17.add(jbFkAccountLedgerTypeId, java.awt.BorderLayout.EAST);
        jPanel17.add(jcbFkAccountLedgerTypeId, java.awt.BorderLayout.CENTER);

        jPanel10.add(jPanel17);

        jPanel8.add(jPanel10, java.awt.BorderLayout.NORTH);

        jPanel1.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel4.setLayout(new java.awt.GridLayout(6, 1, 5, 1));

        jPanel5.setLayout(new java.awt.FlowLayout(0, 2, 0));

        jlPkAccountId.setForeground(java.awt.Color.blue);
        jlPkAccountId.setText("No. cuenta de mayor: *");
        jlPkAccountId.setPreferredSize(new java.awt.Dimension(150, 20));
        jPanel5.add(jlPkAccountId);

        jftPkAccountId.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jftPkAccountId.setText("9999");
        jftPkAccountId.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel5.add(jftPkAccountId);

        jbViewAccount.setText("...");
        jbViewAccount.setToolTipText("Ver cuentas contables");
        jbViewAccount.setFocusable(false);
        jbViewAccount.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel5.add(jbViewAccount);

        jPanel7.setLayout(new java.awt.BorderLayout());

        jtfRangeAccountId.setEditable(false);
        jtfRangeAccountId.setText("0000 - 9999");
        jtfRangeAccountId.setFocusable(false);
        jtfRangeAccountId.setPreferredSize(new java.awt.Dimension(150, 20));
        jPanel7.add(jtfRangeAccountId, java.awt.BorderLayout.CENTER);

        jckIsContraAccount.setText("Cuenta subsidiaria");
        jckIsContraAccount.setPreferredSize(new java.awt.Dimension(140, 23));
        jPanel7.add(jckIsContraAccount, java.awt.BorderLayout.EAST);

        jPanel5.add(jPanel7);

        jPanel4.add(jPanel5);

        jPanel6.setLayout(new java.awt.FlowLayout(0, 2, 0));

        jlAccount.setText("Cuenta de mayor: *");
        jlAccount.setPreferredSize(new java.awt.Dimension(150, 20));
        jPanel6.add(jlAccount);

        jtfAccount.setText("ACCOUNT");
        jtfAccount.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel6.add(jtfAccount);

        jPanel4.add(jPanel6);

        jPanel14.setLayout(new java.awt.FlowLayout(0, 2, 0));

        jlDeep.setForeground(java.awt.Color.blue);
        jlDeep.setText("Niveles de profundidad: *");
        jlDeep.setPreferredSize(new java.awt.Dimension(150, 20));
        jPanel14.add(jlDeep);

        jtfDeep.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfDeep.setText("1");
        jtfDeep.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel14.add(jtfDeep);
        jPanel14.add(jlDummy11);

        jlDummy01.setPreferredSize(new java.awt.Dimension(71, 23));
        jPanel14.add(jlDummy01);
        jPanel14.add(jlDummy12);

        jckIsActive.setText("Cuenta activa");
        jckIsActive.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel14.add(jckIsActive);

        jPanel4.add(jPanel14);

        jPanel11.setLayout(new java.awt.FlowLayout(0, 2, 0));

        jlDateStart.setText("Fecha inicial vigencia: *");
        jlDateStart.setPreferredSize(new java.awt.Dimension(150, 20));
        jPanel11.add(jlDateStart);

        jftDateStart.setText("yyyy/mm/dd");
        jftDateStart.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel11.add(jftDateStart);

        jbDateStart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbDateStart.setToolTipText("Seleccionar fecha");
        jbDateStart.setFocusable(false);
        jbDateStart.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel11.add(jbDateStart);

        jlDummy02.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel11.add(jlDummy02);

        jckIsRequiredCostCenter.setText("Requiere centro de costo-beneficio");
        jckIsRequiredCostCenter.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel11.add(jckIsRequiredCostCenter);

        jPanel4.add(jPanel11);

        jPanel12.setLayout(new java.awt.FlowLayout(0, 2, 0));

        jlDateEnd_n.setText("Fecha final vigencia:"); // NOI18N
        jlDateEnd_n.setPreferredSize(new java.awt.Dimension(150, 20));
        jPanel12.add(jlDateEnd_n);

        jftDateEnd_n.setText("yyyy/mm/dd");
        jftDateEnd_n.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel12.add(jftDateEnd_n);

        jbDateEnd_n.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbDateEnd_n.setToolTipText("Seleccionar fecha");
        jbDateEnd_n.setFocusable(false);
        jbDateEnd_n.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel12.add(jbDateEnd_n);

        jlDummy03.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel12.add(jlDummy03);

        jckIsDeleted.setText("Registro eliminado");
        jckIsDeleted.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel12.add(jckIsDeleted);

        jPanel4.add(jPanel12);

        jPanel9.setLayout(new java.awt.FlowLayout(0, 2, 0));

        jckIsRequiredEntity.setText("Requiere entidad");
        jckIsRequiredEntity.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel9.add(jckIsRequiredEntity);

        jckIsRequiredBizPartner.setText("Requiere asociado de negocios");
        jckIsRequiredBizPartner.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel9.add(jckIsRequiredBizPartner);

        jckIsRequiredItem.setText("Requiere ítem");
        jckIsRequiredItem.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jckIsRequiredItem);

        jPanel4.add(jPanel9);

        jPanel1.add(jPanel4, java.awt.BorderLayout.NORTH);

        jPanel13.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 5, 0, 0));
        jPanel13.setLayout(new java.awt.GridLayout(9, 2, 5, 1));

        jlFkAccountSpecializadTypeId.setText("Tipo de cuenta especializada: *");
        jlFkAccountSpecializadTypeId.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jlFkAccountSpecializadTypeId);

        jPanel26.setLayout(new java.awt.BorderLayout(2, 0));
        jPanel26.add(jcbFkAccountSpecializedTypeId, java.awt.BorderLayout.CENTER);

        jbFkAccountSpecializedTypeId.setText("...");
        jbFkAccountSpecializedTypeId.setToolTipText("Seleccionar tipo de cuenta de libro mayor");
        jbFkAccountSpecializedTypeId.setFocusable(false);
        jbFkAccountSpecializedTypeId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel26.add(jbFkAccountSpecializedTypeId, java.awt.BorderLayout.EAST);

        jPanel13.add(jPanel26);

        jlFkAccountEbitdaTypeId.setText("Tipo de cuenta EBITDA: *");
        jlFkAccountEbitdaTypeId.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jlFkAccountEbitdaTypeId);

        jPanel19.setLayout(new java.awt.BorderLayout(2, 0));

        jbFkAccountEbitdaTypeId.setText("...");
        jbFkAccountEbitdaTypeId.setToolTipText("Seleccionar tipo de cuenta EBITDA");
        jbFkAccountEbitdaTypeId.setFocusable(false);
        jbFkAccountEbitdaTypeId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel19.add(jbFkAccountEbitdaTypeId, java.awt.BorderLayout.EAST);
        jPanel19.add(jcbFkAccountEbitdaTypeId, java.awt.BorderLayout.CENTER);

        jPanel13.add(jPanel19);

        jlFkAssetFixedTypeId.setText("Tipo de activo fijo: *");
        jlFkAssetFixedTypeId.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jlFkAssetFixedTypeId);

        jPanel20.setLayout(new java.awt.BorderLayout(2, 0));

        jbFkAssetFixedTypeId.setText("...");
        jbFkAssetFixedTypeId.setToolTipText("Seleccionar tipo de activo fijo");
        jbFkAssetFixedTypeId.setEnabled(false);
        jbFkAssetFixedTypeId.setFocusable(false);
        jbFkAssetFixedTypeId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel20.add(jbFkAssetFixedTypeId, java.awt.BorderLayout.EAST);
        jPanel20.add(jcbFkAssetFixedTypeId, java.awt.BorderLayout.CENTER);

        jPanel13.add(jPanel20);

        jlFkAssetDifferredTypeId.setText("Tipo de activo diferido: *");
        jlFkAssetDifferredTypeId.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jlFkAssetDifferredTypeId);

        jPanel21.setLayout(new java.awt.BorderLayout(2, 0));

        jbFkAssetDifferredTypeId.setText("...");
        jbFkAssetDifferredTypeId.setToolTipText("Seleccionar tipo de activo diferido");
        jbFkAssetDifferredTypeId.setEnabled(false);
        jbFkAssetDifferredTypeId.setFocusable(false);
        jbFkAssetDifferredTypeId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel21.add(jbFkAssetDifferredTypeId, java.awt.BorderLayout.EAST);
        jPanel21.add(jcbFkAssetDifferredTypeId, java.awt.BorderLayout.CENTER);

        jPanel13.add(jPanel21);

        jlFkLiabilityDifferredTypeId.setText("Tipo de pasivo diferido: *");
        jlFkLiabilityDifferredTypeId.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jlFkLiabilityDifferredTypeId);

        jPanel23.setLayout(new java.awt.BorderLayout(2, 0));

        jbFkLiabilityDifferredTypeId.setText("...");
        jbFkLiabilityDifferredTypeId.setToolTipText("Seleccionar tipo de pasivo diferido");
        jbFkLiabilityDifferredTypeId.setEnabled(false);
        jbFkLiabilityDifferredTypeId.setFocusable(false);
        jbFkLiabilityDifferredTypeId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel23.add(jbFkLiabilityDifferredTypeId, java.awt.BorderLayout.EAST);
        jPanel23.add(jcbFkLiabilityDifferredTypeId, java.awt.BorderLayout.CENTER);

        jPanel13.add(jPanel23);

        jlFkExpenseOperativeTypeId.setText("Tipo de gasto de operación: *");
        jlFkExpenseOperativeTypeId.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jlFkExpenseOperativeTypeId);

        jPanel22.setLayout(new java.awt.BorderLayout(2, 0));

        jbFkExpenseOperativeTypeId.setText("...");
        jbFkExpenseOperativeTypeId.setToolTipText("Seleccionar tipo de gasto de operación");
        jbFkExpenseOperativeTypeId.setEnabled(false);
        jbFkExpenseOperativeTypeId.setFocusable(false);
        jbFkExpenseOperativeTypeId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel22.add(jbFkExpenseOperativeTypeId, java.awt.BorderLayout.EAST);
        jPanel22.add(jcbFkExpenseOperativeTypeId, java.awt.BorderLayout.CENTER);

        jPanel13.add(jPanel22);

        jlFkAdministrativeConceptTypeId.setText("Tipo de concepto administrativo: *");
        jlFkAdministrativeConceptTypeId.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jlFkAdministrativeConceptTypeId);

        jPanel24.setLayout(new java.awt.BorderLayout(2, 0));

        jbFkAdministrativeConceptTypeId.setText("...");
        jbFkAdministrativeConceptTypeId.setToolTipText("Seleccionar tipo de concepto administrativo");
        jbFkAdministrativeConceptTypeId.setFocusable(false);
        jbFkAdministrativeConceptTypeId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel24.add(jbFkAdministrativeConceptTypeId, java.awt.BorderLayout.EAST);
        jPanel24.add(jcbFkAdministrativeConceptTypeId, java.awt.BorderLayout.CENTER);

        jPanel13.add(jPanel24);

        jlFkTaxableConceptTypeId.setText("Tipo de concepto de impuestos: *");
        jlFkTaxableConceptTypeId.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jlFkTaxableConceptTypeId);

        jPanel25.setLayout(new java.awt.BorderLayout(2, 0));

        jbFkTaxableConceptTypeId.setText("...");
        jbFkTaxableConceptTypeId.setToolTipText("Seleccionar tipo de concepto de impuestos");
        jbFkTaxableConceptTypeId.setFocusable(false);
        jbFkTaxableConceptTypeId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel25.add(jbFkTaxableConceptTypeId, java.awt.BorderLayout.EAST);
        jPanel25.add(jcbFkTaxableConceptTypeId, java.awt.BorderLayout.CENTER);

        jPanel13.add(jPanel25);

        jlFkFiscalAccountId.setText("Código agrupador SAT: *");
        jlFkFiscalAccountId.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel13.add(jlFkFiscalAccountId);

        jPanel45.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel45.setLayout(new java.awt.BorderLayout(2, 0));

        jbFkFiscalAccountId.setText("jButton1");
        jbFkFiscalAccountId.setToolTipText("Seleccionar código agrupador SAT");
        jbFkFiscalAccountId.setFocusable(false);
        jbFkFiscalAccountId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel45.add(jbFkFiscalAccountId, java.awt.BorderLayout.EAST);

        jcbFkFiscalAccountId.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel45.add(jcbFkFiscalAccountId, java.awt.BorderLayout.CENTER);

        jPanel13.add(jPanel45);

        jPanel1.add(jPanel13, java.awt.BorderLayout.CENTER);

        jPanel8.add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel8, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.FlowLayout(2));

        jbOk.setText("Aceptar"); // NOI18N
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel2.add(jbOk);

        jbCancel.setText("Cancelar"); // NOI18N
        jbCancel.setToolTipText("[Escape]");
        jPanel2.add(jbCancel);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-600)/2, (screenSize.height-588)/2, 600, 588);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void jcbFkAccountSystemTypeIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbFkAccountSystemTypeIdItemStateChanged
        if (!mbResetingForm && evt.getStateChange() == ItemEvent.SELECTED) {
            itemChangeAccountSystemSettings();
        }
    }//GEN-LAST:event_jcbFkAccountSystemTypeIdItemStateChanged

    private void jcbFkAccountUserTypeIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbFkAccountUserTypeIdItemStateChanged
        if (!mbResetingForm && evt.getStateChange() == ItemEvent.SELECTED) {
            itemChangeAccountUserTypeSettings();
            itemChangeAccountUserSubclassSettings();
        }
    }//GEN-LAST:event_jcbFkAccountUserTypeIdItemStateChanged

    private void jcbFkAccountUserSubclassIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbFkAccountUserSubclassIdItemStateChanged
        if (!mbResetingForm && evt.getStateChange() == ItemEvent.SELECTED) {
            itemChangeAccountUserSubclassSettings();
        }
    }//GEN-LAST:event_jcbFkAccountUserSubclassIdItemStateChanged

    private void initComponentsExtra() {
        moAccountUserComboBoxGroup = new SFormComboBoxGroup(miClient);
        moFieldAccountPkAccountId = new SFormFieldAccountId(miClient, 1, jftPkAccountId, true);

        moFieldFkAccountSystemTypeId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkAccountSystemTypeId, jlFkAccountSystemTypeId);
        moFieldFkAccountUserTypeId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkAccountUserTypeId, jlFkAccountUserTypeId);
        moFieldFkAccountUserTypeId.setPickerButton(jbFkAccountUserTypeId);
        moFieldFkAccountUserClassId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkAccountUserClassId, jlFkAccountUserClassId);
        moFieldFkAccountUserClassId.setPickerButton(jbFkAccountUserClassId);
        moFieldFkAccountUserSubclassId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkAccountUserSubclassId, jlFkAccountUserSubclassId);
        moFieldFkAccountUserSubclassId.setPickerButton(jbFkAccountUserSubclassId);
        moFieldFkAccountLedgerTypeId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkAccountLedgerTypeId, jlFkAccountLedgerTypeId);
        moFieldFkAccountLedgerTypeId.setPickerButton(jbFkAccountLedgerTypeId);
        moFieldAccount = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtfAccount, jlAccount);
        moFieldAccount.setLengthMax(100);
        moFieldIsContraAccount = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, true, jckIsContraAccount);
        moFieldDeep = new SFormField(miClient, SLibConstants.DATA_TYPE_INTEGER, true, jtfDeep, jlDeep);
        moFieldDeep.setIntegerMax(miClient.getSessionXXX().getParamsErp().getDeepAccounts());
        moFieldDateStart = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jftDateStart, jlDateStart);
        moFieldDateStart.setPickerButton(jbDateStart);
        moFieldDateEnd_n = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, false, jftDateEnd_n, jlDateEnd_n);
        moFieldDateEnd_n.setPickerButton(jbDateEnd_n);
        moFieldIsCostCenterRequired = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, true, jckIsRequiredCostCenter);
        moFieldIsEntityRequired = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, true, jckIsRequiredEntity);
        moFieldIsBizPartnerRequired= new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, true, jckIsRequiredBizPartner);
        moFieldIsItemRequired= new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, true, jckIsRequiredItem);
        moFieldIsActive = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, true, jckIsActive);
        moFieldIsDeleted = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, true, jckIsDeleted);
        moFieldFkAccountSpecializedTypeId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkAccountSpecializedTypeId, jlFkAccountSpecializadTypeId);
        moFieldFkAccountSpecializedTypeId.setPickerButton(jbFkAccountSpecializedTypeId);
        moFieldFkAccountEbitdaTypeId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkAccountEbitdaTypeId, jlFkAccountEbitdaTypeId);
        moFieldFkAccountEbitdaTypeId.setPickerButton(jbFkAccountEbitdaTypeId);
        moFieldFkAssetFixedTypeId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkAssetFixedTypeId, jlFkAssetFixedTypeId);
        moFieldFkAssetFixedTypeId.setPickerButton(jbFkAssetFixedTypeId);
        moFieldFkAssetDifferredTypeId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkAssetDifferredTypeId, jlFkAssetDifferredTypeId);
        moFieldFkAssetDifferredTypeId.setPickerButton(jbFkAssetDifferredTypeId);
        moFieldFkLiabilityDifferredTypeId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkLiabilityDifferredTypeId, jlFkLiabilityDifferredTypeId);
        moFieldFkLiabilityDifferredTypeId.setPickerButton(jbFkLiabilityDifferredTypeId);
        moFieldFkExpenseOperativeTypeId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkExpenseOperativeTypeId, jlFkExpenseOperativeTypeId);
        moFieldFkExpenseOperativeTypeId.setPickerButton(jbFkExpenseOperativeTypeId);
        moFieldFkAdministrativeConceptTypeId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkAdministrativeConceptTypeId, jlFkAdministrativeConceptTypeId);
        moFieldFkAdministrativeConceptTypeId.setPickerButton(jbFkAdministrativeConceptTypeId);
        moFieldFkTaxableConceptTypeId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkTaxableConceptTypeId, jlFkTaxableConceptTypeId);
        moFieldFkTaxableConceptTypeId.setPickerButton(jbFkTaxableConceptTypeId);
        moFieldFkFiscalAccountId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkFiscalAccountId, jlFkFiscalAccountId);
        moFieldFkFiscalAccountId.setPickerButton(jbFkFiscalAccountId);

        mvFields = new Vector<SFormField>();
        mvFields.add(moFieldFkAccountSystemTypeId);
        mvFields.add(moFieldFkAccountUserTypeId);
        mvFields.add(moFieldFkAccountUserClassId);
        mvFields.add(moFieldFkAccountUserSubclassId);
        mvFields.add(moFieldFkAccountLedgerTypeId);
        mvFields.add(moFieldAccount);
        mvFields.add(moFieldIsContraAccount);
        mvFields.add(moFieldDeep);
        mvFields.add(moFieldDateStart);
        mvFields.add(moFieldDateEnd_n);
        mvFields.add(moFieldIsActive);
        mvFields.add(moFieldIsCostCenterRequired);
        mvFields.add(moFieldIsEntityRequired);
        mvFields.add(moFieldIsBizPartnerRequired);
        mvFields.add(moFieldIsItemRequired);
        mvFields.add(moFieldIsDeleted);
        mvFields.add(moFieldFkAccountSpecializedTypeId);
        mvFields.add(moFieldFkAccountEbitdaTypeId);
        mvFields.add(moFieldFkAssetFixedTypeId);
        mvFields.add(moFieldFkAssetDifferredTypeId);
        mvFields.add(moFieldFkLiabilityDifferredTypeId);
        mvFields.add(moFieldFkExpenseOperativeTypeId);
        mvFields.add(moFieldFkAdministrativeConceptTypeId);
        mvFields.add(moFieldFkTaxableConceptTypeId);
        mvFields.add(moFieldFkFiscalAccountId);

        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);
        jbViewAccount.addActionListener(this);
        jbDateStart.addActionListener(this);
        jbDateEnd_n.addActionListener(this);
        jbFkAccountUserTypeId.addActionListener(this);
        jbFkAccountUserClassId.addActionListener(this);
        jbFkAccountUserSubclassId.addActionListener(this);
        jbFkAccountLedgerTypeId.addActionListener(this);
        jbFkAccountSpecializedTypeId.addActionListener(this);
        jbFkAccountEbitdaTypeId.addActionListener(this);
        jbFkAssetFixedTypeId.addActionListener(this);
        jbFkAssetDifferredTypeId.addActionListener(this);
        jbFkLiabilityDifferredTypeId.addActionListener(this);
        jbFkExpenseOperativeTypeId.addActionListener(this);
        jbFkAdministrativeConceptTypeId.addActionListener(this);
        jbFkTaxableConceptTypeId.addActionListener(this);
        jbFkFiscalAccountId.addActionListener(this);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            if (jcbFkAccountSystemTypeId.isEnabled()) {
                jcbFkAccountSystemTypeId.requestFocus();
            }
            else {
                jtfAccount.requestFocus();
            }
        }
    }

    private boolean isAccountSpecilizedValid() {
        boolean bIsValid = false;

        switch(moFieldFkAccountSpecializedTypeId.getKeyAsIntArray()[0]) {
            case SDataConstantsSys.FINS_TP_ACC_SPE_ENT_CSH:
            case SDataConstantsSys.FINS_TP_ACC_SPE_ENT_WAH:
            case SDataConstantsSys.FINS_TP_ACC_SPE_BPR_CUS:
            case SDataConstantsSys.FINS_TP_ACC_SPE_BPR_DBR:
            case SDataConstantsSys.FINS_TP_ACC_SPE_BPR_VEN_ADV:
            case SDataConstantsSys.FINS_TP_ACC_SPE_TAX_DBT:
            case SDataConstantsSys.FINS_TP_ACC_SPE_WP:
                bIsValid = SLibUtilities.compareKeys(moFieldFkAccountUserSubclassId.getKeyAsIntArray(), SDataConstantsSys.FINS_CLS_ACC_ASSET_ST);
                break;
            case SDataConstantsSys.FINS_TP_ACC_SPE_BPR_VEN:
            case SDataConstantsSys.FINS_TP_ACC_SPE_BPR_CDR:
            case SDataConstantsSys.FINS_TP_ACC_SPE_BPR_CUS_ADV:
            case SDataConstantsSys.FINS_TP_ACC_SPE_TAX_CDT:
                bIsValid = SLibUtilities.compareKeys(moFieldFkAccountUserSubclassId.getKeyAsIntArray(), SDataConstantsSys.FINS_CLS_ACC_LIABTY_ST);
                break;
            case SDataConstantsSys.FINS_TP_ACC_SPE_AST_DEP:
            case SDataConstantsSys.FINS_TP_ACC_SPE_AST_AMO:
            case SDataConstantsSys.FINS_TP_ACC_SPE_DP_DBT:
                bIsValid = SLibUtilities.compareKeys(moFieldFkAccountUserSubclassId.getKeyAsIntArray(), SDataConstantsSys.FINS_CLS_ACC_ASSET_LT);
                break;
            case SDataConstantsSys.FINS_TP_ACC_SPE_LBT_DEP:
            case SDataConstantsSys.FINS_TP_ACC_SPE_LBT_AMO:
            case SDataConstantsSys.FINS_TP_ACC_SPE_DP_CDT:
                bIsValid = SLibUtilities.compareKeys(moFieldFkAccountUserSubclassId.getKeyAsIntArray(), SDataConstantsSys.FINS_CLS_ACC_LIABTY_LT);
                break;
            case SDataConstantsSys.FINS_TP_ACC_SPE_PRP:
                bIsValid = SLibUtilities.compareKeys(moFieldFkAccountUserSubclassId.getKeyAsIntArray(), SDataConstantsSys.FINS_CLS_ACC_RES_OTH_DBT);
                break;
            case SDataConstantsSys.FINS_TP_ACC_SPE_AIC:
                bIsValid = SLibUtilities.compareKeys(moFieldFkAccountUserSubclassId.getKeyAsIntArray(), SDataConstantsSys.FINS_CLS_ACC_OTH_EXPEN);
                break;
            case SDataConstantsSys.FINS_TP_ACC_SPE_YER_CLO:
                bIsValid = SLibUtilities.compareKeys(moFieldFkAccountUserSubclassId.getKeyAsIntArray(), SDataConstantsSys.FINS_CLS_ACC_RES_OTH_CDT);
                break;
            case SDataConstantsSys.FINS_TP_ACC_SPE_YER_RES:
                bIsValid = SLibUtilities.compareKeys(moFieldFkAccountUserSubclassId.getKeyAsIntArray(), SDataConstantsSys.FINS_CLS_ACC_EQUITY_GAIN);
                break;
            default:
                bIsValid = true;
        }

        return bIsValid;
    }

    private void itemChangeAccountSystemSettings() {
        if (moAccount == null) {
            int index = jcbFkAccountSystemTypeId.getSelectedIndex();
            int deep = index <= 0 ? 0 : ((Integer)((SFormComponentItem) jcbFkAccountSystemTypeId.getSelectedItem()).getComplement()).intValue();

            if (deep == 0) {
                jtfDeep.setEnabled(true);
            }
            else {
                jtfDeep.setEnabled(false);
                jtfDeep.setText("" + deep);
            }
        }
    }

    private void itemChangeAccountUserTypeSettings() {
        jcbFkAccountEbitdaTypeId.setEnabled(false);
        jbFkAccountEbitdaTypeId.setEnabled(false);

        if (moFieldFkAccountUserTypeId.getKeyAsIntArray()[0] == SDataConstantsSys.FINU_TP_ACC_USR_RESULTS) {
            jcbFkAccountEbitdaTypeId.setEnabled(true);
            jbFkAccountEbitdaTypeId.setEnabled(true);
        }
        else {
            moFieldFkAccountEbitdaTypeId.setFieldValue(new int[] { SDataConstantsSys.NA });
        }
    }

    private void itemChangeAccountUserSubclassSettings() {
        jcbFkAssetFixedTypeId.setEnabled(false);
        jbFkAssetFixedTypeId.setEnabled(false);
        jcbFkAssetDifferredTypeId.setEnabled(false);
        jbFkAssetDifferredTypeId.setEnabled(false);
        jcbFkLiabilityDifferredTypeId.setEnabled(false);
        jbFkLiabilityDifferredTypeId.setEnabled(false);
        jcbFkExpenseOperativeTypeId.setEnabled(false);
        jbFkExpenseOperativeTypeId.setEnabled(false);

        if (jcbFkAccountUserSubclassId.getSelectedIndex() <= 0) {
            moAccountUserSubclass = null;
        }
        else {
            moAccountUserSubclass = (SDataAccountUserSubclass) SDataUtilities.readRegistry(miClient, SDataConstants.FINU_CLS_ACC_USR, moFieldFkAccountUserSubclassId.getKey(), SLibConstants.EXEC_MODE_VERBOSE);
        }

        if (moAccountUserSubclass == null) {
            jtfRangeAccountId.setText("? - ?");
        }
        else {
            jtfRangeAccountId.setText(moAccountUserSubclass.getNumberStart() + " - " + moAccountUserSubclass.getNumberEnd());
        }

        if (SLibUtilities.compareKeys(moFieldFkAccountUserSubclassId.getKey(), SDataConstantsSys.FINU_CLS_ACC_USR_ASSET_LT)) {
            jcbFkAssetFixedTypeId.setEnabled(true);
            //jbFkAssetFixedTypeId.setEnabled(true);
        }
        else {
            moFieldFkAssetFixedTypeId.setFieldValue(new int[] { SDataConstantsSys.NA });
        }

        if (SLibUtilities.compareKeys(moFieldFkAccountUserSubclassId.getKey(), SDataConstantsSys.FINU_CLS_ACC_USR_ASSET_DIF)) {
            jcbFkAssetDifferredTypeId.setEnabled(true);
            //jbFkAssetDifferredTypeId.setEnabled(true);
        }
        else {
            moFieldFkAssetDifferredTypeId.setFieldValue(new int[] { SDataConstantsSys.NA });
        }

        if (SLibUtilities.compareKeys(moFieldFkAccountUserSubclassId.getKey(), SDataConstantsSys.FINU_CLS_ACC_USR_LIABTY_DIF)) {
            jcbFkLiabilityDifferredTypeId.setEnabled(true);
            //jbFkLiabilityDifferredTypeId.setEnabled(true);
        }
        else {
            moFieldFkLiabilityDifferredTypeId.setFieldValue(new int[] { SDataConstantsSys.NA });
        }

        if (SLibUtilities.compareKeys(moFieldFkAccountUserSubclassId.getKey(), SDataConstantsSys.FINU_CLS_ACC_USR_EXPEN_OP)) {
            jcbFkExpenseOperativeTypeId.setEnabled(true);
            //jbFkExpenseOperativeTypeId.setEnabled(true);
        }
        else {
            moFieldFkExpenseOperativeTypeId.setFieldValue(new int[] { SDataConstantsSys.NA });
        }
    }

    private void actionViewAccount() {
        SFormOptionPickerInterface picker = miClient.getOptionPicker(SDataConstants.FIN_ACC);
        picker.formReset();
        picker.formRefreshOptionPane();
        picker.setFormVisible(true);
    }

    private void actionDateStart() {
        miClient.getGuiDatePickerXXX().pickDate(moFieldDateStart.getDate(), moFieldDateStart);
    }

    private void actionDateEnd_n() {
        miClient.getGuiDatePickerXXX().pickDate(moFieldDateEnd_n.getDate(), moFieldDateEnd_n);
    }

    private void actionFkAccountUserTypeId() {
        miClient.pickOption(SDataConstants.FINU_TP_ACC_USR, moFieldFkAccountUserTypeId, null);
    }

    private void actionFkAccountUserClassId() {
        miClient.pickOption(SDataConstants.FINU_CL_ACC_USR, moFieldFkAccountUserClassId, moFieldFkAccountUserTypeId.getKeyAsIntArray());
    }

    private void actionFkAccountUserSubclassId() {
        miClient.pickOption(SDataConstants.FINU_CLS_ACC_USR, moFieldFkAccountUserSubclassId, moFieldFkAccountUserClassId.getKeyAsIntArray());
    }

    private void actionFkAccountLedgerTypeId() {
        miClient.pickOption(SDataConstants.FINU_TP_ACC_LEDGER, moFieldFkAccountLedgerTypeId, moFieldFkAccountUserSubclassId.getKeyAsIntArray());
    }

    private void actionFkAccountSpecilizedTypeId() {
        miClient.pickOption(SDataConstants.FINS_TP_ACC_SPE, moFieldFkAccountSpecializedTypeId, null);
    }

    private void actionFkAccountEbitdaTypeId() {
        miClient.pickOption(SDataConstants.FINU_TP_ACC_EBITDA, moFieldFkAccountEbitdaTypeId, null);
    }

    private void actionFkAssetFixedTypeId() {

    }

    private void actionFkAssetDifferredTypeId() {

    }

    private void actionFkLiabilityDifferredTypeId() {

    }

    private void actionFkExpenseOperativeTypeId() {

    }

    private void actionFkAdministrativeConceptTypeId() {
        miClient.pickOption(SDataConstants.FINU_TP_ADM_CPT, moFieldFkAdministrativeConceptTypeId, null);
    }

    private void actionFkTaxableConceptTypeId() {
        miClient.pickOption(SDataConstants.FINU_TP_TAX_CPT, moFieldFkTaxableConceptTypeId, null);
    }

    private void actionFkFiscalAccountId() {
        miClient.pickOption(SDataConstants.FINS_FISCAL_ACC, moFieldFkFiscalAccountId, null);
    }

    private void actionEdit(boolean edit) {

    }

    private void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel45;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbDateEnd_n;
    private javax.swing.JButton jbDateStart;
    private javax.swing.JButton jbFkAccountEbitdaTypeId;
    private javax.swing.JButton jbFkAccountLedgerTypeId;
    private javax.swing.JButton jbFkAccountSpecializedTypeId;
    private javax.swing.JButton jbFkAccountUserClassId;
    private javax.swing.JButton jbFkAccountUserSubclassId;
    private javax.swing.JButton jbFkAccountUserTypeId;
    private javax.swing.JButton jbFkAdministrativeConceptTypeId;
    private javax.swing.JButton jbFkAssetDifferredTypeId;
    private javax.swing.JButton jbFkAssetFixedTypeId;
    private javax.swing.JButton jbFkExpenseOperativeTypeId;
    private javax.swing.JButton jbFkFiscalAccountId;
    private javax.swing.JButton jbFkLiabilityDifferredTypeId;
    private javax.swing.JButton jbFkTaxableConceptTypeId;
    private javax.swing.JButton jbOk;
    private javax.swing.JButton jbViewAccount;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkAccountEbitdaTypeId;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkAccountLedgerTypeId;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkAccountSpecializedTypeId;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkAccountSystemTypeId;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkAccountUserClassId;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkAccountUserSubclassId;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkAccountUserTypeId;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkAdministrativeConceptTypeId;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkAssetDifferredTypeId;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkAssetFixedTypeId;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkExpenseOperativeTypeId;
    private javax.swing.JComboBox jcbFkFiscalAccountId;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkLiabilityDifferredTypeId;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkTaxableConceptTypeId;
    private javax.swing.JCheckBox jckIsActive;
    private javax.swing.JCheckBox jckIsContraAccount;
    private javax.swing.JCheckBox jckIsDeleted;
    private javax.swing.JCheckBox jckIsRequiredBizPartner;
    private javax.swing.JCheckBox jckIsRequiredCostCenter;
    private javax.swing.JCheckBox jckIsRequiredEntity;
    private javax.swing.JCheckBox jckIsRequiredItem;
    private javax.swing.JFormattedTextField jftDateEnd_n;
    private javax.swing.JFormattedTextField jftDateStart;
    private javax.swing.JFormattedTextField jftPkAccountId;
    private javax.swing.JLabel jlAccount;
    private javax.swing.JLabel jlDateEnd_n;
    private javax.swing.JLabel jlDateStart;
    private javax.swing.JLabel jlDeep;
    private javax.swing.JLabel jlDummy01;
    private javax.swing.JLabel jlDummy02;
    private javax.swing.JLabel jlDummy03;
    private javax.swing.JLabel jlDummy11;
    private javax.swing.JLabel jlDummy12;
    private javax.swing.JLabel jlFkAccountEbitdaTypeId;
    private javax.swing.JLabel jlFkAccountLedgerTypeId;
    private javax.swing.JLabel jlFkAccountSpecializadTypeId;
    private javax.swing.JLabel jlFkAccountSystemTypeId;
    private javax.swing.JLabel jlFkAccountUserClassId;
    private javax.swing.JLabel jlFkAccountUserSubclassId;
    private javax.swing.JLabel jlFkAccountUserTypeId;
    private javax.swing.JLabel jlFkAdministrativeConceptTypeId;
    private javax.swing.JLabel jlFkAssetDifferredTypeId;
    private javax.swing.JLabel jlFkAssetFixedTypeId;
    private javax.swing.JLabel jlFkExpenseOperativeTypeId;
    private javax.swing.JLabel jlFkFiscalAccountId;
    private javax.swing.JLabel jlFkLiabilityDifferredTypeId;
    private javax.swing.JLabel jlFkTaxableConceptTypeId;
    private javax.swing.JLabel jlPkAccountId;
    private javax.swing.JTextField jtfAccount;
    private javax.swing.JTextField jtfDeep;
    private javax.swing.JTextField jtfRangeAccountId;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mbResetingForm = true;

        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moAccount = null;
        mbCanModifyAccountType = true;

        for (int i = 0; i < mvFields.size(); i++) {
            mvFields.get(i).resetField();
        }

        moFieldAccountPkAccountId.setFieldValue(SDataUtilities.createNewFormattedAccountId(miClient, 1));
        moFieldDateStart.setFieldValue(SLibTimeUtils.getBeginOfYear(miClient.getSessionXXX().getWorkingDate()));
        moFieldDateEnd_n.setFieldValue(null);
        moFieldIsActive.setFieldValue(true);

        moFieldFkAccountSystemTypeId.setFieldValue(new int[] { SDataConstantsSys.FINS_TP_ACC_SYS_NA });
        moFieldFkAdministrativeConceptTypeId.setFieldValue(new int[] { SDataConstantsSys.NA });
        moFieldFkTaxableConceptTypeId.setFieldValue(new int[] { SDataConstantsSys.NA });
        moFieldFkFiscalAccountId.setFieldValue(new int[] { SModSysConsts.FINS_FISCAL_ACC_NA });

        jcbFkAccountSystemTypeId.setEnabled(true);
        jcbFkAccountUserTypeId.setEnabled(true);
        jbFkAccountUserTypeId.setEnabled(true);
        jcbFkAccountUserClassId.setEnabled(true);
        jbFkAccountUserClassId.setEnabled(true);
        jcbFkAccountUserSubclassId.setEnabled(true);
        jbFkAccountUserSubclassId.setEnabled(true);
        jcbFkAccountLedgerTypeId.setEnabled(true);
        jbFkAccountLedgerTypeId.setEnabled(true);
        jftPkAccountId.setEnabled(true);
        jbViewAccount.setEnabled(true);
        jtfDeep.setEnabled(true);

        moAccountUserComboBoxGroup.reset();

        jckIsDeleted.setEnabled(false);
        itemChangeAccountSystemSettings();
        itemChangeAccountUserTypeSettings();
        itemChangeAccountUserSubclassSettings();

        mbResetingForm = false;
    }

    @Override
    @SuppressWarnings("unchecked")
    public void formRefreshCatalogues() {
        mbResetingForm = true;

        moAccountUserComboBoxGroup.clear();
        moAccountUserComboBoxGroup.addComboBox(SDataConstants.FINU_TP_ACC_USR, jcbFkAccountUserTypeId, jbFkAccountUserTypeId);
        moAccountUserComboBoxGroup.addComboBox(SDataConstants.FINU_CL_ACC_USR, jcbFkAccountUserClassId, jbFkAccountUserClassId);
        moAccountUserComboBoxGroup.addComboBox(SDataConstants.FINU_CLS_ACC_USR, jcbFkAccountUserSubclassId, jbFkAccountUserSubclassId);
        moAccountUserComboBoxGroup.addComboBox(SDataConstants.FINU_TP_ACC_LEDGER, jcbFkAccountLedgerTypeId, jbFkAccountLedgerTypeId);

        SFormUtilities.populateComboBox(miClient, jcbFkAccountSystemTypeId, SDataConstants.FINS_TP_ACC_SYS);
        SFormUtilities.populateComboBox(miClient, jcbFkAccountSpecializedTypeId, SDataConstants.FINS_TP_ACC_SPE);
        SFormUtilities.populateComboBox(miClient, jcbFkAccountEbitdaTypeId, SDataConstants.FINU_TP_ACC_EBITDA);
        SFormUtilities.populateComboBox(miClient, jcbFkAssetFixedTypeId, SDataConstants.FINU_TP_ASSET_FIX);
        SFormUtilities.populateComboBox(miClient, jcbFkAssetDifferredTypeId, SDataConstants.FINU_TP_ASSET_DIF);
        SFormUtilities.populateComboBox(miClient, jcbFkLiabilityDifferredTypeId, SDataConstants.FINU_TP_LIABTY_DIF);
        SFormUtilities.populateComboBox(miClient, jcbFkExpenseOperativeTypeId, SDataConstants.FINU_TP_EXPEN_OP);
        SFormUtilities.populateComboBox(miClient, jcbFkAdministrativeConceptTypeId, SDataConstants.FINU_TP_ADM_CPT);
        SFormUtilities.populateComboBox(miClient, jcbFkTaxableConceptTypeId, SDataConstants.FINU_TP_TAX_CPT);
        SFormUtilities.populateComboBox(miClient, jcbFkFiscalAccountId, SDataConstants.FINS_FISCAL_ACC);

        mbResetingForm = false;
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        int uses = 0;
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(mvFields.get(i).getComponent());
                break;
            }
        }

        if (!validation.getIsError()) {
            if (moAccount == null) {
                if (moFieldAccountPkAccountId.isEmptyAccountId()) {
                    validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_EMPTY + "'" + jlPkAccountId.getText() + "'.");
                    validation.setComponent(jftPkAccountId);
                }
                else if (SDataUtilities.callProcedureVal(miClient, SProcConstants.FIN_ACC_VAL,
                        new Object[] { SDataUtilities.composeAccountId(miClient, moFieldAccountPkAccountId.getString()) },
                        SLibConstants.EXEC_MODE_VERBOSE) > 0) {
                    validation.setMessage("Ya existe un registro para el valor especificado en el campo '" + jlPkAccountId.getText() + "'.");
                    validation.setComponent(jftPkAccountId);
                }
                else if (SLibUtilities.parseLong(moFieldAccountPkAccountId.getString()) < moAccountUserSubclass.getNumberStart() ||
                        SLibUtilities.parseLong(moFieldAccountPkAccountId.getString()) > moAccountUserSubclass.getNumberEnd()) {
                    validation.setMessage("El valor para el campo '" + jlPkAccountId.getText() +
                            "' debe estar dentro del rango " + moAccountUserSubclass.getNumberStart() + " - " + moAccountUserSubclass.getNumberEnd() + ".");
                    validation.setComponent(jftPkAccountId);
                }
            }
            else {
                if (jcbFkAccountSystemTypeId.isEnabled()) {
                    uses = SDataUtilities.callProcedureVal(miClient, SProcConstants.FIN_ACC_REC_VAL, new Object[] { moFieldAccountPkAccountId.getString() }, SLibConstants.EXEC_MODE_VERBOSE);
                    if (uses != 0) {
                        validation.setMessage("No se puede cambiar la configuración de la cuenta contable porque tiene movimientos en pólizas contables.");
                        validation.setComponent(jbCancel);
                    }
                }
            }

            if (!validation.getIsError()) {
                if (moFieldDateEnd_n.getDate() != null && moFieldDateEnd_n.getDate().before(moFieldDateStart.getDate())) {
                    validation.setMessage("La fecha del campo '" + jlDateEnd_n.getText() + "' no puede ser anterior a la fecha del campo '" + jlDateStart.getText() + "'.");
                    validation.setComponent(jftDateEnd_n);
                }
            }
        }

        if (!validation.getIsError()) {
            if (moFieldFkAccountSpecializedTypeId.getKeyAsIntArray()[0] == SDataConstantsSys.FINS_TP_ACC_SPE_NA) {
                validation.setMessage("Se debe especificar un valor diferente para el campo '" + jlFkAccountSpecializadTypeId.getText() + "'.");
                validation.setComponent(jcbFkAccountSpecializedTypeId);
            }
            else if (!isAccountSpecilizedValid()) {
                validation.setMessage("El valor para el campo '" + jlFkAccountSpecializadTypeId.getText() + "' no es adecuado para el tipo de cuenta seleccionada.");
                validation.setComponent(jcbFkAccountSpecializedTypeId);

            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        int uses = 0;

        mbResetingForm = true;

        moAccount = (SDataAccount) registry;

        moFieldFkAccountSystemTypeId.setFieldValue(new int[] { moAccount.getFkAccountSystemTypeId() });
        moFieldFkAccountUserTypeId.setFieldValue(new int[] { moAccount.getFkAccountUserTypeId() });
        moFieldFkAccountUserClassId.setFieldValue(new int[] { moAccount.getFkAccountUserTypeId(), moAccount.getFkAccountUserClassId() });
        moFieldFkAccountUserSubclassId.setFieldValue(new int[] { moAccount.getFkAccountUserTypeId(), moAccount.getFkAccountUserClassId(), moAccount.getFkAccountUserSubclassId() });
        moFieldFkAccountLedgerTypeId.setFieldValue(new int[] { moAccount.getFkAccountLedgerTypeId() });

        moFieldAccountPkAccountId.setFieldValue(moAccount.getPkAccountIdXXX());
        moFieldAccount.setFieldValue(moAccount.getAccount());
        moFieldDeep.setFieldValue(moAccount.getDeep());
        moFieldDateStart.setFieldValue(moAccount.getDateStart());
        moFieldDateEnd_n.setFieldValue(moAccount.getDateEnd_n());
        moFieldIsCostCenterRequired.setFieldValue(moAccount.getIsRequiredCostCenter());
        moFieldIsEntityRequired.setFieldValue(moAccount.getIsRequiredEntity());
        moFieldIsBizPartnerRequired.setFieldValue(moAccount.getIsRequiredBizPartner());
        moFieldIsItemRequired.setFieldValue(moAccount.getIsRequiredItem());
        moFieldIsContraAccount.setFieldValue(moAccount.getIsContraAccount());
        moFieldIsActive.setFieldValue(moAccount.getIsActive());
        moFieldIsDeleted.setFieldValue(moAccount.getIsDeleted());

        moFieldFkAccountSpecializedTypeId.setFieldValue(new int[] { moAccount.getFkAccountSpecializedTypeId() });
        moFieldFkAccountEbitdaTypeId.setFieldValue(new int[] { moAccount.getFkAccountEbitdaTypeId() });
        moFieldFkAssetFixedTypeId.setFieldValue(new int[] { moAccount.getFkAssetFixedTypeId() });
        moFieldFkAssetDifferredTypeId.setFieldValue(new int[] { moAccount.getFkAssetDifferredTypedId() });
        moFieldFkLiabilityDifferredTypeId.setFieldValue(new int[] { moAccount.getFkLiabilityDifferredTypeId() });
        moFieldFkExpenseOperativeTypeId.setFieldValue(new int[] { moAccount.getFkExpenseOperativeTypeId() });
        moFieldFkAdministrativeConceptTypeId.setFieldValue(new int[] { moAccount.getFkAdministrativeConceptTypeId() });
        moFieldFkTaxableConceptTypeId.setFieldValue(new int[] { moAccount.getFkTaxableConceptTypeId() });
        moFieldFkFiscalAccountId.setFieldValue(new int[] { moAccount.getFkFiscalAccountId() });

        uses = SDataUtilities.callProcedureVal(miClient, SProcConstants.FIN_ACC_REC_VAL, new Object[] { moFieldAccountPkAccountId.getString() }, SLibConstants.EXEC_MODE_VERBOSE);
        if (uses != 0) {
            mbCanModifyAccountType = false;
            jcbFkAccountSystemTypeId.setEnabled(false);
            jcbFkAccountUserTypeId.setEnabled(false);
            jbFkAccountUserTypeId.setEnabled(false);
            jcbFkAccountUserClassId.setEnabled(false);
            jbFkAccountUserClassId.setEnabled(false);
            jcbFkAccountUserSubclassId.setEnabled(false);
            jbFkAccountUserSubclassId.setEnabled(false);
            jcbFkAccountLedgerTypeId.setEnabled(false);
            jbFkAccountLedgerTypeId.setEnabled(false);
        }

        jftPkAccountId.setEnabled(false);
        jbViewAccount.setEnabled(false);
        jtfDeep.setEnabled(false);

        jckIsDeleted.setEnabled(true);

        itemChangeAccountSystemSettings();
        itemChangeAccountUserTypeSettings();
        itemChangeAccountUserSubclassSettings();

        mbResetingForm = false;
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        if (moAccount == null) {
            moAccount = new SDataAccount();
            moAccount.setPkAccountIdXXX(SDataUtilities.composeAccountId(miClient, moFieldAccountPkAccountId.getString()));
            moAccount.setDeep(moFieldDeep.getInteger());
            moAccount.setLevel(1);  // all mayor account's level is 1
            moAccount.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
        }
        else {
            moAccount.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
        }

        if (mbCanModifyAccountType) {
            moAccount.setFkAccountSystemTypeId(moFieldFkAccountSystemTypeId.getKeyAsIntArray()[0]);
            moAccount.setFkAccountUserTypeId(moFieldFkAccountUserSubclassId.getKeyAsIntArray()[0]);
            moAccount.setFkAccountUserClassId(moFieldFkAccountUserSubclassId.getKeyAsIntArray()[1]);
            moAccount.setFkAccountUserSubclassId(moFieldFkAccountUserSubclassId.getKeyAsIntArray()[2]);
            moAccount.setFkAccountLedgerTypeId(moFieldFkAccountLedgerTypeId.getKeyAsIntArray()[0]);
        }

        moAccount.setCode(SAccountUtils.convertCodeStd(moFieldAccountPkAccountId.getString()));
        moAccount.setAccount(moFieldAccount.getString());
        moAccount.setDateStart(moFieldDateStart.getDate());
        moAccount.setDateEnd_n(moFieldDateEnd_n.getDate());
        moAccount.setIsRequiredCostCenter(moFieldIsCostCenterRequired.getBoolean());
        moAccount.setIsRequiredEntity(moFieldIsEntityRequired.getBoolean());
        moAccount.setIsRequiredBizPartner(moFieldIsBizPartnerRequired.getBoolean());
        moAccount.setIsRequiredItem(moFieldIsItemRequired.getBoolean());
        moAccount.setIsContraAccount(moFieldIsContraAccount.getBoolean());
        moAccount.setIsActive(moFieldIsActive.getBoolean());
        moAccount.setIsDeleted(moFieldIsDeleted.getBoolean());

        moAccount.setFkAccountSpecializedTypeId(moFieldFkAccountSpecializedTypeId.getKeyAsIntArray()[0]);
        moAccount.setFkAccountEbitdaTypeId(moFieldFkAccountEbitdaTypeId.getKeyAsIntArray()[0]);
        moAccount.setFkAssetFixedTypeId(moFieldFkAssetFixedTypeId.getKeyAsIntArray()[0]);
        moAccount.setFkAssetDifferredTypedId(moFieldFkAssetDifferredTypeId.getKeyAsIntArray()[0]);
        moAccount.setFkLiabilityDifferredTypeId(moFieldFkLiabilityDifferredTypeId.getKeyAsIntArray()[0]);
        moAccount.setFkExpenseOperativeTypeId(moFieldFkExpenseOperativeTypeId.getKeyAsIntArray()[0]);
        moAccount.setFkAdministrativeConceptTypeId(moFieldFkAdministrativeConceptTypeId.getKeyAsIntArray()[0]);
        moAccount.setFkTaxableConceptTypeId(moFieldFkTaxableConceptTypeId.getKeyAsIntArray()[0]);
        moAccount.setFkFiscalAccountId(moFieldFkFiscalAccountId.getKeyAsIntArray()[0]);

        return moAccount;
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbViewAccount) {
                actionViewAccount();
            }
            else if (button == jbDateStart) {
                actionDateStart();
            }
            else if (button == jbDateEnd_n) {
                actionDateEnd_n();
            }
            else if (button == jbFkAccountUserTypeId) {
                actionFkAccountUserTypeId();
            }
            else if (button == jbFkAccountUserClassId) {
                actionFkAccountUserClassId();
            }
            else if (button == jbFkAccountUserSubclassId) {
                actionFkAccountUserSubclassId();
            }
            else if (button == jbFkAccountLedgerTypeId) {
                actionFkAccountLedgerTypeId();
            }
            else if (button == jbFkAccountSpecializedTypeId) {
                actionFkAccountSpecilizedTypeId();
            }
            else if (button == jbFkAccountEbitdaTypeId) {
                actionFkAccountEbitdaTypeId();
            }
            else if (button == jbFkAssetFixedTypeId) {
                actionFkAssetFixedTypeId();
            }
            else if (button == jbFkAssetDifferredTypeId) {
                actionFkAssetDifferredTypeId();
            }
            else if (button == jbFkLiabilityDifferredTypeId) {
                actionFkLiabilityDifferredTypeId();
            }
            else if (button == jbFkExpenseOperativeTypeId) {
                actionFkExpenseOperativeTypeId();
            }
            else if (button == jbFkAdministrativeConceptTypeId) {
                actionFkAdministrativeConceptTypeId();
            }
            else if (button == jbFkTaxableConceptTypeId) {
                actionFkTaxableConceptTypeId();
            }
            else if (button == jbFkFiscalAccountId) {
                actionFkFiscalAccountId();
            }
        }
    }
}
