/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package erp.mfin.form;

import erp.data.SDataConstants;
import erp.data.SDataUtilities;
import erp.data.SProcConstants;
import erp.lib.SLibConstants;
import erp.lib.SLibTimeUtilities;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STableConstants;
import erp.lib.table.STablePane;
import erp.mfin.data.SDataYear;
import erp.mfin.data.SDataYearPeriod;
import erp.mfin.data.SDataYearPeriodRow;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import java.util.Locale;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JButton;
import javax.swing.JCheckBox;

/**
 *
 * @author  Sergio Flores
 */
public class SFormYear extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener, java.awt.event.ItemListener {

    private final int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private final erp.client.SClientInterface miClient;

    private erp.mfin.data.SDataYear moYear;
    private erp.lib.form.SFormField moFieldPkYearId;
    private erp.lib.form.SFormField moFieldIsClosed;
    private erp.lib.form.SFormField moFieldIsDeleted;
    private erp.lib.table.STablePane moPanePeriods;
    private java.lang.String[] masPeriodsTxt;

    /** Creates new form DFormCompany
     * @param client 
     */
    public SFormYear(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        mnFormType = SDataConstants.FIN_YEAR;
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jlPkYearId = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jtfPkYearId = new javax.swing.JTextField();
        jlDummy01 = new javax.swing.JLabel();
        jckIsClosed = new javax.swing.JCheckBox();
        jlDummy02 = new javax.swing.JLabel();
        jckIsDeleted = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        jpPeriods = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jbOpenPeriod = new javax.swing.JButton();
        jbClosePeriod = new javax.swing.JButton();
        jbOpenAllPeriods = new javax.swing.JButton();
        jbCloseAllPeriods = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Ejercicio"); // NOI18N
        setModal(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel13.setLayout(new java.awt.GridLayout(1, 2, 5, 5));

        jPanel1.setLayout(new java.awt.GridLayout(3, 2, 5, 1));

        jlPkYearId.setForeground(java.awt.Color.blue);
        jlPkYearId.setText("Ejercicio contable: *");
        jlPkYearId.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel1.add(jlPkYearId);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jtfPkYearId.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfPkYearId.setText("2000");
        jtfPkYearId.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel5.add(jtfPkYearId);

        jPanel1.add(jPanel5);

        jlDummy01.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel1.add(jlDummy01);

        jckIsClosed.setText("Ejercicio cerrado");
        jPanel1.add(jckIsClosed);

        jlDummy02.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel1.add(jlDummy02);

        jckIsDeleted.setText("Registro eliminado");
        jPanel1.add(jckIsDeleted);

        jPanel13.add(jPanel1);
        jPanel13.add(jPanel4);

        jPanel3.add(jPanel13, java.awt.BorderLayout.NORTH);

        jpPeriods.setBorder(javax.swing.BorderFactory.createTitledBorder("Períodos del ejercicio:"));
        jpPeriods.setLayout(new java.awt.BorderLayout());

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOpenPeriod.setText("Abrir");
        jbOpenPeriod.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel6.add(jbOpenPeriod);

        jbClosePeriod.setText("Cerrar");
        jbClosePeriod.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel6.add(jbClosePeriod);

        jbOpenAllPeriods.setText("Abrir todo");
        jbOpenAllPeriods.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel6.add(jbOpenAllPeriods);

        jbCloseAllPeriods.setText("Cerrar todo");
        jbCloseAllPeriods.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel6.add(jbCloseAllPeriods);

        jpPeriods.add(jPanel6, java.awt.BorderLayout.NORTH);

        jPanel3.add(jpPeriods, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar"); // NOI18N
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel2.add(jbOk);

        jbCancel.setText("Cancelar"); // NOI18N
        jbCancel.setToolTipText("[Escape]");
        jPanel2.add(jbCancel);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        setSize(new java.awt.Dimension(600, 450));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        if (mbFirstTime) {
            mbFirstTime = false;
            if (jtfPkYearId.isEnabled()) jtfPkYearId.requestFocus(); else jckIsClosed.requestFocus();
        }
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        int i = 0;
        STableColumnForm[] columns = null;

        moFieldPkYearId = new SFormField(miClient, SLibConstants.DATA_TYPE_INTEGER, true, jtfPkYearId, jlPkYearId);
        moFieldPkYearId.setIntegerMin(2000);
        moFieldPkYearId.setIntegerMax(2100);
        moFieldPkYearId.setMinInclusive(true);
        moFieldPkYearId.setMaxInclusive(true);
        moFieldPkYearId.setDecimalFormat(miClient.getSessionXXX().getFormatters().getYearFormat());
        moFieldIsClosed = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, true, jckIsClosed);
        moFieldIsDeleted = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, true, jckIsDeleted);

        mvFields = new Vector<SFormField>();
        mvFields.add(moFieldPkYearId);
        mvFields.add(moFieldIsClosed);
        mvFields.add(moFieldIsDeleted);

        moPanePeriods = new STablePane(miClient);
        jpPeriods.add(moPanePeriods, BorderLayout.CENTER);
        columns = new STableColumnForm[4];
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_INTEGER, "#", STableConstants.WIDTH_PERIOD);
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Período", 200);
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "Cerrado", STableConstants.WIDTH_BOOLEAN);
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE_TIME, "Modificación", STableConstants.WIDTH_DATE_TIME);

        for (i = 0; i < columns.length; i++) {
            moPanePeriods.addTableColumn(columns[i]);
        }

        masPeriodsTxt = SLibTimeUtilities.createMonthsOfYear(Locale.getDefault(), Calendar.LONG);

        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);
        jbOpenPeriod.addActionListener(this);
        jbClosePeriod.addActionListener(this);
        jbOpenAllPeriods.addActionListener(this);
        jbCloseAllPeriods.addActionListener(this);
        jckIsClosed.addItemListener(this);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void setPeriodStatus(boolean close) {
        int index = moPanePeriods.getTable().getSelectedRow();
        SDataYearPeriod period;
        SDataYearPeriodRow row;

        if (index == -1) {
            miClient.showMsgBoxWarning("Se debe seleccionar un período.");
        }
        else {
            period = (SDataYearPeriod) ((SDataYearPeriodRow) moPanePeriods.getTableRow(index)).getData();
            period.setIsClosed(close);
            period.setDbmsIsEdited(true);
            row = new SDataYearPeriodRow(period);
            row.prepareTableRow();
            moPanePeriods.setTableRow(row, index);
            moPanePeriods.renderTableRows();
            moPanePeriods.setTableRowSelection(index);
        }
    }
    
    private void setAllPeriodsStatus(boolean close) {
        SDataYearPeriod period;
        SDataYearPeriodRow row;

        for (int i = 0; i < moPanePeriods.getTable().getRowCount(); i++) {
            period = (SDataYearPeriod) ((SDataYearPeriodRow) moPanePeriods.getTableRow(i)).getData();
            period.setIsClosed(close);
            period.setDbmsIsEdited(true);
            row = new SDataYearPeriodRow(period);
            row.prepareTableRow();
            moPanePeriods.setTableRow(row, i);
            moPanePeriods.renderTableRows();
        }
        moPanePeriods.setTableRowSelection(0);
    }

    private void actionOpenPeriod() {
        setPeriodStatus(false);
    }

    private void actionClosePeriod() {
        setPeriodStatus(true);
    }
    
    private void actionOpenAllPeriods() {
        setAllPeriodsStatus(false);
    }

    private void actionCloseAllPeriods() {
        setAllPeriodsStatus(true);
    }

    private void itemStateIsClosed() {
        if (jckIsClosed.isSelected()) {
            jbOpenPeriod.setEnabled(false);
            jbClosePeriod.setEnabled(false);
            jbOpenAllPeriods.setEnabled(false);
            jbCloseAllPeriods.setEnabled(false);
        }
        else {
            jbOpenPeriod.setEnabled(true);
            jbClosePeriod.setEnabled(true);
            jbOpenAllPeriods.setEnabled(true);
            jbCloseAllPeriods.setEnabled(true);
        }
    }

    private void actionEdit(boolean edit) {

    }

    private void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbCloseAllPeriods;
    private javax.swing.JButton jbClosePeriod;
    private javax.swing.JButton jbOk;
    private javax.swing.JButton jbOpenAllPeriods;
    private javax.swing.JButton jbOpenPeriod;
    private javax.swing.JCheckBox jckIsClosed;
    private javax.swing.JCheckBox jckIsDeleted;
    private javax.swing.JLabel jlDummy01;
    private javax.swing.JLabel jlDummy02;
    private javax.swing.JLabel jlPkYearId;
    private javax.swing.JPanel jpPeriods;
    private javax.swing.JTextField jtfPkYearId;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mbResetingForm = true;

        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moYear = null;
        moPanePeriods.createTable();
        moPanePeriods.clearTableRows();

        for (int i = 0; i < mvFields.size(); i++) {
            mvFields.get(i).resetField();
        }

        moFieldPkYearId.setFieldValue(SLibTimeUtilities.digestYear(miClient.getSessionXXX().getWorkingDate())[0]);

        for (int i = 0; i < 12; i++) {
            SDataYearPeriod period = null;
            SDataYearPeriodRow row = null;

            period = new SDataYearPeriod();
            period.setIsClosed(true);
            period.setExtraPeriodText(masPeriodsTxt[i].toUpperCase());
            row = new SDataYearPeriodRow(period);
            row.prepareTableRow();
            moPanePeriods.addTableRow(row);
        }

        moPanePeriods.renderTableRows();
        moPanePeriods.setTableRowSelection(0);

        jtfPkYearId.setEnabled(true);
        jckIsDeleted.setEnabled(false);
        itemStateIsClosed();

        mbResetingForm = false;
    }

    @Override
    public void formRefreshCatalogues() {

    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        int i;
        SFormValidation validation = new SFormValidation();

        for (i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(mvFields.get(i).getComponent());
                break;
            }
        }

        if (!validation.getIsError()) {
            if (moFieldIsClosed.getBoolean()) {
                for (i = 0; i < moPanePeriods.getTableGuiRowCount(); i++) {
                    if (!((SDataYearPeriod) ((SDataYearPeriodRow) moPanePeriods.getTableRow(i)).getData()).getIsClosed()) {
                        validation.setMessage("Si el ejercicio está cerrado, todos sus períodos también deben estarlo.");
                        break;
                    }
                }
            }
            if (moYear == null && !validation.getIsError()) {
                if (SDataUtilities.callProcedureVal(miClient, SProcConstants.FIN_YEAR_VAL,
                        new int[] { moFieldPkYearId.getInteger() },
                        SLibConstants.EXEC_MODE_VERBOSE) > 0) {
                    validation.setMessage("Ya existe un registro para el ejercicio especificado.");
                    validation.setComponent(jtfPkYearId);
                }
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        moYear = (SDataYear) registry;

        moFieldPkYearId.setFieldValue(moYear.getPkYearId());
        moFieldIsClosed.setFieldValue(moYear.getIsClosed());
        moFieldIsDeleted.setFieldValue(moYear.getIsDeleted());

        moPanePeriods.clearTableRows();
        for (int i = 0; i < moYear.getDbmsPeriods().size(); i++) {
            SDataYearPeriod period = null;
            SDataYearPeriodRow row = null;

            period = moYear.getDbmsPeriods().get(i);
            period.setExtraPeriodText(masPeriodsTxt[i].toUpperCase());
            row = new SDataYearPeriodRow(period);
            row.prepareTableRow();
            moPanePeriods.addTableRow(row);
        }
        moPanePeriods.renderTableRows();
        moPanePeriods.setTableRowSelection(0);

        jtfPkYearId.setEnabled(false);
        jckIsDeleted.setEnabled(true);
        itemStateIsClosed();
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        boolean isNew = moYear == null;

        if (isNew) {
            moYear = new SDataYear();
            moYear.setPkYearId(moFieldPkYearId.getInteger());
            moYear.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
        }
        else {
            moYear.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
        }

        moYear.setIsClosed(moFieldIsClosed.getBoolean());
        moYear.setIsDeleted(moFieldIsDeleted.getBoolean());

        moYear.getDbmsPeriods().clear();
        for (int i = 0 ; i < moPanePeriods.getTableGuiRowCount(); i++) {
            SDataYearPeriod period = (SDataYearPeriod) ((SDataYearPeriodRow) moPanePeriods.getTableRow(i)).getData();

            if (isNew) {
                period.setPkYearId(moFieldPkYearId.getInteger());
                period.setPkPeriodId(i + 1);
                period.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
            }
            else {
                period.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
            }
            moYear.getDbmsPeriods().add(period);
        }

        return moYear;
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbOpenPeriod) {
                actionOpenPeriod();
            }
            else if (button == jbClosePeriod) {
                actionClosePeriod();
            }
            else if (button == jbOpenAllPeriods) {
                actionOpenAllPeriods();
            }
            else if (button == jbCloseAllPeriods) {
                actionCloseAllPeriods();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (!mbResetingForm) {
            if (e.getSource() instanceof javax.swing.JCheckBox) {
                JCheckBox checkBox = (JCheckBox) e.getSource();
                if (checkBox == jckIsClosed) {
                    itemStateIsClosed();
                }
            }
        }
    }
}
