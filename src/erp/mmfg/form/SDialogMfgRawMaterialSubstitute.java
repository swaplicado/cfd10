/*
 * DFormCompany.java
 *
 * Created on 19 de agosto de 2008, 11:10 AM
 */

package erp.mmfg.form;

import erp.data.SDataConstants;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.mitm.data.SDataItem;
import erp.mmfg.data.SDataBomSubstitute;
import erp.mmfg.data.SDataProductionOrder;
import erp.mtrn.data.STrnUtilities;
import erp.mtrn.form.SDialogPickerStockLots;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JOptionPane;

/**
 *
 * @author  Néstor Ávalos
 */
public class SDialogMfgRawMaterialSubstitute extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.lib.form.SFormField moFieldDbmsFkItemId;
    private erp.lib.form.SFormField moFieldDbmsOriginalQuantity;
    private erp.lib.form.SFormField moFieldFkItemSubstituteId;
    private erp.lib.form.SFormField moFieldDbmsPercentage;
    private erp.lib.form.SFormField moFieldDbmsQuantity;

    private erp.mitm.data.SDataItem moItem;
    private erp.mmfg.data.SDataBomSubstitute moBomSubstitute;
    private erp.mmfg.data.SDataProductionOrder moProductionOrder;
    private erp.mtrn.form.SDialogPickerStockLots moPickerStockLots;

    private int[] mnFkRmItemId;
    private int[] mvFkItemSubstituteId;
    private int[] mnFkBomItemId;


    /** Creates new form DFormCompany */
    public SDialogMfgRawMaterialSubstitute(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        mnFormType = SDataConstants.MFG_BOM_SUB;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgCurrency = new javax.swing.ButtonGroup();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jpData = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jlDbmsFkItemId = new javax.swing.JLabel();
        jtfDbmsFkItemId = new javax.swing.JFormattedTextField();
        jPanel7 = new javax.swing.JPanel();
        jlDbmsOriginalQuantity = new javax.swing.JLabel();
        jtfDbmsOriginalQuantity = new javax.swing.JFormattedTextField();
        jtfDbmsOriginalQuantityUnit = new javax.swing.JFormattedTextField();
        jpWarehouseSource = new javax.swing.JPanel();
        jlWarehouseSource = new javax.swing.JLabel();
        jtfCompanyBranchSource = new javax.swing.JTextField();
        jtfCompanyBranchSourceCode = new javax.swing.JTextField();
        jtfWarehouseSource = new javax.swing.JTextField();
        jtfWarehouseSourceCode = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jPanel32 = new javax.swing.JPanel();
        jlFkItemSubstituteId = new javax.swing.JLabel();
        jcbFkItemSubstituteId = new javax.swing.JComboBox<SFormComponentItem>();
        jbFkItemSubstituteId = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jlDbmsPercentage = new javax.swing.JLabel();
        jtfDbmsPercentage = new javax.swing.JTextField();
        jbDbmsPercentage = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jlDbmsQuantity = new javax.swing.JLabel();
        jtfDbmsQuantity = new javax.swing.JFormattedTextField();
        jtfDbmsUnit = new javax.swing.JFormattedTextField();
        jbDbmsQuantity = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jpDiogEntriesInfo21 = new javax.swing.JPanel();
        jlStock = new javax.swing.JLabel();
        jtfStock = new javax.swing.JTextField();
        jtfStockUnit = new javax.swing.JTextField();
        jbViewLots = new javax.swing.JButton();
        jpDiogEntriesInfo22 = new javax.swing.JPanel();
        jlCurrentlyUsed = new javax.swing.JLabel();
        jtfCurrentlyUsed = new javax.swing.JTextField();
        jtfCurrentlyUsedUnit = new javax.swing.JTextField();
        jpDiogEntriesInfo23 = new javax.swing.JPanel();
        jlAvailable = new javax.swing.JLabel();
        jtfAvailable = new javax.swing.JTextField();
        jtfAvailableUnit = new javax.swing.JTextField();
        jlYear = new javax.swing.JLabel();
        jtfYear = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Insumo sustituto"); // NOI18N
        setModal(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpData.setPreferredSize(new java.awt.Dimension(245, 101));
        jpData.setLayout(new java.awt.BorderLayout());

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Período:"));
        jPanel8.setLayout(new java.awt.GridLayout(12, 1, 0, 1));

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDbmsFkItemId.setText("Insumo:");
        jlDbmsFkItemId.setPreferredSize(new java.awt.Dimension(120, 14));
        jPanel9.add(jlDbmsFkItemId);

        jtfDbmsFkItemId.setEditable(false);
        jtfDbmsFkItemId.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jtfDbmsFkItemId.setText("RAW MATERIAL");
        jtfDbmsFkItemId.setPreferredSize(new java.awt.Dimension(450, 23));
        jPanel9.add(jtfDbmsFkItemId);

        jPanel8.add(jPanel9);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDbmsOriginalQuantity.setText("Cantidad original:");
        jlDbmsOriginalQuantity.setPreferredSize(new java.awt.Dimension(120, 14));
        jPanel7.add(jlDbmsOriginalQuantity);

        jtfDbmsOriginalQuantity.setEditable(false);
        jtfDbmsOriginalQuantity.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfDbmsOriginalQuantity.setText("QUANTITY");
        jtfDbmsOriginalQuantity.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel7.add(jtfDbmsOriginalQuantity);

        jtfDbmsOriginalQuantityUnit.setEditable(false);
        jtfDbmsOriginalQuantityUnit.setText("UNIT");
        jtfDbmsOriginalQuantityUnit.setFocusable(false);
        jtfDbmsOriginalQuantityUnit.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel7.add(jtfDbmsOriginalQuantityUnit);

        jPanel8.add(jPanel7);

        jpWarehouseSource.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWarehouseSource.setText("Almacén:");
        jlWarehouseSource.setPreferredSize(new java.awt.Dimension(120, 23));
        jpWarehouseSource.add(jlWarehouseSource);

        jtfCompanyBranchSource.setBackground(java.awt.Color.lightGray);
        jtfCompanyBranchSource.setEditable(false);
        jtfCompanyBranchSource.setText("TEXT");
        jtfCompanyBranchSource.setFocusable(false);
        jtfCompanyBranchSource.setPreferredSize(new java.awt.Dimension(100, 23));
        jpWarehouseSource.add(jtfCompanyBranchSource);

        jtfCompanyBranchSourceCode.setBackground(java.awt.Color.lightGray);
        jtfCompanyBranchSourceCode.setEditable(false);
        jtfCompanyBranchSourceCode.setText("CODE");
        jtfCompanyBranchSourceCode.setFocusable(false);
        jtfCompanyBranchSourceCode.setPreferredSize(new java.awt.Dimension(55, 23));
        jpWarehouseSource.add(jtfCompanyBranchSourceCode);

        jtfWarehouseSource.setBackground(java.awt.Color.lightGray);
        jtfWarehouseSource.setEditable(false);
        jtfWarehouseSource.setText("TEXT");
        jtfWarehouseSource.setFocusable(false);
        jtfWarehouseSource.setPreferredSize(new java.awt.Dimension(155, 23));
        jpWarehouseSource.add(jtfWarehouseSource);

        jtfWarehouseSourceCode.setBackground(java.awt.Color.lightGray);
        jtfWarehouseSourceCode.setEditable(false);
        jtfWarehouseSourceCode.setText("CODE");
        jtfWarehouseSourceCode.setFocusable(false);
        jtfWarehouseSourceCode.setPreferredSize(new java.awt.Dimension(55, 23));
        jpWarehouseSource.add(jtfWarehouseSourceCode);

        jPanel8.add(jpWarehouseSource);
        jPanel8.add(jPanel3);

        jPanel32.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFkItemSubstituteId.setText("Insumo sustituto: *");
        jlFkItemSubstituteId.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel32.add(jlFkItemSubstituteId);

        jcbFkItemSubstituteId.setPreferredSize(new java.awt.Dimension(450, 23));
        jcbFkItemSubstituteId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbFkItemSubstituteIdItemStateChanged(evt);
            }
        });
        jPanel32.add(jcbFkItemSubstituteId);

        jbFkItemSubstituteId.setText("...");
        jbFkItemSubstituteId.setToolTipText("Seleccionar insumo sustituto");
        jbFkItemSubstituteId.setFocusable(false);
        jbFkItemSubstituteId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel32.add(jbFkItemSubstituteId);

        jPanel8.add(jPanel32);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDbmsPercentage.setText("Porcentaje: ");
        jlDbmsPercentage.setPreferredSize(new java.awt.Dimension(120, 14));
        jPanel6.add(jlDbmsPercentage);

        jtfDbmsPercentage.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfDbmsPercentage.setText("PERCENTAGE");
        jtfDbmsPercentage.setPreferredSize(new java.awt.Dimension(120, 23));
        jtfDbmsPercentage.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfDbmsPercentageFocusLost(evt);
            }
        });
        jPanel6.add(jtfDbmsPercentage);

        jbDbmsPercentage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_action.gif"))); // NOI18N
        jbDbmsPercentage.setToolTipText("Calcular cantidad insumo sustituto");
        jbDbmsPercentage.setFocusable(false);
        jbDbmsPercentage.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel6.add(jbDbmsPercentage);

        jPanel8.add(jPanel6);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDbmsQuantity.setText("Cantidad: *");
        jlDbmsQuantity.setPreferredSize(new java.awt.Dimension(120, 14));
        jPanel5.add(jlDbmsQuantity);

        jtfDbmsQuantity.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfDbmsQuantity.setText("QUANTITY");
        jtfDbmsQuantity.setPreferredSize(new java.awt.Dimension(120, 23));
        jtfDbmsQuantity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfDbmsQuantityFocusLost(evt);
            }
        });
        jPanel5.add(jtfDbmsQuantity);

        jtfDbmsUnit.setEditable(false);
        jtfDbmsUnit.setText("UNIT");
        jtfDbmsUnit.setFocusable(false);
        jtfDbmsUnit.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel5.add(jtfDbmsUnit);

        jbDbmsQuantity.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_action.gif"))); // NOI18N
        jbDbmsQuantity.setToolTipText("Calcular porcentaje sugerido");
        jbDbmsQuantity.setFocusable(false);
        jbDbmsQuantity.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel5.add(jbDbmsQuantity);

        jPanel8.add(jPanel5);
        jPanel8.add(jPanel1);

        jpDiogEntriesInfo21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlStock.setText("+ Existencias:");
        jlStock.setPreferredSize(new java.awt.Dimension(120, 23));
        jpDiogEntriesInfo21.add(jlStock);

        jtfStock.setEditable(false);
        jtfStock.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfStock.setText("0.00000000");
        jtfStock.setFocusable(false);
        jtfStock.setPreferredSize(new java.awt.Dimension(120, 23));
        jpDiogEntriesInfo21.add(jtfStock);

        jtfStockUnit.setEditable(false);
        jtfStockUnit.setText("UNIT");
        jtfStockUnit.setFocusable(false);
        jtfStockUnit.setPreferredSize(new java.awt.Dimension(40, 23));
        jpDiogEntriesInfo21.add(jtfStockUnit);

        jbViewLots.setText("Ver lotes");
        jbViewLots.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbViewLots.setPreferredSize(new java.awt.Dimension(75, 23));
        jpDiogEntriesInfo21.add(jbViewLots);

        jPanel8.add(jpDiogEntriesInfo21);

        jpDiogEntriesInfo22.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCurrentlyUsed.setText("– Unidades en doc.:");
        jlCurrentlyUsed.setPreferredSize(new java.awt.Dimension(120, 23));
        jpDiogEntriesInfo22.add(jlCurrentlyUsed);

        jtfCurrentlyUsed.setEditable(false);
        jtfCurrentlyUsed.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfCurrentlyUsed.setText("0.00000000");
        jtfCurrentlyUsed.setFocusable(false);
        jtfCurrentlyUsed.setPreferredSize(new java.awt.Dimension(120, 23));
        jpDiogEntriesInfo22.add(jtfCurrentlyUsed);

        jtfCurrentlyUsedUnit.setEditable(false);
        jtfCurrentlyUsedUnit.setText("UNIT");
        jtfCurrentlyUsedUnit.setFocusable(false);
        jtfCurrentlyUsedUnit.setPreferredSize(new java.awt.Dimension(40, 23));
        jpDiogEntriesInfo22.add(jtfCurrentlyUsedUnit);

        jPanel8.add(jpDiogEntriesInfo22);

        jpDiogEntriesInfo23.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAvailable.setText("= Unidades disponibles:");
        jlAvailable.setPreferredSize(new java.awt.Dimension(120, 23));
        jpDiogEntriesInfo23.add(jlAvailable);

        jtfAvailable.setBackground(new java.awt.Color(153, 204, 255));
        jtfAvailable.setEditable(false);
        jtfAvailable.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfAvailable.setText("0.00000000");
        jtfAvailable.setFocusable(false);
        jtfAvailable.setPreferredSize(new java.awt.Dimension(120, 23));
        jpDiogEntriesInfo23.add(jtfAvailable);

        jtfAvailableUnit.setBackground(new java.awt.Color(153, 204, 255));
        jtfAvailableUnit.setEditable(false);
        jtfAvailableUnit.setText("UNIT");
        jtfAvailableUnit.setFocusable(false);
        jtfAvailableUnit.setPreferredSize(new java.awt.Dimension(40, 23));
        jpDiogEntriesInfo23.add(jtfAvailableUnit);

        jlYear.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlYear.setText("Año:");
        jlYear.setPreferredSize(new java.awt.Dimension(35, 23));
        jpDiogEntriesInfo23.add(jlYear);

        jtfYear.setBackground(new java.awt.Color(153, 204, 255));
        jtfYear.setEditable(false);
        jtfYear.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtfYear.setText("2000");
        jtfYear.setFocusable(false);
        jtfYear.setPreferredSize(new java.awt.Dimension(40, 23));
        jpDiogEntriesInfo23.add(jtfYear);

        jPanel8.add(jpDiogEntriesInfo23);

        jpData.add(jPanel8, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpData, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel2.add(jbOk);

        jbCancel.setText("Cerrar"); // NOI18N
        jbCancel.setToolTipText("[Escape]");
        jbCancel.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel2.add(jbCancel);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-638)/2, (screenSize.height-399)/2, 638, 399);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void jcbFkItemSubstituteIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbFkItemSubstituteIdItemStateChanged
        fkItemIdStateChangedFkItemId();
    }//GEN-LAST:event_jcbFkItemSubstituteIdItemStateChanged

    private void jtfDbmsPercentageFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfDbmsPercentageFocusLost
        dbmsPercentageFocusLost();
    }//GEN-LAST:event_jtfDbmsPercentageFocusLost

    private void jtfDbmsQuantityFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfDbmsQuantityFocusLost
        dbmsQuantityFocusLost();
    }//GEN-LAST:event_jtfDbmsQuantityFocusLost

    private void initComponentsExtra() {
        mvFields = new Vector<SFormField>();

        moFieldDbmsFkItemId = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_STRING, false, jtfDbmsFkItemId, jlDbmsFkItemId);
        moFieldDbmsOriginalQuantity = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfDbmsOriginalQuantity, jlDbmsOriginalQuantity);
        moFieldDbmsOriginalQuantity.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsValueUnitaryFormat());
        moFieldFkItemSubstituteId = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkItemSubstituteId, jlFkItemSubstituteId);
        moFieldFkItemSubstituteId.setPickerButton(jbFkItemSubstituteId);
        moFieldDbmsPercentage = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfDbmsPercentage, jlDbmsPercentage);
        moFieldDbmsPercentage.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsPercentageFormat());
        moFieldDbmsPercentage.setIsPercent(true);
        moFieldDbmsPercentage.setFloatMax(1);
        moFieldDbmsPercentage.setMaxInclusive(true);
        moFieldDbmsQuantity = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfDbmsQuantity, jlDbmsQuantity);
        moFieldDbmsQuantity.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsValueUnitaryFormat());

        mvFields.add(moFieldDbmsFkItemId);
        mvFields.add(moFieldDbmsOriginalQuantity);
        mvFields.add(moFieldFkItemSubstituteId);
        mvFields.add(moFieldDbmsPercentage);
        mvFields.add(moFieldDbmsQuantity);

        jbCancel.addActionListener(this);
        jbOk.addActionListener(this);
        jbFkItemSubstituteId.addActionListener(this);
        jbDbmsPercentage.addActionListener(this);
        jbDbmsQuantity.addActionListener(this);
        jbViewLots.addActionListener(this);

        moPickerStockLots = new SDialogPickerStockLots(miClient, false);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;

            if (jcbFkItemSubstituteId.getItemCount() < 2) {
                miClient.showMsgBoxInformation("El insumo no tiene asignado al menos un insumo sustituto.");
                actionCancel();
            }
        }
    }

    private void dbmsPercentageFocusLost() {
        if (moFieldDbmsQuantity.getDouble() == 0) {
            actionCalculateDbmsQuantity();
        }
    }

    private void dbmsQuantityFocusLost() {
        if (moFieldDbmsPercentage.getDouble() == 0) {
            actionCalculateDbmsPercentage();
        }
    }

    private void fkItemIdStateChangedFkItemId() {
        if (jcbFkItemSubstituteId.getSelectedIndex()>0) {
            moFieldDbmsPercentage.setFieldValue(((Number) ((erp.lib.form.SFormComponentItem) jcbFkItemSubstituteId.getModel().getSelectedItem()).getComplement()).doubleValue());
            mvFkItemSubstituteId = (int[]) ((erp.lib.form.SFormComponentItem) jcbFkItemSubstituteId.getModel().getSelectedItem()).getForeignKey();

            if (mvFkItemSubstituteId != null) {
                moBomSubstitute = (SDataBomSubstitute) SDataUtilities.readRegistry(miClient, SDataConstants.MFG_BOM_SUB,
                        (int[]) ((erp.lib.form.SFormComponentItem) jcbFkItemSubstituteId.getModel().getSelectedItem()).getPrimaryKey(), SLibConstants.EXEC_MODE_VERBOSE);
                moItem = (SDataItem) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_ITEM, new int[] { mvFkItemSubstituteId[0] }, SLibConstants.EXEC_MODE_VERBOSE);
                jtfDbmsUnit.setText(moItem.getDbmsDataUnit().getSymbol());
                actionCalculateDbmsQuantity();

                valueChangedItemSubstitute();
            }
        }
    }

    private void actionFkItemSubstituteId() {
        miClient.pickOption(SDataConstants.MFG_BOM_SUB, moFieldFkItemSubstituteId, new int[] { mnFkRmItemId[0], mnFkRmItemId[1], mnFkBomItemId[0], mnFkBomItemId[1] });
    }

    private void actionCalculateDbmsQuantity() {
        moFieldDbmsQuantity.setDouble(moFieldDbmsOriginalQuantity.getDouble() * moFieldDbmsPercentage.getDouble());
        valueChangedItemSubstitute();
    }

    private void actionCalculateDbmsPercentage() {
        moFieldDbmsPercentage.setDouble(moFieldDbmsOriginalQuantity.getDouble() > 0 ? moFieldDbmsQuantity.getDouble() / moFieldDbmsOriginalQuantity.getDouble() : 0);
        valueChangedItemSubstitute();
    }

     public void actionViewLots() {

        moPickerStockLots.formReset();
        moPickerStockLots.setFormParams(miClient.getSessionXXX().getWorkingYear(), moItem.getPkItemId(), moItem.getFkUnitId(), new int[] { moProductionOrder.getDbmsFkCompanyBranchId(), moProductionOrder.getDbmsFkWarehouseId() }, null);
        moPickerStockLots.setVisible(true);
    }

    private void valueChangedItemSubstitute() {
        double stock = 0;

        if (jcbFkItemSubstituteId.getSelectedIndex() <= 0) {
            emptyInventoryFields();
        }
        else {
            // Available stock is processed in inventory units:

            try {
                stock = STrnUtilities.obtainStock(miClient, miClient.getSessionXXX().getWorkingYear(), moItem.getPkItemId(), moItem.getFkUnitId(), SLibConstants.UNDEFINED, moProductionOrder.getDbmsFkCompanyBranchId(), moProductionOrder.getDbmsFkWarehouseId(), SLibConstants.UNDEFINED, null, null);
            }
            catch (Exception e) {
                SLibUtilities.printOutException(this, e);
            }

            jtfStock.setText(miClient.getSessionXXX().getFormatters().getDecimalsValueUnitaryFormat().format(stock));
            jtfStockUnit.setText(moItem.getDbmsDataUnit().getSymbol());
            jtfCurrentlyUsed.setText(miClient.getSessionXXX().getFormatters().getDecimalsValueUnitaryFormat().format(moFieldDbmsQuantity.getDouble()));
            jtfCurrentlyUsedUnit.setText(moItem.getDbmsDataUnit().getSymbol());
            jtfAvailable.setText(miClient.getSessionXXX().getFormatters().getDecimalsValueUnitaryFormat().format(stock - moFieldDbmsQuantity.getDouble()));
            jtfAvailableUnit.setText(moItem.getDbmsDataUnit().getSymbol());

            jbViewLots.setEnabled(true);
        }
    }

    private void emptyInventoryFields() {
        jtfStock.setText("");
        jtfStockUnit.setText("");
        jtfCurrentlyUsed.setText("");
        jtfCurrentlyUsedUnit.setText("");
        jtfAvailable.setText("");
        jtfAvailableUnit.setText("");
        jtfYear.setText("");

        jbViewLots.setEnabled(false);
    }

    private void renderWarehouse() {
        jtfCompanyBranchSource.setText(moProductionOrder.getDbmsExplotionCompanyBranch());
        jtfCompanyBranchSourceCode.setText(moProductionOrder.getDbmsExplotionCompanyBranchCode());
        jtfWarehouseSource.setText(moProductionOrder.getDbmsExplotionWarehouse());
        jtfWarehouseSourceCode.setText(moProductionOrder.getDbmsExplotionWarehouseCode());

        jtfYear.setText("" + miClient.getSessionXXX().getWorkingYear());
    }

    private void actionEdit(boolean edit) {

    }

    private void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgCurrency;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbDbmsPercentage;
    private javax.swing.JButton jbDbmsQuantity;
    private javax.swing.JButton jbFkItemSubstituteId;
    private javax.swing.JButton jbOk;
    private javax.swing.JButton jbViewLots;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkItemSubstituteId;
    private javax.swing.JLabel jlAvailable;
    private javax.swing.JLabel jlCurrentlyUsed;
    private javax.swing.JLabel jlDbmsFkItemId;
    private javax.swing.JLabel jlDbmsOriginalQuantity;
    private javax.swing.JLabel jlDbmsPercentage;
    private javax.swing.JLabel jlDbmsQuantity;
    private javax.swing.JLabel jlFkItemSubstituteId;
    private javax.swing.JLabel jlStock;
    private javax.swing.JLabel jlWarehouseSource;
    private javax.swing.JLabel jlYear;
    private javax.swing.JPanel jpData;
    private javax.swing.JPanel jpDiogEntriesInfo21;
    private javax.swing.JPanel jpDiogEntriesInfo22;
    private javax.swing.JPanel jpDiogEntriesInfo23;
    private javax.swing.JPanel jpWarehouseSource;
    private javax.swing.JTextField jtfAvailable;
    private javax.swing.JTextField jtfAvailableUnit;
    private javax.swing.JTextField jtfCompanyBranchSource;
    private javax.swing.JTextField jtfCompanyBranchSourceCode;
    private javax.swing.JTextField jtfCurrentlyUsed;
    private javax.swing.JTextField jtfCurrentlyUsedUnit;
    private javax.swing.JFormattedTextField jtfDbmsFkItemId;
    private javax.swing.JFormattedTextField jtfDbmsOriginalQuantity;
    private javax.swing.JFormattedTextField jtfDbmsOriginalQuantityUnit;
    private javax.swing.JTextField jtfDbmsPercentage;
    private javax.swing.JFormattedTextField jtfDbmsQuantity;
    private javax.swing.JFormattedTextField jtfDbmsUnit;
    private javax.swing.JTextField jtfStock;
    private javax.swing.JTextField jtfStockUnit;
    private javax.swing.JTextField jtfWarehouseSource;
    private javax.swing.JTextField jtfWarehouseSourceCode;
    private javax.swing.JTextField jtfYear;
    // End of variables declaration//GEN-END:variables

    public int getFkItemSubstituteId() { return mvFkItemSubstituteId != null ? mvFkItemSubstituteId[0] : 0; }
    public int getFkUnitSubstituteId() { return mvFkItemSubstituteId != null ? mvFkItemSubstituteId[1] : 0; }
    public double getGrossRequirement() { return moFieldDbmsQuantity.getDouble(); }

    public java.lang.String getDbmsItemSubstitute() { return moItem.getItem(); }
    public java.lang.String getDbmsItemKeySubstitute() { return moItem.getKey(); }
    public java.lang.String getDbmsUnitSubstitute() { return moItem.getDbmsDataUnit().getSymbol(); }

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        emptyInventoryFields();

        mvFkItemSubstituteId = null;
        moBomSubstitute = null;
        jtfDbmsUnit.setText("");
        jcbFkItemSubstituteId.setEnabled(true);
    }

    @Override
    public void formRefreshCatalogues() {
        SFormUtilities.populateComboBox(miClient, jcbFkItemSubstituteId, SDataConstants.MFG_BOM_SUB, new int[] { mnFkRmItemId[0], mnFkRmItemId[1], mnFkBomItemId[0], mnFkBomItemId[1] });
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        String sMsg = "";
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        if (!validation.getIsError()) {
            if (moBomSubstitute != null) {
                if (moFieldDbmsPercentage.getDouble() > moBomSubstitute.getPercentageMax()) {
                    validation.setMessage("El porcentaje (" + miClient.getSessionXXX().getFormatters().getDecimalsPercentageFormat().format(moFieldDbmsPercentage.getDouble()) +
                            ") es mayor al porcentaje máximo del insumo sustituto (" + miClient.getSessionXXX().getFormatters().getDecimalsPercentageFormat().format(moBomSubstitute.getPercentageMax()) + ").");
                    validation.setComponent(moFieldDbmsPercentage.getComponent());
                }
                else if ((moFieldDbmsQuantity.getDouble() / moFieldDbmsOriginalQuantity.getDouble()) > moBomSubstitute.getPercentageMax()) {
                    validation.setMessage("La cantidad (" + miClient.getSessionXXX().getFormatters().getDecimalsValueFormat().format(moFieldDbmsQuantity.getDouble()) +
                            ") es mayor a la cantidad (" + miClient.getSessionXXX().getFormatters().getDecimalsValueFormat().format(moFieldDbmsOriginalQuantity.getDouble() * moBomSubstitute.getPercentageMax()) +
                            ") permitida por el porcentaje máximo (" + miClient.getSessionXXX().getFormatters().getDecimalsPercentageFormat().format(moBomSubstitute.getPercentageMax()) + ").");
                    validation.setComponent(moFieldDbmsQuantity.getComponent());
                }
            }
        }

        if (!validation.getIsError()) {
            if (SLibUtilities.round(moFieldDbmsPercentage.getDouble() * moFieldDbmsOriginalQuantity.getDouble(), 8) != SLibUtilities.round(moFieldDbmsQuantity.getDouble(), 8)) {
                if (miClient.showMsgBoxConfirm("La cantidad original (" + jtfDbmsOriginalQuantity.getText() + " " + jtfDbmsOriginalQuantityUnit.getText() + ") multiplicado por el porcentaje (" +
                        jtfDbmsPercentage.getText() + ") no es igual a la cantidad ("+ jtfDbmsQuantity.getText() + " " + jtfDbmsUnit.getText() + "). \n ¿Desea continuar?") == JOptionPane.NO_OPTION) {
                    validation.setIsError(true);
                    validation.setComponent(moFieldDbmsPercentage.getComponent());
                }
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        switch (type) {
            case 1:
                mnFkRmItemId = (int[]) value;
                break;
            case 2:
                mnFkBomItemId = (int[]) value;
                break;
            case 3:
                moFieldDbmsOriginalQuantity.setFieldValue((Double) value);
                break;
            case 4:
                moFieldDbmsFkItemId.setFieldValue(value.toString());
                break;
            case 5:
                jtfDbmsOriginalQuantityUnit.setText(value.toString());
                break;
            case 6:
                moProductionOrder = (SDataProductionOrder) value;

                renderWarehouse();
                break;
        }
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbFkItemSubstituteId) {
                actionFkItemSubstituteId();
            }
            else if (button == jbDbmsPercentage) {
                actionCalculateDbmsQuantity();
            }
            else if (button == jbDbmsQuantity) {
                actionCalculateDbmsPercentage();
            }
            else if (button == jbViewLots) {
                actionViewLots();
            }
        }
    }
}
