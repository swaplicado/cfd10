/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Created on 11/11/2009
 */

package erp.mmfg.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STableConstants;
import erp.lib.table.STablePane;
import erp.mitm.data.SDataItem;
import erp.mmfg.data.SDataProductionOrder;
import erp.mmfg.data.SDataProductionOrderCharge;
import erp.mmfg.data.SDataProductionOrderChargeEntry;
import erp.mmfg.data.SDataProductionOrderChargeEntryLot;
import erp.mmfg.data.SDataProductionOrderChargeEntryRow;
import erp.mtrn.data.SDataStockLot;
import erp.mtrn.data.STrnStockMove;
import erp.mtrn.data.STrnStockValidator;
import erp.mtrn.form.SDialogStockLots;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JOptionPane;

/**
 *
 * @author Néstor Ávalos, Edwin Carmona
 */
public class SFormProductionOrderCharge extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mmfg.data.SDataProductionOrderCharge moProductionOrderCharges;
    private erp.lib.form.SFormField moFieldDbmsProductionOrder;
    private erp.lib.form.SFormField moFieldDbmsFinishedGood;
    private erp.lib.form.SFormField moFieldDbmsFormula;
    private erp.lib.form.SFormField moFieldDbmsType;
    private erp.lib.form.SFormField moFieldDbmsQuantity;
    private erp.lib.form.SFormField moFieldDbmsCharge;
    private erp.lib.form.SFormField moFieldCompanyBranch;
    private erp.lib.form.SFormField moFieldCompanyBranchCode;
    private erp.lib.form.SFormField moFieldWarehouse;
    private erp.lib.form.SFormField moFieldWarehouseCode;
    private erp.lib.form.SFormField moFieldIsDeleted;

    private erp.lib.table.STablePane moEntriesPane;
    private erp.mitm.data.SDataItem moItemEntry;
    private erp.mmfg.data.SDataProductionOrder moProductionOrder;
    private erp.mtrn.form.SDialogStockLots moDialogStockLots;

    private java.util.Vector<erp.mmfg.data.SDataProductionOrderChargeEntry> mvDbmsProductionOrderChargesEntry;

    /** Creates new form SFormElement */
    public SFormProductionOrderCharge(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient =  client;
        mnFormType = SDataConstants.MFG_ORD_CHG;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jlDbmsProductionOrder = new javax.swing.JLabel();
        jtfDbmsProductionOrder = new javax.swing.JFormattedTextField();
        jPanel8 = new javax.swing.JPanel();
        jlDbmsFinishedGood = new javax.swing.JLabel();
        jtfDbmsFinishedGood = new javax.swing.JFormattedTextField();
        jPanel9 = new javax.swing.JPanel();
        jlDbmsFormula = new javax.swing.JLabel();
        jtfDbmsFormula = new javax.swing.JFormattedTextField();
        jPanel3 = new javax.swing.JPanel();
        jlDbmsType = new javax.swing.JLabel();
        jtfDbmsType = new javax.swing.JFormattedTextField();
        jPanel5 = new javax.swing.JPanel();
        jlDbmsQuantity = new javax.swing.JLabel();
        jtfDbmsQuantity = new javax.swing.JFormattedTextField();
        jtfDbmsUnit = new javax.swing.JFormattedTextField();
        jPanel10 = new javax.swing.JPanel();
        jlDbmsCharges = new javax.swing.JLabel();
        jtfDbmsCharges = new javax.swing.JFormattedTextField();
        jPanel11 = new javax.swing.JPanel();
        jlWarehouse = new javax.swing.JLabel();
        jtfCompanyBranch = new javax.swing.JTextField();
        jtfCompanyBranchCode = new javax.swing.JTextField();
        jtfWarehouse = new javax.swing.JTextField();
        jtfWarehouseCode = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jckIsDeleted = new javax.swing.JCheckBox();
        jPanel6 = new javax.swing.JPanel();
        jpFilter = new javax.swing.JPanel();
        jbNew = new javax.swing.JButton();
        jbEdit = new javax.swing.JButton();
        jbDelete = new javax.swing.JButton();
        jbViewLots = new javax.swing.JButton();
        jbFkItemSubstituteId = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jbOK = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Carga de la orden de producción");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel2.setLayout(new java.awt.GridLayout(8, 1, 1, 2));

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDbmsProductionOrder.setText("Orden producción:");
        jlDbmsProductionOrder.setPreferredSize(new java.awt.Dimension(120, 23));
        jlDbmsProductionOrder.setRequestFocusEnabled(false);
        jPanel7.add(jlDbmsProductionOrder);

        jtfDbmsProductionOrder.setEditable(false);
        jtfDbmsProductionOrder.setText("PRODUCTION ORDER");
        jtfDbmsProductionOrder.setFocusable(false);
        jtfDbmsProductionOrder.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel7.add(jtfDbmsProductionOrder);

        jPanel2.add(jPanel7);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDbmsFinishedGood.setText("Producto:");
        jlDbmsFinishedGood.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel8.add(jlDbmsFinishedGood);

        jtfDbmsFinishedGood.setEditable(false);
        jtfDbmsFinishedGood.setText("FINISHED GOOD");
        jtfDbmsFinishedGood.setFocusable(false);
        jtfDbmsFinishedGood.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel8.add(jtfDbmsFinishedGood);

        jPanel2.add(jPanel8);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDbmsFormula.setText("Fórmula:");
        jlDbmsFormula.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel9.add(jlDbmsFormula);

        jtfDbmsFormula.setEditable(false);
        jtfDbmsFormula.setText("FORMULA");
        jtfDbmsFormula.setFocusable(false);
        jtfDbmsFormula.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel9.add(jtfDbmsFormula);

        jPanel2.add(jPanel9);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDbmsType.setText("Tipo:");
        jlDbmsType.setPreferredSize(new java.awt.Dimension(120, 14));
        jPanel3.add(jlDbmsType);

        jtfDbmsType.setEditable(false);
        jtfDbmsType.setText("TYPE");
        jtfDbmsType.setFocusable(false);
        jtfDbmsType.setPreferredSize(new java.awt.Dimension(105, 23));
        jPanel3.add(jtfDbmsType);

        jPanel2.add(jPanel3);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDbmsQuantity.setText("Cantidad:");
        jlDbmsQuantity.setPreferredSize(new java.awt.Dimension(120, 14));
        jPanel5.add(jlDbmsQuantity);

        jtfDbmsQuantity.setEditable(false);
        jtfDbmsQuantity.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfDbmsQuantity.setText("QUANTITY");
        jtfDbmsQuantity.setFocusable(false);
        jtfDbmsQuantity.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel5.add(jtfDbmsQuantity);

        jtfDbmsUnit.setEditable(false);
        jtfDbmsUnit.setText("UNIT");
        jtfDbmsUnit.setFocusable(false);
        jtfDbmsUnit.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel5.add(jtfDbmsUnit);

        jPanel2.add(jPanel5);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDbmsCharges.setText("# carga:");
        jlDbmsCharges.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel10.add(jlDbmsCharges);

        jtfDbmsCharges.setEditable(false);
        jtfDbmsCharges.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfDbmsCharges.setText("CHARGES");
        jtfDbmsCharges.setFocusable(false);
        jtfDbmsCharges.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel10.add(jtfDbmsCharges);

        jPanel2.add(jPanel10);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWarehouse.setText("Almacén:");
        jlWarehouse.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel11.add(jlWarehouse);

        jtfCompanyBranch.setBackground(java.awt.Color.lightGray);
        jtfCompanyBranch.setEditable(false);
        jtfCompanyBranch.setText("TEXT");
        jtfCompanyBranch.setFocusable(false);
        jtfCompanyBranch.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jtfCompanyBranch);

        jtfCompanyBranchCode.setBackground(java.awt.Color.lightGray);
        jtfCompanyBranchCode.setEditable(false);
        jtfCompanyBranchCode.setText("CODE");
        jtfCompanyBranchCode.setFocusable(false);
        jtfCompanyBranchCode.setPreferredSize(new java.awt.Dimension(55, 23));
        jPanel11.add(jtfCompanyBranchCode);

        jtfWarehouse.setBackground(java.awt.Color.lightGray);
        jtfWarehouse.setEditable(false);
        jtfWarehouse.setText("TEXT");
        jtfWarehouse.setFocusable(false);
        jtfWarehouse.setPreferredSize(new java.awt.Dimension(155, 23));
        jPanel11.add(jtfWarehouse);

        jtfWarehouseCode.setBackground(java.awt.Color.lightGray);
        jtfWarehouseCode.setEditable(false);
        jtfWarehouseCode.setText("CODE");
        jtfWarehouseCode.setFocusable(false);
        jtfWarehouseCode.setPreferredSize(new java.awt.Dimension(55, 23));
        jPanel11.add(jtfWarehouseCode);

        jPanel2.add(jPanel11);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jckIsDeleted.setText("Registro eliminado");
        jPanel4.add(jckIsDeleted);

        jPanel2.add(jPanel4);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_START);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Materia prima/empaque:"));
        jPanel6.setPreferredSize(new java.awt.Dimension(100, 53));
        jPanel6.setLayout(new java.awt.BorderLayout());

        jpFilter.setPreferredSize(new java.awt.Dimension(779, 23));
        jpFilter.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        jbNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_new.gif"))); // NOI18N
        jbNew.setToolTipText("Crear [Ctrl+N]");
        jbNew.setEnabled(false);
        jbNew.setFocusable(false);
        jbNew.setPreferredSize(new java.awt.Dimension(23, 23));
        jpFilter.add(jbNew);

        jbEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_edit.gif"))); // NOI18N
        jbEdit.setToolTipText("Modificar [Ctrl+M]");
        jbEdit.setEnabled(false);
        jbEdit.setFocusable(false);
        jbEdit.setPreferredSize(new java.awt.Dimension(23, 23));
        jpFilter.add(jbEdit);

        jbDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_delete.gif"))); // NOI18N
        jbDelete.setToolTipText("Eliminar [Ctrl+D]");
        jbDelete.setFocusable(false);
        jbDelete.setPreferredSize(new java.awt.Dimension(23, 23));
        jpFilter.add(jbDelete);

        jbViewLots.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_kardex.gif"))); // NOI18N
        jbViewLots.setToolTipText("Ver lotes [Ctrl+M]");
        jbViewLots.setFocusable(false);
        jbViewLots.setPreferredSize(new java.awt.Dimension(23, 23));
        jpFilter.add(jbViewLots);

        jbFkItemSubstituteId.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_contract_analysis.gif"))); // NOI18N
        jbFkItemSubstituteId.setToolTipText("Agregar insumo sustituto [Ctrl+S]");
        jbFkItemSubstituteId.setFocusable(false);
        jbFkItemSubstituteId.setPreferredSize(new java.awt.Dimension(23, 23));
        jpFilter.add(jbFkItemSubstituteId);

        jPanel6.add(jpFilter, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(jPanel6, java.awt.BorderLayout.CENTER);

        jPanel1.setPreferredSize(new java.awt.Dimension(400, 33));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOK.setText("Aceptar");
        jbOK.setToolTipText("[Ctrl + Enter]");
        jbOK.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jbOK);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jPanel1.add(jbCancel);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-775)/2, (screenSize.height-593)/2, 775, 593);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        int i;
        erp.lib.table.STableColumnForm oColsEntries[];

        mvFields = new Vector<SFormField>();
        mvDbmsProductionOrderChargesEntry = new Vector<SDataProductionOrderChargeEntry>();

        moEntriesPane = new STablePane(miClient);
        moEntriesPane.setDoubleClickAction(this, "publicActionEdit");
        jPanel6.add(moEntriesPane, BorderLayout.CENTER);

        moFieldDbmsProductionOrder = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, false, jtfDbmsProductionOrder, jlDbmsProductionOrder);
        moFieldDbmsFinishedGood = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, false, jtfDbmsFinishedGood, jlDbmsFinishedGood);
        moFieldDbmsFormula = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, false, jtfDbmsFormula, jlDbmsFormula);
        moFieldDbmsType = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, false, jtfDbmsType, jlDbmsType);
        moFieldDbmsQuantity = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfDbmsQuantity, jlDbmsQuantity);
        moFieldDbmsCharge = new SFormField(miClient, SLibConstants.DATA_TYPE_INTEGER, false, jtfDbmsCharges, jlDbmsCharges);
        moFieldCompanyBranch = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, false, jtfCompanyBranch, jlWarehouse);
        moFieldCompanyBranchCode = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, false, jtfCompanyBranchCode, jlWarehouse);
        moFieldWarehouse = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, false, jtfWarehouse, jlWarehouse);
        moFieldWarehouseCode = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, false, jtfWarehouseCode, jlWarehouse);
        moFieldIsDeleted = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsDeleted);

        mvFields.add(moFieldDbmsProductionOrder);
        mvFields.add(moFieldDbmsFinishedGood);
        mvFields.add(moFieldDbmsFormula);
        mvFields.add(moFieldDbmsType);
        mvFields.add(moFieldDbmsQuantity);
        mvFields.add(moFieldDbmsCharge);
        mvFields.add(moFieldCompanyBranch);
        mvFields.add(moFieldCompanyBranchCode);
        mvFields.add(moFieldWarehouse);
        mvFields.add(moFieldWarehouseCode);
        mvFields.add(moFieldIsDeleted);

        jbOK.addActionListener(this);
        jbCancel.addActionListener(this);
        jbNew.addActionListener(this);
        jbEdit.addActionListener(this);
        jbDelete.addActionListener(this);
        jbViewLots.addActionListener(this);
        jbFkItemSubstituteId.addActionListener(this);

        moDialogStockLots = new SDialogStockLots(miClient, SLibConstants.MODE_QTY_EXT);

        i = 0;
        oColsEntries = new STableColumnForm[13];
        if (miClient.getSessionXXX().getParamsErp().getFkSortingItemTypeId() == SDataConstantsSys.CFGS_TP_SORT_KEY_NAME) {
            oColsEntries[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Clave", STableConstants.WIDTH_ITEM_KEY);
            oColsEntries[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Insumo", 300);
        }
        else {
            oColsEntries[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Insumo", 300);
            oColsEntries[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Clave", STableConstants.WIDTH_ITEM_KEY);
        }
        oColsEntries[i] = new STableColumnForm(SLibConstants.DATA_TYPE_INTEGER, "Necs. brutas", STableConstants.WIDTH_QUANTITY_2X);
        oColsEntries[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererValueUnitary());
        oColsEntries[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Unidad", STableConstants.WIDTH_UNIT_SYMBOL);
        oColsEntries[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Lotes", 160);
        oColsEntries[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "Tiene insumo subs.?", STableConstants.WIDTH_BOOLEAN);
        oColsEntries[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "Eliminado", STableConstants.WIDTH_BOOLEAN);
        oColsEntries[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Usr. creación", STableConstants.WIDTH_USER);
        oColsEntries[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE_TIME, "Creación", STableConstants.WIDTH_DATE_TIME);
        oColsEntries[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Usr. modificación", STableConstants.WIDTH_USER);
        oColsEntries[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE_TIME, "Modificación", STableConstants.WIDTH_DATE_TIME);
        oColsEntries[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Usr. eliminación", STableConstants.WIDTH_USER);
        oColsEntries[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE_TIME, "Eliminación", STableConstants.WIDTH_DATE_TIME);
        for (i = 0; i < oColsEntries.length; i++) {
            moEntriesPane.addTableColumn(oColsEntries[i]);
        }
        moEntriesPane.createTable(null);

        SFormUtilities.createActionMap(rootPane, this, "publicActionEdit", "edit", KeyEvent.VK_M, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "publicActionDelete", "delete", KeyEvent.VK_D, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "publicActionItemSubstitute", "substitute", KeyEvent.VK_S, KeyEvent.CTRL_DOWN_MASK);
        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };
        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };
        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            jckIsDeleted.requestFocus();
        }
    }

    private void actionFkItemSubstituteIdAdd() {
        boolean b = false;
        int index = moEntriesPane.getTable().getSelectedRow();

        SDialogMfgRawMaterialSubstitute oRawMaterialSubstitute = null;
        SDataProductionOrderChargeEntry oProductionOrderChargeEntry = null;
        SDataProductionOrderChargeEntry oProductionOrderChargeEntryAux = null;
        SDataProductionOrderChargeEntryRow oProductionOrderChargeEntryRow = null;

            if (index != -1) {
            oRawMaterialSubstitute = new SDialogMfgRawMaterialSubstitute(miClient);
            oRawMaterialSubstitute.formReset();

            oProductionOrderChargeEntry = (SDataProductionOrderChargeEntry) moEntriesPane.getTableRow(index).getData();

            oRawMaterialSubstitute.setValue(1, new int[] { oProductionOrderChargeEntry.getFkItemId_r(), oProductionOrderChargeEntry.getFkUnitId_r() });
            oRawMaterialSubstitute.setValue(2, new int[] { moProductionOrder.getFkItemId_r(), moProductionOrder.getFkUnitId_r() });
            oRawMaterialSubstitute.setValue(3, oProductionOrderChargeEntry.getDbmsGrossRequirement_r());
            oRawMaterialSubstitute.setValue(4, oProductionOrderChargeEntry.getDbmsLevelItemKey() + " - " + oProductionOrderChargeEntry.getDbmsLevelItem());
            oRawMaterialSubstitute.setValue(5, oProductionOrderChargeEntry.getDbmsLevelUnitSymbol());
            oRawMaterialSubstitute.setValue(6, moProductionOrder);

            oRawMaterialSubstitute.formRefreshCatalogues();
            oRawMaterialSubstitute.setVisible(true);
            if (oRawMaterialSubstitute.getFormResult() == erp.lib.SLibConstants.FORM_RESULT_OK) {

                // Validate raw material substitute don´t exist in the grid:

                b=false;
                for (int j=0; j<moEntriesPane.getTableGuiRowCount(); j++) {

                    oProductionOrderChargeEntryAux = (SDataProductionOrderChargeEntry) moEntriesPane.getTableRow(j).getData();
                    if (oProductionOrderChargeEntryAux.getFkItemId_r() == oRawMaterialSubstitute.getFkItemSubstituteId() &&
                            oProductionOrderChargeEntryAux.getFkUnitId_r() == oRawMaterialSubstitute.getFkUnitSubstituteId() &&
                            !oProductionOrderChargeEntryAux.getIsDeleted()) {
                        b=true;
                        miClient.showMsgBoxWarning("El insumo sustituto '" + oRawMaterialSubstitute.getDbmsItemKeySubstitute() + " - " + oRawMaterialSubstitute.getDbmsItemSubstitute() + "' ya existe en los insumos de la carga.");
                        break;
                    }
                }

                if (!b) {

                    // Change groos requirement original:

                    oProductionOrderChargeEntry.setGrossRequirement_r(oProductionOrderChargeEntry.getGrossRequirement_r() - oRawMaterialSubstitute.getGrossRequirement());
                    moEntriesPane.setTableRow(oProductionOrderChargeEntryRow = new SDataProductionOrderChargeEntryRow(oProductionOrderChargeEntry, miClient.getSessionXXX().getParamsErp().getFkSortingItemTypeId()), index);
                    moEntriesPane.renderTableRows();

                    // Add raw material substitute:

                    oProductionOrderChargeEntry = new SDataProductionOrderChargeEntry();
                    oProductionOrderChargeEntry.setPkYearId(moProductionOrderCharges.getPkYearId());
                    oProductionOrderChargeEntry.setPkOrderId(moProductionOrderCharges.getPkOrderId());
                    oProductionOrderChargeEntry.setPkChargeId(moProductionOrderCharges.getPkChargeId());
                    oProductionOrderChargeEntry.setGrossRequirement_r(oRawMaterialSubstitute.getGrossRequirement());
                    oProductionOrderChargeEntry.setIsRequest(true);
                    oProductionOrderChargeEntry.setFkItemId_r(oRawMaterialSubstitute.getFkItemSubstituteId());
                    oProductionOrderChargeEntry.setFkUnitId_r(oRawMaterialSubstitute.getFkUnitSubstituteId());
                    oProductionOrderChargeEntry.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
                    oProductionOrderChargeEntry.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
                    oProductionOrderChargeEntry.setDbmsLevelItemKey(oRawMaterialSubstitute.getDbmsItemKeySubstitute());
                    oProductionOrderChargeEntry.setDbmsLevelItem(oRawMaterialSubstitute.getDbmsItemSubstitute());
                    oProductionOrderChargeEntry.setDbmsLevelUnitSymbol(oRawMaterialSubstitute.getDbmsUnitSubstitute());
                    oProductionOrderChargeEntry.setDbmsUserDelete("(n/a)");
                    oProductionOrderChargeEntry.setDbmsUserNew(miClient.getSessionXXX().getUser().getUser());
                    oProductionOrderChargeEntry.setDbmsUserEdit("(n/a)");
                    oProductionOrderChargeEntry.setUserDeleteTs(miClient.getSessionXXX().getSystemDate());
                    oProductionOrderChargeEntry.setUserNewTs(miClient.getSessionXXX().getSystemDate());
                    oProductionOrderChargeEntry.setUserEditTs(miClient.getSessionXXX().getSystemDate());

                    moEntriesPane.addTableRow(oProductionOrderChargeEntryRow = new SDataProductionOrderChargeEntryRow(oProductionOrderChargeEntry, miClient.getSessionXXX().getParamsErp().getFkSortingItemTypeId()));
                    moEntriesPane.renderTableRows();
                    index = moEntriesPane.getTableGuiRowCount() - 1;
                    moEntriesPane.getTable().setRowSelectionInterval(index, index);
                    moEntriesPane.getVerticalScrollBar().setValue((index + 1) * moEntriesPane.getTable().getRowHeight());

                    /*moEntriesPane.setTableRow(oProductionOrderChargeEntryRow = new SDataProductionOrderChargeEntryRow(oProductionOrderChargeEntry, miClient.getSessionXXX().getParamsErp().getFkSortingItemTypeId()), index);
                    moEntriesPane.renderTableRows();
                    moEntriesPane.setTableRowSelection(index);*/
                }
            }
        }
    }

    private void actionViewLots() {
        int index = 0;
        int year = miClient.getSessionXXX().getWorkingYear();
        String sLots = "";

        SDataProductionOrderChargeEntry entry = null;
        SDataProductionOrderChargeEntryLot entryLot = null;
        SDataStockLot oStockLot = null;

        if (jbViewLots.isEnabled()) {
            index = moEntriesPane.getTable().getSelectedRow();
            if (index != -1) {
                entry = (SDataProductionOrderChargeEntry) moEntriesPane.getSelectedTableRow().getData();
                moItemEntry = (SDataItem) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_ITEM, new int[] { entry.getFkItemId_r() }, SLibConstants.EXEC_MODE_VERBOSE);
                if (moItemEntry != null) {

                    if (moItemEntry.getIsDeleted()) {
                        miClient.showMsgBoxWarning("El ítem de la partida está eliminado.");
                        jtfDbmsQuantity.requestFocus();
                    }
                    else if (!moItemEntry.getIsInventoriable()) {
                        miClient.showMsgBoxWarning("El ítem de la partida no es inventariable.");
                        jtfDbmsQuantity.requestFocus();
                    }
                    else if (moFieldDbmsQuantity.getDouble() == 0d) {
                        miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_GUI_FIELD_EMPTY + "'" + jlDbmsQuantity.getText() + "'.");
                        jtfDbmsQuantity.requestFocus();
                    }
                    else if (!moItemEntry.getIsLotApplying()) {
                        miClient.showMsgBoxWarning("El ítem no acepta lotes.");
                        jtfDbmsQuantity.requestFocus();
                    }
                    else {

                        try {
                            moDialogStockLots.formReset();
                            moDialogStockLots.setFormParams(SDataConstantsSys.TRNS_CT_IOG_OUT, miClient.getSessionXXX().getWorkingYear(), entry.getFkItemId_r(), entry.getFkUnitId_r(),
                             new int[] { moProductionOrder.getDbmsExplotionMaterials().getDbmsExplotionMaterialsEntry().get(0).getFkCobId_n(), moProductionOrder.getDbmsExplotionMaterials().getDbmsExplotionMaterialsEntry().get(0).getFkWarehouseId_n() }, null,
                             entry.getGrossRequirement_r(), (moProductionOrder.getFkOrdStatusId() >= SDataConstantsSys.MFGS_ST_ORD_PROC ? SLibConstants.FORM_STATUS_READ_ONLY : SLibConstants.FORM_STATUS_EDIT), SLibConstants.MODE_QTY);
                            moDialogStockLots.setStockMoves(entry.getAuxStockMoves());
                            moDialogStockLots.setVisible(true);

                            if (moDialogStockLots.getFormResult() == SLibConstants.FORM_RESULT_OK) {
                                entry.getAuxStockMoves().clear();
                                entry.getDbmsProductionOrderChargeEntryLots().clear();

                                for (STrnStockMove stockMove : moDialogStockLots.getStockMoves()) {
                                    entryLot = new SDataProductionOrderChargeEntryLot();
                                    entryLot.setPkYearId(entry.getPkYearId());
                                    entryLot.setPkOrderId(entry.getPkOrderId());
                                    entryLot.setPkChargeId(entry.getPkChargeId());
                                    entryLot.setPkEntryId(entry.getPkEntryId());
                                    entryLot.setPkItemId(stockMove.getPkItemId());
                                    entryLot.setPkUnitId(stockMove.getPkUnitId());
                                    entryLot.setPkLotId(stockMove.getPkLotId());
                                    entryLot.setDbmsLot(stockMove.getAuxLot());
                                    entryLot.setDbmsDateExpiration_n(stockMove.getAuxLotDateExpiration());
                                    entryLot.setQuantity(stockMove.getQuantity());
                                    entryLot.setIsDeleted(false);
                                    entryLot.setFkUserNewId(1);
                                    entryLot.setFkUserEditId(1);
                                    entryLot.setFkUserDeleteId(1);
                                    entryLot.setDbmsItem(moItemEntry.getItem());
                                    entryLot.setDbmsItemKey(moItemEntry.getKey());
                                    entryLot.setDbmsUnit(moItemEntry.getDbmsDataUnit().getSymbol());
                                    entryLot.setDbmsUserNew(miClient.getSessionXXX().getUser().getUser());
                                    entryLot.setDbmsUserEdit(miClient.getSessionXXX().getUser().getUser());
                                    entryLot.setDbmsUserDelete(miClient.getSessionXXX().getUser().getUser());
                                    entry.getDbmsProductionOrderChargeEntryLots().add(entryLot);

                                    sLots = sLots + stockMove.getAuxLot() + "; ";
                                }

                                // Add stockMove record:

                                entry.getAuxStockMoves().addAll(moDialogStockLots.getStockMoves());

                                entry.setDbmsLots(sLots.substring(0, sLots.length() - 2));
                                moEntriesPane.setTableRow(new SDataProductionOrderChargeEntryRow(entry, miClient.getSessionXXX().getParamsErp().getFkSortingItemTypeId()), index);
                                moEntriesPane.renderTableRows();
                                moEntriesPane.setTableRowSelection(index);
                            }
                        }
                        catch (Exception e) {
                            SLibUtilities.renderException(this, e);
                        }
                    }
                }
            }
        }
    }

    private void actionDelete() {
        int index = moEntriesPane.getTable().getSelectedRow();

        SDataProductionOrderChargeEntry oProductionOrderChargeEntry = null;
        SDataProductionOrderChargeEntryRow oProductionOrderChargeEntryRow = null;

        if (index != -1) {
            if (miClient.showMsgBoxConfirm(SLibConstants.MSG_CNF_REG_DELETE) == JOptionPane.YES_OPTION) {
                oProductionOrderChargeEntry = (SDataProductionOrderChargeEntry) moEntriesPane.getSelectedTableRow().getData();

                oProductionOrderChargeEntry.setIsDeleted(true);
                moEntriesPane.setTableRow(oProductionOrderChargeEntryRow = new SDataProductionOrderChargeEntryRow(oProductionOrderChargeEntry, miClient.getSessionXXX().getParamsErp().getFkSortingItemTypeId()), index);
                moEntriesPane.renderTableRows();
                moEntriesPane.setTableRowSelection(index);
            }
        }
    }

    private void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    public void publicActionEdit() {
        actionViewLots();
    }

    public void publicActionDelete() {
        actionDelete();
    }

    public void publicActionItemSubstitute() {
        actionFkItemSubstituteIdAdd();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbDelete;
    private javax.swing.JButton jbEdit;
    private javax.swing.JButton jbFkItemSubstituteId;
    private javax.swing.JButton jbNew;
    private javax.swing.JButton jbOK;
    private javax.swing.JButton jbViewLots;
    private javax.swing.JCheckBox jckIsDeleted;
    private javax.swing.JLabel jlDbmsCharges;
    private javax.swing.JLabel jlDbmsFinishedGood;
    private javax.swing.JLabel jlDbmsFormula;
    private javax.swing.JLabel jlDbmsProductionOrder;
    private javax.swing.JLabel jlDbmsQuantity;
    private javax.swing.JLabel jlDbmsType;
    private javax.swing.JLabel jlWarehouse;
    private javax.swing.JPanel jpFilter;
    private javax.swing.JTextField jtfCompanyBranch;
    private javax.swing.JTextField jtfCompanyBranchCode;
    private javax.swing.JFormattedTextField jtfDbmsCharges;
    private javax.swing.JFormattedTextField jtfDbmsFinishedGood;
    private javax.swing.JFormattedTextField jtfDbmsFormula;
    private javax.swing.JFormattedTextField jtfDbmsProductionOrder;
    private javax.swing.JFormattedTextField jtfDbmsQuantity;
    private javax.swing.JFormattedTextField jtfDbmsType;
    private javax.swing.JFormattedTextField jtfDbmsUnit;
    private javax.swing.JTextField jtfWarehouse;
    private javax.swing.JTextField jtfWarehouseCode;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        moEntriesPane.createTable(null);
        moEntriesPane.clearTableRows();

        mvDbmsProductionOrderChargesEntry.clear();

        jckIsDeleted.setEnabled(false);
    }

    @Override
    public void formRefreshCatalogues() {

    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        String sMsg = "";
        SFormValidation validation = new SFormValidation();
        // SClientInterface client, int year, int[] warehouseKey, int[] iogKey, final int[] referenceKey, int segregationType
        STrnStockValidator validator = new STrnStockValidator(miClient, moProductionOrder.getPkYearId(), null , null, SLibConstants.UNDEFINED, null, SLibConstants.UNDEFINED);

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        if (!validation.getIsError()) {
            try {
                sMsg = validator.validateStockLots(miClient,  moProductionOrderCharges.getDbmsProductionOrderChargeEntries());
                if (sMsg.length() > 0) {
                    validation.setMessage(sMsg);
                    validation.setComponent(((erp.lib.form.SFormField) mvFields.get(0)).getComponent());
                }
            }
            catch (Exception e) {
                SLibUtilities.renderException(this, e);
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        int i = 0;
        String sMove = "";

        SDataProductionOrderChargeEntryRow oProductionOrderChargesEntryRow = null;

        moProductionOrderCharges = (SDataProductionOrderCharge) registry;

        moFieldDbmsProductionOrder.setFieldValue(moProductionOrderCharges.getDbmsProductionOrder());
        moFieldDbmsFinishedGood.setFieldValue(moProductionOrderCharges.getDbmsFinishedGood());
        moFieldDbmsFormula.setFieldValue(moProductionOrderCharges.getDbmsBom());
        jtfDbmsUnit.setText(moProductionOrderCharges.getDbmsUnitSymbol());
        moFieldDbmsType.setFieldValue(moProductionOrderCharges.getDbmsProductionOrderType());
        moFieldDbmsQuantity.setFieldValue(moProductionOrderCharges.getDbmsQuantiy());
        moFieldDbmsCharge.setFieldValue(SLibUtilities.parseInt(moProductionOrderCharges.getNumber()));
        moFieldCompanyBranch.setFieldValue(moProductionOrder.getDbmsExplotionCompanyBranch());
        moFieldCompanyBranchCode.setFieldValue(moProductionOrder.getDbmsExplotionCompanyBranchCode());
        moFieldWarehouse.setFieldValue(moProductionOrder.getDbmsExplotionWarehouse());
        moFieldWarehouseCode.setFieldValue(moProductionOrder.getDbmsExplotionWarehouseCode());
        moFieldIsDeleted.setFieldValue(moProductionOrderCharges.getIsDeleted());

        for (i=0; i<moProductionOrderCharges.getDbmsProductionOrderChargeEntries().size(); i++) {

            // Check if is request charge entry:

            if (moProductionOrderCharges.getDbmsProductionOrderChargeEntries().get(i).getIsRequest()) {
                oProductionOrderChargesEntryRow = new SDataProductionOrderChargeEntryRow(moProductionOrderCharges.getDbmsProductionOrderChargeEntries().get(i), miClient.getSessionXXX().getParamsErp().getFkSortingItemTypeId());
                moEntriesPane.addTableRow(oProductionOrderChargesEntryRow);
            }
        }

        if (moEntriesPane.getTableGuiRowCount() > 0) {
            moEntriesPane.setTableRowSelection(0);
        }

        try {
            sMove = SDataUtilities.checkProductionOrderExternalRelations(miClient, moProductionOrder.getPkYearId(), moProductionOrder.getPkOrdId());
            if (sMove.length()>0) {
                jbOK.setEnabled(false);
            }
        }
        catch (Exception e) {
            System.out.println(e);
        }

        jckIsDeleted.setEnabled(true);
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        if (moProductionOrderCharges == null) {
            moProductionOrderCharges = new SDataProductionOrderCharge();
            moProductionOrderCharges.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
        }
        else {
            moProductionOrderCharges.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
        }

        moProductionOrderCharges.setIsDeleted(moFieldIsDeleted.getBoolean());

        moProductionOrderCharges.getDbmsProductionOrderChargeEntries().removeAllElements();
        for (int i = 0; i < moEntriesPane.getTableGuiRowCount(); i++) {
            moProductionOrderCharges.getDbmsProductionOrderChargeEntries().add((SDataProductionOrderChargeEntry) moEntriesPane.getTableRow(i).getData());
        }

        return moProductionOrderCharges;
    }

    @Override
    public void setValue(int type, Object value) {
        switch (type) {
            case 1:
                moProductionOrder = (SDataProductionOrder) value;

                // Validate if is enabled 'save' button:

                if (moProductionOrder.getFkOrdStatusId() < SDataConstantsSys.MFGS_ST_ORD_PROC) {
                    jbOK.setEnabled(true);
                }
                else {
                    jbOK.setEnabled(false);
                }

                break;
        }
    }

    @Override
    public Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOK) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbDelete) {
                actionDelete();
            }
            else if (button == jbViewLots) {
                actionViewLots();
            }
            else if (button == jbFkItemSubstituteId) {
                actionFkItemSubstituteIdAdd();
            }
        }
    }
}
