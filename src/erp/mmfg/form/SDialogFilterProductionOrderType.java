/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SDialogFilterProductionOrderType.java
 *
 * Created on 5/01/2010, 12:40:39 PM
 */

package erp.mmfg.form;

import java.awt.event.KeyEvent;
import java.util.Vector;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.lib.SLibConstants;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;

/**
 *
 * @author Sergio Flores
 */
public class SDialogFilterProductionOrderType extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private int mnProductionOrderType;
    private erp.lib.form.SFormField moFieldProductionOrderType;

    /** Creates new form SDialogFilterProductionOrderType */
    public SDialogFilterProductionOrderType(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jckSelectAll = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        jlProductionOrderType = new javax.swing.JLabel();
        jspProductionOrderType = new javax.swing.JScrollPane();
        jltProductionOrderType = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Tipos de orden de producción");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setPreferredSize(new java.awt.Dimension(392, 33));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jPanel1.add(jbCancel);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Opciones disponibles:"));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jckSelectAll.setText("Todos los tipos de orden de producción");
        jckSelectAll.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jckSelectAllItemStateChanged(evt);
            }
        });
        jPanel3.add(jckSelectAll);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlProductionOrderType.setText("Seleccionar tipo de orden de producción: ");
        jlProductionOrderType.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel4.add(jlProductionOrderType);

        jPanel3.add(jPanel4);

        jPanel2.add(jPanel3, java.awt.BorderLayout.NORTH);

        jltProductionOrderType.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jltProductionOrderType.setToolTipText(SDataConstantsSys.TXT_DOUBLE_CLICK);
        jltProductionOrderType.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jltProductionOrderTypeMouseClicked(evt);
            }
        });
        jspProductionOrderType.setViewportView(jltProductionOrderType);

        jPanel2.add(jspProductionOrderType, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-488)/2, (screenSize.height-334)/2, 488, 334);
    }// </editor-fold>//GEN-END:initComponents

    private void jckSelectAllItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jckSelectAllItemStateChanged
        if (!mbResetingForm) {
            itemStateChangedSelectAll();
        }
    }//GEN-LAST:event_jckSelectAllItemStateChanged

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void jltProductionOrderTypeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jltProductionOrderTypeMouseClicked
        if (jltProductionOrderType.isEnabled() && evt.getClickCount() == 2) {
            actionOk();
        }
    }//GEN-LAST:event_jltProductionOrderTypeMouseClicked

    private void initComponentsExtra() {
        moFieldProductionOrderType = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jltProductionOrderType, jlProductionOrderType);

        mvFields = new Vector<SFormField>();
        mvFields.add(moFieldProductionOrderType);

        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);

        SFormUtilities.createActionMap(rootPane, this, "actionOk", "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "actionCancel", "cancel", KeyEvent.VK_ESCAPE, SLibConstants.UNDEFINED);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;

            if (jltProductionOrderType.isEnabled()) {
                jltProductionOrderType.requestFocus();
            }
            else {
                jckSelectAll.requestFocus();
            }
        }
    }

    private void itemStateChangedSelectAll() {
        if (jckSelectAll.isSelected()) {
            jltProductionOrderType.setEnabled(false);
            moFieldProductionOrderType.resetField();
        }
        else {
            jltProductionOrderType.setEnabled(true);
        }
    }

    public void actionOk() {
        if (!jckSelectAll.isSelected() && jltProductionOrderType.getSelectedIndex() < 0) {
            jltProductionOrderType.requestFocus();
            miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_GUI_FIELD_EMPTY + "'" + jlProductionOrderType.getText() + "'.");
        }
        else {
            mnProductionOrderType = jckSelectAll.isSelected() ? SLibConstants.UNDEFINED : moFieldProductionOrderType.getKeyAsIntArray()[0];

            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    public void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbOk;
    private javax.swing.JCheckBox jckSelectAll;
    private javax.swing.JLabel jlProductionOrderType;
    private javax.swing.JList jltProductionOrderType;
    private javax.swing.JScrollPane jspProductionOrderType;
    // End of variables declaration//GEN-END:variables

    public void setProductionOrderType(int type) {
        mbResetingForm = true;

        mnProductionOrderType = type;
        jckSelectAll.setSelected(mnProductionOrderType == SLibConstants.UNDEFINED);
        moFieldProductionOrderType.setKey(mnProductionOrderType == SLibConstants.UNDEFINED ? null : new int[] { mnProductionOrderType });
        itemStateChangedSelectAll();

        mbResetingForm = false;
    }

    public int getProductionOrderType() {
        return mnProductionOrderType;
    }

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        mnProductionOrderType = 0;
    }

    @Override
    public void formRefreshCatalogues() {
        SFormUtilities.populateList(miClient, jltProductionOrderType, SDataConstants.MFGU_TP_ORD);
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
        }
    }
}
