/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mhrs.form;

import erp.SClient;
import erp.client.SClientInterface;
import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataReadDescriptions;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STableConstants;
import erp.lib.table.STablePaneGrid;
import erp.mbps.data.SDataBizPartner;
import erp.mfin.data.SDataAccount;
import erp.mfin.data.SDataCostCenter;
import erp.mfin.data.SDataRecord;
import erp.mfin.data.SDataRecordEntry;
import erp.mfin.data.SDataTax;
import erp.mfin.form.SDialogRecordPicker;
import erp.mhrs.data.SDataFormerPayroll;
import erp.mhrs.data.SDataFormerPayrollEmp;
import erp.mhrs.data.SDataFormerPayrollMove;
import erp.mhrs.data.SRowEmployee;
import erp.mitm.data.SDataItem;
import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import erp.mod.fin.db.SFinUtils;
import erp.mod.hrs.db.SDbAccountingPayroll;
import erp.mod.hrs.db.SDbAccountingPayrollEmployee;
import erp.mod.hrs.db.SDbPayroll;
import erp.mod.hrs.db.SHrsFinUtils;
import erp.mod.hrs.db.SHrsFormerConsts;
import erp.server.SServerConstants;
import erp.server.SServerRequest;
import erp.server.SServerResponse;
import java.awt.BorderLayout;
import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import sa.lib.SLibUtils;
import sa.lib.gui.SGuiConsts;
import sa.lib.srv.SSrvConsts;

/**
 *
 * @author Sergio Flores, Juan Barajas
 */
public class SDialogPayrollAccounting extends JDialog implements ActionListener {

    private int mnFormResult;
    private boolean mbFirstTime;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private java.text.SimpleDateFormat moDateFormat;

    private erp.client.SClientInterface miClient;
    private erp.lib.table.STablePane moTablePaneEmpAvailable;
    private erp.lib.table.STablePane moTablePaneEmpSelected;
    private int mnPayrollId;
    private java.lang.String msPayType;
    private java.lang.String msPayTypeAbbr;
    private erp.mfin.form.SDialogRecordPicker moDialogRecordPicker;
    private erp.mfin.data.SDataRecord moCurrentRecord;
    private erp.mhrs.data.SDataFormerPayroll moFormerPayroll;
    private java.util.Vector<java.lang.Object[]> mvRecords; // idx 0: record registry (SDataRecord); idx 1: selected employees (Vector<Integer>)
    
    private SDbPayroll moPayroll;
    private SDbAccountingPayroll moAccountingPayroll;

    /** Creates new form SDialogPayrollAccounting
     * @param client
     * @param payroll
     */
    public SDialogPayrollAccounting(SClientInterface client, SDbPayroll payroll) {
        super(client.getFrame(), true);
        miClient = client;
        moPayroll = payroll;
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpGrid = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jlPayroll = new javax.swing.JLabel();
        jtfPayrollPeriod = new javax.swing.JTextField();
        jtfPayrollNumber = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jlPayrollDates = new javax.swing.JLabel();
        jtfPayrollDates = new javax.swing.JTextField();
        jlPayrollNet = new javax.swing.JLabel();
        jtfPayrollNet = new javax.swing.JTextField();
        jtfPayrollNetCur = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jlPayrollNotes = new javax.swing.JLabel();
        jtfPayrollNotes = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jpAccountingRecord = new javax.swing.JPanel();
        jlRecord = new javax.swing.JLabel();
        jtfRecordDate = new javax.swing.JTextField();
        jtfRecordBkc = new javax.swing.JTextField();
        jtfRecordBranch = new javax.swing.JTextField();
        jtfRecordNumber = new javax.swing.JTextField();
        jbPickRecord = new javax.swing.JButton();
        jlDummy3 = new javax.swing.JLabel();
        jpPaymentType = new javax.swing.JPanel();
        jlDummy2 = new javax.swing.JLabel();
        jpEmployeesAvailable = new javax.swing.JPanel();
        jlTotalAvailables = new javax.swing.JLabel();
        jpEmployeesSelected = new javax.swing.JPanel();
        jlTotalSelected = new javax.swing.JLabel();
        jpControls = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jlDummy01 = new javax.swing.JLabel();
        jbAdd = new javax.swing.JButton();
        jbAddAll = new javax.swing.JButton();
        jbRemove = new javax.swing.JButton();
        jbRemoveAll = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Contabilización de nóminas");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpGrid.setLayout(new java.awt.BorderLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos de la nómina:"));
        jPanel1.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPayroll.setText("Nómina:");
        jlPayroll.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlPayroll);

        jtfPayrollPeriod.setEditable(false);
        jtfPayrollPeriod.setText("2001-01");
        jtfPayrollPeriod.setFocusable(false);
        jtfPayrollPeriod.setPreferredSize(new java.awt.Dimension(70, 23));
        jPanel3.add(jtfPayrollPeriod);

        jtfPayrollNumber.setEditable(false);
        jtfPayrollNumber.setText("QNA. 1");
        jtfPayrollNumber.setFocusable(false);
        jtfPayrollNumber.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel3.add(jtfPayrollNumber);

        jPanel1.add(jPanel3);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPayrollDates.setText("Período nómina:");
        jlPayrollDates.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlPayrollDates);

        jtfPayrollDates.setEditable(false);
        jtfPayrollDates.setText("01/01/2001 - 01/01/2001");
        jtfPayrollDates.setFocusable(false);
        jtfPayrollDates.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel5.add(jtfPayrollDates);

        jlPayrollNet.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlPayrollNet.setText("Alcance neto:");
        jlPayrollNet.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlPayrollNet);

        jtfPayrollNet.setEditable(false);
        jtfPayrollNet.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfPayrollNet.setText("9,999,999.99");
        jtfPayrollNet.setFocusable(false);
        jtfPayrollNet.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel5.add(jtfPayrollNet);

        jtfPayrollNetCur.setEditable(false);
        jtfPayrollNetCur.setText("MXN");
        jtfPayrollNetCur.setFocusable(false);
        jtfPayrollNetCur.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel5.add(jtfPayrollNetCur);

        jPanel1.add(jPanel5);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPayrollNotes.setText("Comentarios:");
        jlPayrollNotes.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlPayrollNotes);

        jtfPayrollNotes.setEditable(false);
        jtfPayrollNotes.setText("PAYROLL NOTES");
        jtfPayrollNotes.setFocusable(false);
        jtfPayrollNotes.setPreferredSize(new java.awt.Dimension(650, 23));
        jPanel6.add(jtfPayrollNotes);

        jPanel1.add(jPanel6);

        jpGrid.add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Detalles de la contabilización de la nómina:"));
        jPanel4.setLayout(new java.awt.BorderLayout(5, 5));

        jPanel8.setLayout(new java.awt.GridLayout(2, 0, 0, 5));

        jpAccountingRecord.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlRecord.setText("Póliza contable:");
        jlRecord.setPreferredSize(new java.awt.Dimension(100, 23));
        jpAccountingRecord.add(jlRecord);

        jtfRecordDate.setEditable(false);
        jtfRecordDate.setText("01/01/2000");
        jtfRecordDate.setToolTipText("Fecha de la póliza contable");
        jtfRecordDate.setFocusable(false);
        jtfRecordDate.setPreferredSize(new java.awt.Dimension(65, 23));
        jpAccountingRecord.add(jtfRecordDate);

        jtfRecordBkc.setEditable(false);
        jtfRecordBkc.setText("BKC");
        jtfRecordBkc.setToolTipText("Centro contable");
        jtfRecordBkc.setFocusable(false);
        jtfRecordBkc.setPreferredSize(new java.awt.Dimension(35, 23));
        jpAccountingRecord.add(jtfRecordBkc);

        jtfRecordBranch.setEditable(false);
        jtfRecordBranch.setText("BRA");
        jtfRecordBranch.setToolTipText("Sucursal de la empresa");
        jtfRecordBranch.setFocusable(false);
        jtfRecordBranch.setPreferredSize(new java.awt.Dimension(35, 23));
        jpAccountingRecord.add(jtfRecordBranch);

        jtfRecordNumber.setEditable(false);
        jtfRecordNumber.setText("TP-000001");
        jtfRecordNumber.setToolTipText("Número de póliza contable");
        jtfRecordNumber.setFocusable(false);
        jtfRecordNumber.setPreferredSize(new java.awt.Dimension(65, 23));
        jpAccountingRecord.add(jtfRecordNumber);

        jbPickRecord.setText("...");
        jbPickRecord.setToolTipText("Seleccionar póliza contable");
        jbPickRecord.setPreferredSize(new java.awt.Dimension(23, 23));
        jpAccountingRecord.add(jbPickRecord);

        jlDummy3.setPreferredSize(new java.awt.Dimension(122, 23));
        jpAccountingRecord.add(jlDummy3);

        jPanel8.add(jpAccountingRecord);

        jpPaymentType.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDummy2.setPreferredSize(new java.awt.Dimension(150, 23));
        jpPaymentType.add(jlDummy2);

        jPanel8.add(jpPaymentType);

        jPanel4.add(jPanel8, java.awt.BorderLayout.NORTH);

        jpEmployeesAvailable.setBorder(javax.swing.BorderFactory.createTitledBorder("Empleados disponibles:"));
        jpEmployeesAvailable.setPreferredSize(new java.awt.Dimension(350, 100));
        jpEmployeesAvailable.setLayout(new java.awt.BorderLayout());

        jlTotalAvailables.setText("n");
        jpEmployeesAvailable.add(jlTotalAvailables, java.awt.BorderLayout.SOUTH);

        jPanel4.add(jpEmployeesAvailable, java.awt.BorderLayout.LINE_START);

        jpEmployeesSelected.setBorder(javax.swing.BorderFactory.createTitledBorder("Empleados seleccionados:"));
        jpEmployeesSelected.setPreferredSize(new java.awt.Dimension(475, 100));
        jpEmployeesSelected.setLayout(new java.awt.BorderLayout());

        jlTotalSelected.setText("n");
        jpEmployeesSelected.add(jlTotalSelected, java.awt.BorderLayout.SOUTH);

        jPanel4.add(jpEmployeesSelected, java.awt.BorderLayout.LINE_END);

        jpControls.setLayout(new java.awt.BorderLayout());

        jPanel7.setLayout(new java.awt.GridLayout(5, 1, 0, 5));
        jPanel7.add(jlDummy01);

        jbAdd.setText(">");
        jbAdd.setToolTipText("Agregar");
        jbAdd.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel7.add(jbAdd);

        jbAddAll.setText(">>");
        jbAddAll.setToolTipText("Agregar todos");
        jbAddAll.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel7.add(jbAddAll);

        jbRemove.setText("<");
        jbRemove.setToolTipText("Remover");
        jbRemove.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel7.add(jbRemove);

        jbRemoveAll.setText("<<");
        jbRemoveAll.setToolTipText("Remover todos");
        jbRemoveAll.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel7.add(jbRemoveAll);

        jpControls.add(jPanel7, java.awt.BorderLayout.PAGE_START);

        jPanel4.add(jpControls, java.awt.BorderLayout.CENTER);

        jpGrid.add(jPanel4, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpGrid, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jbOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbOkActionPerformed(evt);
            }
        });
        jPanel2.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jbCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelActionPerformed(evt);
            }
        });
        jPanel2.add(jbCancel);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        setSize(new java.awt.Dimension(976, 638));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void jbOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbOkActionPerformed
        actionOk();
    }//GEN-LAST:event_jbOkActionPerformed

    private void jbCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelActionPerformed
        actionCancel();
    }//GEN-LAST:event_jbCancelActionPerformed

    private void computeTotals() {
        int countAvailables = 0;
        int countSelected = 0;
        
        for (int i = 0; i < moTablePaneEmpAvailable.getTableGuiRowCount(); i++) {
            countAvailables++;
        }
        for (int i = 0; i < moTablePaneEmpSelected.getTableGuiRowCount(); i++) {
            countSelected++;
        }
        
        jlTotalAvailables.setText(" " + countAvailables + " empleados disponibles.");
        jlTotalSelected.setText(" " + countSelected + " empleados seleccionados.");
    }
    
    private void initComponentsExtra() {
        int i = 0;
        STableColumnForm[] aoTableColumns = null;

        mvFields = new Vector<SFormField>();

        moTablePaneEmpAvailable = new STablePaneGrid(miClient);
        moTablePaneEmpAvailable.setDoubleClickAction(this, "actionAdd");
        jpEmployeesAvailable.add(moTablePaneEmpAvailable, BorderLayout.CENTER);

        moTablePaneEmpSelected = new STablePaneGrid(miClient);
        moTablePaneEmpSelected.setDoubleClickAction(this, "actionRemove");
        jpEmployeesSelected.add(moTablePaneEmpSelected, BorderLayout.CENTER);

        moDateFormat = new SimpleDateFormat("yyyyMMdd");
        moAccountingPayroll = new SDbAccountingPayroll();

        mnPayrollId = 0;
        msPayType = "";
        msPayTypeAbbr = "";
        moDialogRecordPicker = new SDialogRecordPicker(miClient, SDataConstants.FINX_REC_USER);
        moFormerPayroll = null;
        moCurrentRecord = null;
        mvRecords = new Vector<>();

        i = 0;
        aoTableColumns = new STableColumnForm[7];
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Empleado", 150);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_INTEGER, "Cve. empleado", STableConstants.WIDTH_NUM_SMALLINT);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Departamento", 100);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_INTEGER, "Cve. departamento", STableConstants.WIDTH_NUM_SMALLINT);
        aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Percepciones $", STableConstants.WIDTH_VALUE);
        aoTableColumns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererValue());
        aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Deducciones $", STableConstants.WIDTH_VALUE);
        aoTableColumns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererValue());
        aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Alcance neto $", STableConstants.WIDTH_VALUE);
        aoTableColumns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererValue());

        for (i = 0; i < aoTableColumns.length; i++) {
            moTablePaneEmpAvailable.addTableColumn(aoTableColumns[i]);
        }

        i = 0;
        aoTableColumns = new STableColumnForm[12];
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Empleado", 150);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_INTEGER, "Cve. empleado", STableConstants.WIDTH_NUM_SMALLINT);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Departamento", 100);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_INTEGER, "Cve. departamento", STableConstants.WIDTH_NUM_SMALLINT);
        aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Percepciones $", STableConstants.WIDTH_VALUE);
        aoTableColumns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererValue());
        aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Deducciones $", STableConstants.WIDTH_VALUE);
        aoTableColumns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererValue());
        aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Alcance neto $", STableConstants.WIDTH_VALUE);
        aoTableColumns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererValue());
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Período póliza", STableConstants.WIDTH_YEAR_PERIOD);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Centro contable", STableConstants.WIDTH_CODE_COB);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Sucursal empresa", STableConstants.WIDTH_CODE_COB);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Folio póliza", STableConstants.WIDTH_RECORD_NUM);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "Fecha póliza", STableConstants.WIDTH_DATE);

        for (i = 0; i < aoTableColumns.length; i++) {
            moTablePaneEmpSelected.addTableColumn(aoTableColumns[i]);
        }

        jbPickRecord.addActionListener(this);
        jbAdd.addActionListener(this);
        jbAddAll.addActionListener(this);
        jbRemove.addActionListener(this);
        jbRemoveAll.addActionListener(this);

        SFormUtilities.createActionMap(rootPane, this, "actionOk", "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "actionCancel", "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;

            if (miClient.getSessionXXX().getCurrentCompanyBranchId() == 0) {
                miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_GUI_SESSION_BRANCH);
                actionCancel();
            }
            else {
                try {
                    populatePayroll();
                    jbPickRecord.requestFocus();
                }
                catch (Exception e) {
                    SLibUtilities.renderException(this, e);
                }
            }
        }
    }

    @SuppressWarnings("unchecked")
    private void populatePayroll() {
        String sql = "";
        Statement statement = null;
        ResultSet resultSet = null;

        int per_year = 0;
        int per = 0;
        int num = 0;
        int fk_tp_pay = 0;
        int wrk_day = 0;
        int id_tp_pay_sht = 0;
        String dt_sta = "";
        String dt_end = "";
        String nts = "";
        boolean b_clo = false;

        int id_emp = 0;
        String bp = "";
        int id_dep = 0;
        String name = "";
        int code = 0;
        int id_bp = 0;
        double f_ear = 0;
        double f_ded = 0;
        SDataBizPartner bizPartner = null;

        // Display payroll:

        mnPayrollId = moPayroll.getPkPayrollId();

        jtfPayrollPeriod.setText(moPayroll.getPeriodYear() + "-" + SLibUtils.DecimalFormatCalendarMonth.format(moPayroll.getPeriod()));
        jtfPayrollNumber.setText((moPayroll.getFkPaymentTypeId() == SModSysConsts.HRSS_TP_PAY_WEE ? "SEM " : "QNA " ) + moPayroll.getNumber());
        jtfPayrollDates.setText(SLibUtils.DateFormatDate.format(moPayroll.getDateStart()) + " - " + SLibUtils.DateFormatDate.format(moPayroll.getDateEnd()));
        jtfPayrollNotes.setText(moPayroll.getNotes());
        jtfPayrollNet.setText(miClient.getSessionXXX().getFormatters().getDecimalsValueFormat().format(moPayroll.getAuxTotalNet()));

        jtfPayrollPeriod.setCaretPosition(0);
        jtfPayrollNumber.setCaretPosition(0);
        jtfPayrollDates.setCaretPosition(0);
        jtfPayrollNotes.setCaretPosition(0);
        jtfPayrollNet.setCaretPosition(0);

        try {
            statement = miClient.getSession().getStatement();

            sql = "SELECT per_year, per, num, fk_tp_pay, nts, dt_sta, dt_end, fk_tp_pay_sht, b_clo " +
                    "FROM hrs_pay " +
                    "WHERE id_pay = " + mnPayrollId + " ";

            resultSet = statement.executeQuery(sql);
            if (!resultSet.next()) {
                throw new Exception("No fue posible leer el registro de la nómina.");
            }
            else {
                // Prepare payroll registry:

                per_year = resultSet.getInt("per_year");
                per = resultSet.getInt("per");
                num = resultSet.getInt("num");
                fk_tp_pay = resultSet.getInt("fk_tp_pay");
                nts = SLibUtilities.textLeft(SLibUtilities.textTrim(resultSet.getString("nts")), 100);
                dt_sta = resultSet.getString("dt_sta");
                dt_end = resultSet.getString("dt_end");
                id_tp_pay_sht = resultSet.getInt("fk_tp_pay_sht");
                b_clo = resultSet.getBoolean("b_clo");

                switch (fk_tp_pay) {
                    case 1:
                        msPayType = SHrsFormerConsts.PAY_WEE;
                        msPayTypeAbbr = SHrsFormerConsts.PAY_WEE_ABB;
                        break;
                    case 2:
                        msPayType = SHrsFormerConsts.PAY_BIW;
                        msPayTypeAbbr = SHrsFormerConsts.PAY_BIW_ABB;
                        break;
                    case 3:
                        msPayType = SHrsFormerConsts.PAY_MON;
                        msPayTypeAbbr = SHrsFormerConsts.PAY_MON_ABB;
                        break;
                    default:
                }

                moFormerPayroll = new SDataFormerPayroll();
                moFormerPayroll.setPkPayrollId(mnPayrollId);
                moFormerPayroll.setYear(per_year);
                moFormerPayroll.setPeriod(per);
                moFormerPayroll.setNumber(num);
                moFormerPayroll.setType(msPayType);
                moFormerPayroll.setNote(nts);
                moFormerPayroll.setDateBegin(moDateFormat.parse(dt_sta));
                moFormerPayroll.setDateEnd(moDateFormat.parse(dt_end));
                moFormerPayroll.setDatePayment(moDateFormat.parse(dt_end));
                moFormerPayroll.setDebit_r(0);
                moFormerPayroll.setCredit_r(0);
                moFormerPayroll.setIsRegular(id_tp_pay_sht  == SModSysConsts.HRSS_TP_PAY_SHT_NOR);
                moFormerPayroll.setIsClosed(b_clo);
                moFormerPayroll.setIsDeleted(false);
                moFormerPayroll.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
                moFormerPayroll.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
                moFormerPayroll.setFkUserDeleteId(miClient.getSession().getUser().getPkUserId());

                // Display payroll data:

                sql = "SELECT bp.bp, bp.id_bp, emp.id_emp, d.id_dep, d.name, d.code, " +
                        "(SELECT COALESCE(SUM(rcp_ear.amt_r), 0) " +
                        "FROM hrs_pay_rcp AS r " +
                        "INNER JOIN hrs_pay_rcp_ear AS rcp_ear ON rcp_ear.id_pay = r.id_pay AND rcp_ear.id_emp = r.id_emp " +
                        "WHERE r.id_pay = p.id_pay AND r.b_del = 0 AND rcp_ear.b_del = 0 AND rcp_ear.id_emp = rcp.id_emp) AS f_ear, " +
                        "(SELECT COALESCE(SUM(rcp_ded.amt_r), 0) " +
                        "FROM hrs_pay_rcp AS r " +
                        "INNER JOIN hrs_pay_rcp_ded AS rcp_ded ON rcp_ded.id_pay = r.id_pay AND rcp_ded.id_emp = r.id_emp " +
                        "WHERE r.id_pay = p.id_pay AND r.b_del = 0 AND rcp_ded.b_del = 0 AND rcp_ded.id_emp = rcp.id_emp) AS f_ded, " +
                        //"SUM(rcp.ear_r) AS f_ear, SUM(rcp.ded_r) AS f_ded, " +
                        "rcp.wage, rcp.pay_day_r, rcp.sal_ssc, rcp.wrk_day, rcp.day_wrk, rcp.day_pad, " +
                        "st.name, et.code AS tp_emp, ec.code AS tp_wrk " +
                        "FROM hrs_pay AS p " +
                        "INNER JOIN hrs_pay_rcp AS rcp ON rcp.id_pay = p.id_pay " +
                        "INNER JOIN erp.hrsu_emp AS emp ON emp.id_emp = rcp.id_emp " +
                        "INNER JOIN erp.bpsu_bp AS bp ON bp.id_bp = emp.id_emp " +
                        "INNER JOIN erp.hrsu_dep AS d ON d.id_dep = rcp.fk_dep " +
                        "INNER JOIN erp.hrss_tp_sal AS st ON st.id_tp_sal = rcp.fk_tp_sal " +
                        "INNER JOIN erp.hrsu_tp_emp AS et ON et.id_tp_emp = rcp.fk_tp_emp " +
                        "INNER JOIN erp.hrsu_tp_wrk AS ec ON rcp.fk_tp_wrk = ec.id_tp_wrk " +
                        "WHERE rcp.b_del = 0 AND p.id_pay = " + mnPayrollId + " " +
                        "GROUP BY bp.bp, bp.id_bp, emp.id_emp, d.id_dep, d.name, d.code, rcp.wage, rcp.pay_day_r, rcp.sal_ssc, rcp.wrk_day, rcp.day_wrk, rcp.day_pad, st.name, et.code, ec.code " +
                        "ORDER BY bp.bp, bp.id_bp, emp.id_emp, d.id_dep, d.name, d.code, rcp.wage, rcp.pay_day_r, rcp.sal_ssc, rcp.wrk_day, rcp.day_wrk, rcp.day_pad, st.name, et.code, ec.code ";

                resultSet = statement.executeQuery(sql);
                while (resultSet.next()) {
                    SRowEmployee row = new SRowEmployee();

                    id_emp = resultSet.getInt("id_emp");
                    bp = SLibUtilities.textLeft(SLibUtilities.textTrim(resultSet.getString("bp")), 155);
                    id_dep = resultSet.getInt("id_dep");
                    name = SLibUtilities.textLeft(SLibUtilities.textTrim(resultSet.getString("name")), 50);
                    code = SLibUtilities.parseInt(resultSet.getString("code"));
                    f_ear = resultSet.getDouble("f_ear");
                    f_ded = resultSet.getDouble("f_ded");

                    row.setPrimaryKey(new int[] { id_emp });
                    row.getValues().add(bp);
                    row.getValues().add(id_emp);
                    row.getValues().add(name);
                    row.getValues().add(code);
                    row.getValues().add(f_ear);
                    row.getValues().add(f_ded);
                    row.getValues().add(f_ear - f_ded);

                    if (fk_tp_pay == 1) {
                        // Pay weekly:

                        row.setSalary((resultSet.getDouble("pay_day_r") * 365d) / 12d);
                    }
                    else {
                        // Pay biweekly or monthly:

                        row.setSalary(resultSet.getDouble("wage"));
                    }

                    wrk_day = resultSet.getInt("wrk_day");
                    row.setDaysWorked(resultSet.getInt("day_wrk"));
                    row.setDaysNotWorked(wrk_day - row.getDaysWorked());
                    row.setDaysPayed(resultSet.getInt("day_pad"));
                    row.setSalaryType(SLibUtilities.textLeft(SLibUtilities.textTrim(resultSet.getString("name")), 10));
                    row.setEmployeeType(SLibUtilities.textLeft(SLibUtilities.textTrim(resultSet.getString("tp_emp")), 10));
                    row.setEmployeeCategory(SLibUtilities.textLeft(SLibUtilities.textTrim(resultSet.getString("tp_wrk")), 10));

                    
                    // Validate business partner for current employee:

                    id_bp = resultSet.getInt("id_bp");

                    if (id_bp == 0) {
                        throw new Exception("No se ha especificado el ID del asociado de negocios del empleado '" + bp + " (" + id_emp + ")'.");
                    }
                    else {
                        bizPartner = (SDataBizPartner) SDataUtilities.readRegistry(miClient, SDataConstants.BPSU_BP, new int[] { id_bp }, SLibConstants.EXEC_MODE_VERBOSE);
                        if (bizPartner == null) {
                            throw new Exception("El asociado de negocios (ID = " + id_bp + ") del empleado '" + bp + " (" + id_emp + ")' tiene un inconveniente:\nEl registro no existe.");
                        }
                        else if (bizPartner.getIsDeleted()) {
                            throw new Exception("El asociado de negocios (ID = " + id_bp + ") del empleado '" + bp + " (" + id_emp + ")' tiene un inconveniente:\nEl registro está eliminado.");
                        }
                    }

                    row.setFkBizPartnerId(id_bp);

                    moTablePaneEmpAvailable.addTableRow(row);
                }

                moTablePaneEmpAvailable.renderTableRows();
                moTablePaneEmpAvailable.setTableRowSelection(0);
            }
            computeTotals();
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }
    }

    private boolean readRecord(Object key) {
        moCurrentRecord = (SDataRecord) SDataUtilities.readRegistry(miClient, SDataConstants.FIN_REC, key, SLibConstants.EXEC_MODE_VERBOSE);
        return true;
    }

    private void renderRecord() {
        if (moCurrentRecord == null) {
            jtfRecordDate.setText("");
            jtfRecordBranch.setText("");
            jtfRecordNumber.setText("");
        }
        else {
            jtfRecordDate.setText(miClient.getSessionXXX().getFormatters().getDateFormat().format(moCurrentRecord.getDate()));
            jtfRecordBkc.setText(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FIN_BKC, new int[] { moCurrentRecord.getPkBookkeepingCenterId() }, SLibConstants.DESCRIPTION_CODE));
            jtfRecordBranch.setText(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.BPSU_BPB, new int[] { moCurrentRecord.getFkCompanyBranchId() }, SLibConstants.DESCRIPTION_CODE));
            jtfRecordNumber.setText(moCurrentRecord.getPkRecordTypeId() + "-" + moCurrentRecord.getPkNumberId());
        }
    }

    @SuppressWarnings("unchecked")
    private void initPayrollRecords() {
        boolean add = false;
        Object[] recordKey = null;
        Vector<Integer> employees = null;
        SDataRecord record = null;
        SDataFormerPayrollEmp formerPayrollEmp = null;
        SRowEmployee row = null;

        mvRecords.clear();
        moFormerPayroll.getDbmsDataFormerPayrollEmp().clear();
        moFormerPayroll.getDbmsDataFormerPayrollMove().clear();
        
        moAccountingPayroll.setPkPayrollId(mnPayrollId);

        for (int i = 0; i < moTablePaneEmpSelected.getTableGuiRowCount(); i++) {
            add = true;
            row = (SRowEmployee) moTablePaneEmpSelected.getTableRow(i);
            recordKey = (Object[]) row.getData();

            for (Object[] records : mvRecords) {
                if (SLibUtilities.compareKeys(((SDataRecord) records[0]).getPrimaryKey(), recordKey)) {
                    add = false;
                    employees = (Vector<Integer>) records[1];
                }
            }

            if (add) {
                record = (SDataRecord) SDataUtilities.readRegistry(miClient, SDataConstants.FIN_REC, recordKey, SLibConstants.EXEC_MODE_VERBOSE);
                for (SDataRecordEntry entry : record.getDbmsRecordEntries()) {
                    if (entry.getFkPayrollId_n() == mnPayrollId && !entry.getIsDeleted()) {
                        entry.setIsDeleted(true);
                        entry.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
                        entry.setFkUserDeleteId(miClient.getSession().getUser().getPkUserId());
                    }
                }

                employees = new Vector<Integer>();
                employees.add(((int[]) row.getPrimaryKey())[0]);

                mvRecords.add(new Object[] { record, employees });
            }
            else {
                employees.add(((int[]) row.getPrimaryKey())[0]);
            }

            formerPayrollEmp = new SDataFormerPayrollEmp();
            formerPayrollEmp.setPkPayrollId(mnPayrollId);
            formerPayrollEmp.setPkEmployeeId(((int[]) row.getPrimaryKey())[0]);
            formerPayrollEmp.setEmployee((String) row.getValues().get(0));
            formerPayrollEmp.setDepartment((String) row.getValues().get(2));
            formerPayrollEmp.setDepartmentKey("" + (Integer) row.getValues().get(3));
            formerPayrollEmp.setEmployeeCategory(row.getEmployeeCategory());
            formerPayrollEmp.setEmployeeType(row.getEmployeeType());
            formerPayrollEmp.setSalaryType(row.getSalaryType());
            formerPayrollEmp.setDebit((Double) row.getValues().get(4));
            formerPayrollEmp.setCredit((Double) row.getValues().get(5));
            formerPayrollEmp.setSalary(row.getSalary());
            formerPayrollEmp.setDaysNotWorked(row.getDaysNotWorked());
            formerPayrollEmp.setDaysWorked(row.getDaysWorked());
            formerPayrollEmp.setDaysPayed(row.getDaysPayed());
            formerPayrollEmp.setNumberSeries("NOM");
            formerPayrollEmp.setNumber(0);
            formerPayrollEmp.setIsDeleted(false);
            formerPayrollEmp.setFkBizPartnerId_n(row.getFkBizPartnerId());
            formerPayrollEmp.setFkPaymentSystemTypeId(SDataConstantsSys.TRNU_TP_PAY_SYS_NA);
            formerPayrollEmp.setFkYearId((Integer) recordKey[0]);
            formerPayrollEmp.setFkPeriodId((Integer) recordKey[1]);
            formerPayrollEmp.setFkBookkeepingCenterId((Integer) recordKey[2]);
            formerPayrollEmp.setFkRecordTypeId((String) recordKey[3]);
            formerPayrollEmp.setFkNumberId((Integer) recordKey[4]);

            moFormerPayroll.getDbmsDataFormerPayrollEmp().add(formerPayrollEmp);
            
            moAccountingPayroll.getChildAccountingPayrollEmployees().add(row.getAccountingPayrollEmployee());
        }
    }

    private java.lang.String composeEmployeeQuery(java.util.Vector<java.lang.Integer> employees) {
        String sql = "";

        for (Integer employee : employees) {
            sql += (sql.length() == 0 ? "" : ", ") + employee;
        }

        return sql;
    }

    private erp.mfin.data.SDataRecordEntry createRecordEntry(java.lang.Object recordPk, java.lang.String concept,
            double debit, double credit, java.lang.String accountId, java.lang.String costCenterId,
            int itemId, int bpId, int bpbId, int[] taxKey, int[] sysAccountTypeKey, int[] sysMoveTypeKey, int[] sysMoveTypeKeyXXX) {
        SDataRecordEntry entry = new SDataRecordEntry();

        entry.setPkYearId((Integer) ((Object[]) recordPk)[0]);
        entry.setPkPeriodId((Integer) ((Object[]) recordPk)[1]);
        entry.setPkBookkeepingCenterId((Integer) ((Object[]) recordPk)[2]);
        entry.setPkRecordTypeId((String) ((Object[]) recordPk)[3]);
        entry.setPkNumberId((Integer) ((Object[]) recordPk)[4]);
        entry.setPkEntryId(0);
        entry.setConcept(concept);
        entry.setReference("");
        entry.setIsReferenceTax(false);
        entry.setDebit(debit);
        entry.setCredit(credit);
        entry.setExchangeRate(1);
        entry.setExchangeRateSystem(1);
        entry.setDebitCy(debit);
        entry.setCreditCy(credit);
        entry.setUnits(0);
        entry.setSortingPosition(0);
        entry.setIsSystem(true);
        entry.setIsDeleted(false);
        entry.setFkAccountIdXXX(accountId);
        entry.setFkAccountingMoveTypeId(SDataConstantsSys.FINS_CLS_ACC_MOV_JOURNAL[0]);
        entry.setFkAccountingMoveClassId(SDataConstantsSys.FINS_CLS_ACC_MOV_JOURNAL[1]);
        entry.setFkAccountingMoveSubclassId(SDataConstantsSys.FINS_CLS_ACC_MOV_JOURNAL[2]);
        entry.setFkSystemMoveClassId(sysMoveTypeKey[0]);
        entry.setFkSystemMoveTypeId(sysMoveTypeKey[1]);
        entry.setFkSystemAccountClassId(sysAccountTypeKey[0]);
        entry.setFkSystemAccountTypeId(sysAccountTypeKey[1]);
        entry.setFkSystemMoveCategoryIdXXX(sysMoveTypeKeyXXX[0]);
        entry.setFkSystemMoveTypeIdXXX(sysMoveTypeKeyXXX[1]);
        entry.setFkCurrencyId(miClient.getSessionXXX().getParamsErp().getFkCurrencyId());
        entry.setFkCostCenterIdXXX_n(costCenterId);
        entry.setFkCheckWalletId_n(0);
        entry.setFkCheckId_n(0);
        entry.setFkBizPartnerId_nr(bpId);
        entry.setFkBizPartnerBranchId_n(bpbId);
        entry.setFkReferenceCategoryId_n(0);
        entry.setFkCompanyBranchId_n(0);
        entry.setFkEntityId_n(0);
        entry.setFkTaxBasicId_n(taxKey[0]);
        entry.setFkTaxId_n(taxKey[1]);
        entry.setFkYearId_n(0);
        entry.setFkDpsYearId_n(0);
        entry.setFkDpsDocId_n(0);
        entry.setFkDpsAdjustmentYearId_n(0);
        entry.setFkDpsAdjustmentDocId_n(0);
        entry.setFkDiogYearId_n(0);
        entry.setFkDiogDocId_n(0);
        entry.setFkPayrollFormerId_n(0);
        entry.setFkPayrollId_n(mnPayrollId);
        entry.setFkItemId_n(itemId);
        entry.setFkItemAuxId_n(0);
        entry.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
        entry.setFkUserEditId(miClient.getSession().getUser().getPkUserId());

        return entry;
    }

    @SuppressWarnings("unchecked")
    private void computePayroll() throws java.lang.Exception {
        int nType = 0;
        int nMoveId = 0;
        int nEntryId = 0;
        int nResult = 0;
        int[] anSysAccountTypeKey = null;
        int[] anSysMoveTypeKey = null;
        int[] anSysMoveTypeKeyXXX = null;
        String sSql = "";
        String sMsg = "";
        String sVal = "";
        String sType = "";
        String sEmployees = "";
        Statement oStatementCfg = null;
        ResultSet oResultSetCfg = null;
        Statement oStatementRec = null;
        ResultSet oResultSetRec = null;
        SServerRequest oRequest = null;
        SServerResponse oResponse = null;
        SDataRecord oRecord = null;
        SDataFormerPayrollMove oPayrollMove = null;
        SDataFormerPayroll oFormerPayroll = null;
        SDataAccount oAccount = null;
        SDataAccount oAccountMajor = null;
        SDataCostCenter oCostCenter = null;
        SDataBizPartner oBizPartner = null;
        SDataTax oTax = null;
        SDataItem oItems = null;

        double dDebit_r = 0;
        double dCredit_r = 0;

        int nF_id_tipo = 0;
        int nF_id_tipo_rec = 0;
        int nF_id_aux = 0;
        String nF_aux = "";
        int nF_id_ref = 0;
        String sF_ref = "";
        String sF_ref_cve = "";
        int fk_acc = 0;
        int fk_cc_n = 0;
        int fk_item_n = 0;
        int fk_bp_n = 0;
        int fk_tax_bas_n = 0;
        int fk_tax_tax_n = 0;
        String fk_acc_s = "";
        String fk_cc_s = "";
        String fk_item_s = "";
        double dF_mto = 0;
        String concept = "";
        double debit = 0;
        double credit = 0;

        oStatementCfg = miClient.getSession().getStatement().getConnection().createStatement();
        oStatementRec = miClient.getSession().getStatement().getConnection().createStatement();

        if (SHrsFinUtils.existsAccountingSettingsForPayrollAll(miClient.getSession(), mnPayrollId)) {
            initPayrollRecords();

            for (Object[] records : mvRecords) {
                oRecord = (SDataRecord) records[0];
                sEmployees = composeEmployeeQuery((Vector<Integer>) records[1]);
                nEntryId = oRecord.getDbmsRecordEntries().size();

                for (nType = 1; nType <= 2; nType++) {
                    if (nType == 1) {
                        /* Perception:
                         * Accountable link level:
                         * 1. Global
                         * 2. By departatment
                         * 3. By employee
                         */

                        sSql = "SELECT v.id_tp_acc AS f_id_tipo, ear.id_ear AS f_id_aux, rtrim(ear.name_abbr) AS f_aux, v.id_ref AS f_id_ref, '' AS f_ref, '' AS f_ref_cve, " +
                                    "v.fk_acc, v.fk_cc_n, v.fk_item_n, v.fk_bp_n, v.fk_tax_bas_n, v.fk_tax_tax_n " +
                                    "FROM hrs_pay AS p " +
                                    "INNER JOIN hrs_pay_rcp AS rcp ON rcp.id_pay = p.id_pay " +
                                    "INNER JOIN hrs_pay_rcp_ear AS rcp_ear ON rcp_ear.id_pay = rcp.id_pay AND rcp_ear.id_emp = rcp.id_emp " +
                                    "INNER JOIN hrs_ear AS ear ON ear.id_ear = rcp_ear.fk_ear " +
                                    "INNER JOIN hrs_acc_ear AS v ON v.id_ear = ear.id_ear " +
                                    "WHERE v.b_del = 0 AND p.b_del = 0 AND rcp.b_del = 0 AND rcp_ear.b_del = 0 AND v.id_tp_acc = " + SModSysConsts.HRSS_TP_ACC_GBL + " AND p.id_pay = " + mnPayrollId + " AND rcp.id_emp IN (" + sEmployees + ") " +
                                    "GROUP BY v.id_tp_acc, ear.id_ear, rtrim(ear.name_abbr), v.id_ref, v.fk_acc, v.fk_cc_n, v.fk_item_n, v.fk_bp_n, v.fk_tax_bas_n, v.fk_tax_tax_n " +

                                    "UNION " +

                                    "SELECT v.id_tp_acc AS f_id_tipo, ear.id_ear AS f_id_aux, rtrim(ear.name_abbr) AS f_aux, v.id_ref AS f_id_ref, rtrim(d.name) AS f_ref, rtrim(d.code) AS f_ref_cve, " +
                                    "v.fk_acc, v.fk_cc_n, v.fk_item_n, v.fk_bp_n, v.fk_tax_bas_n, v.fk_tax_tax_n " +
                                    "FROM hrs_pay AS p " +
                                    "INNER JOIN hrs_pay_rcp AS rcp ON rcp.id_pay = p.id_pay " +
                                    "INNER JOIN hrs_pay_rcp_ear AS rcp_ear ON rcp_ear.id_pay = rcp.id_pay AND rcp_ear.id_emp = rcp.id_emp " +
                                    "INNER JOIN hrs_ear AS ear ON ear.id_ear = rcp_ear.fk_ear " +
                                    "INNER JOIN hrs_acc_ear AS v ON v.id_ear = ear.id_ear " +
                                    "INNER JOIN erp.hrsu_dep AS d ON d.id_dep = rcp.fk_dep AND v.id_ref = d.id_dep " +
                                    "WHERE v.b_del = 0 AND p.b_del = 0 AND rcp.b_del = 0 AND rcp_ear.b_del = 0 AND v.id_tp_acc = " + SModSysConsts.HRSS_TP_ACC_DEP + " AND p.id_pay = " + mnPayrollId + " AND rcp.id_emp IN (" + sEmployees + ") " +
                                    "GROUP BY v.id_tp_acc, ear.id_ear, rtrim(ear.name_abbr), v.id_ref, rtrim(d.name), rtrim(d.code), v.fk_acc, v.fk_cc_n, v.fk_item_n, v.fk_bp_n, v.fk_tax_bas_n, v.fk_tax_tax_n " +

                                    "UNION " +

                                    "SELECT v.id_tp_acc AS f_id_tipo, ear.id_ear AS f_id_aux, rtrim(ear.name_abbr) AS f_aux, v.id_ref AS f_id_ref, rtrim(bp.bp) AS f_ref, '' AS f_ref_cve, " +
                                    "v.fk_acc, v.fk_cc_n, v.fk_item_n, v.fk_bp_n, v.fk_tax_bas_n, v.fk_tax_tax_n " +
                                    "FROM hrs_pay AS p " +
                                    "INNER JOIN hrs_pay_rcp AS rcp ON rcp.id_pay = p.id_pay " +
                                    "INNER JOIN hrs_pay_rcp_ear AS rcp_ear ON rcp_ear.id_pay = rcp.id_pay AND rcp_ear.id_emp = rcp.id_emp " +
                                    "INNER JOIN hrs_ear AS ear ON ear.id_ear = rcp_ear.fk_ear " +
                                    "INNER JOIN hrs_acc_ear AS v ON v.id_ear = ear.id_ear " +
                                    "INNER JOIN erp.hrsu_emp AS emp ON emp.id_emp = rcp.id_emp AND v.id_ref = emp.id_emp " +
                                    "INNER JOIN erp.bpsu_bp AS bp ON bp.id_bp = emp.id_emp " +
                                    "WHERE v.b_del = 0 AND p.b_del = 0 AND rcp.b_del = 0 AND rcp_ear.b_del = 0 AND v.id_tp_acc = " + SModSysConsts.HRSS_TP_ACC_EMP + " AND p.id_pay = " + mnPayrollId + " AND rcp.id_emp IN (" + sEmployees + ") " +
                                    "GROUP BY v.id_tp_acc, ear.id_ear, rtrim(ear.name_abbr), v.id_ref, rtrim(bp.bp), v.fk_acc, v.fk_cc_n, v.fk_item_n, v.fk_bp_n, v.fk_tax_bas_n, v.fk_tax_tax_n " +
                                    "ORDER BY f_id_tipo, f_id_aux, f_ref; ";
                        sType = "percepción";
                    }
                    else {
                        /* Deduction:
                         * Accountable link level:
                         * 1. Global
                         * 2. By departatment
                         * 3. By employee
                         */

                        sSql = "SELECT v.id_tp_acc AS f_id_tipo, ded.id_ded AS f_id_aux, rtrim(ded.name_abbr) AS f_aux, v.id_ref AS f_id_ref, '' AS f_ref, '' AS f_ref_cve, " +
                                    "v.fk_acc, v.fk_cc_n, v.fk_item_n, v.fk_bp_n, v.fk_tax_bas_n, v.fk_tax_tax_n " +
                                    "FROM hrs_pay AS p " +
                                    "INNER JOIN hrs_pay_rcp AS rcp ON rcp.id_pay = p.id_pay " +
                                    "INNER JOIN hrs_pay_rcp_ded AS rcp_ded ON rcp_ded.id_pay = rcp.id_pay AND rcp_ded.id_emp = rcp.id_emp " +
                                    "INNER JOIN hrs_ded AS ded ON ded.id_ded = rcp_ded.fk_ded " +
                                    "INNER JOIN hrs_acc_ded AS v ON v.id_ded = ded.id_ded " +
                                    "WHERE v.b_del = 0 AND p.b_del = 0 AND rcp.b_del = 0 AND rcp_ded.b_del = 0 AND v.id_tp_acc = " + SModSysConsts.HRSS_TP_ACC_GBL + " AND p.id_pay = " + mnPayrollId + " AND rcp.id_emp IN (" + sEmployees + ") " +
                                    "GROUP BY v.id_tp_acc, ded.id_ded, rtrim(ded.name_abbr), v.id_ref, v.fk_acc, v.fk_cc_n, v.fk_item_n, v.fk_bp_n, v.fk_tax_bas_n, v.fk_tax_tax_n " +

                                    "UNION " +

                                    "SELECT v.id_tp_acc AS f_id_tipo, ded.id_ded AS f_id_aux, rtrim(ded.name_abbr) AS f_aux, v.id_ref AS f_id_ref, rtrim(d.name) AS f_ref, rtrim(d.code) AS f_ref_cve, " +
                                    "v.fk_acc, v.fk_cc_n, v.fk_item_n, v.fk_bp_n, v.fk_tax_bas_n, v.fk_tax_tax_n " +
                                    "FROM hrs_pay AS p " +
                                    "INNER JOIN hrs_pay_rcp AS rcp ON rcp.id_pay = p.id_pay " +
                                    "INNER JOIN hrs_pay_rcp_ded AS rcp_ded ON rcp_ded.id_pay = rcp.id_pay AND rcp_ded.id_emp = rcp.id_emp " +
                                    "INNER JOIN hrs_ded AS ded ON ded.id_ded = rcp_ded.fk_ded " +
                                    "INNER JOIN hrs_acc_ded AS v ON v.id_ded = ded.id_ded " +
                                    "INNER JOIN erp.hrsu_dep AS d ON d.id_dep = rcp.fk_dep AND v.id_ref = d.id_dep " +
                                    "WHERE v.b_del = 0 AND p.b_del = 0 AND rcp.b_del = 0 AND rcp_ded.b_del = 0 AND v.id_tp_acc = " + SModSysConsts.HRSS_TP_ACC_DEP + " AND p.id_pay = " + mnPayrollId + " AND rcp.id_emp IN (" + sEmployees + ") " +
                                    "GROUP BY v.id_tp_acc, ded.id_ded, rtrim(ded.name_abbr), v.id_ref, rtrim(d.name), rtrim(d.code), v.fk_acc, v.fk_cc_n, v.fk_item_n, v.fk_bp_n, v.fk_tax_bas_n, v.fk_tax_tax_n " +

                                    "UNION " +

                                    "SELECT v.id_tp_acc AS f_id_tipo, ded.id_ded AS f_id_aux, rtrim(ded.name_abbr) AS f_aux, v.id_ref AS f_id_ref, rtrim(bp.bp) AS f_ref, '' AS f_ref_cve, " +
                                    "v.fk_acc, v.fk_cc_n, v.fk_item_n, v.fk_bp_n, v.fk_tax_bas_n, v.fk_tax_tax_n " +
                                    "FROM hrs_pay AS p " +
                                    "INNER JOIN hrs_pay_rcp AS rcp ON rcp.id_pay = p.id_pay " +
                                    "INNER JOIN hrs_pay_rcp_ded AS rcp_ded ON rcp_ded.id_pay = rcp.id_pay AND rcp_ded.id_emp = rcp.id_emp " +
                                    "INNER JOIN hrs_ded AS ded ON ded.id_ded = rcp_ded.fk_ded " +
                                    "INNER JOIN hrs_acc_ded AS v ON v.id_ded = ded.id_ded " +
                                    "INNER JOIN erp.hrsu_emp AS emp ON emp.id_emp = rcp.id_emp AND v.id_ref = emp.id_emp " +
                                    "INNER JOIN erp.bpsu_bp AS bp ON bp.id_bp = emp.id_emp " +
                                    "WHERE v.b_del = 0 AND p.b_del = 0 AND rcp.b_del = 0 AND rcp_ded.b_del = 0 AND v.id_tp_acc = " + SModSysConsts.HRSS_TP_ACC_EMP + " AND p.id_pay = " + mnPayrollId + " AND rcp.id_emp IN (" + sEmployees + ") " +
                                    "GROUP BY v.id_tp_acc, ded.id_ded, rtrim(ded.name_abbr), v.id_ref, rtrim(bp.bp), v.fk_acc, v.fk_cc_n, v.fk_item_n, v.fk_bp_n, v.fk_tax_bas_n, v.fk_tax_tax_n " +
                                    "ORDER BY f_id_tipo, f_id_aux, f_ref ";
                        sType = "deducción";
                    }

                    oResultSetCfg = oStatementCfg.executeQuery(sSql);
                    while (oResultSetCfg.next()) {
                        nF_id_tipo = oResultSetCfg.getInt("f_id_tipo");
                        nF_id_aux = oResultSetCfg.getInt("f_id_aux");
                        nF_aux = oResultSetCfg.getString("f_aux");
                        nF_id_ref = oResultSetCfg.getInt("f_id_ref");
                        sF_ref = oResultSetCfg.getString("f_ref");
                        sF_ref_cve = oResultSetCfg.getString("f_ref_cve");
                        fk_acc = oResultSetCfg.getInt("fk_acc");
                        fk_cc_n = oResultSetCfg.getInt("fk_cc_n");
                        fk_item_n = oResultSetCfg.getInt("fk_item_n");
                        fk_bp_n = oResultSetCfg.getInt("fk_bp_n");
                        fk_tax_bas_n = oResultSetCfg.getInt("fk_tax_bas_n");
                        fk_tax_tax_n = oResultSetCfg.getInt("fk_tax_tax_n");

                        oAccount = null;
                        oCostCenter = null;
                        oBizPartner = null;
                        oTax = null;
                        oItems = null;

                        switch (nF_id_tipo) {
                            case SModSysConsts.HRSS_TP_ACC_GBL: // global link
                                sMsg = "La configuración de contabilización para la " + sType + " No. " + nF_id_aux + " '" + nF_aux + "'\ndel campo ";
                                break;
                            case SModSysConsts.HRSS_TP_ACC_DEP: // link by department
                                sMsg = "La configuración de contabilización para la " + sType + " No. " + nF_id_aux + " '" + nF_aux + "',\ndel departamento No. " + sF_ref_cve + " '" + sF_ref + "' (" + nF_id_ref + "), del campo ";
                                break;
                            case SModSysConsts.HRSS_TP_ACC_EMP: // link by employee
                                sMsg = "La configuración de contabilización para la " + sType + " No. " + nF_id_aux + " '" + nF_aux + "',\ndel empleado No. " + nF_id_ref + " '" + sF_ref + "', del campo ";
                                break;
                            default:
                        }

                        // Validate account:

                        if (fk_acc == SLibConstants.UNDEFINED) {
                            throw new Exception(sMsg + "'cuenta contable' no ha sido especificada aún.");
                        }
                        else {
                            fk_acc_s = SFinUtils.getAccountFormerIdXXX(miClient.getSession(), fk_acc);
                            oAccount = (SDataAccount) SDataUtilities.readRegistry(miClient, SDataConstants.FIN_ACC, new Object[] { fk_acc_s }, SLibConstants.EXEC_MODE_VERBOSE);
                            sVal = SDataUtilities.validateAccount(miClient, oAccount, null);
                            if (sVal.length() != 0) {
                                throw new Exception(sMsg + "'cuenta contable' ('" + fk_acc_s + "') tiene un inconveniente:\n" + sVal);
                            }

                            oAccountMajor = (SDataAccount) SDataUtilities.readRegistry(miClient, SDataConstants.FIN_ACC, new Object[] { oAccount.getDbmsPkAccountMajorId() }, SLibConstants.EXEC_MODE_VERBOSE);

                            if (!SHrsFinUtils.validateAccount(miClient.getSession(), fk_acc, fk_cc_n, fk_bp_n, fk_item_n, fk_tax_bas_n, fk_tax_tax_n)) {
                            }
                        }

                        // Validate cost center:

                        if (fk_cc_n != SLibConstants.UNDEFINED) {
                            fk_cc_s = SFinUtils.getCostCenterFormerIdXXX(miClient.getSession(), fk_cc_n);
                            oCostCenter = (SDataCostCenter) SDataUtilities.readRegistry(miClient, SDataConstants.FIN_CC, new Object[] { fk_cc_s }, SLibConstants.EXEC_MODE_VERBOSE);
                            sVal = SDataUtilities.validateCostCenter(miClient, oCostCenter, null);
                            if (sVal.length() != 0) {
                                throw new Exception(sMsg + "'centro de costo' ('" + fk_cc_s + "') tiene un inconveniente:\n" + sVal);
                            }
                        }
                        else if (oAccount.getDbmsIsRequiredCostCenter()) {
                            throw new Exception(sMsg + "'centro de costo' ('" + fk_cc_s + "') tiene un inconveniente:\nLa cuenta contable correspondiente '" + fk_acc_s + "' requiere de un centro de costo.");
                        }

                        // Validate item:

                        if (fk_item_n > SLibConstants.UNDEFINED) {
                            oItems = (SDataItem) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_ITEM,  new int[] { fk_item_n }, SLibConstants.EXEC_MODE_VERBOSE);
                            if (oItems == null) {
                                throw new Exception(sMsg + "'ítem' ('" + fk_item_n + "') tiene un inconveniente:\nEl registro no existe.");
                            }
                            /*
                            else if (oItems != 1) {
                                throw new Exception(sMsg + "'ítem' ('" + fk_item_n + "') tiene un inconveniente:\nSe encontraron " + oItems.length + " registros.");
                            }
                            */
                            else if (oItems.getIsDeleted()) {
                                throw new Exception(sMsg + "'ítem' ('" + fk_item_n + "') tiene un inconveniente:\nEl registro está eliminado.");
                            }
                        }

                        // Validate business partner:

                        if (fk_bp_n == 0) {
                            if (nF_id_tipo == SModSysConsts.HRSS_TP_ACC_EMP) {
                                throw new Exception(sMsg + "'asociado de negocios' ('" + fk_bp_n + "') tiene un inconveniente:\nNo se ha especificado el asociado de negocios.");
                            }
                        }
                        else {
                            oBizPartner = (SDataBizPartner) SDataUtilities.readRegistry(miClient, SDataConstants.BPSU_BP, new int[] { fk_bp_n }, SLibConstants.EXEC_MODE_VERBOSE);
                            if (oBizPartner == null) {
                                throw new Exception(sMsg + "'asociado de negocios' ('" + fk_bp_n + "') tiene un inconveniente:\nEl registro no existe.");
                            }
                            else if (oBizPartner.getIsDeleted()) {
                                throw new Exception(sMsg + "'asociado de negocios' ('" + fk_bp_n + "') tiene un inconveniente:\nEl registro está eliminado.");
                            }
                        }

                        // Validate tax:

                        if (fk_tax_bas_n != 0 && fk_tax_tax_n != 0) {
                            oTax = (SDataTax) SDataUtilities.readRegistry(miClient, SDataConstants.FINU_TAX, new int[] { fk_tax_bas_n, fk_tax_tax_n }, SLibConstants.EXEC_MODE_VERBOSE);
                            if (oTax == null) {
                                throw new Exception(sMsg + "'impuesto' ('" + fk_tax_bas_n + ", " + fk_tax_tax_n + "') tiene un inconveniente:\nEl registro no existe.");
                            }
                            else if (oTax.getIsDeleted()) {
                                throw new Exception(sMsg + "'impuesto' ('" + fk_tax_bas_n + ", " + fk_tax_tax_n + "') tiene un inconveniente:\nEl registro está eliminado.");
                            }
                        }

                        if (nType == 1) {
                            /* Perception:
                             * Accountable link level:
                             * 1. Global
                             * 2. By departatment
                             * 3. By employee
                             */

                            sSql = "SELECT ear.fk_tp_acc_rec AS f_id_tipo_rec, ear.id_ear, ear.name_abbr, 0 AS f_id_ref, '' AS f_ref, '' AS f_ref_cve, SUM(rcp_ear.amt_r) AS f_mto " +
                                        "FROM hrs_pay AS p " +
                                        "INNER JOIN hrs_pay_rcp AS rcp ON rcp.id_pay = p.id_pay " +
                                        "INNER JOIN hrs_pay_rcp_ear AS rcp_ear ON rcp_ear.id_pay = rcp.id_pay AND rcp_ear.id_emp = rcp.id_emp " +
                                        "INNER JOIN hrs_ear AS ear ON ear.id_ear = rcp_ear.fk_ear " +
                                        "WHERE p.b_del = 0 AND rcp.b_del = 0 AND rcp_ear.b_del = 0 AND ear.fk_tp_acc_rec = " + SModSysConsts.HRSS_TP_ACC_GBL + " AND p.id_pay = " + mnPayrollId + " " +
                                        "AND ear.id_ear = " + nF_id_aux + " AND rcp.id_emp IN (" + sEmployees + ") " +
                                        "GROUP BY ear.id_ear, ear.name_abbr " +

                                        "UNION " +

                                        "SELECT ear.fk_tp_acc_rec AS f_id_tipo_rec, ear.id_ear, ear.name_abbr, d.id_dep AS f_id_ref, d.name AS f_ref, d.code AS f_ref_cve, SUM(rcp_ear.amt_r) AS f_mto " +
                                        "FROM hrs_pay AS p " +
                                        "INNER JOIN hrs_pay_rcp AS rcp ON rcp.id_pay = p.id_pay " +
                                        "INNER JOIN hrs_pay_rcp_ear AS rcp_ear ON rcp_ear.id_pay = rcp.id_pay AND rcp_ear.id_emp = rcp.id_emp " +
                                        "INNER JOIN hrs_ear AS ear ON ear.id_ear = rcp_ear.fk_ear " +
                                        "INNER JOIN erp.hrsu_dep AS d ON d.id_dep = rcp.fk_dep " +
                                        "WHERE p.b_del = 0 AND rcp.b_del = 0 AND rcp_ear.b_del = 0 AND ear.fk_tp_acc_rec = " + SModSysConsts.HRSS_TP_ACC_DEP + " AND p.id_pay = " + mnPayrollId + " " +
                                        "AND ear.id_ear = " + nF_id_aux + " AND rcp.id_emp IN (" + sEmployees + ")" + (nF_id_tipo == SModSysConsts.HRSS_TP_ACC_DEP ? (" AND d.id_dep = " + nF_id_ref + " ") : "") + 
                                        "GROUP BY ear.id_ear, ear.name_abbr, d.id_dep, d.name, d.code " +

                                        "UNION " +

                                        "SELECT ear.fk_tp_acc_rec AS f_id_tipo_rec, ear.id_ear, ear.name_abbr, bp.id_bp AS f_id_ref, bp.bp AS f_ref, '' AS f_ref_cve, SUM(rcp_ear.amt_r) AS f_mto " +
                                        "FROM hrs_pay AS p " +
                                        "INNER JOIN hrs_pay_rcp AS rcp ON rcp.id_pay = p.id_pay " +
                                        "INNER JOIN hrs_pay_rcp_ear AS rcp_ear ON rcp_ear.id_pay = rcp.id_pay AND rcp_ear.id_emp = rcp.id_emp " +
                                        "INNER JOIN hrs_ear AS ear ON ear.id_ear = rcp_ear.fk_ear " +
                                        "INNER JOIN erp.hrsu_emp AS emp ON emp.id_emp = rcp.id_emp " +
                                        "INNER JOIN erp.bpsu_bp AS bp ON bp.id_bp = emp.id_emp " +
                                        "INNER JOIN erp.hrsu_dep AS d ON d.id_dep = rcp.fk_dep " +
                                        "WHERE p.b_del = 0 AND rcp.b_del = 0 AND rcp_ear.b_del = 0 AND ear.fk_tp_acc_rec = " + SModSysConsts.HRSS_TP_ACC_EMP + " AND p.id_pay = " + mnPayrollId + " " +
                                        "AND ear.id_ear = " + nF_id_aux + " AND rcp.id_emp IN (" + sEmployees + ") " + ((nF_id_tipo == SModSysConsts.HRSS_TP_ACC_EMP) ? ("AND emp.id_emp = " + nF_id_ref + " ") : (nF_id_tipo == SModSysConsts.HRSS_TP_ACC_DEP) ? ("AND d.id_dep = " + nF_id_ref + " ") : "") + //AND emp.id_emp IN (" + sEmployees + ") " +
                                        "GROUP BY ear.id_ear, ear.name_abbr, bp.id_bp, bp.bp " +
                                        "ORDER BY f_id_tipo_rec, id_ear, f_ref; ";
                            sType = "percepción";
                        }
                        else {
                            /* Deduction:
                             * Accountable link level:
                             * 1. Global
                             * 2. By departatment
                             * 3. By employee
                             */

                            sSql = "SELECT ded.fk_tp_acc_rec AS f_id_tipo_rec, ded.id_ded, ded.name_abbr, 0 AS f_id_ref, '' AS f_ref, '' AS f_ref_cve, SUM(rcp_ded.amt_r) AS f_mto " +
                                        "FROM hrs_pay AS p " +
                                        "INNER JOIN hrs_pay_rcp AS rcp ON rcp.id_pay = p.id_pay " +
                                        "INNER JOIN hrs_pay_rcp_ded AS rcp_ded ON rcp_ded.id_pay = rcp.id_pay AND rcp_ded.id_emp = rcp.id_emp " +
                                        "INNER JOIN hrs_ded AS ded ON ded.id_ded = rcp_ded.fk_ded " +
                                        "WHERE p.b_del = 0 AND rcp.b_del = 0 AND rcp_ded.b_del = 0 AND ded.fk_tp_acc_rec = " + SModSysConsts.HRSS_TP_ACC_GBL + " AND p.id_pay = " + mnPayrollId + " " +
                                        "AND ded.id_ded = " + nF_id_aux + " AND rcp.id_emp IN (" + sEmployees + ") " +
                                        "GROUP BY ded.id_ded, ded.name_abbr " +

                                        "UNION " +

                                        "SELECT ded.fk_tp_acc_rec AS f_id_tipo_rec, ded.id_ded, ded.name_abbr, d.id_dep AS f_id_ref, d.name AS f_ref, d.code AS f_ref_cve, SUM(rcp_ded.amt_r) AS f_mto " +
                                        "FROM hrs_pay AS p " +
                                        "INNER JOIN hrs_pay_rcp AS rcp ON rcp.id_pay = p.id_pay " +
                                        "INNER JOIN hrs_pay_rcp_ded AS rcp_ded ON rcp_ded.id_pay = rcp.id_pay AND rcp_ded.id_emp = rcp.id_emp " +
                                        "INNER JOIN hrs_ded AS ded ON ded.id_ded = rcp_ded.fk_ded " +
                                        "INNER JOIN erp.hrsu_dep AS d ON d.id_dep = rcp.fk_dep " +
                                        "WHERE p.b_del = 0 AND rcp.b_del = 0 AND rcp_ded.b_del = 0 AND ded.fk_tp_acc_rec = " + SModSysConsts.HRSS_TP_ACC_DEP + " AND p.id_pay = " + mnPayrollId + " " +
                                        "AND ded.id_ded = " + nF_id_aux + " AND rcp.id_emp IN (" + sEmployees + ")" + (nF_id_tipo == SModSysConsts.HRSS_TP_ACC_DEP ? (" AND d.id_dep = " + nF_id_ref + " ") : "") +
                                        "GROUP BY ded.id_ded, ded.name_abbr, d.id_dep, d.name, d.code " +

                                        "UNION " +

                                        "SELECT ded.fk_tp_acc_rec AS f_id_tipo_rec, ded.id_ded, ded.name_abbr, bp.id_bp AS f_id_ref, bp.bp AS f_ref, emp.num AS f_ref_cve, SUM(rcp_ded.amt_r) AS f_mto " +
                                        "FROM hrs_pay AS p " +
                                        "INNER JOIN hrs_pay_rcp AS rcp ON rcp.id_pay = p.id_pay " +
                                        "INNER JOIN hrs_pay_rcp_ded AS rcp_ded ON rcp_ded.id_pay = rcp.id_pay AND rcp_ded.id_emp = rcp.id_emp " +
                                        "INNER JOIN hrs_ded AS ded ON ded.id_ded = rcp_ded.fk_ded " +
                                        "INNER JOIN erp.hrsu_emp AS emp ON emp.id_emp = rcp.id_emp " +
                                        "INNER JOIN erp.bpsu_bp AS bp ON bp.id_bp = emp.id_emp " +
                                        "INNER JOIN erp.hrsu_dep AS d ON d.id_dep = rcp.fk_dep " +
                                        "WHERE p.b_del = 0 AND rcp.b_del = 0 AND rcp_ded.b_del = 0 AND ded.fk_tp_acc_rec = " + SModSysConsts.HRSS_TP_ACC_EMP + " AND p.id_pay = " + mnPayrollId + " " +
                                        "AND ded.id_ded = " + nF_id_aux + " AND rcp.id_emp IN (" + sEmployees + ") " + ((nF_id_tipo == SModSysConsts.HRSS_TP_ACC_EMP) ? ("AND emp.id_emp = " + nF_id_ref + " ") : (nF_id_tipo == SModSysConsts.HRSS_TP_ACC_DEP) ? ("AND d.id_dep = " + nF_id_ref + " ") : "") + //AND emp.id_emp IN (" + sEmployees + ") " +
                                        "GROUP BY ded.id_ded, ded.name_abbr, bp.id_bp, bp.bp " +
                                        "ORDER BY f_id_tipo_rec, id_ded, f_ref; ";
                            sType = "deducción";
                        }

                        oResultSetRec = oStatementRec.executeQuery(sSql);
                        while (oResultSetRec.next()) {
                            nF_id_tipo_rec = oResultSetRec.getInt("f_id_tipo_rec");
                            nF_id_ref = oResultSetRec.getInt("f_id_ref");
                            sF_ref = oResultSetRec.getString("f_ref");
                            sF_ref_cve = oResultSetRec.getString("f_ref_cve");
                            dF_mto = oResultSetRec.getDouble("f_mto");

                            // Create record entry:

                            switch (nF_id_tipo_rec) {
                                case SModSysConsts.HRSS_TP_ACC_GBL: // global link
                                    concept = msPayTypeAbbr + ". " + moFormerPayroll.getNumber() + "; " + nF_aux;
                                    break;
                                case SModSysConsts.HRSS_TP_ACC_DEP: // link by department
                                    concept = msPayTypeAbbr + ". " + moFormerPayroll.getNumber() + "; " + nF_aux + "; " + sF_ref_cve + ". " + sF_ref;
                                    break;
                                case SModSysConsts.HRSS_TP_ACC_EMP: // link by employee
                                    concept = msPayTypeAbbr + ". " + moFormerPayroll.getNumber() + "; " + nF_aux + "; " + sF_ref_cve + ". " + sF_ref;
                                    break;
                                default:
                            }

                            if (nType == 1) {
                                if (dF_mto >= 0d) {
                                    debit = dF_mto;
                                    credit = 0;
                                }
                                else {
                                    debit = 0;
                                    credit = -dF_mto;
                                }
                            }
                            else {
                                if (dF_mto >= 0d) {
                                    debit = 0;
                                    credit = dF_mto;
                                }
                                else {
                                    debit = -dF_mto;
                                    credit = 0;
                                }
                            }

                            dDebit_r += debit;
                            dCredit_r += credit;

                            switch (oAccountMajor.getFkAccountSystemTypeId()) {
                                case SDataConstantsSys.FINS_TP_ACC_SYS_SUP:
                                    anSysAccountTypeKey = SModSysConsts.FINS_TP_SYS_ACC_BPR_SUP_BAL;
                                    anSysMoveTypeKey = debit >= 0 ? SModSysConsts.FINS_TP_SYS_MOV_SUP_BAL_DEC_ADJ : SModSysConsts.FINS_TP_SYS_MOV_SUP_BAL_INC_ADJ;
                                    anSysMoveTypeKeyXXX = SDataConstantsSys.FINS_TP_SYS_MOV_BPS_SUP;
                                    break;
                                case SDataConstantsSys.FINS_TP_ACC_SYS_CUS:
                                    anSysAccountTypeKey = SModSysConsts.FINS_TP_SYS_ACC_BPR_CUS_BAL;
                                    anSysMoveTypeKey = debit >= 0 ? SModSysConsts.FINS_TP_SYS_MOV_CUS_BAL_INC_ADJ : SModSysConsts.FINS_TP_SYS_MOV_CUS_BAL_DEC_ADJ;
                                    anSysMoveTypeKeyXXX = SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CUS;
                                    break;
                                case SDataConstantsSys.FINS_TP_ACC_SYS_CDR:
                                    anSysAccountTypeKey = SModSysConsts.FINS_TP_SYS_ACC_BPR_CDR_BAL;
                                    anSysMoveTypeKey = debit >= 0 ? SModSysConsts.FINS_TP_SYS_MOV_CDR_BAL_DEC_ADJ : SModSysConsts.FINS_TP_SYS_MOV_CDR_BAL_INC_ADJ;
                                    anSysMoveTypeKeyXXX = SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CDR;
                                    break;
                                case SDataConstantsSys.FINS_TP_ACC_SYS_DBR:
                                    anSysAccountTypeKey = SModSysConsts.FINS_TP_SYS_ACC_BPR_DBR_BAL;
                                    anSysMoveTypeKey = debit >= 0 ? SModSysConsts.FINS_TP_SYS_MOV_DBR_BAL_INC_ADJ : SModSysConsts.FINS_TP_SYS_MOV_DBR_BAL_DEC_ADJ;
                                    anSysMoveTypeKeyXXX = SDataConstantsSys.FINS_TP_SYS_MOV_BPS_DBR;
                                    break;
                                default:
                                    anSysAccountTypeKey = SModSysConsts.FINS_TP_SYS_ACC_NA_NA;
                                    anSysMoveTypeKey = debit >= 0 ? SModSysConsts.FINS_TP_SYS_MOV_JOU_DBT : SModSysConsts.FINS_TP_SYS_MOV_JOU_CDT;
                                    anSysMoveTypeKeyXXX = SDataConstantsSys.FINS_TP_SYS_MOV_NA;
                            }

                            oRecord.getDbmsRecordEntries().add(createRecordEntry(oRecord.getPrimaryKey(), SLibUtilities.textLeft(concept, 100),
                                    debit, credit, fk_acc_s, fk_cc_s, fk_item_n,
                                    oBizPartner == null ? SLibConstants.UNDEFINED : oBizPartner.getPkBizPartnerId(),
                                    oBizPartner == null ? SLibConstants.UNDEFINED : oBizPartner.getDbmsBizPartnerBranches().get(0).getPkBizPartnerBranchId(),
                                    new int[] { fk_tax_bas_n, fk_tax_tax_n }, anSysAccountTypeKey, anSysMoveTypeKey, anSysMoveTypeKeyXXX));

                            // Create payroll move:

                            oPayrollMove = new SDataFormerPayrollMove();
                            oPayrollMove.setPkPayrollId(mnPayrollId);
                            oPayrollMove.setPkMoveId(++nMoveId);
                            oPayrollMove.setType(nType);
                            oPayrollMove.setTransactionId(nF_id_aux);
                            oPayrollMove.setTransaction(nF_aux);
                            oPayrollMove.setReferenceId(nF_id_ref);
                            oPayrollMove.setReference(sF_ref);
                            oPayrollMove.setReferenceKey(sF_ref_cve);
                            oPayrollMove.setAmount(dF_mto);
                            oPayrollMove.setFkYearId(oRecord.getPkYearId());
                            oPayrollMove.setFkPeriodId(oRecord.getPkPeriodId());
                            oPayrollMove.setFkBookkeepingCenterId(oRecord.getPkBookkeepingCenterId());
                            oPayrollMove.setFkRecordTypeId(oRecord.getPkRecordTypeId());
                            oPayrollMove.setFkNumberId(oRecord.getPkNumberId());
                            oPayrollMove.setFkEntryId(++nEntryId);

                            moFormerPayroll.getDbmsDataFormerPayrollMove().add(oPayrollMove);
                        } // end record
                    } // end configuration
                }

                moFormerPayroll.getAuxDataRecord().add(oRecord);
            }
        }
        
        moFormerPayroll.setDebit_r(dDebit_r);
        moFormerPayroll.setCredit_r(dCredit_r);

        // Validate that fully accounted payroll
        
        if (SLibUtilities.round((dDebit_r - dCredit_r), miClient.getSessionXXX().getParamsErp().getDecimalsValue()) != SLibUtilities.round(moPayroll.getAuxTotalNet(), miClient.getSessionXXX().getParamsErp().getDecimalsValue())) {
            throw new Exception("¡Hay una diferencia entre el alcance neto de la nómina (" + miClient.getSessionXXX().getFormatters().getDecimalsValueFormat().format(moPayroll.getAuxTotalNet()) +") y el monto neto de la afectación contable (" + miClient.getSessionXXX().getFormatters().getDecimalsValueFormat().format(dDebit_r - dCredit_r) +")!");
        }
        
        moAccountingPayroll.save(miClient.getSession());
        
        oRequest = new SServerRequest(SServerConstants.REQ_DB_ACTION_SAVE);
        oRequest.setPacket(moFormerPayroll);
        oResponse = miClient.getSessionXXX().request(oRequest);

        if (oResponse.getResponseType() != SSrvConsts.RESP_TYPE_OK) {
            throw new Exception(oResponse.getMessage());
        }
        else {
            nResult = oResponse.getResultType();
            if (nResult != SLibConstants.DB_ACTION_SAVE_OK) {
                throw new Exception(SLibConstants.MSG_ERR_DB_REG_SAVE + (oResponse.getMessage().length() == 0 ? "" : "\n" + oResponse.getMessage()));
            }
        }

        miClient.getGuiModule(SDataConstants.MOD_FIN).refreshCatalogues(SDataConstants.FIN_REC);
        miClient.getGuiModule(SDataConstants.MOD_HRS).refreshCatalogues(SDataConstants.HRS_SIE_PAY);
        miClient.showMsgBoxInformation("La nómina ha sido contabilizada.");
        ((SClient) miClient).getSession().notifySuscriptors(SModConsts.HRS_SIE_PAY);
    }

    public void actionPickRecord() {
        Object key = null;
        String message = "";

        moDialogRecordPicker.formReset();
        moDialogRecordPicker.setFilterKey(miClient.getSessionXXX().getWorkingDate());
        moDialogRecordPicker.formRefreshOptionPane();

        if (moCurrentRecord != null) {
            moDialogRecordPicker.setSelectedPrimaryKey(moCurrentRecord.getPrimaryKey());
        }

        moDialogRecordPicker.setFormVisible(true);

        if (moDialogRecordPicker.getFormResult() == SLibConstants.FORM_RESULT_OK) {
            key = moDialogRecordPicker.getSelectedPrimaryKey();

            // XXX set registry lock to accounting record

            if (readRecord(key)) {
                if (moCurrentRecord != null) {
                    if (moCurrentRecord.getIsSystem()) {
                        message = "No puede seleccionarse esta póliza contable porque es de sistema.";
                    }
                    else if (moCurrentRecord.getIsAudited()) {
                        message = "No puede seleccionarse esta póliza contable porque está auditada.";
                    }
                    else if (moCurrentRecord.getIsAuthorized()) {
                        message = "No puede seleccionarse esta póliza contable porque está autorizada.";
                    }
                    else if (!SDataUtilities.isPeriodOpen(miClient, moCurrentRecord.getDate())) {
                        message = "No puede seleccionarse esta póliza contable porque su período contable correspondiente está cerrado.";
                    }

                    if (message.length() > 0) {
                        miClient.showMsgBoxWarning(message);
                        moCurrentRecord = null;
                    }
                    else {
                        renderRecord();
                    }
                }
            }
        }
    }
    
    public SDbAccountingPayrollEmployee createAccountingPayrollEmployee(int employeeId) {
        SDbAccountingPayrollEmployee accountingPayrollEmployee = new SDbAccountingPayrollEmployee();
        
        accountingPayrollEmployee.setPkPayrollId(mnPayrollId);
        //accountingPayrollEmployee.setPkAccountingId(int n);
        accountingPayrollEmployee.setPkEmployeeId(employeeId);
        accountingPayrollEmployee.setFkRecordYearId(moCurrentRecord.getPkYearId());
        accountingPayrollEmployee.setFkRecordPeriodId(moCurrentRecord.getPkPeriodId());
        accountingPayrollEmployee.setFkRecordBookkeepingCenterId(moCurrentRecord.getPkBookkeepingCenterId());
        accountingPayrollEmployee.setFkRecordRecordTypeId(moCurrentRecord.getPkRecordTypeId());
        accountingPayrollEmployee.setFkRecordNumberId(moCurrentRecord.getPkNumberId());
        
        return accountingPayrollEmployee;
    }

    public boolean actionAdd() {
        int index = 0;
        boolean error = true;
        SRowEmployee row = null;

        if (moCurrentRecord == null) {
            miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_GUI_FIELD_EMPTY + "'" + jlRecord.getText() + "'.");
            jbPickRecord.requestFocus();
        }
        else {
            index = moTablePaneEmpAvailable.getTable().getSelectedRow();
            if (index != -1) {
                row = (SRowEmployee) moTablePaneEmpAvailable.getSelectedTableRow();
                row.setData(moCurrentRecord.getPrimaryKey());
                row.getValues().add("" + moCurrentRecord.getPkYearId() + "-" + (moCurrentRecord.getPkPeriodId() >= 10 ? "" : "0") + moCurrentRecord.getPkPeriodId());
                row.getValues().add(jtfRecordBkc.getText());
                row.getValues().add(jtfRecordBranch.getText());
                row.getValues().add(jtfRecordNumber.getText());
                row.getValues().add(moCurrentRecord.getDate());
                
                row.setAccountingPayrollEmployee(createAccountingPayrollEmployee(row.getFkBizPartnerId()));
                
                moTablePaneEmpAvailable.removeTableRow(index);
                moTablePaneEmpAvailable.renderTableRows();
                moTablePaneEmpAvailable.setTableRowSelection(index < moTablePaneEmpAvailable.getTableGuiRowCount() ? index : moTablePaneEmpAvailable.getTableGuiRowCount() - 1);

                moTablePaneEmpSelected.addTableRow(row);
                moTablePaneEmpSelected.renderTableRows();
                moTablePaneEmpSelected.setTableRowSelection(moTablePaneEmpSelected.getTableGuiRowCount() - 1);

                error = false;
            }
        }
        computeTotals();

        return !error;
    }

    public void actionAddAll() {
        while (moTablePaneEmpAvailable.getTableGuiRowCount() > 0) {
            moTablePaneEmpAvailable.setTableRowSelection(0);
            if (!actionAdd()) {
                break;
            }
        }
    }

    public boolean actionRemove() {
        int index = 0;
        boolean error = true;
        SRowEmployee row = null;

        index = moTablePaneEmpSelected.getTable().getSelectedRow();
        if (index != -1) {
            row = (SRowEmployee) moTablePaneEmpSelected.getSelectedTableRow();
            for (int i = 1; i <= 5; i++) {
                row.getValues().remove(7);
            }

            moTablePaneEmpSelected.removeTableRow(index);
            moTablePaneEmpSelected.renderTableRows();
            moTablePaneEmpSelected.setTableRowSelection(index < moTablePaneEmpSelected.getTableGuiRowCount() ? index : moTablePaneEmpSelected.getTableGuiRowCount() - 1);

            moTablePaneEmpAvailable.addTableRow(row);
            moTablePaneEmpAvailable.renderTableRows();
            moTablePaneEmpAvailable.setTableRowSelection(moTablePaneEmpAvailable.getTableGuiRowCount() - 1);

            error = false;
        }
        computeTotals();

        return !error;
    }

    public void actionRemoveAll() {
        while (moTablePaneEmpSelected.getTableGuiRowCount() > 0) {
            moTablePaneEmpSelected.setTableRowSelection(0);
            if (!actionRemove()) {
                break;
            }
        }
    }

    public void actionOk() {
        String msg = "";
        Boolean compute = true;
        Cursor cursor = null;

        if (moTablePaneEmpAvailable.getTableGuiRowCount() > 0) {
            miClient.showMsgBoxWarning("Todavía quedan empleados disponibles sin ser seleccionados.");
            moTablePaneEmpAvailable.requestFocus();
        }
        else if (moTablePaneEmpSelected.getTableGuiRowCount() == 0) {
            miClient.showMsgBoxWarning("No hay empleados seleccionados.");
            moTablePaneEmpAvailable.requestFocus();
        }
        else {
            try {
                if (moCurrentRecord.getPkYearId() != moPayroll.getPeriodYear()) {
                    msg = "El año de la nómina es diferente al año de la póliza contable.\n";
                    if (miClient.showMsgBoxConfirm(msg + SGuiConsts.MSG_CNF_CONT) != JOptionPane.YES_OPTION) {
                        compute = false;
                        miClient.showMsgBoxWarning(msg);
                        moTablePaneEmpAvailable.requestFocus();
                    }
                }
                else if (moCurrentRecord.getPkPeriodId() != moPayroll.getPeriod()) {
                        msg = "El periodo de la nómina es diferente al periodo de la póliza contable.\n";
                        if (miClient.showMsgBoxConfirm(msg + SGuiConsts.MSG_CNF_CONT) != JOptionPane.YES_OPTION) {
                            compute = false;
                            miClient.showMsgBoxWarning(msg);
                            moTablePaneEmpAvailable.requestFocus();
                        }
                }
                
                if (compute) {
                    cursor = miClient.getFrame().getCursor();
                    miClient.getFrame().setCursor(new Cursor(Cursor.WAIT_CURSOR));

                    computePayroll();

                    mnFormResult = SLibConstants.FORM_RESULT_OK;
                    setVisible(false);
                }
            }
            catch (Exception e) {
                SLibUtilities.renderException(this, e);
            }
            finally {
                miClient.getFrame().setCursor(cursor);
            }
        }
    }

    public void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JButton jbAdd;
    private javax.swing.JButton jbAddAll;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbOk;
    private javax.swing.JButton jbPickRecord;
    private javax.swing.JButton jbRemove;
    private javax.swing.JButton jbRemoveAll;
    private javax.swing.JLabel jlDummy01;
    private javax.swing.JLabel jlDummy2;
    private javax.swing.JLabel jlDummy3;
    private javax.swing.JLabel jlPayroll;
    private javax.swing.JLabel jlPayrollDates;
    private javax.swing.JLabel jlPayrollNet;
    private javax.swing.JLabel jlPayrollNotes;
    private javax.swing.JLabel jlRecord;
    private javax.swing.JLabel jlTotalAvailables;
    private javax.swing.JLabel jlTotalSelected;
    private javax.swing.JPanel jpAccountingRecord;
    private javax.swing.JPanel jpControls;
    private javax.swing.JPanel jpEmployeesAvailable;
    private javax.swing.JPanel jpEmployeesSelected;
    private javax.swing.JPanel jpGrid;
    private javax.swing.JPanel jpPaymentType;
    private javax.swing.JTextField jtfPayrollDates;
    private javax.swing.JTextField jtfPayrollNet;
    private javax.swing.JTextField jtfPayrollNetCur;
    private javax.swing.JTextField jtfPayrollNotes;
    private javax.swing.JTextField jtfPayrollNumber;
    private javax.swing.JTextField jtfPayrollPeriod;
    private javax.swing.JTextField jtfRecordBkc;
    private javax.swing.JTextField jtfRecordBranch;
    private javax.swing.JTextField jtfRecordDate;
    private javax.swing.JTextField jtfRecordNumber;
    // End of variables declaration//GEN-END:variables

    public void resetForm() {
        mnFormResult = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        jtfPayrollPeriod.setText("");
        jtfPayrollNumber.setText("");
        jtfPayrollDates.setText("");
        jtfPayrollNet.setText("");
        jtfPayrollNetCur.setText(miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getKey());
        jtfPayrollNotes.setText("");

        jtfRecordDate.setText("");
        jtfRecordBkc.setText("");
        jtfRecordBranch.setText("");
        jtfRecordNumber.setText("");

        moCurrentRecord = null;
        moTablePaneEmpAvailable.createTable();
        moTablePaneEmpAvailable.clearTableRows();
        moTablePaneEmpSelected.createTable();
        moTablePaneEmpSelected.clearTableRows();
    }

    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbPickRecord) {
                actionPickRecord();
            }
            else if (button == jbAdd) {
                actionAdd();
            }
            else if (button == jbAddAll) {
                actionAddAll();
            }
            else if (button == jbRemove) {
                actionRemove();
            }
            else if (button == jbRemoveAll) {
                actionRemoveAll();
            }
        }
    }
}
