/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SFormOptionPickerBizPartner.java
 *
 * Created on 29/09/2009, 09:43:42 AM
 */

package erp.gui.grid;

import erp.data.SDataConstants;
import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormComboBoxGroup;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormOptionPickerInterface;
import erp.lib.form.SFormUtilities;
import erp.mod.SModConsts;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import javax.swing.AbstractAction;
import javax.swing.JButton;
import sa.lib.gui.bean.SBeanFieldBoolean;

/**
 *
 * @author Edwin Carmona
 */
public class SFormOptionFunAreaDialog extends javax.swing.JDialog implements erp.lib.form.SFormOptionPickerInterface, java.awt.event.ActionListener, java.awt.event.ItemListener {

    private erp.client.SClientInterface miClient;
    private int mnOptionType;

    private int mnFormResult;
    private boolean mbFirstTime;
    private erp.lib.form.SFormComboBoxGroup moComboBoxGroup;

    /**
     * Creates new form SFormOptionPickerBizPartner
     * @param client ERP Client interface.
     * @param type Constants defined in erp.data.SDataConstants: BPSX_BP_SUP, BPSX_BP_CUS.
     */
    public SFormOptionFunAreaDialog(erp.client.SClientInterface client, int type) {
        super(client.getFrame(), true);
        miClient = client;
        mnOptionType = type;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpOptionPane = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jlBizPartner1 = new javax.swing.JLabel();
        checkIsAllAreas = new sa.lib.gui.bean.SBeanFieldBoolean();
        jPanel2 = new javax.swing.JPanel();
        jlFunAreas = new javax.swing.JLabel();
        jcbFunAreas = new javax.swing.JComboBox();
        jbFunAreas = new javax.swing.JButton();
        jpSouth = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Selección de asociado de negocios");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpOptionPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Filtro de áreas funcionales"));
        jpOptionPane.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.GridLayout(3, 1, 0, 1));

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlBizPartner1.setText("Áreas funcionales asignadas:");
        jlBizPartner1.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel3.add(jlBizPartner1);
        jPanel3.add(checkIsAllAreas);

        jPanel1.add(jPanel3);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlFunAreas.setText("Área funcional:");
        jlFunAreas.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel2.add(jlFunAreas);

        jcbFunAreas.setMaximumRowCount(12);
        jcbFunAreas.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbFunAreas.setPreferredSize(new java.awt.Dimension(375, 23));
        jcbFunAreas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jcbFunAreasKeyPressed(evt);
            }
        });
        jPanel2.add(jcbFunAreas);

        jbFunAreas.setText("...");
        jbFunAreas.setToolTipText("Seleccionar asociado de negocios");
        jbFunAreas.setFocusable(false);
        jbFunAreas.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel2.add(jbFunAreas);

        jPanel1.add(jPanel2);

        jpOptionPane.add(jPanel1, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(jpOptionPane, java.awt.BorderLayout.CENTER);

        jpSouth.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jbOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbOkActionPerformed(evt);
            }
        });
        jpSouth.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jbCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelActionPerformed(evt);
            }
        });
        jpSouth.add(jbCancel);

        getContentPane().add(jpSouth, java.awt.BorderLayout.PAGE_END);

        setSize(new java.awt.Dimension(600, 400));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        if (mbFirstTime) {
            mbFirstTime = false;
         }
        SLibUtilities.requestComponentFocus(jcbFunAreas);

    }//GEN-LAST:event_formWindowActivated

    private void jbOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbOkActionPerformed
        actionOk();
    }//GEN-LAST:event_jbOkActionPerformed

    private void jbCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelActionPerformed
        actionCancel();
    }//GEN-LAST:event_jbCancelActionPerformed

    private void jcbFunAreasKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jcbFunAreasKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_F5) {
            actionBizPartner();
        }
    }//GEN-LAST:event_jcbFunAreasKeyPressed

    private void initComponentsExtra() {
        moComboBoxGroup = new SFormComboBoxGroup(miClient);

        jcbFunAreas.addItemListener(this);
        checkIsAllAreas.addItemListener(this);
        jbFunAreas.addActionListener(this);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
        
        formRefreshOptionPane();
        checkIsAllAreas.setSelected(true);
    }

    private void itemStateChange() {
        jcbFunAreas.setSelectedItem(null);
        
        if (checkIsAllAreas.getValue()) {
            jcbFunAreas.setEnabled(false);
            jbFunAreas.setEnabled(false);
        }
        else {
            jcbFunAreas.setEnabled(true);
            jbFunAreas.setEnabled(true);
        }
    }

    private void actionBizPartner() {
        SFormOptionPickerInterface picker = miClient.getOptionPicker(SModConsts.CFGU_FUNC);

        picker.formReset();
        picker.setFilterKey(new int[] { miClient.getSession().getUser().getPkUserId() });
        picker.formRefreshOptionPane();
        picker.setFormVisible(true);

        if (picker.getFormResult() == SLibConstants.FORM_RESULT_OK) {
            SFormUtilities.locateComboBoxItem(jcbFunAreas, picker.getSelectedPrimaryKey());
            jcbFunAreas.requestFocus();
        }
    }

    private void actionOk() {
        if (! checkIsAllAreas.isSelected() && jcbFunAreas.getSelectedIndex() <= 0) {
            miClient.showMsgBoxWarning("Se debe seleccionar una opción para el campo '" + jlFunAreas.getText() + "'.");
            jcbFunAreas.requestFocus();
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    public void publicActionOk() {
        actionOk();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private sa.lib.gui.bean.SBeanFieldBoolean checkIsAllAreas;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbFunAreas;
    private javax.swing.JButton jbOk;
    private javax.swing.JComboBox jcbFunAreas;
    private javax.swing.JLabel jlBizPartner1;
    private javax.swing.JLabel jlFunAreas;
    private javax.swing.JPanel jpOptionPane;
    private javax.swing.JPanel jpSouth;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formReset() {

        mnFormResult = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moComboBoxGroup.reset();
    }

    @Override
    public void formRefreshOptionPane() {
        moComboBoxGroup.clear();
        moComboBoxGroup.addComboBox(SModConsts.CFGU_FUNC, jcbFunAreas, jbFunAreas, new int [] { miClient.getSession().getUser().getPkUserId() } );
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getOptionType() {
        return mnOptionType;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setFilterKey(java.lang.Object filterKey) {
        
    }

    @Override
    public void setSelectedPrimaryKey(java.lang.Object pk) {
        if (pk == null) {
            moComboBoxGroup.reset();
        }
        else {
            SFormUtilities.locateComboBoxItem(jcbFunAreas, new int[] { ((int[]) pk)[0] });
        }
    }

    @Override
    public java.lang.Object getSelectedPrimaryKey() {
        if (((SFormComponentItem) jcbFunAreas.getSelectedItem()) == null  || checkIsAllAreas.isSelected()) {
            return null;
        }
        
        int[] pk = new int[] {
            ((int[]) ((SFormComponentItem) jcbFunAreas.getSelectedItem()).getPrimaryKey())[0]
        };

        return pk;
    }

    @Override
    public erp.lib.table.STableRow getSelectedOption() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbFunAreas) {
                actionBizPartner();
            }
        }
    }

    @Override
    public void itemStateChanged(java.awt.event.ItemEvent e) {
        if (e.getSource() instanceof SBeanFieldBoolean) {
            SBeanFieldBoolean checked = (SBeanFieldBoolean) e.getSource();
            
            if (checked == checkIsAllAreas) {
                itemStateChange();
            }
        }
         
    }
}
