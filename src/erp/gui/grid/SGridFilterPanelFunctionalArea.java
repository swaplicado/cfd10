/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.gui.grid;

import erp.form.SFormOptionPickerFunctionalArea;
import erp.client.SClientInterface;
import erp.mtrn.data.STrnFunctionalAreaUtils;
import erp.table.SFilterConstants;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import javax.swing.JPanel;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridFilter;
import sa.lib.grid.SGridFilterValue;
import sa.lib.grid.SGridPaneView;
import sa.lib.gui.SGuiClient;

/**
 *
 * @author Edwin Carmona, Sergio Flores
 */
public class SGridFilterPanelFunctionalArea extends JPanel implements SGridFilter, ActionListener {

    public static final int PNL_TP_COB_ENT = 1;
    
    private SGuiClient miClient;
    private SGridPaneView moPaneView;
    private SFormOptionPickerFunctionalArea moFunctionalAreaPicker;
    private String msFunctionalAreaIds;
    
    /**
     * Creates new form SGridFilterPanelFunctionalArea
     * 
     * @param client
     * @param paneView
     */
    public SGridFilterPanelFunctionalArea(SGuiClient client, SGridPaneView paneView) {
        miClient = client;
        moPaneView = paneView;
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jtfFunctionalAreas = new sa.lib.gui.bean.SBeanFieldText();
        jbEditFunctionalAreas = new javax.swing.JButton();

        setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jtfFunctionalAreas.setEditable(false);
        jtfFunctionalAreas.setText("TEXT");
        jtfFunctionalAreas.setToolTipText("Área funcional");
        jtfFunctionalAreas.setPreferredSize(new java.awt.Dimension(65, 23));
        add(jtfFunctionalAreas);

        jbEditFunctionalAreas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sa/lib/img/cmd_std_edit.gif"))); // NOI18N
        jbEditFunctionalAreas.setToolTipText("Cambiar área funcional");
        jbEditFunctionalAreas.setPreferredSize(new java.awt.Dimension(23, 23));
        add(jbEditFunctionalAreas);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbEditFunctionalAreas;
    private sa.lib.gui.bean.SBeanFieldText jtfFunctionalAreas;
    // End of variables declaration//GEN-END:variables

    /*
     * Private methods
     */
    
    private void initComponentsCustom() {
        jbEditFunctionalAreas.addActionListener(this);
        msFunctionalAreaIds = "";
        moFunctionalAreaPicker = new SFormOptionPickerFunctionalArea((SClientInterface) miClient);
        setTextToField(moFunctionalAreaPicker.getSelectedPrimaryKey() == null ? null : ((int[]) moFunctionalAreaPicker.getSelectedPrimaryKey()));
    }
    
    private void setTextToField(int[] key) {
        jtfFunctionalAreas.setValue("");
        msFunctionalAreaIds = "";
        int nFunctionalArea = 0;
        
        if (key != null) {
            nFunctionalArea = key[0];
        }
        
        String texts[] = STrnFunctionalAreaUtils.getTextFilterOfFunctionalAreas((SClientInterface) miClient, nFunctionalArea);
        msFunctionalAreaIds = texts[0];
        
        jtfFunctionalAreas.setText(texts[1]);
        jtfFunctionalAreas.setCaretPosition(0);
    }
    
    private void actionEditFunctionalArea() {
        jbEditFunctionalAreas.setEnabled(false);
        moFunctionalAreaPicker.setVisible(true);
        
        if (moFunctionalAreaPicker.getFormResult() == erp.lib.SLibConstants.FORM_RESULT_OK) {
            this.setTextToField(moFunctionalAreaPicker.getSelectedPrimaryKey() == null ? null : ((int[]) moFunctionalAreaPicker.getSelectedPrimaryKey()));
            SGridFilterValue val = new SGridFilterValue(SFilterConstants.SETTING_FILTER_FUNC_AREA, SGridConsts.FILTER_DATA_TYPE_TEXT, msFunctionalAreaIds);
            moPaneView.putFilter(SFilterConstants.SETTING_FILTER_FUNC_AREA, val);
        }
        
        jbEditFunctionalAreas.setEnabled(true);
    }
    
    /*
     * Public methods
     */
    
    /*
     * Protected methods
     */
    
    @Override
    public void initFilter(Object value) {
        
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            
            if (button == jbEditFunctionalAreas) {
                actionEditFunctionalArea();
            }
        }
    }
}
