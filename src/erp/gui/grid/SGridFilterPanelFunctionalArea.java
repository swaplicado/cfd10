/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.gui.grid;

import erp.client.SClientInterface;
import erp.data.SDataReadDescriptions;
import erp.lib.SLibConstants;
import erp.mod.SModConsts;
import erp.mtrn.utils.STrnFunAreasUtils;
import erp.table.SFilterConstants;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JPanel;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridFilter;
import sa.lib.grid.SGridFilterValue;
import sa.lib.grid.SGridPaneView;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiFieldKeyGroup;

/**
 *
 * @author Edwin Carmona
 */
public class SGridFilterPanelFunctionalArea extends JPanel implements SGridFilter, ActionListener, ItemListener {

    public static final int PNL_TP_COB_ENT = 1;
    
    private SGuiClient miClient;
    private SGridPaneView moPaneView;
    private int mnTypePanel;
    private SGuiFieldKeyGroup moFieldKeyGroup;
    private SFormOptionFunAreaDialog moDialogFunAreas;
    private String msAreasIds;
    
    /**
     * Creates new form SGridFilterProject
     * 
     * @param client
     * @param paneView
     * @param typePanel
     */
    public SGridFilterPanelFunctionalArea(SGuiClient client, SGridPaneView paneView, int typePanel) {
        miClient = client;
        moPaneView = paneView;
        mnTypePanel = typePanel;
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tfFunAreas = new sa.lib.gui.bean.SBeanFieldText();
        jbEditFuncArea = new javax.swing.JButton();

        setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        tfFunAreas.setText("sBeanFieldText1");
        add(tfFunAreas);

        jbEditFuncArea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sa/lib/img/cmd_std_clear.gif"))); // NOI18N
        jbEditFuncArea.setToolTipText("Quitar filtro");
        jbEditFuncArea.setPreferredSize(new java.awt.Dimension(23, 23));
        add(jbEditFuncArea);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbEditFuncArea;
    private sa.lib.gui.bean.SBeanFieldText tfFunAreas;
    // End of variables declaration//GEN-END:variables

    /*
     * Private methods
     */
    
    private void initComponentsCustom() {
        moFieldKeyGroup = new SGuiFieldKeyGroup(miClient);
        jbEditFuncArea.addActionListener(this);
        tfFunAreas.setEditable(false);
        
        updateOptions();
        
        msAreasIds = "";
        moDialogFunAreas = new SFormOptionFunAreaDialog((SClientInterface) miClient, mnTypePanel);
        this.setTextToField(moDialogFunAreas.getSelectedPrimaryKey() == null ? null : ((int[]) moDialogFunAreas.getSelectedPrimaryKey()));
    }
    
    private void setTextToField(int[] key) {
        String text = "";
        String codes = "";
        tfFunAreas.setValue("");
        ArrayList<String> lFunctionalAreasIds = null;
        ArrayList<String> lFunctionalAreasCodes = null;
        
        if (key == null) {
            lFunctionalAreasIds = STrnFunAreasUtils.getFunctionalAreasOfUser((SClientInterface) miClient, miClient.getSession().getUser().getPkUserId(), STrnFunAreasUtils.FUN_AREA_ID, "");
            
            if (lFunctionalAreasIds.isEmpty()) {
                text = SLibConstants.TXT_ALL;                
            }
            else {
                for (String id : lFunctionalAreasIds) {
                    msAreasIds += id + ", ";
                }
                
                msAreasIds = msAreasIds.substring(0, msAreasIds.length() - 2);
                
                lFunctionalAreasCodes = STrnFunAreasUtils.getFunctionalAreasOfUser((SClientInterface) miClient, miClient.getSession().getUser().getPkUserId(), STrnFunAreasUtils.FUN_AREA_CODE, "");
                for (String code : lFunctionalAreasCodes) {
                    codes += code + ", ";
                }
                
                text = codes.substring(0, codes.length() - 2);
            }
        }
        else {
            text = SDataReadDescriptions.getCatalogueDescription((SClientInterface) miClient, SModConsts.CFGU_FUNC, key, SLibConstants.DESCRIPTION_CODE);
            msAreasIds = "" + key[0];
        }
        
        tfFunAreas.setText(text);
        tfFunAreas.setCaretPosition(0);
        SGridFilterValue val = new SGridFilterValue(SFilterConstants.SETTING_FILTER_FUNC_AREA, SGridConsts.FILTER_DATA_TYPE_TEXT, msAreasIds);
        //moPaneView.getFiltersMap().clear();
        moPaneView.getFiltersMap().put(SFilterConstants.SETTING_FILTER_FUNC_AREA, val);
    }
    
    private void actionEditFunArea() {
        jbEditFuncArea.setEnabled(false);
        moDialogFunAreas.setVisible(true);
        
        if (moDialogFunAreas.getFormResult() == erp.lib.SLibConstants.FORM_RESULT_OK) {
            this.setTextToField(moDialogFunAreas.getSelectedPrimaryKey() == null ? null : ((int[]) moDialogFunAreas.getSelectedPrimaryKey()));
        }
        
        jbEditFuncArea.setEnabled(true);
    }
    
    /*
     * Public methods
     */
    
    public void updateOptions() {
        moFieldKeyGroup.initGroup();
        moFieldKeyGroup.populateCatalogues();
        moFieldKeyGroup.resetGroup();
    }
    
    /*
     * Protected methods
     */
    
    @Override
    public void initFilter(Object value) {
        
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            
            if (button == jbEditFuncArea) {
                actionEditFunArea();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof JComboBox) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                JComboBox comboBox = (JComboBox) e.getSource();
            }
        }
    }
}
